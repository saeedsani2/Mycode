
prompt
prompt Creating sequence COACHILD_SEQUENCE
prompt ===================================
prompt
create sequence COACHILD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 61
increment by 1
cache 20;

prompt
prompt Creating sequence COA_SEQUENCE
prompt ==============================
prompt
create sequence COA_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1721
increment by 1
cache 20;

prompt
prompt Creating sequence COLUMN_SEQ
prompt ============================
prompt
create sequence COLUMN_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence EMAIL_SEQ
prompt ===========================
prompt
create sequence EMAIL_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 9261
increment by 1
cache 20;

prompt
prompt Creating sequence ETFCode_SEQUENCE
prompt ==================================
prompt
create sequence ETFCode_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 81
increment by 1
cache 20;

prompt
prompt Creating sequence FS_HEADER_ROW
prompt ===============================
prompt
create sequence FS_HEADER_ROW
minvalue 1
maxvalue 9999999999999999999999999999
start with 12261
increment by 1
cache 20;

prompt
prompt Creating sequence Index.Sequence
prompt ================================
prompt
create sequence Index.Sequence
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence IndexCode_SEQUENCE
prompt ====================================
prompt
create sequence IndexCode_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 101
increment by 1
cache 20;

prompt
prompt Creating sequence Index_Sequence
prompt ================================
prompt
create sequence Index_Sequence
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MAPPINGDETAILID_SEQUENCE
prompt ==========================================
prompt
create sequence MAPPINGDETAILID_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 281
increment by 1
cache 20;

prompt
prompt Creating sequence MAPPINGID_SEQUENCE
prompt ====================================
prompt
create sequence MAPPINGID_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 313121
increment by 1
cache 20;

prompt
prompt Creating sequence MENUGROUP_SEQUENCE
prompt ====================================
prompt
create sequence MENUGROUP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 142
increment by 1
cache 20;

prompt
prompt Creating sequence MENU_GROUP_SEQUENCE
prompt =====================================
prompt
create sequence MENU_GROUP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 521
increment by 1
cache 20;

prompt
prompt Creating sequence MENU_SEQUENCE
prompt ===============================
prompt
create sequence MENU_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MORTALITY_CHART_SEQ
prompt =====================================
prompt
create sequence MORTALITY_CHART_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 2261
increment by 1
cache 20;

prompt
prompt Creating sequence PARAMETERTYPE_SEQ
prompt ===================================
prompt
create sequence PARAMETERTYPE_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_ACTION_TYPE_T_SEQ
prompt ======================================
prompt
create sequence PF_ACTION_TYPE_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 21
increment by 1
cache 20;

prompt
prompt Creating sequence PF_BROKER_SETUP_T_SEQ
prompt =======================================
prompt
create sequence PF_BROKER_SETUP_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 61
increment by 1
cache 20;

prompt
prompt Creating sequence PF_CATEGORY_T_SEQ
prompt ===================================
prompt
create sequence PF_CATEGORY_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 41
increment by 1
cache 20;

prompt
prompt Creating sequence PF_CLIENT_RISK_PROFILE_SEQ
prompt ============================================
prompt
create sequence PF_CLIENT_RISK_PROFILE_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_CLIENT_RISK_PROFILE_T_SEQ
prompt ==============================================
prompt
create sequence PF_CLIENT_RISK_PROFILE_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 10
increment by 1
nocache;

prompt
prompt Creating sequence PF_CLIENT_SETUP_T_SEQ
prompt =======================================
prompt
create sequence PF_CLIENT_SETUP_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 661
increment by 1
cache 20;

prompt
prompt Creating sequence PF_INCOME_SOURCE_T_SEQ
prompt ========================================
prompt
create sequence PF_INCOME_SOURCE_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_MARKET_CAP_T_SEQ
prompt =====================================
prompt
create sequence PF_MARKET_CAP_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 6
increment by 1
nocache;

prompt
prompt Creating sequence PF_MY_PF_DETAIL_T_SEQ
prompt =======================================
prompt
create sequence PF_MY_PF_DETAIL_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1066
increment by 1
nocache;

prompt
prompt Creating sequence PF_MY_PORTFOLIO_HEADER_T_SEQ
prompt ==============================================
prompt
create sequence PF_MY_PORTFOLIO_HEADER_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 148
increment by 1
nocache;

prompt
prompt Creating sequence PF_ORDER_PROGRESS_T_SEQ
prompt =========================================
prompt
create sequence PF_ORDER_PROGRESS_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
nocache;

prompt
prompt Creating sequence PF_ORDER_TYPE_T_SEQ
prompt =====================================
prompt
create sequence PF_ORDER_TYPE_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 6
increment by 1
nocache;

prompt
prompt Creating sequence PF_ORDER_T_SEQ
prompt ================================
prompt
create sequence PF_ORDER_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 10610
increment by 1
nocache;

prompt
prompt Creating sequence PF_PAYMENT_TYPE_T_SEQ
prompt =======================================
prompt
create sequence PF_PAYMENT_TYPE_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_RISK_PROFILE_DETAIL_SEQ
prompt ============================================
prompt
create sequence PF_RISK_PROFILE_DETAIL_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_RISK_PROFILE_FACTOR_T_SEQ
prompt ==============================================
prompt
create sequence PF_RISK_PROFILE_FACTOR_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 61
increment by 1
cache 20;

prompt
prompt Creating sequence PF_RISK_PROFILE_QUES_SEQ
prompt ==========================================
prompt
create sequence PF_RISK_PROFILE_QUES_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_RISK_PROFILE_SEQUENCE
prompt ==========================================
prompt
create sequence PF_RISK_PROFILE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 21
increment by 1
cache 20;

prompt
prompt Creating sequence PF_R_PROF_CATE_DETAIL_SEQ
prompt ===========================================
prompt
create sequence PF_R_PROF_CATE_DETAIL_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_TIMING_T_SEQ
prompt =================================
prompt
create sequence PF_TIMING_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 4
increment by 1
nocache;

prompt
prompt Creating sequence PF_VALUESETS_T_SEQ
prompt ====================================
prompt
create sequence PF_VALUESETS_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 259
increment by 1
nocache;

prompt
prompt Creating sequence PF_VALUESET_VALUES_T_SEQ
prompt ==========================================
prompt
create sequence PF_VALUESET_VALUES_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 199
increment by 1
nocache;

prompt
prompt Creating sequence PF_VIEW_HEADER_T_SEQ
prompt ======================================
prompt
create sequence PF_VIEW_HEADER_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 9
increment by 1
nocache;

prompt
prompt Creating sequence PSXID_SEQ
prompt ===========================
prompt
create sequence PSXID_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 12
increment by 1
nocache;

prompt
prompt Creating sequence PS_TXN_SEQ
prompt ============================
prompt
create sequence PS_TXN_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 3301
increment by 50
cache 20;

prompt
prompt Creating sequence QUESTION_SEQUENCE
prompt ===================================
prompt
create sequence QUESTION_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 79
increment by 1
nocache;

prompt
prompt Creating sequence Question_sequence
prompt ===================================
prompt
create sequence Question_sequence
minvalue 1
maxvalue 9999999999999999999999999999
start with 19
increment by 1
nocache;

prompt
prompt Creating sequence SEQ_EMAIL
prompt ===========================
prompt
create sequence SEQ_EMAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TABLE_SEQ
prompt ===========================
prompt
create sequence TABLE_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence UPLOADDETAILID_SEQ
prompt ====================================
prompt
create sequence UPLOADDETAILID_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 32900
increment by 1
nocache;

prompt
prompt Creating sequence UPLOADIDFIX_SEQ
prompt =================================
prompt
create sequence UPLOADIDFIX_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 375961
increment by 1
cache 20;

prompt
prompt Creating sequence UPLOADID_SEQ
prompt ==============================
prompt
create sequence UPLOADID_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 2241071
increment by 1
nocache;

prompt
prompt Creating sequence USERMENUGROUPMAPPING_SEQUENCE
prompt ===============================================
prompt
create sequence USERMENUGROUPMAPPING_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 401
increment by 1
cache 20;

prompt
prompt Creating sequence USER_MENU_EXCLUSION_SEQUENCE
prompt ==============================================
prompt
create sequence USER_MENU_EXCLUSION_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 41
increment by 1
cache 20;

prompt
prompt Creating sequence USER_MENU_GROUP_MAP_SEQUENCE
prompt ==============================================
prompt
create sequence USER_MENU_GROUP_MAP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 301
increment by 1
cache 20;

prompt
prompt Creating sequence YOONEK_COLUMN_SCREENER_SEQ
prompt ============================================
prompt
create sequence YOONEK_COLUMN_SCREENER_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence YOONEK_SCREENERTABS_SEQ
prompt =========================================
prompt
create sequence YOONEK_SCREENERTABS_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating synonym APPLICANT_ATTACHMENT_T
prompt =======================================
prompt
create or replace synonym APPLICANT_ATTACHMENT_T
  for HCM.APPLICANT_ATTACHMENT_T;

prompt
prompt Creating synonym APPLICANT_SCREENING_HEADER_T
prompt =============================================
prompt
create or replace synonym APPLICANT_SCREENING_HEADER_T
  for HCM.APPLICANT_SCREENING_HEADER_T;

prompt
prompt Creating synonym APP_SCREENING_ATTACHMENT_T
prompt ===========================================
prompt
create or replace synonym APP_SCREENING_ATTACHMENT_T
  for HCM.APP_SCREENING_ATTACHMENT_T;

prompt
prompt Creating synonym APP_SCREENING_EXPERIENCE_T
prompt ===========================================
prompt
create or replace synonym APP_SCREENING_EXPERIENCE_T
  for HCM.APP_SCREENING_EXPERIENCE_T;

prompt
prompt Creating synonym APP_SCREENING_QUALIFICATION_T
prompt ==============================================
prompt
create or replace synonym APP_SCREENING_QUALIFICATION_T
  for HCM.APP_SCREENING_QUALIFICATION_T;

prompt
prompt Creating synonym ASSIGNMENTHISTORY
prompt ==================================
prompt
create or replace synonym ASSIGNMENTHISTORY
  for HCM.ASSIGNMENTHISTORY;

prompt
prompt Creating synonym ASSIGNMENTS
prompt ============================
prompt
create or replace synonym ASSIGNMENTS
  for HCM.ASSIGNMENTS;

prompt
prompt Creating synonym ATTENDANCE_MACHINE_LOG
prompt =======================================
prompt
create or replace synonym ATTENDANCE_MACHINE_LOG
  for HCM.ATTENDANCE_MACHINE_LOG;

prompt
prompt Creating synonym ATT_RULES_T
prompt ============================
prompt
create or replace synonym ATT_RULES_T
  for HCM.ATT_RULES_T;

prompt
prompt Creating synonym ATT_SHIFT_T
prompt ============================
prompt
create or replace synonym ATT_SHIFT_T
  for HCM.ATT_SHIFT_T;

prompt
prompt Creating synonym CANDIDATE
prompt ==========================
prompt
create or replace synonym CANDIDATE
  for HCM.CANDIDATE;

prompt
prompt Creating synonym CANDIDATE_ASSESSMENT_ANS_T
prompt ===========================================
prompt
create or replace synonym CANDIDATE_ASSESSMENT_ANS_T
  for HCM.CANDIDATE_ASSESSMENT_ANS_T;

prompt
prompt Creating synonym CAND_ATTACH
prompt ============================
prompt
create or replace synonym CAND_ATTACH
  for HCM.REC_CAND_ATTACH_T;

prompt
prompt Creating synonym CUST_TAX_SETUP_T
prompt =================================
prompt
create or replace synonym CUST_TAX_SETUP_T
  for HCM.CUST_TAX_SETUP_T;

prompt
prompt Creating synonym CUST_TAX_SLABS_T
prompt =================================
prompt
create or replace synonym CUST_TAX_SLABS_T
  for HCM.CUST_TAX_SLABS_T;

prompt
prompt Creating synonym ELEMENTELIGIBILITY
prompt ===================================
prompt
create or replace synonym ELEMENTELIGIBILITY
  for HCM.ELEMENTELIGIBILITY;

prompt
prompt Creating synonym ELEMENTELIGIBILITYDETAIL
prompt =========================================
prompt
create or replace synonym ELEMENTELIGIBILITYDETAIL
  for HCM.ELEMENTELIGIBILITYDETAIL;

prompt
prompt Creating synonym ELEMENTENTRIESDETAIL
prompt =====================================
prompt
create or replace synonym ELEMENTENTRIESDETAIL
  for HCM.ELEMENTENTRIESDETAIL;

prompt
prompt Creating synonym ELEMENTENTRIESHEADER
prompt =====================================
prompt
create or replace synonym ELEMENTENTRIESHEADER
  for HCM.ELEMENTENTRIESHEADER;

prompt
prompt Creating synonym ELEMENTSETDETAIL
prompt =================================
prompt
create or replace synonym ELEMENTSETDETAIL
  for HCM.ELEMENTSETDETAIL;

prompt
prompt Creating synonym ELEMENTSETHEADER
prompt =================================
prompt
create or replace synonym ELEMENTSETHEADER
  for HCM.ELEMENTSETHEADER;

prompt
prompt Creating synonym EMAIL
prompt ======================
prompt
create or replace synonym EMAIL
  for XBRL.EMAIL;

prompt
prompt Creating synonym EMPLOYEE
prompt =========================
prompt
create or replace synonym EMPLOYEE
  for HCM.EMPLOYEE;

prompt
prompt Creating synonym EMPLOYEE_LEVEL_SUPERVISORS_T
prompt =============================================
prompt
create or replace synonym EMPLOYEE_LEVEL_SUPERVISORS_T
  for HCM.EMPLOYEE_LEVEL_SUPERVISORS_T;

prompt
prompt Creating synonym EMP_PAYMENT_METHOD_T
prompt =====================================
prompt
create or replace synonym EMP_PAYMENT_METHOD_T
  for HCM.EMP_PAYMENT_METHOD_T;

prompt
prompt Creating synonym ENDEMPLOYMENT
prompt ==============================
prompt
create or replace synonym ENDEMPLOYMENT
  for HCM.ENDEMPLOYMENT;

prompt
prompt Creating synonym EXCEPTION_T
prompt ============================
prompt
create or replace synonym EXCEPTION_T
  for HCM.EXCEPTION_T;

prompt
prompt Creating synonym FAMILYDETAILS
prompt ==============================
prompt
create or replace synonym FAMILYDETAILS
  for HCM.FAMILYDETAILS;

prompt
prompt Creating synonym GRADES
prompt =======================
prompt
create or replace synonym GRADES
  for HCM.GRADES;

prompt
prompt Creating synonym HCM_TICKET_UPDATE_T
prompt ====================================
prompt
create or replace synonym HCM_TICKET_UPDATE_T
  for HCM.HCM_TICKET_UPDATE_T;

prompt
prompt Creating synonym HOLIDAY_T
prompt ==========================
prompt
create or replace synonym HOLIDAY_T
  for HCM.HOLIDAY_T;

prompt
prompt Creating synonym HR_APPRAISAL_HISTORY_T
prompt =======================================
prompt
create or replace synonym HR_APPRAISAL_HISTORY_T
  for HCM.HR_APPRAISAL_HISTORY_T;

prompt
prompt Creating synonym HR_APPRAISAL_STATUS_T
prompt ======================================
prompt
create or replace synonym HR_APPRAISAL_STATUS_T
  for HCM.HR_APPRAISAL_STATUS_T;

prompt
prompt Creating synonym HR_ASSET_T
prompt ===========================
prompt
create or replace synonym HR_ASSET_T
  for HCM.HR_ASSET_T;

prompt
prompt Creating synonym HR_BENEFITS_T
prompt ==============================
prompt
create or replace synonym HR_BENEFITS_T
  for HCM.HR_BENEFITS_T;

prompt
prompt Creating synonym HR_COMPETENCY_APPRAISAL_T
prompt ==========================================
prompt
create or replace synonym HR_COMPETENCY_APPRAISAL_T
  for HCM.HR_COMPETENCY_APPRAISAL_T;

prompt
prompt Creating synonym HR_COMPETENCY_LIST_T
prompt =====================================
prompt
create or replace synonym HR_COMPETENCY_LIST_T
  for HCM.HR_COMPETENCY_LIST_T;

prompt
prompt Creating synonym HR_COMPETENCY_MULTIRATOR_T
prompt ===========================================
prompt
create or replace synonym HR_COMPETENCY_MULTIRATOR_T
  for HCM.HR_COMPETENCY_MULTIRATOR_T;

prompt
prompt Creating synonym HR_COMPETENCY_TEMPLATE_T
prompt =========================================
prompt
create or replace synonym HR_COMPETENCY_TEMPLATE_T
  for HCM.HR_COMPETENCY_TEMPLATE_T;

prompt
prompt Creating synonym HR_COMP_MANAGER_APPRAISAL_T
prompt ============================================
prompt
create or replace synonym HR_COMP_MANAGER_APPRAISAL_T
  for HCM.HR_COMP_MANAGER_APPRAISAL_T;

prompt
prompt Creating synonym HR_EMPLOYEE_ASSET_ALLOCATION_T
prompt ===============================================
prompt
create or replace synonym HR_EMPLOYEE_ASSET_ALLOCATION_T
  for HCM.HR_EMPLOYEE_ASSET_ALLOCATION_T;

prompt
prompt Creating synonym HR_EMPLOYEE_ATTENDANCE_T
prompt =========================================
prompt
create or replace synonym HR_EMPLOYEE_ATTENDANCE_T
  for HCM.HR_EMPLOYEE_ATTENDANCE_T;

prompt
prompt Creating synonym HR_EMPLOYEE_BEN_ALLOCATION_T
prompt =============================================
prompt
create or replace synonym HR_EMPLOYEE_BEN_ALLOCATION_T
  for HCM.HR_EMPLOYEE_BEN_ALLOCATION_T;

prompt
prompt Creating synonym HR_EMPLOYEE_PERFORMANCE_PLAN_T
prompt ===============================================
prompt
create or replace synonym HR_EMPLOYEE_PERFORMANCE_PLAN_T
  for HCM.HR_EMPLOYEE_PERFORMANCE_PLAN_T;

prompt
prompt Creating synonym HR_EMPLOYEE_PLAN_MAPPING_T
prompt ===========================================
prompt
create or replace synonym HR_EMPLOYEE_PLAN_MAPPING_T
  for HCM.HR_EMPLOYEE_PLAN_MAPPING_T;

prompt
prompt Creating synonym HR_EMPLOYEE_PLAN_OBJECTIVES_T
prompt ==============================================
prompt
create or replace synonym HR_EMPLOYEE_PLAN_OBJECTIVES_T
  for HCM.HR_EMPLOYEE_PLAN_OBJECTIVES_T;

prompt
prompt Creating synonym HR_EMPLOYEE_PLAN_OBJ_HISTORY_T
prompt ===============================================
prompt
create or replace synonym HR_EMPLOYEE_PLAN_OBJ_HISTORY_T
  for HCM.HR_EMPLOYEE_PLAN_OBJ_HISTORY_T;

prompt
prompt Creating synonym HR_EMP_ATTENDANCE_T
prompt ====================================
prompt
create or replace synonym HR_EMP_ATTENDANCE_T
  for HCM.HR_EMP_ATTENDANCE_T;

prompt
prompt Creating synonym HR_MANAGER_APPRAISAL_HEADER_T
prompt ==============================================
prompt
create or replace synonym HR_MANAGER_APPRAISAL_HEADER_T
  for HCM.HR_MANAGER_APPRAISAL_HEADER_T;

prompt
prompt Creating synonym HR_MULTIRATOR_ASSIGN_T
prompt =======================================
prompt
create or replace synonym HR_MULTIRATOR_ASSIGN_T
  for HCM.HR_MULTIRATOR_ASSIGN_T;

prompt
prompt Creating synonym HR_MULTIRATOR_HEADER_T
prompt =======================================
prompt
create or replace synonym HR_MULTIRATOR_HEADER_T
  for HCM.HR_MULTIRATOR_HEADER_T;

prompt
prompt Creating synonym HR_OBJECTIVES_APPRAISAL_T
prompt ==========================================
prompt
create or replace synonym HR_OBJECTIVES_APPRAISAL_T
  for HCM.HR_OBJECTIVES_APPRAISAL_T;

prompt
prompt Creating synonym HR_OBJECTIVE_MULTIRATOR_T
prompt ==========================================
prompt
create or replace synonym HR_OBJECTIVE_MULTIRATOR_T
  for HCM.HR_OBJECTIVE_MULTIRATOR_T;

prompt
prompt Creating synonym HR_OBJECTIVE_TEMPLATE_T
prompt ========================================
prompt
create or replace synonym HR_OBJECTIVE_TEMPLATE_T
  for HCM.HR_OBJECTIVE_TEMPLATE_T;

prompt
prompt Creating synonym HR_OBJ_HR_REVIEW_T
prompt ===================================
prompt
create or replace synonym HR_OBJ_HR_REVIEW_T
  for HCM.HR_OBJ_HR_REVIEW_T;

prompt
prompt Creating synonym HR_OBJ_MANAGER_APPRAISAL_T
prompt ===========================================
prompt
create or replace synonym HR_OBJ_MANAGER_APPRAISAL_T
  for HCM.HR_OBJ_MANAGER_APPRAISAL_T;

prompt
prompt Creating synonym HR_OBJ_MANAGER_REVIEW_T
prompt ========================================
prompt
create or replace synonym HR_OBJ_MANAGER_REVIEW_T
  for HCM.HR_OBJ_MANAGER_REVIEW_T;

prompt
prompt Creating synonym HR_PERFORMANCE_OBJECTIVES_T
prompt ============================================
prompt
create or replace synonym HR_PERFORMANCE_OBJECTIVES_T
  for HCM.HR_PERFORMANCE_OBJECTIVES_T;

prompt
prompt Creating synonym HR_PERFORMANCE_PLANS_T
prompt =======================================
prompt
create or replace synonym HR_PERFORMANCE_PLANS_T
  for HCM.HR_PERFORMANCE_PLANS_T;

prompt
prompt Creating synonym HR_PLAN_APPRAISAL_HEADER_T
prompt ===========================================
prompt
create or replace synonym HR_PLAN_APPRAISAL_HEADER_T
  for HCM.HR_PLAN_APPRAISAL_HEADER_T;

prompt
prompt Creating synonym HR_PLAN_MAPPING_ENTRIES_T
prompt ==========================================
prompt
create or replace synonym HR_PLAN_MAPPING_ENTRIES_T
  for HCM.HR_PLAN_MAPPING_ENTRIES_T;

prompt
prompt Creating synonym HR_PLAN_OBJETIVE_MAPPING_T
prompt ===========================================
prompt
create or replace synonym HR_PLAN_OBJETIVE_MAPPING_T
  for HCM.HR_PLAN_OBJETIVE_MAPPING_T;

prompt
prompt Creating synonym HR_PLAN_OBJ_COMMENT_HISTORY_T
prompt ==============================================
prompt
create or replace synonym HR_PLAN_OBJ_COMMENT_HISTORY_T
  for HCM.HR_PLAN_OBJ_COMMENT_HISTORY_T;

prompt
prompt Creating synonym HR_PLAN_SETUP_T
prompt ================================
prompt
create or replace synonym HR_PLAN_SETUP_T
  for HCM.HR_PLAN_SETUP_T;

prompt
prompt Creating synonym HR_RATING_SCALE_DETAILS_T
prompt ==========================================
prompt
create or replace synonym HR_RATING_SCALE_DETAILS_T
  for HCM.HR_RATING_SCALE_DETAILS_T;

prompt
prompt Creating synonym HR_RATING_SCALE_T
prompt ==================================
prompt
create or replace synonym HR_RATING_SCALE_T
  for HCM.HR_RATING_SCALE_T;

prompt
prompt Creating synonym HR_SELF_APPRAISAL_COMPETENCY_T
prompt ===============================================
prompt
create or replace synonym HR_SELF_APPRAISAL_COMPETENCY_T
  for HCM.HR_SELF_APPRAISAL_COMPETENCY_T;

prompt
prompt Creating synonym HR_SELF_APPRAISAL_OBJECTIVES_T
prompt ===============================================
prompt
create or replace synonym HR_SELF_APPRAISAL_OBJECTIVES_T
  for HCM.HR_SELF_APPRAISAL_OBJECTIVES_T;

prompt
prompt Creating synonym JOBS
prompt =====================
prompt
create or replace synonym JOBS
  for HCM.JOBS;

prompt
prompt Creating synonym LEAVE_MARKING_T
prompt ================================
prompt
create or replace synonym LEAVE_MARKING_T
  for HCM.LEAVE_MARKING_T;

prompt
prompt Creating synonym LEAVE_REQUEST_T
prompt ================================
prompt
create or replace synonym LEAVE_REQUEST_T
  for HCM.LEAVE_REQUEST_T;

prompt
prompt Creating synonym LMS_COURSE_ANNOUCMENTS_T
prompt =========================================
prompt
create or replace synonym LMS_COURSE_ANNOUCMENTS_T
  for HCM.LMS_COURSE_ANNOUCMENTS_T;

prompt
prompt Creating synonym LMS_COURSE_FEEDBACK_T
prompt ======================================
prompt
create or replace synonym LMS_COURSE_FEEDBACK_T
  for HCM.LMS_COURSE_FEEDBACK_T;

prompt
prompt Creating synonym LMS_COURSE_FILE_T
prompt ==================================
prompt
create or replace synonym LMS_COURSE_FILE_T
  for HCM.LMS_COURSE_FILE_T;

prompt
prompt Creating synonym LMS_COURSE_MODULE_MAIN_T
prompt =========================================
prompt
create or replace synonym LMS_COURSE_MODULE_MAIN_T
  for HCM.LMS_COURSE_MODULE_MAIN_T;

prompt
prompt Creating synonym LMS_COURSE_MODULE_T
prompt ====================================
prompt
create or replace synonym LMS_COURSE_MODULE_T
  for HCM.LMS_COURSE_MODULE_T;

prompt
prompt Creating synonym LMS_COURSE_NOTE_T
prompt ==================================
prompt
create or replace synonym LMS_COURSE_NOTE_T
  for HCM.LMS_COURSE_NOTE_T;

prompt
prompt Creating synonym LMS_COURSE_QUIZZ_T
prompt ===================================
prompt
create or replace synonym LMS_COURSE_QUIZZ_T
  for HCM.LMS_COURSE_QUIZZ_T;

prompt
prompt Creating synonym LMS_COURSE_RQUEST_ENROLL_T
prompt ===========================================
prompt
create or replace synonym LMS_COURSE_RQUEST_ENROLL_T
  for HCM.LMS_COURSE_RQUEST_ENROLL_T;

prompt
prompt Creating synonym LMS_COURSE_T
prompt =============================
prompt
create or replace synonym LMS_COURSE_T
  for HCM.LMS_COURSE_T;

prompt
prompt Creating synonym LMS_COURSE_TEAM_T
prompt ==================================
prompt
create or replace synonym LMS_COURSE_TEAM_T
  for HCM.LMS_COURSE_TEAM_T;

prompt
prompt Creating synonym LMS_FEEDBACK_HEADER_T
prompt ======================================
prompt
create or replace synonym LMS_FEEDBACK_HEADER_T
  for HCM.LMS_FEEDBACK_HEADER_T;

prompt
prompt Creating synonym LMS_FEEDBACK_QUESTIONS_T
prompt =========================================
prompt
create or replace synonym LMS_FEEDBACK_QUESTIONS_T
  for HCM.LMS_FEEDBACK_QUESTIONS_T;

prompt
prompt Creating synonym LMS_FEEDBACK_QUESTION_CAT_T
prompt ============================================
prompt
create or replace synonym LMS_FEEDBACK_QUESTION_CAT_T
  for HCM.LMS_FEEDBACK_QUESTION_CAT_T;

prompt
prompt Creating synonym LMS_LEARNER_ALLOW_RETAKE_T
prompt ===========================================
prompt
create or replace synonym LMS_LEARNER_ALLOW_RETAKE_T
  for HCM.LMS_LEARNER_ALLOW_RETAKE_T;

prompt
prompt Creating synonym LMS_LEARNER_COURSE_FEEDBACK
prompt ============================================
prompt
create or replace synonym LMS_LEARNER_COURSE_FEEDBACK
  for HCM.LMS_LEARNER_COURSE_FEEDBACK;

prompt
prompt Creating synonym LMS_LEARNER_FEEDBACK_ANSWER_T
prompt ==============================================
prompt
create or replace synonym LMS_LEARNER_FEEDBACK_ANSWER_T
  for HCM.LMS_LEARNER_FEEDBACK_ANSWER_T;

prompt
prompt Creating synonym LMS_LEARNER_MODULE_TRACK_T
prompt ===========================================
prompt
create or replace synonym LMS_LEARNER_MODULE_TRACK_T
  for HCM.LMS_LEARNER_MODULE_TRACK_T;

prompt
prompt Creating synonym LMS_LEARNER_QUIZZ_ANSWER_T
prompt ===========================================
prompt
create or replace synonym LMS_LEARNER_QUIZZ_ANSWER_T
  for HCM.LMS_LEARNER_QUIZZ_ANSWER_T;

prompt
prompt Creating synonym LMS_MODULE_TYPE_T
prompt ==================================
prompt
create or replace synonym LMS_MODULE_TYPE_T
  for HCM.LMS_MODULE_TYPE_T;

prompt
prompt Creating synonym LMS_QUESTION_ANSWER_T
prompt ======================================
prompt
create or replace synonym LMS_QUESTION_ANSWER_T
  for HCM.LMS_QUESTION_ANSWER_T;

prompt
prompt Creating synonym LMS_QUESTION_BANK_ANSWER_T
prompt ===========================================
prompt
create or replace synonym LMS_QUESTION_BANK_ANSWER_T
  for HCM.LMS_QUESTION_BANK_ANSWER_T;

prompt
prompt Creating synonym LMS_QUESTION_BANK_T
prompt ====================================
prompt
create or replace synonym LMS_QUESTION_BANK_T
  for HCM.LMS_QUESTION_BANK_T;

prompt
prompt Creating synonym LMS_QUIZZ_MARKS_T
prompt ==================================
prompt
create or replace synonym LMS_QUIZZ_MARKS_T
  for HCM.LMS_QUIZZ_MARKS_T;

prompt
prompt Creating synonym LMS_QUIZZ_QUESTION_T
prompt =====================================
prompt
create or replace synonym LMS_QUIZZ_QUESTION_T
  for HCM.LMS_QUIZZ_QUESTION_T;

prompt
prompt Creating synonym LM_AUTH_DEL_T
prompt ==============================
prompt
create or replace synonym LM_AUTH_DEL_T
  for HCM.LM_AUTH_DEL_T;

prompt
prompt Creating synonym LM_HIERARCHY_T
prompt ===============================
prompt
create or replace synonym LM_HIERARCHY_T
  for HCM.LM_HIERARCHY_T;

prompt
prompt Creating synonym LM_LEAVECOUNT_T
prompt ================================
prompt
create or replace synonym LM_LEAVECOUNT_T
  for HCM.LM_LEAVECOUNT_T;

prompt
prompt Creating synonym LM_LEAVETYPE_T
prompt ===============================
prompt
create or replace synonym LM_LEAVETYPE_T
  for HCM.LM_LEAVETYPE_T;

prompt
prompt Creating synonym LM_NOTIFICATIONS_T
prompt ===================================
prompt
create or replace synonym LM_NOTIFICATIONS_T
  for HCM.LM_NOTIFICATIONS_T;

prompt
prompt Creating synonym LOAN_REQUEST_T
prompt ===============================
prompt
create or replace synonym LOAN_REQUEST_T
  for HCM.LOAN_REQUEST_T;

prompt
prompt Creating synonym LOCATIONS
prompt ==========================
prompt
create or replace synonym LOCATIONS
  for HCM.LOCATIONS;

prompt
prompt Creating synonym MY_EVENTS_T
prompt ============================
prompt
create or replace synonym MY_EVENTS_T
  for HCM.MY_EVENTS_T;

prompt
prompt Creating synonym ORGANIZATIONS
prompt ==============================
prompt
create or replace synonym ORGANIZATIONS
  for HCM.ORGANIZATIONS;

prompt
prompt Creating synonym PAYELEMENTCALCULATIONRULES
prompt ===========================================
prompt
create or replace synonym PAYELEMENTCALCULATIONRULES
  for HCM.PAYELEMENTCALCULATIONRULES;

prompt
prompt Creating synonym PAYELEMENTS
prompt ============================
prompt
create or replace synonym PAYELEMENTS
  for HCM.PAYELEMENTS;

prompt
prompt Creating synonym PAYLOVVALUES
prompt =============================
prompt
create or replace synonym PAYLOVVALUES
  for HCM.PAYLOVVALUES;

prompt
prompt Creating synonym PAYROLLCALANDER
prompt ================================
prompt
create or replace synonym PAYROLLCALANDER
  for HCM.PAYROLLCALANDER;

prompt
prompt Creating synonym PAYTIMEPERIODSDATES
prompt ====================================
prompt
create or replace synonym PAYTIMEPERIODSDATES
  for HCM.PAYTIMEPERIODSDATES;

prompt
prompt Creating synonym PER_PAY_SALARY
prompt ===============================
prompt
create or replace synonym PER_PAY_SALARY
  for HCM.PER_PAY_SALARY;

prompt
prompt Creating synonym PER_PAY_SALARY_COMPONENTS
prompt ==========================================
prompt
create or replace synonym PER_PAY_SALARY_COMPONENTS
  for HCM.PER_PAY_SALARY_COMPONENTS;

prompt
prompt Creating synonym POSITION
prompt =========================
prompt
create or replace synonym POSITION
  for HCM.POSITION;

prompt
prompt Creating synonym PREVIOUSEMPLOYMENTS
prompt ====================================
prompt
create or replace synonym PREVIOUSEMPLOYMENTS
  for HCM.PREVIOUSEMPLOYMENTS;

prompt
prompt Creating synonym QUALIFICATIONS
prompt ===============================
prompt
create or replace synonym QUALIFICATIONS
  for HCM.QUALIFICATIONS;

prompt
prompt Creating synonym REC_APPLICATION
prompt ================================
prompt
create or replace synonym REC_APPLICATION
  for HCM.REC_APPLICATION_T;

prompt
prompt Creating synonym REC_ASSESSMENT_ATTACH_T
prompt ========================================
prompt
create or replace synonym REC_ASSESSMENT_ATTACH_T
  for HCM.REC_ASSESSMENT_ATTACH_T;

prompt
prompt Creating synonym REC_ASSESSMENT_QUEST_T
prompt =======================================
prompt
create or replace synonym REC_ASSESSMENT_QUEST_T
  for HCM.REC_ASSESSMENT_QUEST_T;

prompt
prompt Creating synonym REC_ASSESSMENT_T
prompt =================================
prompt
create or replace synonym REC_ASSESSMENT_T
  for HCM.REC_ASSESSMENT_T;

prompt
prompt Creating synonym REC_CANDIDATE_ASSESSMENT_ANS_T
prompt ===============================================
prompt
create or replace synonym REC_CANDIDATE_ASSESSMENT_ANS_T
  for HCM.REC_CANDIDATE_ASSESSMENT_ANS_T;

prompt
prompt Creating synonym REC_CANDIDATE_EXPERIENCE_T
prompt ===========================================
prompt
create or replace synonym REC_CANDIDATE_EXPERIENCE_T
  for HCM.REC_CANDIDATE_EXPERIENCE_T;

prompt
prompt Creating synonym REC_CANDIDATE_QUALIFICATION_T
prompt ==============================================
prompt
create or replace synonym REC_CANDIDATE_QUALIFICATION_T
  for HCM.REC_CANDIDATE_QUALIFICATION_T;

prompt
prompt Creating synonym REC_CAND_ASSESSMENT_HEADER_T
prompt =============================================
prompt
create or replace synonym REC_CAND_ASSESSMENT_HEADER_T
  for HCM.REC_CAND_ASSESSMENT_HEADER_T;

prompt
prompt Creating synonym REC_INTERVIEWER_T
prompt ==================================
prompt
create or replace synonym REC_INTERVIEWER_T
  for HCM.REC_INTERVIEWER_T;

prompt
prompt Creating synonym REC_INTERVIEW_T
prompt ================================
prompt
create or replace synonym REC_INTERVIEW_T
  for HCM.REC_INTERVIEW_T;

prompt
prompt Creating synonym REC_JOB_OPENING_T
prompt ==================================
prompt
create or replace synonym REC_JOB_OPENING_T
  for HCM.REC_JOB_OPENING_T;

prompt
prompt Creating synonym REC_QUEST_CATEGORY_T
prompt =====================================
prompt
create or replace synonym REC_QUEST_CATEGORY_T
  for HCM.REC_QUEST_CATEGORY_T;

prompt
prompt Creating synonym REC_REFERAL_T
prompt ==============================
prompt
create or replace synonym REC_REFERAL_T
  for HCM.REC_REFERAL_T;

prompt
prompt Creating synonym REC_REFR_ATTACH_T
prompt ==================================
prompt
create or replace synonym REC_REFR_ATTACH_T
  for HCM.REC_REFR_ATTACH_T;

prompt
prompt Creating synonym RUNPAYROLLHISTORY
prompt ==================================
prompt
create or replace synonym RUNPAYROLLHISTORY
  for HCM.RUNPAYROLLHISTORY;

prompt
prompt Creating synonym TICKET_SUB_TYPE_T
prompt ==================================
prompt
create or replace synonym TICKET_SUB_TYPE_T
  for HCM.TICKET_SUB_TYPE_T;

prompt
prompt Creating synonym TICKET_T
prompt =========================
prompt
create or replace synonym TICKET_T
  for HCM.TICKET_T;

prompt
prompt Creating synonym TICKET_TYPE_T
prompt ==============================
prompt
create or replace synonym TICKET_TYPE_T
  for HCM.TICKET_TYPE_T;

prompt
prompt Creating synonym TKT_RESPONSIBLE_DEPT_T
prompt =======================================
prompt
create or replace synonym TKT_RESPONSIBLE_DEPT_T
  for HCM.TKT_RESPONSIBLE_DEPT_T;

prompt
prompt Creating synonym TKT_RESP_DEPT_PERS_T
prompt =====================================
prompt
create or replace synonym TKT_RESP_DEPT_PERS_T
  for HCM.TKT_RESP_DEPT_PERS_T;

prompt
prompt Creating synonym TKT_SUB_TYPE_ESCALATION_T
prompt ==========================================
prompt
create or replace synonym TKT_SUB_TYPE_ESCALATION_T
  for HCM.TKT_SUB_TYPE_ESCALATION_T;

prompt
prompt Creating synonym USER_FORM_GROUP_MAPPING_T
prompt ==========================================
prompt
create or replace synonym USER_FORM_GROUP_MAPPING_T
  for HCM.USER_FORM_GROUP_MAPPING_T;

prompt
prompt Creating view AGENT_COMMISSION_DETAIL_V
prompt =======================================
prompt
CREATE OR REPLACE FORCE VIEW AGENT_COMMISSION_DETAIL_V AS
SELECT 
    IDHT.MASTER_REF_NO, 
    GPSDT.DESCRIPTION AS PRODUCT, 
    IDACT.BRANCH_ID, 
    IDHT.PARTNER_BRANCH_ID, 
    IDACT.COMMISSION_RATE, 
    IDACT.COMMISSION_AMOUNT, 
    IDAT.CONTRIBUTION_PAID_AMT,
    AAT.AGENT_CODE, 
    AAT.AGENT_NAME, 
    CASE 
        WHEN AAT.AGENT_STATUS = 'A' 
        THEN 'ACTIVE' 
        WHEN AAT.AGENT_STATUS = 'T' 
        THEN 'TERMINATE' 
        ELSE 'RESIGN' 
    END                   AS AGENT_STATUS,
    IDACT.COMMISSION_TYPE AS STATUS_TYPE, 
    APBT.PARTNER_BRANCH_NAME, 
    ADT.DESIGNATION_NAME, 
    ADCT.CHANNEL_NAME, 
    ACMT.MODEL_NAME,
    APT.PARTNER_NAME,
    CASE 
        WHEN IDHT.PAYMENT_MODE = 'A' 
        THEN 'ANNUALLY'
        WHEN IDHT.PAYMENT_MODE = 'H' 
        THEN 'HALF YEARLY' 
        WHEN IDHT.PAYMENT_MODE = 'M' 
        THEN 'MONTHLY' 
        WHEN IDHT.PAYMENT_MODE = 'Q' 
        THEN 'QUATERLY' 
        ELSE '-'
    END              AS PAYMENT_MODE, 
    IDHT.POLICY_TERM AS CONTRIBUTION_YEAR, 
    CASE 
        WHEN IDACT.ALLOCATION_TYPE = '1' 
        THEN 'REGULAR' 
        WHEN IDACT.ALLOCATION_TYPE = '2' 
        THEN 'ADHOC'
        ELSE '-' 
    END AS COMMISSION_TYPE 
FROM 
    IL_DOC_HEADER_T IDHT 
INNER JOIN 
    IL_DOC_ALLOCATIONDTL_T IDAT 
ON 
    ( 
        IDHT.ORG_ID = IDAT.ORG_ID 
    AND IDHT.BRANCH_ID = IDAT.BRANCH_ID
    AND IDHT.MAIN_PRODUCT_CODE = IDAT.MAIN_PRODUCT_CODE
    AND IDHT.SUB_PRODUCT_CODE = IDAT.SUB_PRODUCT_CODE
    AND IDHT.TAKAFUL_TYPE = IDAT.TAKAFUL_TYPE
    AND IDHT.DOCUMENT_TYPE = IDAT.DOCUMENT_TYPE
    AND IDHT.DOCUMENT_NO = IDAT.DOCUMENT_NO
    AND IDHT.RECORD_TYPE = IDAT.RECORD_TYPE
    AND IDHT.DOCUMENT_YEAR = IDAT.DOCUMENT_YEAR
    AND IDHT.ISSUE_COUNT = IDAT.ISSUE_COUNT
    AND IDHT.ENDORSEMENT_NO = IDAT.ENDORSEMENT_NO
    AND IDHT.APPLICATION_ID = IDAT.APPLICATION_ID)
INNER JOIN
    IL_DOC_ALLOC_DTL_COMM_T IDACT 
ON 
    ( 
        IDAT.ORG_ID = IDACT.ORG_ID
    AND IDAT.BRANCH_ID = IDACT.BRANCH_ID
    AND IDAT.MAIN_PRODUCT_CODE = IDACT.MAIN_PRODUCT_CODE
    AND IDAT.SUB_PRODUCT_CODE = IDACT.SUB_PRODUCT_CODE
    AND IDAT.TAKAFUL_TYPE = IDACT.TAKAFUL_TYPE
    AND IDAT.DOCUMENT_TYPE = IDACT.DOCUMENT_TYPE
    AND IDAT.DOCUMENT_NO = IDACT.DOCUMENT_NO
    AND IDAT.RECORD_TYPE = IDACT.RECORD_TYPE
    AND IDAT.DOCUMENT_YEAR = IDACT.DOCUMENT_YEAR
    AND IDAT.ISSUE_COUNT = IDACT.ISSUE_COUNT
    AND IDAT.ENDORSEMENT_NO = IDACT.ENDORSEMENT_NO
    AND IDAT.APPLICATION_ID = IDACT.APPLICATION_ID
    AND IDAT.ALLOCATION_ID = IDACT.ALLOCATION_ID
    AND IDAT.SUB_SERIAL_NO = IDACT.SUB_SERIAL_NO)
LEFT OUTER JOIN
    AM_AGENT_T AAT 
ON 
    IDHT.ORG_ID = AAT.ORG_ID
AND IDHT.AGENT_ID = AAT.AGENT_ID
LEFT OUTER JOIN
    AM_PARTNER_BRANCHES_T APBT 
ON 
    IDHT.ORG_ID = APBT.ORG_ID
AND IDHT.PARTNER_BRANCH_ID = APBT.PARTNER_BRANCH_ID
AND IDHT.PARTNER_ID = APBT.PARTNER_ID
LEFT OUTER JOIN
    GLAS_SUB_PRODUCT_SETUP_T GPSDT 
ON 
    IDACT.SUB_PRODUCT_CODE = GPSDT.SUB_PRODUCT_CODE
AND IDACT.ORG_ID = GPSDT.ORG_ID
LEFT JOIN
    AM_DESIGNATION_T ADT 
ON 
    IDACT.DESIGNATION_ID = ADT.DESIGNATION_ID
AND IDACT.ORG_ID = ADT.ORG_ID
LEFT JOIN 
    AM_DISTRIBUTION_CHANNEL_T ADCT
ON 
    IDHT.ORG_ID = ADCT.ORG_ID
AND IDHT.CHANNEL_ID = ADCT.CHANNEL_ID
LEFT JOIN 
    AM_CHANNEL_MODEL_T ACMT
ON 
    IDHT.ORG_ID = ACMT.ORG_ID
AND IDHT.CHANNEL_ID = ACMT.CHANNEL_ID
AND IDHT.MODEL_ID = ACMT.MODEL_ID
LEFT JOIN 
    AM_PARTNER_T APT
ON 
    IDHT.ORG_ID = APT.ORG_ID
AND IDHT.PARTNER_ID = APT.PARTNER_ID;

prompt
prompt Creating view AM_AGENT_CHANNEL_MODEL_V
prompt ======================================
prompt
CREATE OR REPLACE FORCE VIEW AM_AGENT_CHANNEL_MODEL_V AS
SELECT     AMT."ORG_ID",
           AMT."AGENT_ID",
           AMT."PARTNER_ID",
           AMT."CHANNEL_ID",
           AMT."MODEL_ID",
           AMT."CREATED_BY",
           AMT."CREATION_DATE",
           AMT."LAST_UPDATED_BY",
           AMT."LAST_UPDATE_DATE",
           AMT."TERMINATION_ID",
           AMT."TERMINATION_DATE",
           AMT."TERMINATION_BY",
           EAT.ENTITY_TYPE,
           EAT.ENTITY_CODE,
           EAT.ADDRESS1 AS ADDRESS,
           EAT.PHONE1 AS CONTACT_NO,
           AMT.DELETE_FLAG,
           AGT.AGENT_NAME,
           APT.PARTNER_NAME,
           ACT.CHANNEL_NAME,
           ACMT.MODEL_NAME,
           CCT.CITY_NAME
      FROM AM_AGENT_CHANNEL_MODEL_T AMT
        LEFT JOIN AM_AGENT_T AGT
          ON AGT.AGENT_ID = AMT.AGENT_ID
          AND AGT.ORG_ID = AMT.ORG_ID
        LEFT JOIN AM_PARTNER_T APT
          ON AMT.PARTNER_ID = APT.PARTNER_ID
          AND AMT.ORG_ID = APT.ORG_ID
        LEFT JOIN AM_DISTRIBUTION_CHANNEL_T ACT
          ON AMT.CHANNEL_ID = ACT.CHANNEL_ID
          AND AMT.ORG_ID = ACT.ORG_ID
        LEFT JOIN AM_CHANNEL_MODEL_T ACMT
          ON AMT.MODEL_ID = ACMT.MODEL_ID
          AND AMT.ORG_ID = ACMT.ORG_ID
          AND AMT.CHANNEL_ID = ACMT.CHANNEL_ID
          LEFT JOIN ENTITY_ADDRESS_T EAT 
            ON AMT.ORG_ID = EAT.ORG_ID
          LEFT JOIN COUNTRY_CITY_T CCT
            ON EAT.CITY_CODE = CCT.CITY_CODE
            AND EAT.COUNTRY_CODE = CCT.COUNTRY_CODE 
            AND EAT.STATE_CODE = CCT.STATE_CODE;

prompt
prompt Creating view BANK_REVENUE_V
prompt ============================
prompt
CREATE OR REPLACE FORCE VIEW BANK_REVENUE_V AS
SELECT
    TO_CHAR (IDIT.DUE_DATE ,
    'DD-MON-YYYY')COMMENCEMENT_DATE,
    idit.INSTALLMENT_NO SUBMISSION,
    --IDIT.DUE_DATE COMM_DATE,
    APBT.PARTNER_BRANCH_NAME Branchname,
    APGT.GROUP_NAME Groups,
    APRT.PARTNER_REGION_NAME RegionName,
    APAT.PARTNER_AREA_NAME Area,
    apbt.BRANCH_RM_NAME,
    apbt.BRANCH_MANUAL_CODE AS BRANCH_MANUAL_CODE,
    amt.PARTNER_NAME PARTNER_NAME,
    --TO_CHAR (DH.SUBMIT_DATE,'DD-MON-YYYY')SUBMISSION,
    MOD.MODEL_DESC,
    pr.DESCRIPTION,
    CHANN.CHANNEL_ID,
    CHANN.CHANNEL_NAME,
    DH.CANCELLATION_REMARKS,
    TO_CHAR (DH.CANCEL_DATE,
    'DD-MON-YYYY') CANCEL_DATE,
    TO_CHAR (DH.COMM_DATE,
    'DD-MON-YYYY') COMM_DATE,
    TO_CHAR (DH.ISSUE_DATE,
    'DD-MON-YYYY') ISSUE_DATE,
    DH.MASTER_REF_NO,
    DH.DOC_REFERENCE_NO,
    --DH.TOPUP_AMOUNT TOPUP_AMOUNT,
    DH.BASIC_CONTRIBUTION_MODAL,
    DH.PAYMENT_TERM,
    DH.POLICY_TERM,
    TO_CHAR (DH.POST_DATE,
    'DD-MON-YYYY') POST_DATE,
    NVL (ow.first_name,
    '')
       || ' '
       || NVL (ow.middle_name,
    '')
       || ' '
       || NVL (ow.last_name,
    '')
          AS OwnerName,
    cty.CITY_NAME,
    idit.INSTALLMENT_NO,
    TO_CHAR (idit.DUE_DATE,
    'DD-MON-YYYY') DUE_DATE,
    --GRP.GROUP_NAME,
    APRT.PARTNER_REGION_NAME,
    
    dss.STATUS_DESC,
    AGT.AGENT_NAME AgentName,
    agt.AGENT_CODE AgentCode,
    com.COMMISSION_AMOUNT CommissionAmount,
    DH.INITIAL_TOPUP TOPUP_AMOUNT,
    --com.COMMISSION_RATE_TOPUP ProductWiseTopUp,
    com.COMMISSION_RATE ProductWiseCommision,
    apbt.PARTNER_BRANCH_NAME,
    CASE
        WHEN com.ALLOCATION_TYPE = '2' THEN COMMISSION_AMOUNT
        ELSE 0
    END AS TopUpAmountCommission,
    CASE
        WHEN DH.PAYMENT_MODE = 'A' THEN 'ANNUALLY'
        WHEN DH.PAYMENT_MODE = 'H' THEN 'HALF YEARLY'
        WHEN DH.PAYMENT_MODE = 'M' THEN 'MONTHLY'
        WHEN DH.PAYMENT_MODE = 'Q' THEN 'QUATERLY'
        ELSE '-'
    END AS PremiumMode
FROM
    il_doc_header_t dh
LEFT OUTER JOIN am_agent_t AGT
          ON
    (AGT.ORG_ID = DH.ORG_ID
        AND AGT.AGENT_ID = DH.AGENT_ID)
LEFT OUTER JOIN AM_DISTRIBUTION_CHANNEL_T CHANN
          ON
    (CHANN.ORG_ID = DH.ORG_ID
        AND CHANN.CHANNEL_ID = DH.CHANNEL_ID)
LEFT OUTER JOIN IL_DOC_CLIENT_PERS_INFO_T ow
          ON
    ( ow.ORG_ID = DH.ORG_ID
        AND ow.BRANCH_ID = DH.BRANCH_ID
        AND ow.MAIN_PRODUCT_CODE = DH.MAIN_PRODUCT_CODE
        AND ow.SUB_PRODUCT_CODE = DH.SUB_PRODUCT_CODE
        AND ow.TAKAFUL_TYPE = DH.TAKAFUL_TYPE
        AND ow.DOCUMENT_TYPE = DH.DOCUMENT_TYPE
        AND ow.RECORD_TYPE = DH.RECORD_TYPE
        AND ow.DOCUMENT_YEAR = DH.DOCUMENT_YEAR
        AND ow.ISSUE_COUNT = DH.ISSUE_COUNT
        AND ow.ENDORSEMENT_NO = DH.ENDORSEMENT_NO
        AND ow.APPLICATION_ID = DH.APPLICATION_ID
        AND ow.DOCUMENT_NO = DH.DOCUMENT_NO
        AND ow.client_code = DH.client_code)
LEFT OUTER JOIN il_doc_address_t b
          ON
    ( DH.ORG_ID = b.ORG_ID
        AND DH.BRANCH_ID = b.BRANCH_ID
        AND DH.MAIN_PRODUCT_CODE = b.MAIN_PRODUCT_CODE
        AND DH.SUB_PRODUCT_CODE = b.SUB_PRODUCT_CODE
        AND DH.TAKAFUL_TYPE = b.TAKAFUL_TYPE
        AND DH.DOCUMENT_TYPE = b.DOCUMENT_TYPE
        AND DH.RECORD_TYPE = b.RECORD_TYPE
        AND DH.DOCUMENT_YEAR = b.DOCUMENT_YEAR
        AND DH.ISSUE_COUNT = b.ISSUE_COUNT
        AND DH.ENDORSEMENT_NO = b.ENDORSEMENT_NO
        AND DH.APPLICATION_ID = b.APPLICATION_ID
        AND DH.DOCUMENT_NO = b.DOCUMENT_NO
        AND b.CORRESPONDENCE_TAG = 'Y'
        AND b.ENTRY_TYPE =
        CASE
            NVL (DH.PAYER_SAME_TAG,
            'N')
                        WHEN 'Y' THEN 'CL'
            ELSE 'PY'
        END)
LEFT OUTER JOIN COUNTRY_city_t CTY
          ON
    ( CTY.COUNTRY_CODE = B.COUNTRY_CODE
        AND CTY.STATE_CODE = B.STATE_CODE
        AND CTY.CITY_CODE = B.CITY_CODE)
LEFT OUTER JOIN IL_DOC_INSTALLMENTS_T idit
          ON
    ( DH.ORG_ID = idit.ORG_ID
        AND DH.BRANCH_ID = idit.BRANCH_ID
        AND DH.MAIN_PRODUCT_CODE = idit.MAIN_PRODUCT_CODE
        AND DH.SUB_PRODUCT_CODE = idit.SUB_PRODUCT_CODE
        AND DH.TAKAFUL_TYPE = idit.TAKAFUL_TYPE
        AND DH.DOCUMENT_TYPE = idit.DOCUMENT_TYPE
        AND DH.RECORD_TYPE = idit.RECORD_TYPE
        AND DH.DOCUMENT_YEAR = idit.DOCUMENT_YEAR
        AND DH.ISSUE_COUNT = idit.ISSUE_COUNT
        AND DH.ENDORSEMENT_NO = idit.ENDORSEMENT_NO
        AND DH.APPLICATION_ID = idit.APPLICATION_ID
        AND DH.DOCUMENT_NO = idit.DOCUMENT_NO)
LEFT OUTER JOIN AM_CHANNEL_MODEL_T MOD
          ON
    ( DH.ORG_ID = MOD.ORG_ID
        AND DH.CHANNEL_ID = MOD.CHANNEL_ID
        AND DH.MODEL_ID = MOD.MODEL_ID)
LEFT OUTER JOIN AM_PARTNER_T amt
          ON
    (DH.ORG_ID = amt.ORG_ID
        AND DH.partner_id = amt.partner_id)
LEFT OUTER JOIN IL_DOC_STATUS_SETUP_T dss
          ON
    (dss.ORG_ID = DH.ORG_ID
        AND dss.STATUS_CODE = DH.undwt_status)
LEFT OUTER JOIN GLAS_SUB_PRODUCT_SETUP_T pr ON
    (DH.org_id = pr.org_id
        AND DH.MAIN_PRODUCT_CODE = pr.MAIN_PRODUCT_CODE
        AND DH.SUB_PRODUCT_CODE = pr.SUB_PRODUCT_CODE)
LEFT OUTER JOIN IL_DOC_ALLOC_DTL_COMM_T com
          ON
    ( DH.ORG_ID = com.ORG_ID
        AND idit.BRANCH_ID = com.BRANCH_ID
        AND idit.MAIN_PRODUCT_CODE = com.MAIN_PRODUCT_CODE
        AND idit.SUB_PRODUCT_CODE = com.SUB_PRODUCT_CODE
        AND idit.TAKAFUL_TYPE = com.TAKAFUL_TYPE
        AND idit.DOCUMENT_TYPE = com.DOCUMENT_TYPE
        AND idit.RECORD_TYPE = com.RECORD_TYPE
        AND idit.DOCUMENT_YEAR = com.DOCUMENT_YEAR
        AND idit.ISSUE_COUNT = com.ISSUE_COUNT
        AND idit.ENDORSEMENT_NO = com.ENDORSEMENT_NO
        AND idit.APPLICATION_ID = com.APPLICATION_ID
        AND idit.DOCUMENT_NO = com.DOCUMENT_NO
        AND idit.installment_no = com.installment_no)
LEFT OUTER JOIN AM_PARTNER_BRANCHES_T apbt ON
    (DH.ORG_ID = apbt.ORG_ID
        AND DH.partner_id = apbt.partner_id
        AND DH.PARTNER_BRANCH_ID = APBT.PARTNER_BRANCH_ID)
LEFT OUTER JOIN AM_PARTNER_GROUP_T APGT ON
    (apbt.ORG_ID = APGT.ORG_ID
        AND apbt.PARTNER_ID = APGT.PARTNER_ID
        AND apbt.GROUP_ID = APGT.PARTNER_GROUP_ID)
LEFT OUTER JOIN AM_PARTNER_REGION_T APRT ON
    (apbt.ORG_ID = APRT.ORG_ID
        AND apbt.PARTNER_ID = APRT.PARTNER_ID
        AND apbt.GROUP_ID = APRT.PARTNER_GROUP_ID
        AND apbt.REGION_ID = APRT.PARTNER_REGION_ID)
LEFT OUTER JOIN AM_PARTNER_AREA_T APAT ON
    (apbt.ORG_ID = APAT.ORG_ID
        AND apbt.PARTNER_ID = APAT.PARTNER_ID
        AND apbt.GROUP_ID = APAT.PARTNER_GROUP_ID
        AND apbt.REGION_ID = APAT.PARTNER_REGION_ID
        AND apbt.AREA_ID = APAT.PARTNER_AREA_ID)
WHERE
    com.COMMISSION_NATURE = 'B'
    AND dss.STATUS_CODE IN (8, 10, 14, 15, 16)
    AND amt.ORG_ID = '5'
    AND NVL(DH.POLICY_POSTED, 'N') <> 'Y'
    AND DH.ENDORSEMENT_NO = 0
    AND DH.CANCEL_TAG IS NULL
    AND DH.DOC_REFERENCE_KEY IS NOT NULL
    AND DH.REVISED_TAG IS NULL
    AND amt.Partner_ID = '7'
    AND trunc(DH.SUBMIT_DATE) BETWEEN '01-jul-2023' AND '31-dec-2023'
;

prompt
prompt Creating view GLAS_UNDWT_REQ_WITH_COMMA
prompt =======================================
prompt
CREATE OR REPLACE FORCE VIEW GLAS_UNDWT_REQ_WITH_COMMA AS
SELECT ORG_ID,REQ_CODE,LISTAGG(SHORT_DESC, ', ') WITHIN GROUP (ORDER BY SHORT_DESC ASC) AS SHORT_DESC FROM glas_undwt_req_setup_t
    GROUP BY ORG_ID,REQ_CODE
    ORDER BY REQ_CODE;

prompt
prompt Creating view GL_CLAIM_REGISTER_V
prompt =================================
prompt
CREATE OR REPLACE FORCE VIEW GL_CLAIM_REGISTER_V AS
SELECT TO_CHAR (ant.Reporting_Date, 'dd/mm/yyyy') AS Activity_Date,
       apct.CHANNEL_NAME AS Channel,
       aprg.PARTNER_REGION_NAME AS region,
       A.PRODUCER_CODE AS Marketing_Executive,
       INITCAP (NVL (b.client_desc, '-')) Participant_Name,
       ant.POLICY_NO AS POLICY_NO,
       i.FCL AS Free_Cover_Limit_FCL,
       TO_CHAR (A.GDH_ISSUE_DATE, 'dd/mm/yyyy') AS Policy_Start_Date,
       TO_CHAR (A.GDH_EXPIRY_DATE, 'dd/mm/yyyy') AS Policy_End_Date,
       CASE
          WHEN A.GDH_EXPIRY_DATE <= SYSDATE THEN 'ACTIVE'
          ELSE 'EXPIRED'
       END
          AS STATUS,
       ant.CLAIM_NO AS Claim_Code,
       ant.CLAIM_REFERENCE_NO AS System_Claim,
       i.FIRST_Name || ' ' || i.Last_Name Member_Name,
       i.Gender AS Gender,
       TO_CHAR (i.DATE_OF_BIRTH, 'dd/mm/yyyy') AS DATE_OF_BIRTH,
       i.AGE,
       i.CNIC_NO AS CNIC,
       i.PERSONAL_ID AS E_ID,
       i.ITEM_NO AS Cert_ID,
       i.ITEM_STATUS AS Status_Insured,
       TO_CHAR (i.Effective_Date, 'dd/mm/yyyy') AS Effective_Date,
          FLOOR (MONTHS_BETWEEN (ant.EVENT_DATE, i.Effective_Date) / 12)
       || ' Year  '
       || FLOOR (MOD (MONTHS_BETWEEN (ant.EVENT_DATE, i.Effective_Date), 12))
       || ' Months  '
       || TRUNC (
               ant.EVENT_DATE
             - ADD_MONTHS (
                  i.Effective_Date,
                  FLOOR (MONTHS_BETWEEN (ant.EVENT_DATE, i.Effective_Date))))
       || ' Days  '
          AS Aging_Effective_Event,
       ben.BENEFIT_TYPE_CODE AS Benefit_Code,
       ben.BENEFIT_DESC AS Benefit_Desc,
       ant.CAUSE_OF_LOSS AS Cause_of_Event,
       ant.PROXIMATE_CAUSE AS Proximate_Cause,
       TO_CHAR (ant.EVENT_DATE, 'dd/mm/yyyy') AS Date_of_Event,
       ant.EVENT_PLACE AS Place_of_Event,
       TO_CHAR (ant.REPORTING_DATE, 'dd/mm/yyyy') AS Claim_Intimation_Date,
       TO_CHAR (ant.RE_OPEN_DATE, 'dd/mm/yyyy') AS Claim_Reopen_Date,
          FLOOR (MONTHS_BETWEEN (ant.REPORTING_DATE, ant.RE_OPEN_DATE) / 12)
       || ' Year  '
       || FLOOR (
             MOD (MONTHS_BETWEEN (ant.REPORTING_DATE, ant.RE_OPEN_DATE), 12))
       || ' Months  '
       || TRUNC (
               ant.REPORTING_DATE
             - ADD_MONTHS (
                  ant.RE_OPEN_DATE,
                  FLOOR (
                     MONTHS_BETWEEN (ant.REPORTING_DATE, ant.RE_OPEN_DATE))))
       || ' Days  '
          AS Duration_Intimation_Event,
       ant.CLAIM_STATUS AS Claim_Status,
       TO_CHAR (tcs.Settlement_date, 'dd/mm/yyyy') AS settlement_date,
          FLOOR (MONTHS_BETWEEN (tcs.Settlement_date, ant.EVENT_DATE) / 12)
       || ' Year  '
       || FLOOR (
             MOD (MONTHS_BETWEEN (tcs.Settlement_date, ant.EVENT_DATE), 12))
       || ' Months  '
       || TRUNC (
               tcs.Settlement_date
             - ADD_MONTHS (
                  ant.EVENT_DATE,
                  FLOOR (
                     MONTHS_BETWEEN (tcs.Settlement_date, ant.EVENT_DATE))))
       || ' Days  '
          AS Duration_Decision_Intimation,
       crt.INITIAL_CLAIM_AMOUNT AS provisional_Amount,
       (SELECT MAX (GCC.DESIGNATION) AS DESIGNATION
          FROM GLAS_CLIENT_CONTACTPERSON_T GCC
         WHERE     GCC.ORG_ID = A.ORG_ID
               AND GCC.CLIENT_CODE = A.PPS_PARTY_CODE
               AND GCC.contact_type = 'P')
          AS DESIGNATION,
       (SELECT MAX (GCC.Email) AS Email
          FROM GLAS_CLIENT_CONTACTPERSON_T GCC
         WHERE     GCC.ORG_ID = A.ORG_ID
               AND GCC.CLIENT_CODE = A.PPS_PARTY_CODE
               AND GCC.contact_type = 'P')
          AS EMAIL,
       (SELECT MAX (GCC.MOBILE_NO) AS Contact
          FROM GLAS_CLIENT_CONTACTPERSON_T GCC
         WHERE     GCC.ORG_ID = A.ORG_ID
               AND GCC.CLIENT_CODE = A.PPS_PARTY_CODE
               AND GCC.contact_type = 'P')
          AS CONTACT,
       (SELECT MAX (GCC.CONTACT_NAME) AS Contact_Person
          FROM GLAS_CLIENT_CONTACTPERSON_T GCC
         WHERE     GCC.ORG_ID = A.ORG_ID
               AND GCC.CLIENT_CODE = A.PPS_PARTY_CODE
               AND GCC.contact_type = 'P')
          AS Contact_Person,
       CASE WHEN ant.claim_status = 'A' THEN tcs.SETTLEMENT_AMOUNT ELSE 0 END
          AS approved_amount,
       CASE
          WHEN ant.claim_status = 'RJ' THEN crt.INITIAL_CLAIM_AMOUNT
          ELSE 0
       END
          AS Declined_Amount,
       CASE
          WHEN ant.claim_status NOT IN ('A', 'RJ') THEN tcs.SETTLEMENT_AMOUNT
          ELSE 0
       END
          AS Oustanding_Amount,
       CASE
          WHEN ant.claim_status = 'C' THEN crt.INITIAL_CLAIM_AMOUNT
          ELSE 0
       END
          AS Cancelled,
       ass.RETENTION_CLAIM_AMOUNT AS RETEN,
       ass.QUOTA_SHARE_AMOUNT AS QUOTA
  FROM TK_CLAIM_INTIMATION_T ant
       LEFT OUTER JOIN TK_DOC_HEADER_T A
          ON (    ant.ORG_ID = A.ORG_ID
              AND ant.BRANCH_ID = A.BRANCH_ID
              AND ant.sub_product_code = A.sub_product_code
              AND ant.policy_no = A.MASTER_REF_NO
              AND A.RECORD_TYPE =
                     CASE WHEN A.endorsement_no = 0 THEN 'O' ELSE 'P' END
              AND TRUNC (ANT.EVENT_DATE) BETWEEN TRUNC (A.GDH_COMM_DATE)
                                             AND TRUNC (A.GDH_EXPIRY_DATE) --    AND A.endorsement_no = (
                                       --        SELECT MAX(dh.endorsement_no)
                                             --        FROM TK_DOC_HEADER_T dh
                            --        WHERE dh.MASTER_REF_NO = a.master_ref_no
                                                                       --    )
             )
       LEFT OUTER JOIN GLAS_DOC_INSURED_ITEMS_T i
          ON     A.ORG_ID = i.ORG_ID
             AND A.BRANCH_ID = i.BRANCH_ID
             AND A.PRODUCT_CODE = i.product_code
             AND A.sub_product_code = i.sub_product_code
             AND A.takaful_type = i.takaful_type
             AND A.document_type = i.document_type
             AND A.record_type = i.record_type
             AND A.document_no = i.document_no
             AND A.document_year = i.document_year
             AND A.issue_count = i.issue_count
             AND A.endorsement_no = i.endorsement_no
             AND A.application_id = i.application_id
             AND ant.INSURED_ID = i.ITEM_NO
       LEFT OUTER JOIN tk_claim_settlement_t tcs
          ON     tcs.ORG_ID = ant.ORG_ID
             AND tcs.BRANCH_ID = ant.BRANCH_ID
             AND tcs.SUB_PRODUCT_CODE = ant.SUB_PRODUCT_CODE
             AND tcs.APPLICATION_ID = ant.APPLICATION_ID
             AND tcs.CLAIM_NO = ant.CLAIM_NO
       LEFT OUTER JOIN TK_CLAIM_ASSESSMENT_T ass
          ON     ass.ORG_ID = ant.ORG_ID
             AND ass.BRANCH_ID = ant.BRANCH_ID
             AND ass.SUB_PRODUCT_CODE = ant.SUB_PRODUCT_CODE
             AND ass.APPLICATION_ID = ant.APPLICATION_ID
             AND ass.CLAIM_NO = ant.CLAIM_NO
       LEFT OUTER JOIN claim_Registration_t crt
          ON     tcs.ORG_ID = crt.ORG_ID
             AND tcs.BRANCH_ID = crt.BRANCH_ID
             AND tcs.SUB_PRODUCT_CODE = crt.SUB_PRODUCT_CODE
             AND tcs.APPLICATION_ID = crt.APPLICATION_ID
             AND tcs.CLAIM_NO = crt.CLAIM_NO
       LEFT OUTER JOIN GLAS_CLIENT_SETUP_T b
          ON (a.ORG_ID = b.ORG_ID AND a.PPS_PARTY_CODE = b.CLIENT_CODE)
       LEFT OUTER JOIN TK_CLAIM_BENEFITS_T BA
          ON     BA.ORG_ID = ant.ORG_ID
             AND BA.BRANCH_ID = ant.BRANCH_ID
             AND BA.SUB_PRODUCT_CODE = ant.SUB_PRODUCT_CODE
             AND BA.CLAIM_NO = ant.CLAIM_NO
       LEFT OUTER JOIN glas_benefit_setup_t ben
          ON (BA.org_id = ben.org_id AND BA.benefit_code = ben.BENEFIT_CODE)
       LEFT OUTER JOIN AM_AGENT_T agtt
          ON (A.org_id = agtt.org_id AND A.PRODUCER_CODE = agtt.AGENT_Id)
       LEFT OUTER JOIN AM_PARTNER_T apr
          ON (apr.org_id = agtt.org_id AND APR.IS_PARTNER = 0)
       LEFT OUTER JOIN AM_PARTNER_BRANCHES_T BR
          ON (BR.ORG_ID = APR.ORG_ID AND BR.PARTNER_ID = APR.PARTNER_ID)
       LEFT OUTER JOIN AM_PARTNER_REGION_T aprg
          ON (    BR.org_id = aprg.org_id
              AND BR.partner_id = aprg.partner_id
              AND BR.REGION_ID = APRG.PARTNER_REGION_ID)
       LEFT OUTER JOIN AM_PARTNER_CHANNEL_T apc
          ON (apr.org_id = apc.org_id AND apr.partner_id = apc.partner_id)
       LEFT OUTER JOIN AM_DISTRIBUTION_CHANNEL_T apct
          ON (apct.org_id = apc.org_id AND apct.CHANNEL_ID = apc.CHANNEL_ID)
--WHERE
--    ant.ORG_ID = 5
--    AND ant.BRANCH_ID = 14
--    AND ant.claim_status = 'IP'
--    AND ant.CLAIM_NO = '000013'
;

prompt
prompt Creating view GL_LOSSRATIO_V
prompt ============================
prompt
CREATE OR REPLACE FORCE VIEW GL_LOSSRATIO_V AS
WITH Endorsement_TABLE AS (
SELECT
    b.ORG_ID,
    b.BRANCH_ID,
    b.SUB_PRODUCT_CODE,
    b.TAKAFUL_TYPE,
    b.DOCUMENT_TYPE,
    b.DOCUMENT_NO,
    b.RECORD_TYPE,
    b.DOCUMENT_YEAR,
    b.ISSUE_COUNT,
    b.APPLICATION_ID,
    max(B.ENDORSEMENT_NO) AS End_No
FROM
    TK_DOC_HEADER_T b
WHERE
    b.ORG_ID = 5
    AND B.DOCUMENT_TYPE = 'P'
    AND b.POLICY_RENEWAL_REFERENCE_NO IS NULL
    AND B.RECORD_TYPE =
    CASE
        WHEN B.ENDORSEMENT_NO = 0 THEN 'O'
        ELSE 'P'
    END
GROUP BY
    b.ORG_ID,
    b.BRANCH_ID,
    b.SUB_PRODUCT_CODE,
    b.TAKAFUL_TYPE,
    b.DOCUMENT_TYPE,
    b.DOCUMENT_NO,
    b.RECORD_TYPE,
    b.DOCUMENT_YEAR,
    b.ISSUE_COUNT,
    b.APPLICATION_ID
                                           
                                             
                                           )

    
,
 CLAIM_INTIMATION AS(
SELECT
    C_INT.ORG_ID,
    C_INT.BRANCH_ID,
    C_INT.SUB_PRODUCT_CODE,
    C_INT.APPLICATION_ID,
    C_INT.POLICY_HOLDER,
    C_INT.ENDORSEMENT_NO,
    C_INT.POLICY_NO,
    SUM(C_ASS.ASSESSMENT_AMOUNT)AS ASSESSMENT_AMOUNT
FROM
    TK_CLAIM_INTIMATION_T C_INT
LEFT OUTER JOIN TK_CLAIM_ASSESSMENT_T C_ASS ON
    (C_INT.ORG_ID = C_ASS.ORG_ID
        AND C_INT.BRANCH_ID = C_ASS.BRANCH_ID
        AND C_INT.SUB_PRODUCT_CODE = C_ASS.SUB_PRODUCT_CODE
        AND
C_INT.APPLICATION_ID = C_ASS.APPLICATION_ID
        AND C_INT.CLAIM_NO = C_ASS.CLAIM_NO
        AND C_ASS.ASSESSMENT_STATUS IN ('A'))
WHERE
    C_INT.ORG_ID = 5
    AND C_INT.BRANCH_ID = 14
    AND C_INT.SUB_PRODUCT_CODE = 1
    AND C_INT.APPLICATION_ID = 11
GROUP BY
    (C_INT.ORG_ID,
    C_INT.BRANCH_ID,
    C_INT.SUB_PRODUCT_CODE,
    C_INT.APPLICATION_ID,
    C_INT.POLICY_HOLDER,
    C_INT.ENDORSEMENT_NO,
    C_INT.POLICY_NO)),

DOC_INSURED AS (
SELECT
    count(*)totalLives,
    A.ORG_ID,
    A.BRANCH_ID,
    A.APPLICATION_ID,
    A.SUB_PRODUCT_CODE,
    A.ENDORSEMENT_NO,
    A.ISSUE_COUNT,
    A.PPS_PARTY_CODE,
    A.master_ref_no
FROM
    TK_DOC_HEADER_T a
LEFT OUTER JOIN GLAS_DOC_INSURED_ITEMS_T i ON
    (a.ORG_ID = i.ORG_ID
        AND a.BRANCH_ID = i.BRANCH_ID
        AND a.product_code = i.product_code
        AND
a.sub_product_code = i.sub_product_code
        AND a.takaful_type = i.takaful_type
        AND a.document_type = i.document_type
        AND a.record_type = i.record_type
        AND a.document_no = i.document_no
        AND a.document_year = i.document_year
        AND a.issue_count = i.issue_count
        AND a.endorsement_no = i.endorsement_no
        AND a.application_id = i.application_id)
GROUP BY
    (A.ORG_ID,
    A.BRANCH_ID,
    A.APPLICATION_ID,
    A.SUB_PRODUCT_CODE,
    A.ENDORSEMENT_NO,
    A.ISSUE_COUNT,
    A.PPS_PARTY_CODE,
    A.master_ref_no))

SELECT
    lod.LOADING_AMOUNT,
    ag.commission_rate,
    hd.POLICY_RENEWAL_REFERENCE_NO,
    hd.record_type,
    HD.producer_code,
    ag.commission_rate AS NEW_COMMISSION_RATE,
    hd.pps_party_code,
    hd.master_ref_no PolicyNo,
    c_intm.assessment_amount,
    TO_CHAR(HD.GDH_EXPIRY_DATE + 1, 'DD-MON-YYYY') AS NEW_EXPIRY_DATE,
    INS.totalLives Live,
    hd.ENDORSEMENT_NO ,
    hd.ISSUE_COUNT ,
    CASE
        hd.PAYMENT_MODE  
WHEN 'M' THEN 'MONTHLY'
        WHEN 'Q' THEN 'QUATERLY'
        WHEN 'H' THEN 'HALF_YEARLY'
        ELSE 'ANUALLY'
    END AS PaymentMode,
    CLT.CLIENT_DESC Participant,
    TO_CHAR(HD.GDH_COMM_DATE, 'DD-MON-YYYY') PolStartDate,
    TO_CHAR(HD.GDH_EXPIRY_DATE, 'DD-MON-YYYY') PolEndDate,
    nvl(HD.GDH_GROSS_PREMIUM, 0) Annualized,
    nvl(CLT.VAT_REG_NO, '-') ntnNo,
    AGT.AGENT_NAME AgentName,
    AGT.AGENT_ID AgentCode,
    HD.NET_CONTRIBUTION,
    c_intm.assessment_amount ClaimsAmount,
    ROUND (c_intm.assessment_amount / nvl(HD.GDH_GROSS_PREMIUM, 0) * 100,
    2) AS GrossLoss,
    --ROUND (c_intm.assessment_amount/nvl(HD.NET_CONTRIBUTION,0) * 100,2) AS NetLoss
    --ROUND((c_intm.assessment_amount / NVL(HD.GDH_GROSS_PREMIUM, 0) - NVL(lod.LOADING_AMOUNT, 0)) * 100, 2) AS NetLoss
    ROUND(c_intm.assessment_amount / (NVL(HD.GDH_GROSS_PREMIUM, 0) - NVL(lod.LOADING_AMOUNT, 0)) * 100, 2) AS NetLoss
    --SELECT *
FROM
    tk_doc_header_t hd
INNER JOIN Endorsement_TABLE ET ON
    (ET.ORG_ID = hd.ORG_ID
        AND ET.BRANCH_ID = hd.BRANCH_ID
        AND ET.SUB_PRODUCT_CODE = hd.SUB_PRODUCT_CODE
        AND ET.TAKAFUL_TYPE = hd.TAKAFUL_TYPE
        AND ET.DOCUMENT_TYPE = hd.DOCUMENT_TYPE
        AND ET.RECORD_TYPE = hd.RECORD_TYPE
        AND ET.DOCUMENT_YEAR = hd.DOCUMENT_YEAR
        AND ET.ISSUE_COUNT = hd.ISSUE_COUNT
        AND ET.APPLICATION_ID = hd.APPLICATION_ID
        AND ET.DOCUMENT_NO = hd.DOCUMENT_NO
        AND hd.ENDORSEMENT_NO = ET.End_No )
JOIN claim_intimation c_intm ON
    ( C_INTM.ORG_ID = HD.org_id
        AND C_INTM.BRANCH_ID = HD.BRANCH_ID
        AND C_INTM.SUB_PRODUCT_CODE = HD.SUB_PRODUCT_CODE
        AND C_INTM.APPLICATION_ID = HD.APPLICATION_ID
        AND C_INTM.POLICY_NO = hd.master_ref_no
        AND C_INTM.ENDORSEMENT_NO = HD.endorsement_no
        AND C_INTM.POLICY_HOLDER = HD.pps_party_code)
LEFT JOIN DOC_INSURED INS ON
    (INS.ORG_ID = HD.ORG_ID
        AND INS.BRANCH_ID = HD.BRANCH_ID
        AND INS.SUB_PRODUCT_CODE = HD.SUB_PRODUCT_CODE
        AND INS.ENDORSEMENT_NO = HD.ENDORSEMENT_NO
        AND INS.APPLICATION_ID = HD.APPLICATION_ID
        AND INS.PPS_PARTY_CODE = HD.PPS_PARTY_CODE
        AND INS.master_ref_no = HD.MASTER_REF_NO)
LEFT OUTER JOIN GLAS_CLIENT_SETUP_T CLT ON
    (HD.ORG_ID = CLT.ORG_ID
        AND HD.PPS_PARTY_CODE = CLT.CLIENT_CODE)
LEFT OUTER JOIN GLAS_DOC_AGENT_T ag ON
    (ag.ORG_ID = hd.ORG_ID
        AND ag.BRANCH_ID = hd.BRANCH_ID
        AND ag.PRODUCT_CODE = HD.PRODUCT_CODE
        AND ag.SUB_PRODUCT_CODE = hd.SUB_PRODUCT_CODE
        AND ag.TAKAFUL_TYPE = hd.TAKAFUL_TYPE
        AND ag.DOCUMENT_TYPE = hd.DOCUMENT_TYPE
        AND ag.RECORD_TYPE = hd.RECORD_TYPE
        AND ag.DOCUMENT_YEAR = hd.DOCUMENT_YEAR
        AND ag.ISSUE_COUNT = hd.ISSUE_COUNT
        AND ag.APPLICATION_ID = hd.APPLICATION_ID
        AND ag.DOCUMENT_NO = hd.DOCUMENT_NO
        AND hd.ENDORSEMENT_NO = ag.ENDORSEMENT_NO
        AND AG.AGENCY_TYPE = 'P' )
LEFT OUTER JOIN am_agent_t AGT ON
    AG.ORG_ID = agt.ORG_ID
    AND ag.agent_code = agt.agent_id
LEFT OUTER JOIN GLAS_DOC_EXPENSE_MARGIN_T lod ON
    (lod.ORG_ID = hd.ORG_ID
        AND lod.BRANCH_ID = hd.BRANCH_ID
        AND lod.PRODUCT_CODE = HD.PRODUCT_CODE
        AND lod.SUB_PRODUCT_CODE = hd.SUB_PRODUCT_CODE
        AND lod.TAKAFUL_TYPE = hd.TAKAFUL_TYPE
        AND lod.DOCUMENT_TYPE = hd.DOCUMENT_TYPE
        AND lod.RECORD_TYPE = hd.RECORD_TYPE
        AND lod.DOCUMENT_YEAR = hd.DOCUMENT_YEAR
        AND lod.ISSUE_COUNT = hd.ISSUE_COUNT
        AND lod.APPLICATION_ID = hd.APPLICATION_ID
        AND lod.DOCUMENT_NO = hd.DOCUMENT_NO
        AND hd.ENDORSEMENT_NO = lod.ENDORSEMENT_NO )
WHERE
    HD.ORG_ID = '5'
    AND HD.GDH_DOC_REFERENCE_NO IS NOT NULL
    AND HD.DOCUMENT_TYPE = 'P'
    AND HD.POSTING_TAG = 'Y'
    AND HD.ENDORSEMENT_NO = 0
    AND AG.AGENCY_TYPE = 'P'
    --AND hd.document_no ='00026'
    --AND hd.issue_count=1
    --SELECT agent_code from  GLAS_DOC_AGENT_T
;

prompt
prompt Creating view IL_DOC_HEADER_V
prompt =============================
prompt
CREATE OR REPLACE FORCE VIEW IL_DOC_HEADER_V AS
SELECT DISTINCT
          a.ORG_ID,
          a.BRANCH_ID,
          CASE
             WHEN a.DOCUMENT_TYPE = 'Q' THEN 'QOUTATION/PROPOSAL'
             WHEN a.DOCUMENT_TYPE = 'P' THEN 'POLICY'
          END
             AS DOC_TYPE,
          a.MAIN_PRODUCT_CODE,
          a.SUB_PRODUCT_CODE,
          a.TAKAFUL_TYPE,
          a.DOCUMENT_TYPE,
          a.DOCUMENT_NO,
          a.REVISED_TAG,
          a.REJECTED_TAG,
          a.RECORD_TYPE,
          a.DOCUMENT_YEAR,
          a.ISSUE_COUNT,
          a.ENDORSEMENT_NO,
          a.BASE_DOC_NO,
          a.POSTING_TAG,
          a.CLIENT_CODE,
          a.CNIC_NO,
          a.APPLICATION_ID,
          NVL (a.PAYER_SAME_TAG, 'Y') PAYER_SAME_TAG,
          a.DOC_REFERENCE_NO,
          b.DESCRIPTION,
          a.REMARKS,
          a.PREMIUM_BASIS,
          a.PRODUCER_CODE,
          a.CURRENCY_CODE,
          a.PAYMENT_MODE,
          a.WAKALA_FEE,
          a.LOADING_OVRD_RATE,
          a.LOADING_RATE,
          a.POLICY_FEE,
          a.OVERRIDING_RATE,
          a.EXCHANGE_RATE,
          a.SUB_DOCUMENT_NO,
          a.CREATED_BY,
          a.STANDARD_TREATY,
          TO_CHAR (NEXT_DUE_DATE, 'dd/MM/yyyy') NEXT_DUE_DATE,
          TO_CHAR (QUOTATION_DATE, 'dd/MM/yyyy') QUOTATION_DATE,
          TO_CHAR (a.CREATION_DATE, 'dd/MM/yyyy') CREATION_DATE,
          TO_CHAR (a.DOB1, 'dd/MM/yyyy') DOB1,
          TO_CHAR (a.DOB2, 'dd/MM/yyyy') DOB2,
          TO_CHAR (a.ISSUE_DATE, 'dd/MM/yyyy') ISSUE_DATE,
          TO_CHAR (a.ISSUE_DATE, 'dd-mon-yyyy') ISSUE_DATE_DISPLAY,
          TO_CHAR (a.COMM_DATE, 'dd/MM/yyyy') COMM_DATE,
          TO_CHAR (a.COMM_DATE, 'dd-mon-yyyy') COMM_DATE_DISPLAY,
          TO_CHAR (a.PROPOSAL_DATE, 'dd/MM/yyyy') PROPOSAL_DATE,
          TO_CHAR (a.DOC_DISPATCH_DATE, 'dd/MM/yyyy') DOC_DISPATCH_DATE,
          TO_CHAR (a.DOC_RECEIVE_DATE, 'dd/MM/yyyy') DOC_RECEIVE_DATE,
          TO_CHAR (a.CANCEL_DATE, 'dd/MM/yyyy') CANCEL_DATE,
          TO_CHAR (a.ALTERATION_ISSUE_DATE, 'dd/MM/yyyy')
             ALTERATION_ISSUE_DATE,
          TO_CHAR (a.ALTERATION_DATE, 'dd/MM/yyyy') ALTERATION_DATE,
             TO_CHAR (a.CREATION_DATE, 'dd')
          || TO_CHAR (a.CREATION_DATE, 'mm')
          || TO_CHAR (a.CREATION_DATE, 'yyyy')
             SORT_ID,
          a.SECOND_LIFE,
          a.NAME1,
          a.NAME2,
          a.AGE1,
          a.AGE2,
          a.GENDER1,
          a.GENDER2,
          a.POLICY_TERM,
          a.SUM_COVERED,
          a.SUM_COVERED_INDEX,
          a.CONTRIBUTION_INDEX,
          a.BASIC_CONTRIBUTION,
          a.GROSS_CONTRIBUTION,
          a.NET_CONTRIBUTION,
          NVL (a.MASTER_REF_NO, a.DOC_REFERENCE_NO) MASTER_REF_NO,
          a.COVER_MULTIPLE,
          a.CONT_MARGIN,
          a.LAST_AGE_INDEX,
          a.EXPECTED_CLAIM,
          a.INVESTMENT_INCOME,
          A.BID_OFFER,
          a.BASIC_CONTRIBUTION_MODAL,
          a.SUM_COVERED_MODAL,
          a.UNDWT_STATUS,
          c.STATUS_DESC,
          d.DECISION_DESC,
          a.CONVERT_TAG,
          a.CONVERTED_POLICY_NO,
          a.SUBMIT_TAG,
          a.UNDWT_DECISION,
          a.RISK_PROFILE,
          a.CONTRIBUTION_TYPE,
          a.RISK_PROFILE_COMMENTS,
          a.CUSTOMER_PROFILE_COMMENTS,
          a.ADVANCE_AMOUNT,
          a.PAYMENT_TERM,
          f.CLIENT_DESC,
          f.CLIENT_TYPE,
          a.ILLUSTRATION_REF_NO,
          a.CHANNEL_ID,
          a.MODEL_ID,
          a.AGENT_ID,
          a.PARTNER_ID,
          a.TOPUP_AMOUNT,
          a.TOTAL_CONTRIBUTION_MODAL,
          a.ALTERATION_TYPE,
          t.DESCRIPTION alteration,
          a.CANCELLATION_TYPE,
          a.CHARGEABLE_FROM,
          a.CHARGEABLE_AMOUNT,
          a.CANCEL_TAG,
          a.CANCEL_BY,
          a.POLICY_POSTED,
          a.NON_FINANCIAL_ACTIVITY,
          a.NON_FINANCIAL_SUB_ACTIVITY,
          agent.AGENT_NAME,
          a.UNDWT_DECISION_REASON,
          a.UNDWT_NOTES,
          a.UNDERWRITING_IL_CREATE,
          a.PROPOSAL_APPROVED_BY,
          a.UNDWT_OTHER_EXCULUSIONS
     FROM                IL_DOC_HEADER_T a
                      LEFT OUTER JOIN
                         IL_DOC_STATUS_SETUP_T c
                      ON (    a.ORG_ID = c.ORG_ID
                          AND a.UNDWT_STATUS = c.STATUS_CODE)
                   LEFT OUTER JOIN
                      IL_DECISION_SETUP_T d
                   ON (    a.ORG_ID = c.ORG_ID
                       AND a.UNDWT_DECISION = d.DECISION_CODE)
                LEFT OUTER JOIN
                   GLAS_CLIENT_SETUP_T f
                ON (a.ORG_ID = f.ORG_ID AND a.CLIENT_CODE = f.CLIENT_CODE)
             LEFT OUTER JOIN
                GLAS_ALTERATION_TYPE_SETUP_T T
             ON (    T.ORG_ID = a.ORG_ID
                 AND t.ALTERATION_TYPE = a.ALTERATION_TYPE)
          LEFT OUTER JOIN
             AM_AGENT_T agent
          ON (agent.ORG_ID = a.ORG_ID AND agent.AGENT_ID = a.AGENT_ID),
          GLAS_SUB_PRODUCT_SETUP_T b
    WHERE     a.ORG_ID = b.ORG_ID
          AND a.APPLICATION_ID = b.APPLICATION_ID
          AND a.SUB_PRODUCT_CODE = b.SUB_PRODUCT_CODE;

prompt
prompt Creating view TERMINATED_CHANNEL_MODEL_V
prompt ========================================
prompt
CREATE OR REPLACE FORCE VIEW TERMINATED_CHANNEL_MODEL_V AS
SELECT AMT.ORG_ID,
           AMT.AGENT_ID,
           AMT.PARTNER_ID,
           AMT.CHANNEL_ID,
           AMT.MODEL_ID,
           AMT.CREATED_BY,
           AMT.CREATION_DATE,
           AMT.TERMINATED_ID,
           AGT.AGENT_NAME,
           APT.PARTNER_NAME,
           ACT.CHANNEL_NAME,
           ACMT.MODEL_NAME
      FROM AM_TERMINATION_CHANNEL_MODEL_T AMT
        LEFT JOIN AM_AGENT_T AGT
          ON AGT.AGENT_ID = AMT.AGENT_ID
          AND AGT.ORG_ID = AMT.ORG_ID
        LEFT JOIN AM_PARTNER_T APT
          ON AMT.PARTNER_ID = APT.PARTNER_ID
          AND AMT.ORG_ID = APT.ORG_ID
        LEFT JOIN AM_DISTRIBUTION_CHANNEL_T ACT
          ON AMT.CHANNEL_ID = ACT.CHANNEL_ID
          AND AMT.ORG_ID = ACT.ORG_ID
        LEFT JOIN AM_CHANNEL_MODEL_T ACMT
          ON AMT.MODEL_ID = ACMT.MODEL_ID
          AND AMT.ORG_ID = ACMT.ORG_ID
          AND AMT.CHANNEL_ID = ACMT.CHANNEL_ID;

prompt
prompt Creating view UW_REQ_DTL_WITH_COMMA
prompt ===================================
prompt
CREATE OR REPLACE FORCE VIEW UW_REQ_DTL_WITH_COMMA AS
SELECT ORG_ID,REQ_CODE,LISTAGG(DESCRIPTION, ', ') WITHIN GROUP (ORDER BY DESCRIPTION ASC) AS Description FROM GLAS_UNDWT_REQ_DTL_SETUP_T
    GROUP BY ORG_ID,REQ_CODE
    ORDER BY REQ_CODE;

prompt
prompt Creating view glas_undwt_req_with_comma
prompt =======================================
prompt
CREATE OR REPLACE FORCE VIEW glas_undwt_req_with_comma AS
SELECT ORG_ID,REQ_CODE,LISTAGG(SHORT_DESC, ', ') WITHIN GROUP (ORDER BY SHORT_DESC ASC) AS SHORT_DESC FROM glas_undwt_req_setup_t
    GROUP BY ORG_ID,REQ_CODE
    ORDER BY REQ_CODE;

prompt
prompt Creating function ADD_MONTHS_F
prompt ==============================
prompt
CREATE OR REPLACE FUNCTION ADD_MONTHS_F (ORIGNAL_DATE    DATE,
                                                      MONTHS          NUMBER)
   RETURN DATE
IS
   DAY_PART            NUMBER;
   MONTH_PART          NUMBER;
   YEAR_PART           NUMBER;
   LAST_DAY_OF_MONTH   NUMBER;
   NEW_DATE            DATE;
   ADD_YEARS           NUMBER;
   ADD_MONTH           NUMBER;
BEGIN
   DAY_PART := TO_NUMBER (TO_CHAR (ORIGNAL_DATE, 'DD'));
   MONTH_PART := TO_NUMBER (TO_CHAR (ORIGNAL_DATE, 'MM'));
   YEAR_PART := TO_NUMBER (TO_CHAR (ORIGNAL_DATE, 'YYYY'));

   ADD_YEARS := FLOOR (ABS (MONTHS) / 12);

   IF MONTHS >= 0
   THEN
      ADD_MONTH := MONTHS - (ADD_YEARS * 12);

      YEAR_PART := YEAR_PART + ADD_YEARS;
   ELSE
      ADD_MONTH := MONTHS + (ADD_YEARS * 12);

      YEAR_PART := YEAR_PART - ADD_YEARS;
   END IF;

   MONTH_PART := MONTH_PART + ADD_MONTH;

   IF MONTH_PART > 12
   THEN
      MONTH_PART := MONTH_PART - 12;
      YEAR_PART := YEAR_PART + 1;
   ELSIF MONTH_PART <= 0
   THEN
      MONTH_PART := MONTH_PART + 12;
      YEAR_PART := YEAR_PART - 1;
   END IF;

   LAST_DAY_OF_MONTH :=
      TO_NUMBER (
         TO_CHAR (LAST_DAY (ADD_MONTHS (ORIGNAL_DATE, MONTHS)), 'DD'));

   IF LAST_DAY_OF_MONTH < DAY_PART
   THEN
      DAY_PART := LAST_DAY_OF_MONTH;
   END IF;

   NEW_DATE :=
      TO_DATE (
            LPAD (DAY_PART, 2, '0')
         || '/'
         || LPAD (MONTH_PART, 2, '0')
         || '/'
         || LPAD (YEAR_PART, 4, '0'),
         'DD/MM/YYYY');

   RETURN NEW_DATE;
END;
/

prompt
prompt Creating function EVAL
prompt ======================
prompt
CREATE OR REPLACE FUNCTION eval (p_rowid      IN ROWID,
                                          p_tname      IN VARCHAR2,
                                          p_function   IN VARCHAR2)
   RETURN NUMBER
AS
   l_return      NUMBER;
   ZERO_DIVIDE   EXCEPTION;
   PRAGMA EXCEPTION_INIT (ZERO_DIVIDE, -1476);
BEGIN
   EXECUTE IMMEDIATE
      'select ' || p_function || ' from ' || p_tname || ' where rowid = :x'
      INTO l_return
      USING p_rowid;

   RETURN l_return;
EXCEPTION
   WHEN ZERO_DIVIDE
   THEN
      RETURN NULL;
END;
/

prompt
prompt Creating function GET_EFFECTIVE_AGE_P
prompt =====================================
prompt
CREATE OR REPLACE FUNCTION GET_EFFECTIVE_AGE_P (
   P_ORG_ID               NUMBER,
   P_AGE1            NUMBER,
   P_AGE2    NUMBER,
   P_SEEK_AGE    NUMBER,
P_BENEFIT_TYPE    VARCHAR
      
   
   ) RETURN NUMBER
   
IS  

LN_EFFECTIVE_AGE        NUMBER;
ln_new_age1             NUMBER;
ln_effective_age_factor NUMBER;

BEGIN 

LN_EFFECTIVE_AGE := P_AGE1;

    IF P_SEEK_AGE =2 THEN 
        LN_EFFECTIVE_AGE := P_AGE2 -2;
    END IF; 

    IF  P_BENEFIT_TYPE='B' THEN 
         IF  P_AGE2 > 0 THEN 
                    
              ln_new_age1 := P_AGE2 - 2;
              
           IF ln_new_age1 > 0  
           THEN
               BEGIN 
              SELECT VALUE
                INTO ln_effective_age_factor
                FROM TK_EFFECTIVE_AGE_CHART_T
               WHERE ORG_ID = P_ORG_ID AND AGE_DIFFERENCE = ABS (P_AGE1 - ln_new_age1);
              EXCEPTION WHEN OTHERS THEN 
              ln_effective_age_factor := 0;
              
              END;

            

           ELSE
              ln_effective_age_factor := 0;
           END IF;

           -- calculate effective age in case of joint life
           IF P_AGE1 >= ln_new_age1 
           THEN
              ln_effective_age := P_AGE1 - ln_effective_age_factor;
           ELSE
              ln_effective_age := ln_new_age1 - ln_effective_age_factor;
           END IF;
           
    END IF;         

 END IF;


RETURN LN_EFFECTIVE_AGE ;

END;
/

prompt
prompt Creating function GET_NUM_GEN_F
prompt ===============================
prompt
CREATE OR REPLACE FUNCTION get_num_gen_f (p_org_id        NUMBER,
                                                   p_num_gen_id    VARCHAR2)
   RETURN VARCHAR2
IS
   v_numgen_tablename   VARCHAR2 (32);
   v_query_str          VARCHAR2 (2000);
   v_iterator           NUMBER := 0;

   CURSOR num_gen_data
   IS
        SELECT ROWID,
               NUMGEN_ID,
               NUMGEN_DTL_ID,
               ORG_ID,
               NUMGEN_DESC,
               COLUMN_ID,
               CREATED_BY,
               CREATION_DATE,
               LAST_UPDATED_BY,
               LAST_UPDATE_DATE,
               COLUMN_TYPE,
               COLUMN_EXPRESSION
          FROM NUM_GEN_SETUP_DTL_T
         WHERE org_id = p_org_id AND numgen_id = p_num_gen_id
      ORDER BY NUMGEN_DTL_ID;
BEGIN
   SELECT TABLENAME
     INTO v_numgen_tablename
     FROM NUM_GEN_SETUP_HD_T
    WHERE org_id = p_org_id AND numgen_id = p_num_gen_id;

   v_query_str := 'select count(*) from ' || v_numgen_tablename || ' where ';

   FOR crow IN num_gen_data
   LOOP
      IF v_iterator > 0
      THEN
         v_query_str := v_query_str || ' and ';
      END IF;

      v_query_str :=
            v_query_str
         || CASE
               WHEN CROW.COLUMN_TYPE = 'D' THEN crow.COLUMN_ID
               ELSE CROW.COLUMN_EXPRESSION
            END
         || ' = '':'
         || v_iterator
         || '''';

      v_iterator := v_iterator + 1;
   END LOOP;



   RETURN v_query_str;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 'error' || SQLERRM;
END;
/

prompt
prompt Creating function GET_POLICY_CASHVALUE_F
prompt ========================================
prompt
CREATE OR REPLACE FUNCTION get_policy_cashvalue_f (
   P_ORG_ID             VARCHAR2,
   P_POLICY_NO          VARCHAR2,
   P_ALLOCATION_TYPE    NUMBER,
   P_PROCESS_DATE       DATE DEFAULT SYSDATE - 1)
   RETURN NUMBER
IS
   LN_CURRENT_BID_PRICE    NUMBER;
   LV_PRICE_TYPE           VARCHAR2 (1);
   LN_OFFER_SPREAD_RATE    NUMBER := -1;
   LN_CURRENT_CASH_VALUE   NUMBER := 0;
   LD_PROCESS_DATE         DATE;

   CURSOR ACTIVE_POLICY_DATA
   IS
        SELECT dh.MAIN_PRODUCT_CODE,
               dh.SUB_PRODUCT_CODE,
               FUND_CODE,
               a.TRANSACTION_TYPE,
               NVL (SUM (NVL (NO_OF_UNITS, 0)), 0) LASTDAY_CLOSING_UNITS,
               NVL (
                  SUM (
                     CASE
                        WHEN A.UNIT_PROCESS_DATE IS NOT NULL THEN 0
                        ELSE TOTAL_NET_AMOUNT
                     END),
                  0)
                  UNALLOCATED_AMOUNT
          FROM IL_DOC_HEADER_T DH
               INNER JOIN IL_DOC_ALLOC_DTL_BREAKUP_T A
                  ON (    dh.ORG_ID = A.ORG_ID
                      AND dh.BRANCH_ID = A.BRANCH_ID
                      AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                      AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                      AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                      AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                      AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                      AND dh.RECORD_TYPE = A.RECORD_TYPE
                      AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                      AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                      AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                      AND dh.APPLICATION_ID = A.APPLICATION_ID)
               INNER JOIN IL_ALLOC_TRANS_TYPE_T t
                  ON t.ORG_ID = A.ORG_ID AND t.TYPE_CODE = A.TRANSACTION_TYPE
         WHERE     DH.ORG_ID = P_ORG_ID
               AND a.record_type = 'O'
               AND DH.DOC_REFERENCE_KEY IS NOT NULL
               AND DH.REVISED_TAG IS NULL
               AND A.ISSUE_COUNT = 1
               AND A.ENDORSEMENT_NO = 0
               AND A.ALLOCATION_TYPE = P_ALLOCATION_TYPE
               AND MASTER_REF_NO = P_POLICY_NO
               AND TRUNC (a.TRANSACTION_DATE) <= TRUNC (P_PROCESS_DATE)
      GROUP BY dh.MAIN_PRODUCT_CODE,
               dh.SUB_PRODUCT_CODE,
               FUND_CODE,
               TRANSACTION_TYPE
      ORDER BY FUND_CODE, TRANSACTION_TYPE;
BEGIN
   LD_PROCESS_DATE := TRUNC (P_PROCESS_DATE);

   FOR CROW IN ACTIVE_POLICY_DATA
   LOOP
      IF LN_OFFER_SPREAD_RATE = -1
      THEN
         SELECT NVL (OFFER_SPREAD_RATE, 0)
           INTO LN_OFFER_SPREAD_RATE
           FROM GLAS_SUB_PRODUCT_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = CROW.MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = CROW.SUB_PRODUCT_CODE;
      END IF;

      -- check curent bid price
      BEGIN
         SELECT f.price_type
           INTO LV_PRICE_TYPE
           FROM FUND_SETUP_T F
          WHERE F.ORG_ID = P_ORG_ID AND F.FUND_CODE = CROW.FUND_CODE;

         SELECT BID_PRICE
           INTO LN_CURRENT_BID_PRICE
           FROM IL_FUND_PRICE_HISTORY_T
          WHERE     ORG_ID = P_ORG_ID
                AND FUND_CODE = CROW.FUND_CODE
                AND TRUNC (TRANSACTION_DATE) = LD_PROCESS_DATE;


         LN_CURRENT_BID_PRICE :=
            CASE
               WHEN LV_PRICE_TYPE = 'O'
               THEN
                  NVL (LN_CURRENT_BID_PRICE, 0) * (1 - LN_OFFER_SPREAD_RATE)
               ELSE
                  NVL (LN_CURRENT_BID_PRICE, 0)
            END;

         LN_CURRENT_CASH_VALUE :=
              LN_CURRENT_CASH_VALUE
            + (CROW.LASTDAY_CLOSING_UNITS * LN_CURRENT_BID_PRICE)
            + crow.UNALLOCATED_AMOUNT * (1 - LN_OFFER_SPREAD_RATE);
      --            LN_CURRENT_CASH_VALUE:= LN_CURRENT_CASH_VALUE + (CROW.LASTDAY_CLOSING_UNITS  * LN_CURRENT_BID_PRICE);-- + crow.UNALLOCATED_AMOUNT;

      EXCEPTION
         WHEN OTHERS
         THEN
            LN_CURRENT_CASH_VALUE := LN_CURRENT_CASH_VALUE;
      END;
   END LOOP;


   RETURN ROUND (LN_CURRENT_CASH_VALUE, 4);
EXCEPTION
   WHEN OTHERS
   THEN
      --             RETURN  'error:'||sqlerrm;

      RETURN 0;
END;
/

prompt
prompt Creating procedure FINANCE_YEAR_END_PROCESS_P
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE FINANCE_YEAR_END_PROCESS_P (
   P_ORG_ID         VARCHAR2,
   P_FISCAL_YEAR    VARCHAR2)
AS
   LV_YEAR_END_FLAG          VARCHAR2 (1);
   LV_RETAINED_EARNING_COA   VARCHAR2 (20);
   LV_NEXT_FISCAL_YEAR       VARCHAR2 (10);
BEGIN
   SELECT NVL (YEAR_END_FLAG, 'N')
     INTO LV_YEAR_END_FLAG
     FROM GL_FISCAL_YEAR_SETUP_T
    WHERE ORG_ID = P_ORG_ID AND FISCAL_YEAR = P_FISCAL_YEAR;

   IF LV_YEAR_END_FLAG = 'N'
   THEN
      BEGIN
         SELECT CONFIG_VALUE
           INTO LV_RETAINED_EARNING_COA
           FROM SM_APPLICATION_CONFIG_T
          WHERE CONFIG_NAME = 'RETAINED_EARNING_CODE';
      EXCEPTION
         WHEN OTHERS
         THEN
            LV_RETAINED_EARNING_COA := '30101001';
      END;

      SELECT TO_CHAR (MIN (fiscal_year))
        INTO LV_NEXT_FISCAL_YEAR
        FROM GL_FISCAL_YEAR_SETUP_T
       WHERE ORG_ID = P_ORG_ID AND FISCAL_YEAR > P_FISCAL_YEAR;

      DELETE FROM GL_BALANCES_SUBLEDGER_T
            WHERE     ORG_ID = P_ORG_ID
                  AND FISCAL_YEAR = LV_NEXT_FISCAL_YEAR
                  AND PERIOD_NO = 0;

      DELETE FROM GL_BALANCES_DIMENSIONS_T
            WHERE     ORG_ID = P_ORG_ID
                  AND FISCAL_YEAR = LV_NEXT_FISCAL_YEAR
                  AND PERIOD_NO = 0;

      DELETE FROM GL_BALANCES_HEADER_T
            WHERE     ORG_ID = P_ORG_ID
                  AND FISCAL_YEAR = LV_NEXT_FISCAL_YEAR
                  AND PERIOD_NO = 0;

      INSERT INTO GL_BALANCES_DIMENSIONS_T (ORG_ID,
                                            BRANCH_ID,
                                            FISCAL_YEAR,
                                            PERIOD_NO,
                                            COST_CENTER_CODE,
                                            COA_CODE,
                                            POLICY_NO,
                                            CLAIM_NO,
                                            BU,
                                            LOB,
                                            LOCATION,
                                            EMPLOYEE,
                                            CHANNEL,
                                            AGENT,
                                            CURRENCY_CODE,
                                            DEBIT_BASE_CURR,
                                            CREDIT_BASE_CURR,
                                            DEBIT_FOREIGN_CURR,
                                            CREDIT_FOREIGN_CURR,
                                            CREATED_BY,
                                            CREATION_DATE,
                                            EXCHANGE_RATE)
           SELECT ORG_ID,
                  BRANCH_ID,
                  LV_NEXT_FISCAL_YEAR FISCAL_YEAR,
                  0 PERIOD_NO,
                  COST_CENTER_CODE,
                  COA_CODE,
                  POLICY_NO,
                  CLAIM_NO,
                  BU,
                  LOB,
                  LOCATION,
                  EMPLOYEE,
                  CHANNEL,
                  AGENT,
                  CURRENCY_CODE,
                  SUM (DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                  SUM (CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                  SUM (DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                  SUM (CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                  'ADMIN' CREATED_BY,
                  SYSDATE CREATION_DATE,
                  EXCHANGE_RATE
             FROM (  SELECT wht.ORG_ID,
                            wht.BRANCH_ID,
                            VD.COST_CENTER_CODE,
                            VD.COA_CODE,
                            POLICY_NO,
                            CLAIM_NO,
                            BU,
                            LOB,
                            LOCATION,
                            EMPLOYEE,
                            CHANNEL,
                            AGENT,
                            CURRENCY_CODE,
                            SUM (VD.DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                            SUM (VD.CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                            SUM (VD.DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                            SUM (VD.CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                            1 EXCHANGE_RATE
                       FROM GL_VOUCHER_HEADER_T wht
                            INNER JOIN GL_VOUCHER_DETAIL_T VD
                               ON     VD.ORG_ID = wht.org_id
                                  AND Vd.BRANCH_ID = WHT.BRANCH_ID
                                  AND VD.VOUCHER_TYPE = WHT.VOUCHER_TYPE
                                  AND VD.FISCAL_YEAR = wht.FISCAL_YEAR
                                  AND VD.VOUCHER_NO = wht.VOUCHER_NO
                            INNER JOIN CHART_OF_ACCOUNT_GL_T COA
                               ON (    VD.ORG_ID = COA.org_id
                                   AND VD.COA_CODE = COA.COA_CODE)
                      WHERE     wht.ORG_ID = P_ORG_ID
                            AND wht.FISCAL_YEAR = P_FISCAL_YEAR
                            AND NVL (COA_NATURE, 'N') = 'BS'
                            AND NVL (WHT.VOUCHER_STATUS, 'N') = 'A'
                            AND COA.COA_CODE <> LV_RETAINED_EARNING_COA
                   GROUP BY wht.ORG_ID,
                            wht.BRANCH_ID,
                            VD.COST_CENTER_CODE,
                            VD.COA_CODE,
                            POLICY_NO,
                            CLAIM_NO,
                            BU,
                            LOB,
                            LOCATION,
                            EMPLOYEE,
                            CHANNEL,
                            AGENT,
                            CURRENCY_CODE
                   UNION ALL
                   SELECT ORG_ID,
                          BRANCH_ID,
                          COST_CENTER_CODE,
                          COA_CODE,
                          POLICY_NO,
                          CLAIM_NO,
                          BU,
                          LOB,
                          LOCATION,
                          EMPLOYEE,
                          CHANNEL,
                          AGENT,
                          CURRENCY_CODE,
                          DEBIT_BASE_CURR,
                          CREDIT_BASE_CURR,
                          DEBIT_FOREIGN_CURR,
                          CREDIT_FOREIGN_CURR,
                          EXCHANGE_RATE
                     FROM GL_BALANCES_DIMENSIONS_T
                    WHERE     ORG_ID = P_ORG_ID
                          AND FISCAL_YEAR = P_FISCAL_YEAR
                          AND period_no = 0
                          AND COA_CODE <> LV_RETAINED_EARNING_COA) tab
         GROUP BY ORG_ID,
                  BRANCH_ID,
                  COST_CENTER_CODE,
                  COA_CODE,
                  POLICY_NO,
                  CLAIM_NO,
                  BU,
                  LOB,
                  LOCATION,
                  EMPLOYEE,
                  CHANNEL,
                  AGENT,
                  CURRENCY_CODE,
                  EXCHANGE_RATE;


      INSERT INTO GL_BALANCES_SUBLEDGER_T (ORG_ID,
                                           BRANCH_ID,
                                           FISCAL_YEAR,
                                           PERIOD_NO,
                                           COST_CENTER_CODE,
                                           COA_CODE,
                                           CURRENCY_CODE,
                                           SL_TYPE,
                                           SL_CODE,
                                           DEBIT_BASE_CURR,
                                           CREDIT_BASE_CURR,
                                           DEBIT_FOREIGN_CURR,
                                           CREDIT_FOREIGN_CURR,
                                           CREATED_BY,
                                           CREATION_DATE,
                                           EXCHANGE_RATE)
           SELECT ORG_ID,
                  BRANCH_ID,
                  LV_NEXT_FISCAL_YEAR FISCAL_YEAR,
                  0 PERIOD_NO,
                  COST_CENTER_CODE,
                  COA_CODE,
                  CURRENCY_CODE,
                  SL_TYPE,
                  SL_CODE,
                  SUM (DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                  SUM (CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                  SUM (DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                  SUM (CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                  'ADMIN',
                  SYSDATE,
                  EXCHANGE_RATE
             FROM (  SELECT wht.ORG_ID,
                            wht.BRANCH_ID,
                            SLDT.COST_CENTER_CODE,
                            SLDT.COA_CODE,
                            NVL (SLDT.CURRENCY_CODE, 'PKR') CURRENCY_CODE,
                            SLDT.SL_TYPE,
                            SLDT.SL_CODE,
                            SUM (SLDT.DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                            SUM (SLDT.CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                            SUM (SLDT.DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                            SUM (SLDT.CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                            1 EXCHANGE_RATE
                       FROM GL_VOUCHER_HEADER_T wht
                            INNER JOIN GL_SUB_LEDGER_DETAIL_T SLDT
                               ON     SLDT.ORG_ID = wht.org_id
                                  AND SLDT.BRANCH_ID = WHT.BRANCH_ID
                                  AND SLDT.VOUCHER_TYPE = WHT.VOUCHER_TYPE
                                  AND SLDT.FISCAL_YEAR = wht.FISCAL_YEAR
                                  AND SLDT.VOUCHER_NO = wht.VOUCHER_NO
                            INNER JOIN CHART_OF_ACCOUNT_GL_T COA
                               ON (    SLDT.ORG_ID = COA.org_id
                                   AND SLDT.COA_CODE = COA.COA_CODE)
                      WHERE     wht.ORG_ID = P_ORG_ID
                            AND wht.FISCAL_YEAR = P_FISCAL_YEAR
                            AND NVL (COA_NATURE, 'N') = 'BS'
                            AND NVL (WHT.VOUCHER_STATUS, 'N') = 'A'
                            AND COA.COA_CODE <> LV_RETAINED_EARNING_COA
                   GROUP BY wht.ORG_ID,
                            wht.BRANCH_ID,
                            SLDT.COST_CENTER_CODE,
                            SLDT.COA_CODE,
                            NVL (SLDT.CURRENCY_CODE, 'PKR'),
                            SLDT.SL_TYPE,
                            SLDT.SL_CODE
                   UNION ALL
                   SELECT ORG_ID,
                          BRANCH_ID,
                          COST_CENTER_CODE,
                          COA_CODE,
                          CURRENCY_CODE,
                          SL_TYPE,
                          SL_CODE,
                          DEBIT_BASE_CURR,
                          CREDIT_BASE_CURR,
                          DEBIT_FOREIGN_CURR,
                          CREDIT_FOREIGN_CURR,
                          EXCHANGE_RATE
                     FROM GL_BALANCES_SUBLEDGER_T
                    WHERE     ORG_ID = P_ORG_ID
                          AND FISCAL_YEAR = P_FISCAL_YEAR
                          AND period_no = 0
                          AND COA_CODE <> LV_RETAINED_EARNING_COA) tab
         GROUP BY ORG_ID,
                  BRANCH_ID,
                  COST_CENTER_CODE,
                  COA_CODE,
                  CURRENCY_CODE,
                  SL_TYPE,
                  SL_CODE,
                  EXCHANGE_RATE;

      ------- FOR RETAINED EARNING

      INSERT INTO GL_BALANCES_DIMENSIONS_T (ORG_ID,
                                            BRANCH_ID,
                                            FISCAL_YEAR,
                                            PERIOD_NO,
                                            COST_CENTER_CODE,
                                            COA_CODE,
                                            POLICY_NO,
                                            CLAIM_NO,
                                            BU,
                                            LOB,
                                            LOCATION,
                                            EMPLOYEE,
                                            CHANNEL,
                                            AGENT,
                                            CURRENCY_CODE,
                                            DEBIT_BASE_CURR,
                                            CREDIT_BASE_CURR,
                                            DEBIT_FOREIGN_CURR,
                                            CREDIT_FOREIGN_CURR,
                                            CREATED_BY,
                                            CREATION_DATE,
                                            EXCHANGE_RATE)
           SELECT ORG_ID,
                  BRANCH_ID,
                  LV_NEXT_FISCAL_YEAR FISCAL_YEAR,
                  0 PERIOD_NO,
                  COST_CENTER_CODE,
                  LV_RETAINED_EARNING_COA COA_CODE,
                  POLICY_NO,
                  CLAIM_NO,
                  BU,
                  LOB,
                  LOCATION,
                  EMPLOYEE,
                  CHANNEL,
                  AGENT,
                  CURRENCY_CODE,
                  SUM (DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                  SUM (CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                  SUM (DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                  SUM (CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                  'ADMIN' CREATED_BY,
                  SYSDATE CREATION_DATE,
                  EXCHANGE_RATE
             FROM (  SELECT wht.ORG_ID,
                            wht.BRANCH_ID,
                            VD.COST_CENTER_CODE,
                            POLICY_NO,
                            CLAIM_NO,
                            BU,
                            LOB,
                            LOCATION,
                            EMPLOYEE,
                            CHANNEL,
                            AGENT,
                            CURRENCY_CODE,
                            SUM (VD.DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                            SUM (VD.CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                            SUM (VD.DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                            SUM (VD.CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                            1 EXCHANGE_RATE
                       FROM GL_VOUCHER_HEADER_T wht
                            INNER JOIN GL_VOUCHER_DETAIL_T VD
                               ON     VD.ORG_ID = wht.org_id
                                  AND Vd.BRANCH_ID = WHT.BRANCH_ID
                                  AND VD.VOUCHER_TYPE = WHT.VOUCHER_TYPE
                                  AND VD.FISCAL_YEAR = wht.FISCAL_YEAR
                                  AND VD.VOUCHER_NO = wht.VOUCHER_NO
                            INNER JOIN CHART_OF_ACCOUNT_GL_T COA
                               ON (    VD.ORG_ID = COA.org_id
                                   AND VD.COA_CODE = COA.COA_CODE)
                      WHERE     wht.ORG_ID = P_ORG_ID
                            AND wht.FISCAL_YEAR = P_FISCAL_YEAR
                            AND (   NVL (COA_NATURE, 'N') <> 'BS'
                                 OR coa.COA_CODE = LV_RETAINED_EARNING_COA)
                            AND NVL (WHT.VOUCHER_STATUS, 'N') = 'A'
                   GROUP BY wht.ORG_ID,
                            wht.BRANCH_ID,
                            VD.COST_CENTER_CODE,
                            POLICY_NO,
                            CLAIM_NO,
                            BU,
                            LOB,
                            LOCATION,
                            EMPLOYEE,
                            CHANNEL,
                            AGENT,
                            CURRENCY_CODE
                   UNION ALL
                   SELECT ORG_ID,
                          BRANCH_ID,
                          COST_CENTER_CODE,
                          POLICY_NO,
                          CLAIM_NO,
                          BU,
                          LOB,
                          LOCATION,
                          EMPLOYEE,
                          CHANNEL,
                          AGENT,
                          CURRENCY_CODE,
                          DEBIT_BASE_CURR,
                          CREDIT_BASE_CURR,
                          DEBIT_FOREIGN_CURR,
                          CREDIT_FOREIGN_CURR,
                          EXCHANGE_RATE
                     FROM GL_BALANCES_DIMENSIONS_T
                    WHERE     ORG_ID = P_ORG_ID
                          AND FISCAL_YEAR = P_FISCAL_YEAR
                          AND period_no = 0
                          AND COA_CODE = LV_RETAINED_EARNING_COA) tab
         GROUP BY ORG_ID,
                  BRANCH_ID,
                  COST_CENTER_CODE,
                  POLICY_NO,
                  CLAIM_NO,
                  BU,
                  LOB,
                  LOCATION,
                  EMPLOYEE,
                  CHANNEL,
                  AGENT,
                  CURRENCY_CODE,
                  EXCHANGE_RATE;


      INSERT INTO GL_BALANCES_SUBLEDGER_T (ORG_ID,
                                           BRANCH_ID,
                                           FISCAL_YEAR,
                                           PERIOD_NO,
                                           COST_CENTER_CODE,
                                           COA_CODE,
                                           CURRENCY_CODE,
                                           SL_TYPE,
                                           SL_CODE,
                                           DEBIT_BASE_CURR,
                                           CREDIT_BASE_CURR,
                                           DEBIT_FOREIGN_CURR,
                                           CREDIT_FOREIGN_CURR,
                                           CREATED_BY,
                                           CREATION_DATE,
                                           EXCHANGE_RATE)
           SELECT ORG_ID,
                  BRANCH_ID,
                  LV_NEXT_FISCAL_YEAR FISCAL_YEAR,
                  0 PERIOD_NO,
                  COST_CENTER_CODE,
                  LV_RETAINED_EARNING_COA COA_CODE,
                  CURRENCY_CODE,
                  SL_TYPE,
                  SL_CODE,
                  SUM (DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                  SUM (CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                  SUM (DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                  SUM (CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                  'ADMIN',
                  SYSDATE,
                  EXCHANGE_RATE
             FROM (  SELECT wht.ORG_ID,
                            wht.BRANCH_ID,
                            SLDT.COST_CENTER_CODE,
                            NVL (SLDT.CURRENCY_CODE, 'PKR') CURRENCY_CODE,
                            SLDT.SL_TYPE,
                            SLDT.SL_CODE,
                            SUM (SLDT.DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                            SUM (SLDT.CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                            SUM (SLDT.DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                            SUM (SLDT.CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                            1 EXCHANGE_RATE
                       FROM GL_VOUCHER_HEADER_T wht
                            INNER JOIN GL_SUB_LEDGER_DETAIL_T SLDT
                               ON     SLDT.ORG_ID = wht.org_id
                                  AND SLDT.BRANCH_ID = WHT.BRANCH_ID
                                  AND SLDT.VOUCHER_TYPE = WHT.VOUCHER_TYPE
                                  AND SLDT.FISCAL_YEAR = wht.FISCAL_YEAR
                                  AND SLDT.VOUCHER_NO = wht.VOUCHER_NO
                            INNER JOIN CHART_OF_ACCOUNT_GL_T COA
                               ON (    SLDT.ORG_ID = COA.org_id
                                   AND SLDT.COA_CODE = COA.COA_CODE)
                      WHERE     wht.ORG_ID = P_ORG_ID
                            AND wht.FISCAL_YEAR = P_FISCAL_YEAR
                            AND (   NVL (COA_NATURE, 'N') <> 'BS'
                                 OR coa.COA_CODE = LV_RETAINED_EARNING_COA)
                            AND NVL (WHT.VOUCHER_STATUS, 'N') = 'A'
                   GROUP BY wht.ORG_ID,
                            wht.BRANCH_ID,
                            SLDT.COST_CENTER_CODE,
                            NVL (SLDT.CURRENCY_CODE, 'PKR'),
                            SLDT.SL_TYPE,
                            SLDT.SL_CODE
                   UNION ALL
                   SELECT ORG_ID,
                          BRANCH_ID,
                          COST_CENTER_CODE,
                          CURRENCY_CODE,
                          SL_TYPE,
                          SL_CODE,
                          DEBIT_BASE_CURR,
                          CREDIT_BASE_CURR,
                          DEBIT_FOREIGN_CURR,
                          CREDIT_FOREIGN_CURR,
                          EXCHANGE_RATE
                     FROM GL_BALANCES_SUBLEDGER_T
                    WHERE     ORG_ID = P_ORG_ID
                          AND FISCAL_YEAR = P_FISCAL_YEAR
                          AND period_no = 0
                          AND COA_CODE = LV_RETAINED_EARNING_COA) tab
         GROUP BY ORG_ID,
                  BRANCH_ID,
                  COST_CENTER_CODE,
                  CURRENCY_CODE,
                  SL_TYPE,
                  SL_CODE,
                  EXCHANGE_RATE;


      -- insert balances of next year from dimension table to header table
      INSERT INTO GL_BALANCES_HEADER_T (ORG_ID,
                                        BRANCH_ID,
                                        FISCAL_YEAR,
                                        PERIOD_NO,
                                        COST_CENTER_CODE,
                                        COA_CODE,
                                        CURRENCY_CODE,
                                        DEBIT_BASE_CURR,
                                        CREDIT_BASE_CURR,
                                        DEBIT_FOREIGN_CURR,
                                        CREDIT_FOREIGN_CURR,
                                        CREATED_BY,
                                        CREATION_DATE,
                                        EXCHANGE_RATE)
           SELECT ORG_ID,
                  BRANCH_ID,
                  FISCAL_YEAR,
                  PERIOD_NO,
                  COST_CENTER_CODE,
                  COA_CODE,
                  CURRENCY_CODE,
                  SUM (DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                  SUM (CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                  SUM (DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                  SUM (CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                  'ADMIN' CREATED_BY,
                  SYSDATE CREATION_DATE,
                  EXCHANGE_RATE
             FROM GL_BALANCES_DIMENSIONS_T
            WHERE     ORG_ID = P_ORG_ID
                  AND FISCAL_YEAR = LV_NEXT_FISCAL_YEAR
                  AND period_no = 0
         GROUP BY ORG_ID,
                  BRANCH_ID,
                  FISCAL_YEAR,
                  PERIOD_NO,
                  COST_CENTER_CODE,
                  COA_CODE,
                  CURRENCY_CODE,
                  EXCHANGE_RATE;


      COMMIT;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line ('error is ' || SQLERRM);
END;
/

prompt
prompt Creating procedure GAINLOSSDAILYPROCESSPOLICY
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE GainLossDailyProcessPolicy (
   P_ORG_ID             VARCHAR2,
   P_POLICY_NO          VARCHAR2,
   P_ALLOCATION_TYPE    NUMBER,
   P_PMD_YEAR           NUMBER,
   P_FUND_CODE          NUMBER)
AS
   LD_PROCESS_DATE            DATE;
   LD_CURRENT_DATE            DATE := TRUNC (SYSDATE);
   LN_LASTDAY_CLOSING_UNITS   NUMBER;
   LN_CURRENT_BID_PRICE       NUMBER;
   LN_LAST_DAY_BID_PRICE      NUMBER;
   LV_PRICE_TYPE              VARCHAR2 (1);
   LN_OFFER_SPREAD_RATE       NUMBER;
   lc_cost_center_code        VARCHAR2 (20);

   LC_CURRENCY_CODE           VARCHAR2 (10);
   LC_BU                      VARCHAR2 (300 BYTE);
   LC_LOB                     VARCHAR2 (300 BYTE);
   LC_LOCATION                VARCHAR2 (20);
   LN_CHANNEL                 NUMBER;
   LN_AGENT                   NUMBER;
   LN_BRANCH_ID               NUMBER;
BEGIN
   SELECT f.price_type
     INTO LV_PRICE_TYPE
     FROM FUND_SETUP_T F
    WHERE F.ORG_ID = P_ORG_ID AND F.FUND_CODE = P_FUND_CODE;

   SELECT dh.COST_CENTER_CODE,
          DH.CURRENCY_CODE,
          AGENT_BRANCH_ID,
          CHANNEL_ID,
          AGENT_ID,
          LOC.BU,
          APP.LOB,
          DH.BRANCH_ID
     INTO lc_cost_center_code,
          LC_CURRENCY_CODE,
          LC_LOCATION,
          LN_CHANNEL,
          LN_AGENT,
          LC_BU,
          LC_LOB,
          LN_BRANCH_ID
     FROM IL_DOC_HEADER_T DH
          INNER JOIN SM_APPLICATION_LOB_MAP_T APP
             ON     APP.ORG_ID = DH.ORG_ID
                AND APP.APPLICATION_ID = DH.APPLICATION_ID
          INNER JOIN TK_BRANCH_SETUP_T LOC
             ON LOC.ORG_ID = DH.ORG_ID AND LOC.BRANCH_ID = DH.BRANCH_ID
    WHERE     DH.record_type = 'O'
          AND DH.DOCUMENT_TYPE = 'P'
          AND DH.ISSUE_COUNT = 1
          AND DH.ENDORSEMENT_NO = 0
          AND DH.ORG_ID = P_ORG_ID
          AND DH.MASTER_REF_NO = P_POLICY_NO;

   BEGIN
        SELECT PROCESS_DATE + 1
          INTO LD_PROCESS_DATE
          FROM IL_POLICYWISE_DAILY_GAINLOSS_T
         WHERE     ORG_ID = P_ORG_ID
               AND MASTER_REF_NO = P_POLICY_NO
               AND ALLOCATION_TYPE = P_ALLOCATION_TYPE
               AND FUND_CODE = P_FUND_CODE
      ORDER BY PROCESS_DATE DESC                      FETCH NEXT 1 ROWS ONLY
;


      SELECT P.OFFER_SPREAD_RATE
        INTO LN_OFFER_SPREAD_RATE
        FROM    IL_DOC_HEADER_T DH
             INNER JOIN
                GLAS_SUB_PRODUCT_SETUP_T p
             ON (    dh.ORG_ID = p.ORG_ID
                 AND dh.MAIN_PRODUCT_CODE = p.MAIN_PRODUCT_CODE
                 AND dh.SUB_PRODUCT_CODE = p.SUB_PRODUCT_CODE)
       WHERE     DH.record_type = 'O'
             AND DH.DOCUMENT_TYPE = 'P'
             AND DH.ISSUE_COUNT = 1
             AND DH.ENDORSEMENT_NO = 0
             AND DH.ORG_ID = P_ORG_ID
             AND DH.MASTER_REF_NO = P_POLICY_NO;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         SELECT MIN (trunc(TRANSACTION_DATE)), MIN (P.OFFER_SPREAD_RATE)
           INTO LD_PROCESS_DATE, LN_OFFER_SPREAD_RATE
           FROM IL_DOC_HEADER_T DH
                INNER JOIN GLAS_SUB_PRODUCT_SETUP_T p
                   ON (    dh.ORG_ID = p.ORG_ID
                       AND dh.MAIN_PRODUCT_CODE = p.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = p.SUB_PRODUCT_CODE)
                INNER JOIN IL_DOC_ALLOC_DTL_BREAKUP_T A
                   ON (    dh.ORG_ID = A.ORG_ID
                       AND dh.BRANCH_ID = A.BRANCH_ID
                       AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                       AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                       AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                       AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                       AND dh.RECORD_TYPE = A.RECORD_TYPE
                       AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                       AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                       AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                       AND dh.APPLICATION_ID = A.APPLICATION_ID)
          WHERE     DH.record_type = 'O'
                AND DH.DOCUMENT_TYPE = 'P'
                AND DH.ISSUE_COUNT = 1
                AND DH.ENDORSEMENT_NO = 0
                AND DH.ORG_ID = P_ORG_ID
                AND DH.MASTER_REF_NO = P_POLICY_NO
                AND A.ALLOCATION_TYPE = P_ALLOCATION_TYPE
                AND A.FUND_CODE = P_FUND_CODE
                AND A.unit_process_date IS NOT NULL
                AND DH.REVISED_TAG IS NULL
                AND trunc(TRANSACTION_DATE) < LD_CURRENT_DATE;
   END;

   WHILE (LD_PROCESS_DATE < LD_CURRENT_DATE)
   LOOP
      -- check curent bid price
      BEGIN
         SELECT BID_PRICE
           INTO LN_CURRENT_BID_PRICE
           FROM IL_FUND_PRICE_HISTORY_T
          WHERE     ORG_ID = P_ORG_ID
                AND FUND_CODE = P_FUND_CODE
                AND trunc(TRANSACTION_DATE) = LD_PROCESS_DATE;

         BEGIN
            SELECT NVL (SUM (NVL (NO_OF_UNITS, 0)), 0)
              INTO LN_LASTDAY_CLOSING_UNITS
              FROM    IL_DOC_HEADER_T DH
                   INNER JOIN
                      IL_DOC_ALLOC_DTL_BREAKUP_T A
                   ON (    dh.ORG_ID = A.ORG_ID
                       AND dh.BRANCH_ID = A.BRANCH_ID
                       AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                       AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                       AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                       AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                       AND dh.RECORD_TYPE = A.RECORD_TYPE
                       AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                       AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                       AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                       AND dh.APPLICATION_ID = A.APPLICATION_ID)
             WHERE     DH.record_type = 'O'
                   AND DH.DOCUMENT_TYPE = 'P'
                   AND DH.ISSUE_COUNT = 1
                   AND DH.ENDORSEMENT_NO = 0
                   AND DH.ORG_ID = P_ORG_ID
                   AND DH.MASTER_REF_NO = P_POLICY_NO
                   AND A.ALLOCATION_TYPE = P_ALLOCATION_TYPE
                   AND A.FUND_CODE = P_FUND_CODE
                   AND A.unit_process_date IS NOT NULL
                   AND DH.REVISED_TAG IS NULL
                   AND trunc(TRANSACTION_DATE) <= LD_PROCESS_DATE - 1;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LN_LASTDAY_CLOSING_UNITS := 0;
         END;

         BEGIN
            SELECT BID_PRICE
              INTO LN_LAST_DAY_BID_PRICE
              FROM IL_FUND_PRICE_HISTORY_T
             WHERE     ORG_ID = P_ORG_ID
                   AND FUND_CODE = P_FUND_CODE
                   AND trunc(TRANSACTION_DATE) = LD_PROCESS_DATE - 1;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LN_LAST_DAY_BID_PRICE := 0;
         END;

         LN_CURRENT_BID_PRICE :=
            CASE
               WHEN LV_PRICE_TYPE = 'O'
               THEN
                  NVL (LN_CURRENT_BID_PRICE, 0) * (1 - LN_OFFER_SPREAD_RATE)
               ELSE
                  NVL (LN_CURRENT_BID_PRICE, 0)
            END;

         LN_LAST_DAY_BID_PRICE :=
            CASE
               WHEN LV_PRICE_TYPE = 'O'
               THEN
                  NVL (LN_LAST_DAY_BID_PRICE, 0) * (1 - LN_OFFER_SPREAD_RATE)
               ELSE
                  NVL (LN_LAST_DAY_BID_PRICE, 0)
            END;

         INSERT INTO IL_POLICYWISE_DAILY_GAINLOSS_T (ORG_ID,
                                                     PROCESS_DATE,
                                                     MASTER_REF_NO,
                                                     PMD_YEAR,
                                                     ALLOCATION_TYPE,
                                                     FUND_CODE,
                                                     NO_OF_UNTS,
                                                     LAST_DAY_PRICE,
                                                     CURRENT_DAY_PRICE,
                                                     LAST_DAY_AMOUNT,
                                                     CURRENT_DAY_AMOUNT,
                                                     GAINLOSS_AMOUNT,
                                                     CREATION_DATE,
                                                     cost_center_code,
                                                     CURRENCY_CODE,
                                                     BU,
                                                     LOB,
                                                     LOCATION,
                                                     CHANNEL,
                                                     AGENT,
                                                     branch_id)
              VALUES (
                        P_ORG_ID,
                        LD_PROCESS_DATE,
                        P_POLICY_NO,
                        P_PMD_YEAR,
                        P_ALLOCATION_TYPE,
                        P_FUND_CODE,
                        LN_LASTDAY_CLOSING_UNITS,
                        LN_LAST_DAY_BID_PRICE,
                        LN_CURRENT_BID_PRICE,
                        LN_LASTDAY_CLOSING_UNITS * LN_LAST_DAY_BID_PRICE,
                        LN_LASTDAY_CLOSING_UNITS * LN_CURRENT_BID_PRICE,
                          LN_LASTDAY_CLOSING_UNITS * LN_CURRENT_BID_PRICE
                        - LN_LASTDAY_CLOSING_UNITS * LN_LAST_DAY_BID_PRICE,
                        SYSDATE,
                        lc_cost_center_code,
                        LC_CURRENCY_CODE,
                        LC_BU,
                        LC_LOB,
                        LC_LOCATION,
                        LN_CHANNEL,
                        LN_AGENT,
                        LN_BRANCH_ID);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LD_PROCESS_DATE := LD_CURRENT_DATE;
      --            LN_CURRENT_BID_PRICE := 0;
      END;



      LD_PROCESS_DATE := LD_PROCESS_DATE + 1;
   END LOOP;

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('ERROR IN GAIN LOSS POLICY PROCEDURE' ||SQLERRM);

END;
/

prompt
prompt Creating procedure GAINLOSSDAILYPROCESSVOUCHERS
prompt ===============================================
prompt
CREATE OR REPLACE PROCEDURE GainLossDailyProcessVouchers (
   P_ORG_ID VARCHAR2)
AS
   LD_CURRENT_DATE          DATE := TRUNC (SYSDATE);
   LD_PREVIOUS_DATE         DATE := TRUNC (SYSDATE);
   ln_new_vch_sr_no         NUMBER;
   ln_new_vchdtl_sr_no      NUMBER := 1;
   ln_new_vch_year          VARCHAR2 (10);
   ln_new_vch_month         VARCHAR2 (2);
   ln_new_vch_no            VARCHAR2 (10);
   ln_new_vch_ref_no        VARCHAR2 (50);
   lc_num_gen_query_param   VARCHAR2 (2000);
   lc_num_gen_query         VARCHAR2 (2000);
   lc_vch_type              VARCHAR2 (10) := 'JMFU';
   ln_voucher_pading        NUMBER;
   lc_num_gen_id            VARCHAR2 (50) := 'VOUCHER_NO';
   LC_detail_desc           VARCHAR2 (500);
   LC_COA_CODE              VARCHAR2 (50);
   LC_OFFSET_COA_CODE       VARCHAR2 (50) := '20201001';

   LN_DR_AMOUNT             NUMBER;
   LN_CR_AMOUNT             NUMBER;
   LN_DR_AMOUNT_TOTAL       NUMBER := 0;
   LN_BRANCH_ID             NUMBER;
   LN_FIRST_ITERATION       NUMBER := 0;

   CURSOR UNPOSTED_POLICIES_DATA
   IS
        SELECT G.ORG_ID,
               TRUNC (G.PROCESS_DATE) PROCESS_DATE,
               G.MASTER_REF_NO,
               G.PMD_YEAR,
               G.ALLOCATION_TYPE,
               A.TYPE_DESC ALLOCATION_TYPE_DESC,
               G.FUND_CODE,
               F.FUND_DESC,
               G.COST_CENTER_CODE,
               G.CURRENCY_CODE,
               G.BU,
               G.LOB,
               G.LOCATION,
               G.CHANNEL,
               G.AGENT,
               G.branch_id,
               G.NO_OF_UNTS,
               G.LAST_DAY_PRICE,
               G.CURRENT_DAY_PRICE,
               G.LAST_DAY_AMOUNT,
               G.CURRENT_DAY_AMOUNT,
               G.GAINLOSS_AMOUNT
          FROM IL_POLICYWISE_DAILY_GAINLOSS_T G
               INNER JOIN FUND_SETUP_T F
                  ON F.ORG_ID = G.ORG_ID AND F.FUND_CODE = G.FUND_CODE
               INNER JOIN IL_ALLOC_TYPE_SETUP_T A
                  ON A.ORG_ID = G.ORG_ID AND A.TYPE_CODE = G.ALLOCATION_TYPE
         WHERE POST_TAG IS NULL
      ORDER BY TRUNC (G.PROCESS_DATE), G.MASTER_REF_NO, G.FUND_CODE;
BEGIN
   lc_num_gen_query_param := get_num_gen_f (P_ORG_ID, lc_num_gen_id);

   SELECT NUMBER_LENGTH
     INTO ln_voucher_pading
     FROM NUM_GEN_SETUP_HD_T
    WHERE org_id = p_org_id AND numgen_id = lc_num_gen_id;



   FOR crow IN UNPOSTED_POLICIES_DATA
   LOOP
      lc_num_gen_query := lc_num_gen_query_param;
      LD_CURRENT_DATE := CROW.PROCESS_DATE;

      IF LD_CURRENT_DATE <> LD_PREVIOUS_DATE
      THEN
         -- UPDATE PREVIUOS ROW VOUCHER AMOUNT
         IF LN_FIRST_ITERATION <> 0
         THEN
            IF LN_DR_AMOUNT_TOTAL > 0
            THEN
               UPDATE GL_VOUCHER_HEADER_T
                  SET VOUCHER_AMOUNT = LN_DR_AMOUNT_TOTAL
                WHERE     ORG_ID = P_ORG_ID
                      AND BRANCH_ID = LN_BRANCH_ID
                      AND VOUCHER_TYPE = lc_vch_type
                      AND FISCAL_YEAR = ln_new_vch_year
                      AND VOUCHER_NO = ln_new_vch_no;
            ELSE
               DBMS_OUTPUT.PUT_LINE (
                  'INSIDE DELETE. DETAIL AMOUNT : ' || LN_DR_AMOUNT_TOTAL);

               DELETE FROM GL_VOUCHER_HEADER_T
                     WHERE     ORG_ID = P_ORG_ID
                           AND BRANCH_ID = LN_BRANCH_ID
                           AND VOUCHER_TYPE = lc_vch_type
                           AND FISCAL_YEAR = ln_new_vch_year
                           AND VOUCHER_NO = ln_new_vch_no;
            END IF;
         END IF;

         LN_FIRST_ITERATION := 1;
         LN_BRANCH_ID := crow.branch_id;

         -- get fiscal year of the vouche date;
         SELECT DISTINCT FISCAL_YEAR
           INTO ln_new_vch_year
           FROM GL_PERIOD_SETUP_T
          WHERE     org_id = P_ORG_ID
                AND crow.PROCESS_DATE BETWEEN TRUNC (FROM_DATE)
                                          AND TRUNC (TO_DATE);

         -- get month of the vouche date;
         ln_new_vch_month := TO_CHAR (crow.PROCESS_DATE, 'MM');

         lc_num_gen_query := REPLACE (lc_num_gen_query, ':0', P_ORG_ID);
         lc_num_gen_query := REPLACE (lc_num_gen_query, ':1', lc_vch_type);
         lc_num_gen_query := REPLACE (lc_num_gen_query, ':2', ln_new_vch_year);
         lc_num_gen_query :=
            REPLACE (lc_num_gen_query, ':3', ln_new_vch_month);

         --         DBMS_OUTPUT.PUT_LINE (lc_num_gen_query);

         EXECUTE IMMEDIATE lc_num_gen_query INTO ln_new_vch_sr_no;

         ln_new_vch_sr_no := ln_new_vch_sr_no + 1;
         ln_new_vch_no :=
               ln_new_vch_month
            || LPAD (ln_new_vch_sr_no, ln_voucher_pading, '0');
         ln_new_vch_ref_no :=
               lc_vch_type
            || '-'
            || ln_new_vch_no
            || '/'
            || ln_new_vch_month
            || '/'
            || ln_new_vch_year;

         INSERT INTO GL_VOUCHER_HEADER_T (ORG_ID,
                                          BRANCH_ID,
                                          VOUCHER_TYPE,
                                          FISCAL_YEAR,
                                          VOUCHER_NO,
                                          VOUCHER_DATE,
                                          VOUCHER_DESCRIPTION,
                                          VOUCHER_STATUS,
                                          VERIFIED_BY,
                                          VERIFIED_DATE,
                                          APPROVED_BY,
                                          APPROVAL_DATE,
                                          CREATED_BY,
                                          CREATION_DATE,
                                          MANUAL_TAG,
                                          VOUCHER_REF_NO)
              VALUES (P_ORG_ID,
                      crow.branch_id,
                      lc_vch_type,
                      ln_new_vch_year,
                      ln_new_vch_no,
                      LD_CURRENT_DATE,
                      'AUTO DAILY FUND REVALUAITON UNIT LINK PROCESS',
                      'A',
                      '5PLR.ADMIN',
                      SYSDATE,
                      '5PLR.ADMIN',
                      SYSDATE,
                      '5PLR.ADMIN',
                      SYSDATE,
                      'N',
                      ln_new_vch_ref_no);

         LN_DR_AMOUNT_TOTAL := 0;
         ln_new_vchdtl_sr_no := 1;
         LD_PREVIOUS_DATE := LD_CURRENT_DATE;
         DBMS_OUTPUT.put_line (' new vch header created ');
      END IF;

      LC_detail_desc :=
            CROW.MASTER_REF_NO
         || ' , '
         || CROW.ALLOCATION_TYPE_DESC
         || ' , '
         || CROW.FUND_DESC;
      LC_COA_CODE :=
         CASE
            WHEN CROW.ALLOCATION_TYPE = 2 THEN '60101048'
            WHEN CROW.PMD_YEAR = 1 THEN '60101045'
            WHEN CROW.PMD_YEAR = 2 THEN '60101046'
            ELSE '60101047'
         END;
      LN_DR_AMOUNT :=
         CASE
            WHEN CROW.GAINLOSS_AMOUNT >= 0
            THEN
               ROUND (CROW.GAINLOSS_AMOUNT, 2)
            ELSE
               0
         END;
      LN_CR_AMOUNT :=
         CASE
            WHEN CROW.GAINLOSS_AMOUNT < 0
            THEN
               ABS (ROUND (CROW.GAINLOSS_AMOUNT, 2))
            ELSE
               0
         END;

      IF LN_DR_AMOUNT + LN_CR_AMOUNT > 0
      THEN
         DBMS_OUTPUT.put_line (' new vch detail creating ');

         -- insert voucher detail rows
         INSERT INTO GL_VOUCHER_DETAIL_T (ORG_ID,
                                          BRANCH_ID,
                                          VOUCHER_TYPE,
                                          FISCAL_YEAR,
                                          VOUCHER_NO,
                                          DETAIL_SR_NO,
                                          COST_CENTER_CODE,
                                          ROW_DESCRIPTION,
                                          COA_CODE,
                                          DEBIT_BASE_CURR,
                                          CREDIT_BASE_CURR,
                                          CURRENCY_CODE,
                                          EXCHANGE_RATE,
                                          DEBIT_FOREIGN_CURR,
                                          CREDIT_FOREIGN_CURR,
                                          CREATED_BY,
                                          CREATION_DATE,
                                          POLICY_YEAR,
                                          POLICY_NO,
                                          ENDORSEMENT_NO,
                                          BU,
                                          LOB,
                                          LOCATION,
                                          CHANNEL,
                                          AGENT,
                                          SUBLEDGER_FLAG)
              VALUES (P_ORG_ID,
                      crow.branch_id,
                      lc_vch_type,
                      ln_new_vch_year,
                      ln_new_vch_no,
                      ln_new_vchdtl_sr_no,
                      crow.COST_CENTER_CODE,
                      LC_detail_desc,
                      LC_COA_CODE,
                      LN_DR_AMOUNT,
                      LN_CR_AMOUNT,
                      'PKR',
                      1,
                      LN_DR_AMOUNT,
                      LN_CR_AMOUNT,
                      '5PLR.ADMIN',
                      SYSDATE,
                      CROW.PMD_YEAR,
                      CROW.MASTER_REF_NO,
                      '0',
                      crow.bu,
                      crow.lob,
                      crow.location,
                      crow.channel,
                      crow.agent,
                      'N');

         DBMS_OUTPUT.put_line (' off set entry creating ');
         -- offset entry for each row
         ln_new_vchdtl_sr_no := ln_new_vchdtl_sr_no + 1;

         INSERT INTO GL_VOUCHER_DETAIL_T (ORG_ID,
                                          BRANCH_ID,
                                          VOUCHER_TYPE,
                                          FISCAL_YEAR,
                                          VOUCHER_NO,
                                          DETAIL_SR_NO,
                                          COST_CENTER_CODE,
                                          ROW_DESCRIPTION,
                                          COA_CODE,
                                          DEBIT_BASE_CURR,
                                          CREDIT_BASE_CURR,
                                          CURRENCY_CODE,
                                          EXCHANGE_RATE,
                                          DEBIT_FOREIGN_CURR,
                                          CREDIT_FOREIGN_CURR,
                                          CREATED_BY,
                                          CREATION_DATE,
                                          POLICY_YEAR,
                                          POLICY_NO,
                                          ENDORSEMENT_NO,
                                          BU,
                                          LOB,
                                          LOCATION,
                                          CHANNEL,
                                          AGENT,
                                          SUBLEDGER_FLAG)
              VALUES (P_ORG_ID,
                      crow.branch_id,
                      lc_vch_type,
                      ln_new_vch_year,
                      ln_new_vch_no,
                      ln_new_vchdtl_sr_no,
                      crow.COST_CENTER_CODE,
                      LC_detail_desc,
                      LC_OFFSET_COA_CODE,
                      LN_CR_AMOUNT,
                      LN_DR_AMOUNT,
                      'PKR',
                      1,
                      LN_CR_AMOUNT,
                      LN_DR_AMOUNT,
                      '5PLR.ADMIN',
                      SYSDATE,
                      CROW.PMD_YEAR,
                      CROW.MASTER_REF_NO,
                      '0',
                      crow.bu,
                      crow.lob,
                      crow.location,
                      crow.channel,
                      crow.agent,
                      'N');

         LN_DR_AMOUNT_TOTAL :=
            LN_DR_AMOUNT_TOTAL + LN_DR_AMOUNT + LN_CR_AMOUNT;
         DBMS_OUTPUT.put_line (' DR AMOUNT IS ' || LN_DR_AMOUNT);
         DBMS_OUTPUT.put_line (' CR AMOUNT IS ' || LN_CR_AMOUNT);
         DBMS_OUTPUT.put_line (' DR AMOUNT TOTAL IS ' || LN_DR_AMOUNT_TOTAL);

         ln_new_vchdtl_sr_no := ln_new_vchdtl_sr_no + 1;
      END IF;
   END LOOP;

   DBMS_OUTPUT.put_line (
      ' out side loop update amount on voucher else delete ');


   -- UPDATE PREVIUOS ROW VOUCHER AMOUNT
   IF LN_DR_AMOUNT_TOTAL > 0
   THEN
      UPDATE GL_VOUCHER_HEADER_T
         SET VOUCHER_AMOUNT = LN_DR_AMOUNT_TOTAL
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = LN_BRANCH_ID
             AND VOUCHER_TYPE = lc_vch_type
             AND FISCAL_YEAR = ln_new_vch_year
             AND VOUCHER_NO = ln_new_vch_no;
   ELSE
      DELETE FROM GL_VOUCHER_HEADER_T
            WHERE     ORG_ID = P_ORG_ID
                  AND BRANCH_ID = LN_BRANCH_ID
                  AND VOUCHER_TYPE = lc_vch_type
                  AND FISCAL_YEAR = ln_new_vch_year
                  AND VOUCHER_NO = ln_new_vch_no;
   END IF;

   UPDATE IL_POLICYWISE_DAILY_GAINLOSS_T
      SET POST_TAG = 'Y', POST_DATE = SYSDATE
    WHERE POST_TAG IS NULL;

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE (
            'ERROR IN GAIN LOSS VOUCHER PROCEDURE'
         || SQLERRM
         || ' in VCH '
         || ln_new_vch_no);
END;
/

prompt
prompt Creating procedure GAINLOSSDAILYPROCESS
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE GainLossDailyProcess (P_ORG_ID VARCHAR2)
AS
   LD_CURRENT_DATE   DATE := TRUNC (SYSDATE);

   CURSOR ACTIVE_POLICIES_DATA
   IS
        SELECT MASTER_REF_NO,
               FUND_CODE,
               A.ALLOCATION_TYPE,
               MAX (AH.POLICY_YEAR) PMD_YEAR
          FROM IL_DOC_HEADER_T DH
               INNER JOIN IL_DOC_ALLOC_DTL_BREAKUP_T A
                  ON (    dh.ORG_ID = A.ORG_ID
                      AND dh.BRANCH_ID = A.BRANCH_ID
                      AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                      AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                      AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                      AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                      AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                      AND dh.RECORD_TYPE = A.RECORD_TYPE
                      AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                      AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                      AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                      AND dh.APPLICATION_ID = A.APPLICATION_ID)
               INNER JOIN IL_DOC_ALLOCATIONHD_T AH
                  ON (    Ah.ORG_ID = A.ORG_ID
                      AND Ah.BRANCH_ID = A.BRANCH_ID
                      AND Ah.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                      AND Ah.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                      AND Ah.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                      AND Ah.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                      AND Ah.DOCUMENT_NO = A.DOCUMENT_NO
                      AND Ah.RECORD_TYPE = A.RECORD_TYPE
                      AND Ah.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                      AND Ah.ISSUE_COUNT = A.ISSUE_COUNT
                      AND Ah.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                      AND Ah.APPLICATION_ID = A.APPLICATION_ID
                      AND Ah.ALLOCATION_TYPE = A.ALLOCATION_TYPE
                      AND Ah.ALLOCATION_ID = A.ALLOCATION_ID)
         WHERE     DH.ORG_ID = P_ORG_ID
               AND a.record_type = 'O'
               AND DH.DOC_REFERENCE_KEY IS NOT NULL
               AND DH.REVISED_TAG IS NULL
               AND A.ISSUE_COUNT = 1
               AND A.ENDORSEMENT_NO = 0
               AND TRUNC (a.unit_process_date) <= LD_CURRENT_DATE - 1
      GROUP BY MASTER_REF_NO, FUND_CODE, A.ALLOCATION_TYPE
        HAVING SUM (ROUND (NVL (NO_OF_UNITS, 0), 6)) > 0
      ORDER BY MASTER_REF_NO, FUND_CODE, A.ALLOCATION_TYPE;
BEGIN
   FOR CROW IN ACTIVE_POLICIES_DATA
   LOOP
      GainLossDailyProcessPolicy (P_ORG_ID,
                                  CROW.MASTER_REF_NO,
                                  CROW.ALLOCATION_TYPE,
                                  CROW.PMD_YEAR,
                                  CROW.FUND_CODE);
   END LOOP;


   GainLossDailyProcessVouchers (P_ORG_ID);
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.PUT_LINE ('ERROR IN GAIN LOSS MAIN PROCEDURE' || SQLERRM);
END;
/

prompt
prompt Creating procedure GENERATE_CASHBACK_TABLE_P
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE GENERATE_CASHBACK_TABLE_P (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_basic_contribution   NUMBER;
   ln_POLICY_TERM          NUMBER;
BEGIN
   BEGIN
      -- get basic details from illustration header
      SELECT   NVL (BASIC_CONTRIBUTION_MODAL, 0)
             * CASE PAYMENT_MODE
                  WHEN 'A' THEN 1
                  WHEN 'H' THEN 2
                  WHEN 'Q' THEN 4
                  WHEN 'M' THEN 12
                  ELSE 1
               END
                AS TOTAL_CONTRIBUTION,
             POLICY_TERM
        INTO ln_basic_contribution, ln_POLICY_TERM
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND APPLICATION_ID = P_APPLICATION_ID
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND (NVL (payment_term, 0) > 1 OR NVL (payment_mode, 'n') <> 'A');
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_POLICY_TERM := 0;
   END;

   BEGIN
      DELETE FROM TK_ILLUST_CASHBACK_POS_T
            WHERE     ORG_ID = P_ORG_ID
                  AND BRANCH_ID = P_BRANCH_ID
                  AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                  AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                  AND DOCUMENT_NO = P_DOCUMENT_NO
                  AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
                  AND APPLICATION_ID = P_APPLICATION_ID
                  AND ISSUE_COUNT = P_ISSUE_COUNT;

      INSERT INTO TK_ILLUST_CASHBACK_POS_T (ORG_ID,
                                            BRANCH_ID,
                                            MAIN_PRODUCT_CODE,
                                            SUB_PRODUCT_CODE,
                                            DOCUMENT_NO,
                                            DOCUMENT_YEAR,
                                            APPLICATION_ID,
                                            ISSUE_COUNT,
                                            POLICY_YEAR,
                                            CASHBACK_PERCENT,
                                            CASHBACK_AMOUNT)
         SELECT P_ORG_ID,
                P_BRANCH_ID,
                P_MAIN_PRODUCT_CODE,
                P_SUB_PRODUCT_CODE,
                P_DOCUMENT_NO,
                P_DOCUMENT_YEAR,
                P_APPLICATION_ID,
                P_ISSUE_COUNT,
                RTD.POLICY_YEAR,
                NVL (RTD.RATE, 0),
                ROUND (NVL (RTD.RATE, 0) / 100 * ln_basic_contribution, 2)
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 10
                AND ln_POLICY_TERM >= RTB.VAL_FROM
                AND ln_POLICY_TERM <= RTB.VAL_TO;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_POLICY_TERM := 0;
   END;

   COMMIT;
END;
/

prompt
prompt Creating procedure UPDATE_ILLUST_CV_MONTH_TOPUP_P
prompt =================================================
prompt
CREATE OR REPLACE PROCEDURE UPDATE_ILLUST_CV_MONTH_TOPUP_P (P_ORG_ID                  NUMBER,
                                          P_BRANCH_ID               NUMBER,
                                          P_MAIN_PRODUCT_CODE       NUMBER,
                                          P_SUB_PRODUCT_CODE        NUMBER,
                                          P_ISSUE_COUNT             NUMBER,
                                          P_DOCUMENT_NO             VARCHAR2,
                                          P_DOCUMENT_YEAR           NUMBER,
                                          P_APPLICATION_ID          NUMBER,
                                          P_ILLUSTRATION_ID         NUMBER,
                                          P_IMC_RATE                NUMBER,
                                          P_POLICY_TERM             NUMBER,
                                          P_BID_RATE                NUMBER,
                                          P_MASTER_REF_NO_POLICY    VARCHAR2,
                                          p_max_policy_month        NUMBER)
AS
   ln_policy_year                   NUMBER;
   ln_topup_allocation_percentage   NUMBER;

   ln_topup_contribution            NUMBER;
   ln_allocated_contribution        NUMBER;
   ln_topup_commulative             NUMBER;
   ln_bid_offer                     NUMBER;

   ln_net_value1                    NUMBER;
   ln_net_value2                    NUMBER;
   ln_net_value3                    NUMBER;
   ln_cashvalue1                    NUMBER;
   ln_cashvalue2                    NUMBER;
   ln_cashvalue3                    NUMBER;

   ln_cashvalue_current             NUMBER;

   ln_investment_income1            NUMBER;
   ln_im_charges1                   NUMBER;

   ln_investment_income2            NUMBER;
   ln_im_charges2                   NUMBER;

   ln_investment_income3            NUMBER;
   ln_im_charges3                   NUMBER;

   Ln_month                         NUMBER := 1;
   ln_iterator                      NUMBER := 1;
   ln_inflation_rate2               NUMBER;
   ln_nominal_rate2                 NUMBER;
   ln_inflation_factor              NUMBER;

   ln_topup_inflation_adj_contri    NUMBER;
   ln_topup_inflation_accum_cont    NUMBER;

   lc_projection_tag                VARCHAR2 (1);
   ln_curr_policy_year              NUMBER := 0;
   ln_ill_current_month             NUMBER;


   CURSOR C1
   IS
      SELECT ROWNUM ROW_NUMBER, a.*
        FROM (  SELECT RATE
                  FROM TK_NOMINAL_RATE_SETUP_T
                 WHERE ORG_ID = P_ORG_ID AND EFFECTIVE_END_DATE IS NULL
              ORDER BY RATE) a;
BEGIN
   ln_cashvalue1 := 0;
   ln_cashvalue2 := 0;
   ln_cashvalue3 := 0;
   ln_curr_policy_year := CEIL (p_max_policy_month / 12);

   SELECT RATE
     INTO ln_inflation_rate2
     FROM (SELECT ROWNUM RATE_ID, a.RATE
             FROM (  SELECT RATE
                       FROM TK_INFLATION_RATE_SETUP_T
                      WHERE ORG_ID = P_ORG_ID AND EFFECTIVE_END_DATE IS NULL
                   ORDER BY RATE) a) TAB
    WHERE RATE_ID = 2;

   --    SELECT RATE into ln_nominal_rate2
   --    FROM (select rownum RATE_ID, a.RATE from (SELECT RATE  FROM TK_NOMINAL_RATE_SETUP_T WHERE ORG_ID=P_ORG_ID  AND EFFECTIVE_END_DATE IS NULL  ORDER BY RATE)a
   --         )TAB
   --    where RATE_ID=2;

   --    SELECT RATE into ln_inflation_rate2 FROM TK_INFLATION_RATE_SETUP_T where ORG_ID= P_ORG_ID and RATE_ID=2;
   --
   --    SELECT RATE into ln_nominal_rate2 FROM TK_NOMINAL_RATE_SETUP_T where ORG_ID= P_ORG_ID and RATE_ID=2;

   --    commented below formula for inflation
   --    ln_inflation_factor := round( ( (1 + ln_nominal_rate2/100) / ( 1 + ln_inflation_rate2/100)) -1 ,8);
   ln_inflation_factor := ln_inflation_rate2 / 100;

   ln_policy_year := 1;
   ln_topup_inflation_accum_cont := 0;
   ln_ill_current_month := 1;


   SELECT NVL (TOPUP_ALLOCATION, 100) / 100
     INTO ln_topup_allocation_percentage
     FROM GLAS_SUB_PRODUCT_SETUP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE;

   WHILE ln_policy_year <= p_policy_term
   LOOP
      IF Ln_month > 12
      THEN
         Ln_month := 1;
      END IF;

      BEGIN
         SELECT NVL (FAP_AMOUNT, 0)
           INTO ln_topup_contribution
           FROM TK_ILL_POS_FAP
          WHERE     ORG_ID = P_ORG_ID
                AND BRANCH_ID = P_BRANCH_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND DOCUMENT_NO = P_DOCUMENT_NO
                AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND APPLICATION_ID = P_APPLICATION_ID
                AND ISSUE_COUNT = P_ISSUE_COUNT
                AND FAP_YEAR = ln_policy_year;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_topup_contribution := 0;
      END;

      ln_allocated_contribution :=
         ln_topup_contribution * ln_topup_allocation_percentage;
      ln_bid_offer := ln_allocated_contribution * P_bid_rate;
      ln_topup_commulative :=
         NVL (ln_topup_commulative, 0) + ln_topup_contribution;
      ln_topup_inflation_adj_contri := 0;

      WHILE Ln_month <= 12
      LOOP
         IF ln_ill_current_month < p_max_policy_month
         THEN
            ln_cashvalue1 := 0;
            ln_cashvalue2 := 0;
            ln_cashvalue3 := 0;

            ln_topup_inflation_adj_contri :=
               ROUND (
                    ln_topup_contribution
                  / POWER ( (1 + ln_inflation_factor),
                           (ln_iterator - 1) / 12),
                  6);
         ELSIF ln_ill_current_month = p_max_policy_month
         THEN
            ln_cashvalue1 :=
               get_policy_cashvalue_f (P_ORG_ID,
                                       P_MASTER_REF_NO_POLICY,
                                       2,
                                       TRUNC (SYSDATE));
            ln_cashvalue2 := ln_cashvalue1;
            ln_cashvalue3 := ln_cashvalue1;

            ln_topup_inflation_adj_contri :=
               ROUND (
                    ln_topup_contribution
                  / POWER ( (1 + ln_inflation_factor),
                           (ln_iterator - 1) / 12),
                  6);
         ELSE
            FOR CROW IN C1
            LOOP
               IF crow.ROW_NUMBER = 1
               THEN
                  ln_net_value1 :=
                     ln_cashvalue1 + ln_allocated_contribution - ln_bid_offer;
                  --                      ln_investment_income1   := ( ( ln_net_value1) * crow.rate/100 ) /12;
                  ln_investment_income1 :=
                     ROUND (
                          ln_net_value1
                        * (ROUND (POWER (1 + crow.rate / 100, 1 / 12) - 1, 8)),
                        6);

                  ln_net_value1 := ln_net_value1 + ln_investment_income1;
                  ln_im_charges1 :=
                     ROUND ( (ln_net_value1 * p_imc_rate) / 12, 6);

                  ln_cashvalue1 := ROUND (ln_net_value1 - ln_im_charges1, 6);

                  ln_net_value1 := ln_net_value1 - ln_investment_income1;
               ELSIF crow.ROW_NUMBER = 2
               THEN
                  ln_net_value2 :=
                     ln_cashvalue2 + ln_allocated_contribution - ln_bid_offer;
                  --                      ln_investment_income2   :=  (( ln_net_value2) * crow.rate/100) / 12;
                  ln_investment_income2 :=
                     ROUND (
                          ln_net_value2
                        * (ROUND (POWER (1 + crow.rate / 100, 1 / 12) - 1, 8)),
                        6);

                  ln_net_value2 := ln_net_value2 + ln_investment_income2;
                  ln_im_charges2 :=
                     ROUND ( (ln_net_value2 * p_imc_rate) / 12, 6);

                  ln_cashvalue2 := ROUND (ln_net_value2 - ln_im_charges2, 6);

                  ln_net_value2 := ln_net_value2 - ln_investment_income2;

                  ln_topup_inflation_adj_contri :=
                     ROUND (
                          ln_topup_contribution
                        / POWER ( (1 + ln_inflation_factor),
                                 (ln_iterator - 1) / 12),
                        6);
               ELSIF crow.ROW_NUMBER = 3
               THEN
                  ln_net_value3 :=
                     ln_cashvalue3 + ln_allocated_contribution - ln_bid_offer;
                  --                      ln_investment_income3   := ( ( ln_net_value3) * crow.rate/100 ) / 12;
                  ln_investment_income3 :=
                     ROUND (
                          ln_net_value3
                        * (ROUND (POWER (1 + crow.rate / 100, 1 / 12) - 1, 8)),
                        6);

                  ln_net_value3 := ln_net_value3 + ln_investment_income3;
                  ln_im_charges3 :=
                     ROUND ( (ln_net_value3 * p_imc_rate) / 12, 6);

                  ln_cashvalue3 := ROUND (ln_net_value3 - ln_im_charges3, 6);

                  ln_net_value3 := ln_net_value3 - ln_investment_income3;
               END IF;
            END LOOP;
         END IF;

         ln_topup_inflation_accum_cont :=
            ln_topup_inflation_accum_cont + ln_topup_inflation_adj_contri;

         UPDATE TK_ILLUSTRATIONDTL_MONTHLY_T
            SET topup_contributon = ln_topup_contribution,
                topup_allocation_contribution = ln_allocated_contribution,
                topup_Cumulative = ln_topup_commulative,
                topup_cash_value1 = ln_cashvalue1,
                topup_cash_value2 = ln_cashvalue2,
                topup_cash_value3 = ln_cashvalue3,
                topup_bid_offer = ln_bid_offer,
                topup_net_investment1 = ln_net_value1,
                topup_investment_income1 = ln_investment_income1,
                topup_im_charges1 = ln_im_charges1,
                topup_net_investment2 = ln_net_value2,
                topup_investment_income2 = ln_investment_income2,
                topup_im_charges2 = ln_im_charges2,
                topup_net_investment3 = ln_net_value3,
                topup_investment_income3 = ln_investment_income3,
                topup_im_charges3 = ln_im_charges3,
                TOPUP_INFLATION_ADJ_CONTRI = ln_topup_inflation_adj_contri,
                TOPUP_INFLATION_ACCUMU_CONTRI = ln_topup_inflation_accum_cont
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND DOCUMENT_NO = P_DOCUMENT_NO
                AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND ISSUE_COUNT = P_ISSUE_COUNT
                AND APPLICATION_ID = P_APPLICATION_ID
                AND ILLUSTRATION_ID = P_ILLUSTRATION_ID
                AND policy_year = ln_policy_year
                AND policy_month = ln_month
                AND BRANCH_ID = P_BRANCH_ID;

         ln_allocated_contribution := 0;
         ln_topup_contribution := 0;
         ln_bid_offer := 0;
         Ln_month := Ln_month + 1;
         ln_iterator := ln_iterator + 1;
         ln_ill_current_month := ln_ill_current_month + 1;
      END LOOP;

      ln_policy_year := ln_policy_year + 1;
   END LOOP;

   COMMIT;
END;
/

prompt
prompt Creating procedure UPDATE_ILLUST_CV_MONTHLY_P
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE UPDATE_ILLUST_CV_MONTHLY_P(
P_ORG_ID NUMBER,
P_BRANCH_ID NUMBER,
           P_MAIN_PRODUCT_CODE NUMBER,
           P_SUB_PRODUCT_CODE NUMBER,
           P_ISSUE_COUNT NUMBER,
           P_DOCUMENT_NO VARCHAR2,
           P_DOCUMENT_YEAR NUMBER,
           P_APPLICATION_ID NUMBER,
           P_ILLUSTRATION_ID NUMBER

) as
ln_policy_year number;
ln_policy_term number;
ln_sum_covered number;
ln_admin_charges number;
ln_allocated_contribution number;
ln_Indexation_sumassured_rate number;
ln_mortality_rate1 number;

ln_bid_rate number;
ln_bid_offer number;
ln_imc_rate number;

ln_net_value number;
ln_cashvalue1 number;
ln_cashvalue2 number;
ln_cashvalue3 number;

ln_sum_assured_at_risk1 number;
ln_mortality_charges1 number;
ln_investment_income1 number;
ln_im_charges1 number;

ln_sum_assured_at_risk2 number;
ln_mortality_charges2 number;
ln_investment_income2 number;
ln_im_charges2 number;

ln_sum_assured_at_risk3 number;
ln_mortality_charges3 number;
ln_investment_income3 number;
ln_im_charges3 number;
ln_inflation_adj_contribution number;
ln_inflation_accumulated_cont number;
ln_basic_contribution number;
ln_benefit_code number;
Ln_month number :=1;
ln_iterator number :=1;
ln_inflation_rate2 number;
ln_nominal_rate2 number;
ln_inflation_factor number;
lc_converted_proposal_no varchar2(50);
lc_converted_policy_no varchar2(50);
lc_master_ref_no_policy varchar2(50):='N';

lc_projection_tag varchar2(1);
ln_max_policy_month number:=0;
ln_ill_current_month number;
ld_illustration_date            DATE;

CURSOR C1 IS
select rownum row_number, a.* from (SELECT RATE  FROM TK_NOMINAL_RATE_SETUP_T WHERE ORG_ID=P_ORG_ID  AND EFFECTIVE_END_DATE IS NULL  ORDER BY RATE)a; 

BEGIN

    ln_cashvalue1 :=0;
    ln_cashvalue2 :=0;
    ln_cashvalue3 :=0;

    SELECT RATE  INTO ln_inflation_rate2 
    FROM (select rownum RATE_ID, a.RATE from (SELECT RATE  FROM TK_INFLATION_RATE_SETUP_T WHERE ORG_ID=P_ORG_ID  AND EFFECTIVE_END_DATE IS NULL  ORDER BY RATE)a 
         )TAB 
    where RATE_ID=2;

--    SELECT RATE into ln_nominal_rate2 
--    FROM (select rownum RATE_ID, a.RATE from (SELECT RATE  FROM TK_NOMINAL_RATE_SETUP_T WHERE ORG_ID=P_ORG_ID  AND EFFECTIVE_END_DATE IS NULL  ORDER BY RATE)a 
--         )TAB  
--    where RATE_ID=2;

    ln_inflation_factor := ln_inflation_rate2/100;
--    commented below formula for inflation 
--    ln_inflation_factor := round( ( (1 + ln_nominal_rate2/100) / ( 1 + ln_inflation_rate2/100)) -1 ,8);

    -- Get Main Plan ( basic benefit) code
    SELECT
       BENEFIT_CODE INTO LN_BENEFIT_CODE
    FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    where ORG_ID         = P_ORG_ID
    and  MAIN_PRODUCT_CODE    = P_MAIN_PRODUCT_CODE
    and SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
    and MAPPING_TYPE='B';

    select policy_term ,bid_offer,SUM_COVERED ,NVL(SUM_COVERED_INDEX,0), NVL(PROJECTION_TAG,'N')  ,TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE)) 
    into ln_policy_term,ln_bid_rate, ln_sum_covered ,  ln_Indexation_sumassured_rate,lc_projection_tag ,ld_illustration_date
    from TK_ILLUSTRATIONHD_POS
    where ORG_ID         = P_ORG_ID
    AND BRANCH_ID=P_BRANCH_ID
    and  MAIN_PRODUCT_CODE    = P_MAIN_PRODUCT_CODE
    and SUB_PRODUCT_CODE   = P_SUB_PRODUCT_CODE
    AND DOCUMENT_NO=P_DOCUMENT_NO
    and DOCUMENT_YEAR=P_DOCUMENT_YEAR
    and APPLICATION_ID= P_APPLICATION_ID
    AND ISSUE_COUNT=P_ISSUE_COUNT
    ;


    -- if policy already created and projection / alteration illustration is called
    if lc_projection_tag='Y' or lc_projection_tag='A'  then 

        BEGIN
            select DISTINCT nvl(CONVERTED_DOC_NO,'N')
            into lc_converted_proposal_no
            from TK_ILLUSTRATIONHD_POS
            where ORG_ID         = P_ORG_ID
            AND BRANCH_ID=P_BRANCH_ID
            and  MAIN_PRODUCT_CODE    = P_MAIN_PRODUCT_CODE
            and SUB_PRODUCT_CODE   = P_SUB_PRODUCT_CODE
            AND DOCUMENT_NO=P_DOCUMENT_NO
            and DOCUMENT_YEAR=P_DOCUMENT_YEAR
            and APPLICATION_ID= P_APPLICATION_ID
            AND CONVERTED_DOC_NO IS NOT NULL     ;
        EXCEPTION WHEN OTHERS THEN 
             lc_converted_proposal_no :='N'    ;
        END;

        BEGIN
            -- check if any version of proposal is converted to policy then get policy number
            SELECT CONVERTED_POLICY_NO INTO lc_converted_policy_no FROM  IL_DOC_HEADER_T DH
             WHERE   DH.ORG_ID=P_ORG_ID AND  dh.record_type = 'O' AND CONVERTED_POLICY_NO IS NOT NULL AND document_type='Q' 
             AND MASTER_REF_NO = (select distinct master_ref_no  from il_doc_header_t where document_type='Q' and DOC_REFERENCE_NO=lc_converted_proposal_no) ;
             
             -- Get master ref of policy if policy found       
             select distinct master_ref_no  INTO lc_master_ref_no_policy from il_doc_header_t where document_type='P' and DOC_REFERENCE_NO=lc_converted_policy_no ;



        EXCEPTION WHEN OTHERS THEN 
             lc_master_ref_no_policy :='N'    ;
        END;

        IF lc_converted_policy_no <>'N' THEN        

        SELECT   MAX(a.MONTH_NO) into ln_max_policy_month 
        FROM 
        IL_DOC_HEADER_T DH
                   INNER JOIN IL_DOC_ALLOC_DTL_BREAKUP_T A
                      ON (    dh.ORG_ID = A.ORG_ID
                          AND dh.BRANCH_ID = A.BRANCH_ID
                          AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                          AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                          AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                          AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                          AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                          AND dh.RECORD_TYPE = A.RECORD_TYPE
                          AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                          AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                          AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                          AND dh.APPLICATION_ID = A.APPLICATION_ID)
             WHERE   DH.ORG_ID=P_ORG_ID AND  a.record_type = 'O'
                   AND DH.DOC_REFERENCE_KEY IS NOT NULL
                   AND DH.REVISED_TAG IS NULL
                   AND A.ISSUE_COUNT = 1
                   AND A.ENDORSEMENT_NO = 0 
                   AND A.ALLOCATION_TYPE = 1
                   AND MASTER_REF_NO = lc_master_ref_no_policy;
        ELSE 
            ln_max_policy_month:=0;
        END IF;
          
    end if;


    -- get IMC rate from sub classes setup   Rate Type 22 is IMC PIF
    select RATE into ln_imc_rate from ILAS_SUB_PROD_RATES_SETUP_T where  ORG_ID= P_ORG_ID  AND  MAIN_PRODUCT_CODE=P_MAIN_PRODUCT_CODE
    AND SUB_PRODUCT_CODE=P_SUB_PRODUCT_CODE AND  BENEFIT_CODE= LN_BENEFIT_CODE and RATE_TYPE_ID=22 and POLICY_TERM =1
    AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;

    ln_policy_year :=1;
    ln_inflation_accumulated_cont :=0;
    ln_ill_current_month:=1;

    while ln_policy_year <= ln_policy_term
    loop

        if Ln_month > 12 then
            Ln_month := 1;
        end if;
                        -- apply sum assuraed indexation for the next year
--                      if ln_policy_year > 1 then
--                            ln_sum_covered   := round(ln_sum_covered   * power((1+ ln_Indexation_sumassured_rate),ln_policy_year-1) , 6) ;
--    --                        ln_sum_assured_at_risk1   := ln_sum_assured_at_risk1   + round ( ln_sum_assured_at_risk1 *   ln_Indexation_sumassured_rate ,2);
--                      end if;

        while Ln_month <= 12
        loop
               -- select nvl(ALLOCATION_CONTRIBUTION,0) - nvl(MORTALITY_CHARGES,0) - nvl(ADMIN_CHARGES ,0) , nvl(PTF_SURPLUS,0) into ln_net_value,ln_ptf_surplus
                 select nvl(ALLOCATION_CONTRIBUTION,0) , nvl(ADMIN_CHARGES ,0)  ,nvl(mortality_rate1 ,0) , nvl(BASIC_CONTRIBUTION,0), nvl(SUM_ASSURED,0)
                 into ln_allocated_contribution  ,ln_admin_charges , ln_mortality_rate1 , ln_basic_contribution, ln_sum_covered
                from TK_ILLUSTRATIONDTL_MONTHLY_T
                where ORG_ID         = P_ORG_ID
                and  MAIN_PRODUCT_CODE    = P_MAIN_PRODUCT_CODE
                and SUB_PRODUCT_CODE   = P_SUB_PRODUCT_CODE
                AND DOCUMENT_NO=P_DOCUMENT_NO
                and DOCUMENT_YEAR=P_DOCUMENT_YEAR
                AND ISSUE_COUNT=P_ISSUE_COUNT
                and APPLICATION_ID= P_APPLICATION_ID
                AND ILLUSTRATION_ID=P_ILLUSTRATION_ID
                and policy_year=ln_policy_year
                and policy_month=ln_month
                AND BRANCH_ID=P_BRANCH_ID
                ;


                ln_bid_offer          := ln_allocated_contribution * ln_bid_rate;
                ln_inflation_adj_contribution := 0;
    --                       dbms_output.put_line('ln_bid_offer '||ln_bid_offer);
    --                       dbms_output.put_line('ln_allocated_contribution '||ln_allocated_contribution);
    --                       dbms_output.put_line('ln_bid_rate '||ln_bid_rate);

            if ln_ill_current_month < ln_max_policy_month then 
                ln_cashvalue1:=0;
                ln_cashvalue2:=0;
                ln_cashvalue3:=0;

                ln_inflation_adj_contribution := round(ln_basic_contribution / power( (1 + ln_inflation_factor) , (ln_iterator -1)/12  )   , 6);
                
            elsif ln_ill_current_month = ln_max_policy_month then 
                ln_cashvalue1:=get_policy_cashvalue_f (P_ORG_ID,lc_master_ref_no_policy,1,TRUNC (SYSDATE )) ;
                ln_cashvalue2:=ln_cashvalue1;
                ln_cashvalue3:=ln_cashvalue1;

                ln_inflation_adj_contribution := round(ln_basic_contribution / power( (1 + ln_inflation_factor) , (ln_iterator -1)/12  )   , 6);
            
            else 
                FOR CROW IN C1
                LOOP
                    if crow.row_number = 1 then

                          ln_sum_assured_at_risk1  := round(ln_sum_covered - ln_cashvalue1 - (ln_allocated_contribution *(1-ln_bid_rate) - ln_admin_charges),6);
                          if ln_sum_assured_at_risk1 <0 then
                                ln_sum_assured_at_risk1 :=0;
                          end if;
                          -- calculate admin charges for next policy year


                          ln_mortality_charges1  := round( ln_sum_assured_at_risk1 * (ln_mortality_rate1 /12) ,6);
                          ln_net_value          := round ( ln_cashvalue1 + ln_allocated_contribution - ln_admin_charges - ln_bid_offer - ln_mortality_charges1 ,6);
    --                      ln_investment_income1   := ( ( ln_net_value) * crow.rate/100 ) /12;
                          ln_investment_income1   :=  round( ln_net_value *  (round(power(1+crow.rate/100, 1/12) -1,8) ) ,6)  ;

                          ln_net_value          := ln_net_value +ln_investment_income1;
                          ln_im_charges1         := round((ln_net_value  * ln_imc_rate) / 12 ,6);

                          ln_cashvalue1          := round(ln_net_value - ln_im_charges1,6);

    --                       dbms_output.put_line('ln_mortality_charges1 '||ln_mortality_charges1);
    --                       dbms_output.put_line('ln_investment_income1 '||ln_investment_income1);
    --                       dbms_output.put_line('ln_im_charges1 '||ln_im_charges1);

                    elsif  crow.row_number = 2 then
                          ln_sum_assured_at_risk2  := round( ln_sum_covered - ln_cashvalue2 - (ln_allocated_contribution *(1-ln_bid_rate) - ln_admin_charges) ,6);
                          if ln_sum_assured_at_risk2 <0 then
                                ln_sum_assured_at_risk2 :=0;
                          end if;
                          -- calculate admin charges for next policy year
    --                      if ln_policy_year > 1 then
    --                            ln_sum_assured_at_risk2   := round( ln_sum_assured_at_risk2   * power((1+ ln_Indexation_sumassured_rate),ln_policy_year-1) ,6);
    --    --                        ln_sum_assured_at_risk2   := ln_sum_assured_at_risk2   + round ( ln_sum_assured_at_risk2 *   ln_Indexation_sumassured_rate ,2);
    --                      end if;


                          ln_mortality_charges2  := round( ln_sum_assured_at_risk2 * ln_mortality_rate1 /12 ,6) ;
                          ln_net_value          := round ( ln_cashvalue2 + ln_allocated_contribution - ln_admin_charges - ln_bid_offer - ln_mortality_charges2 ,6);
    --                      ln_investment_income2   :=  (( ln_net_value) * crow.rate/100) / 12;
                          ln_investment_income2   :=   round( ln_net_value *  (round(power(1+crow.rate/100, 1/12) -1,8) ) ,6)  ;
                          ln_net_value          := ln_net_value +ln_investment_income2;
                          ln_im_charges2         := round( (ln_net_value  * ln_imc_rate) / 12 ,6);

                          ln_cashvalue2          := round(ln_net_value - ln_im_charges2,6);

                          ln_inflation_adj_contribution := round(ln_basic_contribution / power( (1 + ln_inflation_factor) , (ln_iterator -1)/12  )   , 6);

                    elsif  crow.row_number = 3 then
                          ln_sum_assured_at_risk3  := round( ln_sum_covered - ln_cashvalue3 - (ln_allocated_contribution *(1-ln_bid_rate) - ln_admin_charges) ,6);
                          if ln_sum_assured_at_risk3 <0 then
                                ln_sum_assured_at_risk3 :=0;
                          end if;
                          -- calculate admin charges for next policy year
    --                      if ln_policy_year > 1 then
    --                            ln_sum_assured_at_risk3   := round( ln_sum_assured_at_risk3   * power((1+ ln_Indexation_sumassured_rate),ln_policy_year-1) ,6) ;
    --    --                        ln_sum_assured_at_risk3   := ln_sum_assured_at_risk3   + round ( ln_sum_assured_at_risk3 *   ln_Indexation_sumassured_rate ,2);
    --                      end if;


                          ln_mortality_charges3  := round( ln_sum_assured_at_risk3 * ln_mortality_rate1 /12 ,6);
                          ln_net_value          := round( ln_cashvalue3 + ln_allocated_contribution - ln_admin_charges - ln_bid_offer - ln_mortality_charges3 ,6);
    --                      ln_investment_income3   := ( ( ln_net_value) * crow.rate/100 ) / 12;
                          ln_investment_income3   :=   round( ln_net_value *  (round(power(1+crow.rate/100, 1/12) -1,8) ) ,6)  ;
                          ln_net_value          := ln_net_value +ln_investment_income3;
                          ln_im_charges3         :=round(  (ln_net_value  * ln_imc_rate) / 12 ,6);

                          ln_cashvalue3          := round(ln_net_value - ln_im_charges3,6);


                    end if;
                END LOOP;
            end if;

            ln_inflation_accumulated_cont := ln_inflation_accumulated_cont + ln_inflation_adj_contribution;

            update TK_ILLUSTRATIONDTL_MONTHLY_T
            set cash_value1 = ln_cashvalue1,
                cash_value2 = ln_cashvalue2,
                cash_value3 = ln_cashvalue3,
                bid_offer = ln_bid_offer,

                sum_assured_at_risk1 = ln_sum_assured_at_risk1,
                mortality_charges1 = ln_mortality_charges1,
                investment_income1 = ln_investment_income1,
                im_charges1 = ln_im_charges1,

                sum_assured_at_risk2 = ln_sum_assured_at_risk2,
                mortality_charges2 = ln_mortality_charges2,
                investment_income2 = ln_investment_income2,
                im_charges2 = ln_im_charges2,

                sum_assured_at_risk3 = ln_sum_assured_at_risk3,
                mortality_charges3 = ln_mortality_charges3,
                investment_income3 = ln_investment_income3,
                im_charges3 = ln_im_charges3 ,
                INFLATION_ADJ_CONTRIBUTION=ln_inflation_adj_contribution,
                INFLATION_ACCUMULATED_CONTRI= ln_inflation_accumulated_cont

            where ORG_ID         = P_ORG_ID
            and  MAIN_PRODUCT_CODE    = P_MAIN_PRODUCT_CODE
            and SUB_PRODUCT_CODE   = P_SUB_PRODUCT_CODE
            AND DOCUMENT_NO=P_DOCUMENT_NO
            and DOCUMENT_YEAR=P_DOCUMENT_YEAR
            AND ISSUE_COUNT=P_ISSUE_COUNT
            and APPLICATION_ID= P_APPLICATION_ID
            AND ILLUSTRATION_ID=P_ILLUSTRATION_ID
            and policy_year=ln_policy_year
            and policy_month=ln_month
            AND BRANCH_ID=P_BRANCH_ID
            ;

            Ln_month := Ln_month + 1;
            ln_iterator := ln_iterator +1;
            
            ln_ill_current_month := ln_ill_current_month +1;
        
        end loop;
        ln_policy_year:=ln_policy_year +1;

    end loop;

    commit;

    UPDATE_ILLUST_CV_MONTH_TOPUP_P(P_ORG_ID,
          P_BRANCH_ID,
           P_MAIN_PRODUCT_CODE,
           P_SUB_PRODUCT_CODE ,
           P_ISSUE_COUNT,
           P_DOCUMENT_NO,
           P_DOCUMENT_YEAR,
           P_APPLICATION_ID,
           P_ILLUSTRATION_ID,ln_imc_rate,ln_policy_term,ln_bid_rate,lc_master_ref_no_policy,ln_max_policy_month);


END;
/

prompt
prompt Creating procedure GENERATE_IL_DETAIL_MONTHLY_P
prompt ===============================================
prompt
CREATE OR REPLACE PROCEDURE GENERATE_IL_DETAIL_MONTHLY_P (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_policy_year                   NUMBER;

   ln_allocation_percentage         NUMBER;

   ln_allocation_bonus_percentage   NUMBER;

   ln_allocation_contribution       NUMBER;

   ln_mortality_rate1               NUMBER;

   ln_mortality_rate2               NUMBER;

   ln_mortality_em_rate1            NUMBER;

   ln_rating_class_percent          NUMBER;

   ln_loading_em_rate1              NUMBER;

   ln_loading_other_rate1           NUMBER;

   ln_age1                          NUMBER;

   ln_age2                          NUMBER;

   lc_gender1                       VARCHAR2 (1);

   lc_gender2                       VARCHAR2 (1);

   ln_effective_age_factor          NUMBER;

   ln_effective_age                 NUMBER;

   ln_basic_contribution            NUMBER;

   ln_invested_contribution         NUMBER;

   ln_policy_term                   NUMBER;

   ln_pay_term                      NUMBER;



   ln_sum_covered                   NUMBER;

   ln_sum_at_risk                   NUMBER;



   ln_mortality_charges             NUMBER;

   ln_reins_amount                  NUMBER;

   ln_ptf_surplus                   NUMBER;

   ln_waqala_charges                NUMBER;

   ln_contingency_margin            NUMBER;



   ln_admin_charges                 NUMBER;



   ln_admin_charges_monthly         NUMBER;



   allocation_month                 BOOLEAN := FALSE;



   ln_Indexation_admin_ch_rate      NUMBER;



   ln_Indexation_sumassured_rate    NUMBER;

   ln_Indexation_contribute_rate    NUMBER;

   ln_waqala_rate                   NUMBER;

   ln_contingency_margin_rate       NUMBER;

   ln_Investment_income_rate        NUMBER;

   ln_discount_rate_net             NUMBER;

   ln_expected_claim_rate           NUMBER;

   ln_new_age1                      NUMBER := 0;

   Ln_month                         NUMBER := 1;



   lc_is_joint_life                 VARCHAR2 (1) := 'N';

   LC_MODE                          VARCHAR2 (1);

   LC_BENEFIT_CODE                  NUMBER;

   LN_BASIC_CONTRIBUTION_MODAL      NUMBER;
   LN_BASIC_CONTRIBUTION_ORIGNAL      NUMBER;

   ln_surrender_charge_rate         NUMBER;
   lc_converted_proposal_no         VARCHAR2 (50);
   lc_converted_policy_no           VARCHAR2 (50);
   lc_master_ref_no_policy          VARCHAR2 (50) := 'N';
   lc_projection_tag                VARCHAR2 (1);
   ln_max_policy_month              NUMBER := 0;
   LN_ALTERATION_YEAR               NUMBER :=0;
   LC_ILLUSTRATION_REF_NO           VARCHAR2 (50);
   ld_illustration_date            DATE;
BEGIN
   -- initialize variables

   ln_policy_year := 1;

   ln_invested_contribution := 0;

   ln_ptf_surplus := 0;



   -- Get Main Plan ( basic benefit) code

   SELECT BENEFIT_CODE
     INTO LC_BENEFIT_CODE
     FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND MAPPING_TYPE = 'B';



   BEGIN
      -- get basic details from illustration header

      SELECT NVL (age1, 0),
             NVL (age2, 0),
             basic_contribution,
             SUM_COVERED,
             GENDER1,
             GENDER2,
             POLICY_TERM,
             PAYMENT_TERM,
             NVL (SUM_COVERED_INDEX, 0) SUM_COVERED_INDEX,
             NVL (CONTRIBUTION_INDEX, 0) CONTRIBUTION_INDEX,
             NVL (CONT_MARGIN, 0) CONT_MARGIN,
             NVL (WAQALA_FEE, 0) WAQALA_FEE,
             NVL (EXPECTED_CLAIM, 0) EXPECTED_CLAIM,
             NVL (INVESTMENT_INCOME, 0) INVESTMENT_INCOME,
             PAYMENT_MODE,
             BASIC_CONTRIBUTION_MODAL,
             NVL (PROJECTION_TAG, 'N'),
             DOC_REFERENCE_NO,
             TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE))
        INTO ln_age1,
             ln_age2,
             ln_basic_contribution,
             ln_SUM_COVERED,
             lc_gender1,
             lc_gender2,
             ln_POLICY_TERM,
             ln_pay_term,
             ln_Indexation_sumassured_rate,
             ln_Indexation_contribute_rate,
             ln_contingency_margin_rate,
             ln_waqala_rate,
             ln_expected_claim_rate,
             ln_Investment_income_rate,
             LC_MODE,
             LN_BASIC_CONTRIBUTION_MODAL,
             lc_projection_tag,
             LC_ILLUSTRATION_REF_NO,
             ld_illustration_date
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND DOCUMENT_NO = P_DOCUMENT_NO;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_SUM_COVERED := 0;
         lc_gender1 := 0;
         lc_gender2 := 0;
         ln_POLICY_TERM := 0;
         ln_Indexation_sumassured_rate := 0;

         ln_Indexation_contribute_rate := 0;
         ln_contingency_margin_rate := 0;
         ln_waqala_rate := 0;
         ln_expected_claim_rate := 0;
         ln_Investment_income_rate := 0;

         LN_BASIC_CONTRIBUTION_MODAL := 0;
         ld_illustration_date := TRUNC (SYSDATE);

   END;
    LN_BASIC_CONTRIBUTION_ORIGNAL  :=LN_BASIC_CONTRIBUTION_MODAL;

   BEGIN
      -- get admin charges for sub classes setup   Rate Type 21 is Policy Fee / admin ch

      SELECT NVL (RATE, 0)
        INTO ln_admin_charges
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 21
             AND POLICY_TERM = 1             
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_admin_charges := 0;
   END;



   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation

      SELECT NVL (RATE, 0)
        INTO ln_Indexation_admin_ch_rate
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 20
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_Indexation_admin_ch_rate := 0;
   END;


   -- get age factor to calculate effective age in case of joint life

   IF lc_is_joint_life = 'Y'
   THEN
      ln_new_age1 := ln_age1 - 3;
   END IF;

   IF ln_new_age1 > 0 AND lc_is_joint_life = 'Y'
   THEN
      SELECT VALUE
        INTO ln_effective_age_factor
        FROM TK_EFFECTIVE_AGE_CHART_T
       WHERE AGE_DIFFERENCE = ABS (ln_age1 - ln_new_age1);
   ELSE
      ln_effective_age_factor := 0;
   END IF;



   -- calculate effective age in case of joint life

   IF ln_age1 >= ln_new_age1 OR lc_is_joint_life = 'N'
   THEN
      ln_effective_age := ln_age1 - ln_effective_age_factor;
   ELSE
      ln_effective_age := ln_new_age1 - ln_effective_age_factor;
   END IF;



   -- delete existing data before generating fresh data

   DELETE FROM TK_ILLUSTRATIONDTL_MONTHLY_T
         WHERE     ORG_ID = P_ORG_ID
               AND BRANCH_ID = P_BRANCH_ID
               AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND ISSUE_COUNT = P_ISSUE_COUNT
               AND DOCUMENT_NO = P_DOCUMENT_NO
               AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND ILLUSTRATION_ID = P_ILLUSTRATION_ID;

   COMMIT;


   -- if policy already created and projection / alteration illustration is called
   IF lc_projection_tag = 'Y' OR lc_projection_tag = 'A'
   THEN
      BEGIN
         SELECT DISTINCT NVL (CONVERTED_DOC_NO, 'N')
           INTO lc_converted_proposal_no
           FROM TK_ILLUSTRATIONHD_POS
          WHERE     ORG_ID = P_ORG_ID
                AND BRANCH_ID = P_BRANCH_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND DOCUMENT_NO = P_DOCUMENT_NO
                AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND APPLICATION_ID = P_APPLICATION_ID
                AND CONVERTED_DOC_NO IS NOT NULL;
      EXCEPTION
         WHEN OTHERS
         THEN
            lc_converted_proposal_no := 'N';
      END;

      BEGIN
         -- check if any version of proposal is converted to policy then get policy number
         SELECT CONVERTED_POLICY_NO
           INTO lc_converted_policy_no
           FROM IL_DOC_HEADER_T DH
          WHERE     DH.ORG_ID = P_ORG_ID
                AND dh.record_type = 'O'
                AND CONVERTED_POLICY_NO IS NOT NULL
                AND document_type = 'Q'
                AND MASTER_REF_NO =
                       (SELECT DISTINCT master_ref_no
                          FROM il_doc_header_t
                         WHERE     document_type = 'Q'
                               AND DOC_REFERENCE_NO =
                                      lc_converted_proposal_no);

         -- Get master ref of policy if policy found
         SELECT DISTINCT master_ref_no
           INTO lc_master_ref_no_policy
           FROM il_doc_header_t
          WHERE     document_type = 'P'
                AND DOC_REFERENCE_NO = lc_converted_policy_no;
      EXCEPTION
         WHEN OTHERS
         THEN
            lc_master_ref_no_policy := 'N';
      END;

      IF lc_converted_policy_no <> 'N'
      THEN
         SELECT MAX (a.MONTH_NO)
           INTO ln_max_policy_month
           FROM    IL_DOC_HEADER_T DH
                INNER JOIN
                   IL_DOC_ALLOC_DTL_BREAKUP_T A
                ON (    dh.ORG_ID = A.ORG_ID
                    AND dh.BRANCH_ID = A.BRANCH_ID
                    AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                    AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                    AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                    AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                    AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                    AND dh.RECORD_TYPE = A.RECORD_TYPE
                    AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                    AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                    AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                    AND dh.APPLICATION_ID = A.APPLICATION_ID)
          WHERE     DH.ORG_ID = P_ORG_ID
                AND a.record_type = 'O'
                AND DH.DOC_REFERENCE_KEY IS NOT NULL
                AND DH.REVISED_TAG IS NULL
                AND A.ISSUE_COUNT = 1
                AND A.ENDORSEMENT_NO = 0
                AND A.ALLOCATION_TYPE = 1
                AND MASTER_REF_NO = lc_master_ref_no_policy;
                
            SELECT MIN (
                      CASE
                         WHEN ENDORSEMENT_NO = 0
                         THEN
                            0
                         ELSE
                            CEIL (
                                 MONTHS_BETWEEN (TRUNC (ALTERATION_DATE) + 1,
                                                 TRUNC (COMM_DATE))
                               / 12)
                      END)
              INTO LN_ALTERATION_YEAR
              FROM il_doc_header_t
             WHERE     master_ref_no = lc_master_ref_no_policy
                   AND document_type = 'P'
                   AND RECORD_TYPE = 'O'
                   AND ILLUSTRATION_REF_NO = LC_ILLUSTRATION_REF_NO;                
      ELSE
         ln_max_policy_month := 0;
         LN_ALTERATION_YEAR :=0;
      END IF;
   END IF;



   ln_effective_age := ln_effective_age - 1;

   --    dbms_output.put_line('effective age :'||to_char(ln_effective_age));
   --   5,14,1,7,2023,3,13,001872
   BEGIN
      SELECT DISTINCT NVL (RTL.LOADING_PERCENT, 0)
        INTO ln_rating_class_percent
        FROM TK_ILLUSTRATIONHD_POS ILL,
             il_doc_header_t DH,
             TK_ILL_DOC_LOADING LD,
             IL_SUB_PRODUCT_RTC_LOADING_T RTL
       WHERE        ILL.ORG_ID
                 || ','
                 || ILL.BRANCH_ID
                 || ','
                 || ILL.MAIN_PRODUCT_CODE
                 || ','
                 || ILL.SUB_PRODUCT_CODE
                 || ','
                 || ILL.DOCUMENT_YEAR
                 || ','
                 || ILL.ISSUE_COUNT
                 || ','
                 || ILL.APPLICATION_ID
                 || ','
                 || ILL.DOCUMENT_NO =
                    CASE
                       WHEN dh.endorsement_no > 0
                       THEN
                          dh.ILLUSTRATION_REF_NO_KEY
                       ELSE
                          DH.BASE_DOC_NO_KEY
                    END
             AND dh.ORG_ID = LD.ORG_ID
             AND dh.BRANCH_ID = LD.BRANCH_ID
             AND dh.MAIN_PRODUCT_CODE = LD.MAIN_PRODUCT_CODE
             AND dh.SUB_PRODUCT_CODE = LD.SUB_PRODUCT_CODE
             AND dh.TAKAFUL_TYPE = LD.TAKAFUL_TYPE
             AND dh.DOCUMENT_TYPE = LD.DOCUMENT_TYPE
             AND dh.DOCUMENT_NO = LD.DOCUMENT_NO
             AND dh.RECORD_TYPE = LD.RECORD_TYPE
             AND dh.DOCUMENT_YEAR = LD.DOCUMENT_YEAR
             AND dh.ISSUE_COUNT = LD.ISSUE_COUNT
             AND dh.ENDORSEMENT_NO = LD.ENDORSEMENT_NO
             AND dh.APPLICATION_ID = LD.APPLICATION_ID
             AND LD.LOADING_TYPE = 'RT'
             AND ld.BENEFIT_CODE = LC_BENEFIT_CODE
             AND RTL.ORG_ID = LD.ORG_ID
             AND RTL.MAIN_PRODUCT_CODE = LD.MAIN_PRODUCT_CODE
             AND RTL.SUB_PRODUCT_CODE = LD.SUB_PRODUCT_CODE
             AND RTL.RATING_CLASS_CODE = LD.LOADING_CODE
             AND ILL.ORG_ID = P_ORG_ID
             AND ILL.BRANCH_ID = P_BRANCH_ID
             AND ILL.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND ILL.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ILL.DOCUMENT_NO = P_DOCUMENT_NO
             AND ILL.DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND ILL.APPLICATION_ID = P_APPLICATION_ID
             AND ILL.CONVERTED_DOC_NO IS NOT NULL;
   --             AND ILL.ISSUE_COUNT = P_ISSUE_COUNT;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_rating_class_percent := 0;
   END;

   BEGIN
      SELECT NVL (SUM (NVL (LOADING_VALUE, 0)), 0)
        INTO ln_loading_other_rate1
        FROM (SELECT DISTINCT
                     LD.LOADING_TYPE, NVL (ld.LOADING_VALUE, 0) LOADING_VALUE
                FROM TK_ILLUSTRATIONHD_POS ILL,
                     il_doc_header_t DH,
                     TK_ILL_DOC_LOADING LD
               WHERE        ILL.ORG_ID
                         || ','
                         || ILL.BRANCH_ID
                         || ','
                         || ILL.MAIN_PRODUCT_CODE
                         || ','
                         || ILL.SUB_PRODUCT_CODE
                         || ','
                         || ILL.DOCUMENT_YEAR
                         || ','
                         || ILL.ISSUE_COUNT
                         || ','
                         || ILL.APPLICATION_ID
                         || ','
                         || ILL.DOCUMENT_NO =
                            CASE
                               WHEN dh.endorsement_no > 0
                               THEN
                                  dh.ILLUSTRATION_REF_NO_KEY
                               ELSE
                                  DH.BASE_DOC_NO_KEY
                            END
                     AND dh.ORG_ID = LD.ORG_ID
                     AND dh.BRANCH_ID = LD.BRANCH_ID
                     AND dh.MAIN_PRODUCT_CODE = LD.MAIN_PRODUCT_CODE
                     AND dh.SUB_PRODUCT_CODE = LD.SUB_PRODUCT_CODE
                     AND dh.TAKAFUL_TYPE = LD.TAKAFUL_TYPE
                     AND dh.DOCUMENT_TYPE = LD.DOCUMENT_TYPE
                     AND dh.DOCUMENT_NO = LD.DOCUMENT_NO
                     AND dh.RECORD_TYPE = LD.RECORD_TYPE
                     AND dh.DOCUMENT_YEAR = LD.DOCUMENT_YEAR
                     AND dh.ISSUE_COUNT = LD.ISSUE_COUNT
                     AND dh.ENDORSEMENT_NO = LD.ENDORSEMENT_NO
                     AND dh.APPLICATION_ID = LD.APPLICATION_ID
                     AND LD.LOADING_TYPE <> 'RT'
                     AND ld.BENEFIT_CODE = LC_BENEFIT_CODE
                     AND ILL.ORG_ID = P_ORG_ID
                     AND ILL.BRANCH_ID = P_BRANCH_ID
                     AND ILL.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                     AND ILL.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                     AND ILL.DOCUMENT_NO = P_DOCUMENT_NO
                     AND ILL.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                     AND ILL.APPLICATION_ID = P_APPLICATION_ID
                     AND ILL.CONVERTED_DOC_NO IS NOT NULL);

      --           AND ILL.ISSUE_COUNT = P_ISSUE_COUNT);

      ln_loading_other_rate1 := ln_loading_other_rate1 / 1000;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_loading_other_rate1 := 0;
   END;

   WHILE ln_policy_year <= ln_POLICY_TERM
   LOOP
      IF Ln_month > 12
      THEN
         Ln_month := 1;
      END IF;


      -- get allocation percentage
      BEGIN
         SELECT RATE
           INTO ln_allocation_percentage
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 1
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_allocation_percentage := 0;
      END;

      -- get bonus allocation %age

      BEGIN
         SELECT RATE
           INTO ln_allocation_bonus_percentage
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 2
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_allocation_bonus_percentage := 0;
      END;



      ln_allocation_percentage :=
         ln_allocation_percentage + ln_allocation_bonus_percentage;

      -- get surrender charges rate

      BEGIN
         SELECT RATE
           INTO ln_surrender_charge_rate
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 16
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_surrender_charge_rate := 0;
      END;


      --        ln_mortality_rate1

      BEGIN
         --   select m_rate into ln_mortality_rate1 from tk_mortality_rate_t where m_age=ln_effective_age +ln_policy_year and m_year=(ln_effective_age +1 -17) ;

         SELECT M_RATE, NVL (EM_RATE, 0)
           INTO ln_mortality_rate1, ln_mortality_em_rate1
           FROM GLAS_SUB_PROD_MORT_RT_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND M_YEAR = 1
                AND M_age = ln_effective_age + ln_policy_year
                AND GENDER = lc_gender1;
      --            dbms_output.put_line('mortality rate 1 success:'||ln_mortality_rate1);

      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate1 := 0;
            ln_mortality_em_rate1 := 0;
      END;

      IF ln_rating_class_percent > 0 AND ln_mortality_em_rate1 > 0
      THEN
         ln_loading_em_rate1 :=
            ln_mortality_em_rate1 * ln_rating_class_percent / 100;
      ELSE
         ln_loading_em_rate1 := 0;
      END IF;


      BEGIN
         -- get year wise discount for Rate Type 28

         SELECT NVL (RATE, 0)
           INTO ln_discount_rate_net
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 28
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_discount_rate_net := 0;
      END;



      IF ln_discount_rate_net > 0
      THEN
         ln_mortality_rate1 :=
            ln_mortality_rate1 - ln_discount_rate_net * ln_mortality_rate1;
      END IF;

      -- add rating class loading rate and other loading rates in mortality rate

      ln_mortality_rate1 :=
         ln_mortality_rate1 + ln_loading_em_rate1 + ln_loading_other_rate1;

      --        ln_mortality_rate2

      BEGIN
         --            select m_rate into ln_mortality_rate2 from tk_mortality_rate_t where m_age=ln_age2+ ln_policy_year and m_year= (ln_age2  -17);

         SELECT M_RATE
           INTO ln_mortality_rate2
           FROM GLAS_SUB_PROD_MORT_RT_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND M_YEAR = 1
                AND m_age = ln_age2 + ln_policy_year
                AND GENDER = lc_gender2;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate2 := 0;
      END;
    --if monthly process run for current month then take contribution from there.
    IF (ln_policy_year - 1) * 12 + Ln_month <= ln_max_policy_month
    THEN
       BEGIN
          SELECT CONTRIBUTION_PAID_AMT
            INTO LN_BASIC_CONTRIBUTION_MODAL
            FROM    IL_DOC_HEADER_T DH
                 INNER JOIN
                    IL_DOC_ALLOCATIONDTL_T A
                 ON (    dh.ORG_ID = A.ORG_ID
                     AND dh.BRANCH_ID = A.BRANCH_ID
                     AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                     AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                     AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                     AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                     AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                     AND dh.RECORD_TYPE = A.RECORD_TYPE
                     AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                     AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                     AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                     AND dh.APPLICATION_ID = A.APPLICATION_ID)
           WHERE     DH.ORG_ID = P_ORG_ID
                 AND a.record_type = 'O'
                 AND DH.DOC_REFERENCE_KEY IS NOT NULL
                 AND DH.REVISED_TAG IS NULL
                 AND A.TRANSACTION_TYPE = 1
                 AND A.ISSUE_COUNT = 1
                 AND A.ENDORSEMENT_NO = 0
                 AND A.ALLOCATION_TYPE = 1
                 AND A.MONTH_NO =
                        (ln_policy_year - 1) * 12 + Ln_month
                 AND MASTER_REF_NO = lc_master_ref_no_policy;
       EXCEPTION
          WHEN OTHERS
          THEN
             LN_BASIC_CONTRIBUTION_MODAL := LN_BASIC_CONTRIBUTION_MODAL;
       END;
    elsIF (ln_policy_year - 1) * 12 + Ln_month = ln_max_policy_month + 1 then   
             LN_BASIC_CONTRIBUTION_MODAL := LN_BASIC_CONTRIBUTION_ORIGNAL;
    end if;

      -- apply indexation after policy first year 
      IF ln_policy_year > 1 
      THEN
         -- admin indxation
         ln_admin_charges :=
              ln_admin_charges
            + ROUND (ln_admin_charges * ln_Indexation_admin_ch_rate, 6);

         -- SA indxation
         ln_SUM_COVERED :=
            ln_SUM_COVERED + (ln_SUM_COVERED * ln_Indexation_sumassured_rate);

         -- contribution indxation if payterm not passed and current month is after policy current month
         IF ln_policy_year <= ln_pay_term
         THEN
            IF (ln_policy_year - 1) * 12 + Ln_month <= ln_max_policy_month
            THEN
               BEGIN
                     LN_BASIC_CONTRIBUTION_MODAL := LN_BASIC_CONTRIBUTION_MODAL;
               END;

            ELSIF ln_policy_year > LN_ALTERATION_YEAR  THEN 
               LN_BASIC_CONTRIBUTION_MODAL :=
                    LN_BASIC_CONTRIBUTION_MODAL
                  + (  LN_BASIC_CONTRIBUTION_MODAL
                     * ln_Indexation_contribute_rate);
            END IF;
         ELSE
            LN_BASIC_CONTRIBUTION_MODAL := 0;
         END IF;
      END IF;



      ln_admin_charges_monthly := ROUND (ln_admin_charges / 12, 6);

      WHILE Ln_month <= 12
      LOOP
         IF lc_mode = 'A' AND ln_month = 1
         THEN
            allocation_month := TRUE;
         ELSIF lc_mode = 'H' AND ln_month IN (1, 7)
         THEN
            allocation_month := TRUE;
         ELSIF lc_mode = 'Q' AND ln_month IN (1, 4, 7, 10)
         THEN
            allocation_month := TRUE;
         ELSIF lc_mode = 'M'
         THEN
            allocation_month := TRUE;
         ELSE
            allocation_month := FALSE;
         END IF;



         -- if allocation month is true then add allocation

         IF allocation_month
         THEN
            ln_invested_contribution :=
               ln_invested_contribution + LN_BASIC_CONTRIBUTION_MODAL;

            ln_allocation_contribution :=
               ROUND (LN_BASIC_CONTRIBUTION_MODAL * ln_allocation_percentage,
                      6);

            ln_basic_contribution := LN_BASIC_CONTRIBUTION_MODAL;
         ELSE
            ln_allocation_contribution := 0;

            ln_basic_contribution := 0;
         END IF;



         --          ln_sum_at_risk             := ln_sum_covered + ln_ptf_surplus;

         --        ln_mortality_charges       := round( ln_sum_at_risk * (ln_mortality_rate1+ln_mortality_rate2)  ,2);

         --         ln_waqala_charges          := round( ln_mortality_charges * ln_waqala_rate ,2);

         --       ln_contingency_margin      := round( ln_mortality_charges * ln_contingency_margin_rate ,2);

         --   ln_reins_amount            := round( ln_mortality_charges - ln_waqala_charges - ln_contingency_margin ,2);



         --       ln_ptf_surplus             := round( (ln_reins_amount +ln_contingency_margin)  * ln_Investment_income_rate  ,2)+

         --                                   round(ln_reins_amount * (1- ln_expected_claim_rate),2);



         INSERT INTO TK_ILLUSTRATIONDTL_MONTHLY_T (ORG_ID,
                                                   BRANCH_ID,
                                                   MAIN_PRODUCT_CODE,
                                                   SUB_PRODUCT_CODE,
                                                   ISSUE_COUNT,
                                                   DOCUMENT_NO,
                                                   DOCUMENT_YEAR,
                                                   APPLICATION_ID,
                                                   ILLUSTRATION_ID,
                                                   EFFECTIVE_AGE,
                                                   POLICY_YEAR,
                                                   POLICY_MONTH,
                                                   BASIC_CONTRIBUTION,
                                                   INVESTED_CONTRIBUTION,
                                                   ALLOCATION_PERCENTAGE,
                                                   ALLOCATION_CONTRIBUTION,
                                                   MORTALITY_RATE1,
                                                   MORTALITY_RATE2,
                                                   SUM_ASSURED,
                                                   SUM_ASSURED_AT_RISK,
                                                   MORTALITY_CHARGES,
                                                   PTF_SURPLUS,
                                                   WAQALA_CHARGES,
                                                   CONTINGENCY_MARGIN,
                                                   REINS_AMOUNT,
                                                   ADMIN_CHARGES,
                                                   SURRENDER_CHARGE_RATE)
              VALUES (P_ORG_ID,
                      P_BRANCH_ID,
                      P_MAIN_PRODUCT_CODE,
                      P_SUB_PRODUCT_CODE,
                      P_ISSUE_COUNT,
                      P_DOCUMENT_NO,
                      P_DOCUMENT_YEAR,
                      P_APPLICATION_ID,
                      P_ILLUSTRATION_ID,
                      ln_effective_age + ln_policy_year,
                      ln_policy_year,
                      Ln_month,
                      ln_basic_contribution,
                      ln_invested_contribution,
                      ln_allocation_percentage,
                      ln_allocation_contribution,
                      ln_mortality_rate1,
                      ln_mortality_rate2,
                      ln_SUM_COVERED,
                      ln_sum_at_risk,
                      ln_mortality_charges,
                      ln_ptf_surplus,
                      ln_waqala_charges,
                      ln_contingency_margin,
                      ln_reins_amount,
                      ln_admin_charges_monthly,
                      ln_surrender_charge_rate);



         Ln_month := Ln_month + 1;
      END LOOP;



      -- increment the counter

      ln_policy_year := ln_policy_year + 1;
   END LOOP;

   COMMIT;

   UPDATE_ILLUST_CV_MONTHLY_P (P_ORG_ID,
                               P_BRANCH_ID,
                               P_MAIN_PRODUCT_CODE,
                               P_SUB_PRODUCT_CODE,
                               P_ISSUE_COUNT,
                               P_DOCUMENT_NO,
                               P_DOCUMENT_YEAR,
                               P_APPLICATION_ID,
                               P_ILLUSTRATION_ID);
END;
/

prompt
prompt Creating procedure UPDATE_ILLUST_CASHVALUE_POS_P
prompt ================================================
prompt
CREATE OR REPLACE PROCEDURE UPDATE_ILLUST_CASHVALUE_POS_P (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_policy_year                  NUMBER;
   ln_policy_term                  NUMBER;
   ln_sum_covered                  NUMBER;
   ln_dtl_sum_covered              NUMBER;
   ln_admin_charges                NUMBER;
   ln_allocated_contribution       NUMBER;
   ln_Indexation_sumassured_rate   NUMBER;
   ln_mortality_rate1              NUMBER;

   ln_bid_rate                     NUMBER;
   ln_bid_offer                    NUMBER;
   ln_imc_rate                     NUMBER;

   ln_net_value                    NUMBER;
   ln_cashvalue1                   NUMBER;
   ln_cashvalue2                   NUMBER;
   ln_cashvalue3                   NUMBER;

   ln_sum_assured_at_risk1         NUMBER;
   ln_mortality_charges1           NUMBER;
   ln_investment_income1           NUMBER;
   ln_im_charges1                  NUMBER;
   ln_mortality_charges1_running_total              NUMBER;

   ln_sum_assured_at_risk2         NUMBER;
   ln_mortality_charges2           NUMBER;
   ln_investment_income2           NUMBER;
   ln_im_charges2                  NUMBER;

   ln_sum_assured_at_risk3         NUMBER;
   ln_mortality_charges3           NUMBER;
   ln_investment_income3           NUMBER;
   ln_im_charges3                  NUMBER;

   ln_benefit_code                 NUMBER;

   ln_SURRENDER_VALUE              NUMBER;
   ln_SV_RATE_OF_BONUS             NUMBER;
   ln_bonus_charges_rate           NUMBER;

   ln_BONUS_RATE                   NUMBER;
   ln_BONUS_RATE1                  NUMBER;
   ln_BONUS_SV1                    NUMBER;
   ln_BONUS_AMOUNT1                NUMBER;

   ln_BONUS_RATE2                  NUMBER;
   ln_BONUS_SV2                    NUMBER;
   ln_BONUS_AMOUNT2                NUMBER;

   ln_BONUS_RATE3                  NUMBER;
   ln_BONUS_SV3                    NUMBER;
   ln_BONUS_AMOUNT3                NUMBER;

   ln_SV_PAYABLE1                  NUMBER;
   ln_DEATH_BENEFIT1               NUMBER;

   ln_SV_PAYABLE2                  NUMBER;
   ln_DEATH_BENEFIT2               NUMBER;

   ln_SV_PAYABLE3                  NUMBER;
   ln_DEATH_BENEFIT3               NUMBER;

   ln_inflation_adj_contribution   NUMBER;
   ln_inflation_accumulated_cont   NUMBER;
   ln_iterator                     NUMBER := 1;
   ln_basic_contribution           NUMBER;

   ln_inflation_rate2              NUMBER;
   ln_inflation_factor             NUMBER;
   ld_illustration_date            DATE;
   ln_product_type                 number;

   CURSOR C1
   IS
      SELECT ROWNUM ROW_NUMBER, RATE
        FROM (WITH illustration_data
                   AS (SELECT TRUNC (
                                 NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE))
                                 illustration_date
                         FROM TK_ILLUSTRATIONHD_POS
                        WHERE     ORG_ID = P_ORG_ID
                              AND BRANCH_ID = P_BRANCH_ID
                              AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                              AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                              AND ISSUE_COUNT = P_ISSUE_COUNT
                              AND DOCUMENT_NO = P_DOCUMENT_NO
                              AND DOCUMENT_YEAR = P_DOCUMENT_YEAR)
                SELECT RATE
                  FROM TK_NOMINAL_RATE_SETUP_T, illustration_data idd
                 WHERE     ORG_ID = P_ORG_ID
                       AND idd.illustration_date BETWEEN TRUNC (
                                                            EFFECTIVE_START_DATE)
                                                     AND TRUNC (
                                                            NVL (
                                                               EFFECTIVE_END_DATE,
                                                               SYSDATE))
              ORDER BY RATE);
BEGIN
   SELECT policy_term,
          bid_offer,
          SUM_COVERED_MODAL,
          NVL (SUM_COVERED_INDEX, 0),
          TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE))
     INTO ln_policy_term,
          ln_bid_rate,
          ln_sum_covered,
          ln_Indexation_sumassured_rate,
          ld_illustration_date
     FROM TK_ILLUSTRATIONHD_POS
    WHERE     ORG_ID = P_ORG_ID
          AND BRANCH_ID = P_BRANCH_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND ISSUE_COUNT = P_ISSUE_COUNT
          AND DOCUMENT_NO = P_DOCUMENT_NO
          AND DOCUMENT_YEAR = P_DOCUMENT_YEAR;

    SELECT 
       PRODUCT_TYPE_IL into ln_product_type 
    FROM GLAS_SUB_PRODUCT_SETUP_T 
    WHERE     ORG_ID = P_ORG_ID
      AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
      AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
 ;
   SELECT RATE
     INTO ln_inflation_rate2
     FROM (SELECT ROWNUM RATE_ID, a.RATE
             FROM (  SELECT RATE
                       FROM TK_INFLATION_RATE_SETUP_T
                      WHERE     ORG_ID = P_ORG_ID
                            AND ld_illustration_date BETWEEN TRUNC (
                                                                EFFECTIVE_START_DATE)
                                                         AND TRUNC (
                                                                NVL (
                                                                   EFFECTIVE_END_DATE,
                                                                   SYSDATE))
                   ORDER BY RATE) a) TAB
    WHERE RATE_ID = 2;

   ln_inflation_factor := ln_inflation_rate2 / 100;

   ln_cashvalue1 := 0;
   ln_cashvalue2 := 0;
   ln_cashvalue3 := 0;


   -- Get Main Plan ( basic benefit) code
   SELECT BENEFIT_CODE
     INTO LN_BENEFIT_CODE
     FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND MAPPING_TYPE = 'B';


   -- get IMC rate from sub classes setup   Rate Type 22 is IMC PIF
   SELECT RATE
     INTO ln_imc_rate
     FROM ILAS_SUB_PROD_RATES_SETUP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND BENEFIT_CODE = LN_BENEFIT_CODE
          AND RATE_TYPE_ID = 22
          AND POLICY_TERM = 1
          AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
         ;

   ln_policy_year := 1;
   ln_mortality_charges1_running_total :=0;

   WHILE ln_policy_year <= ln_policy_term
   LOOP
      -- select nvl(ALLOCATION_CONTRIBUTION,0) - nvl(MORTALITY_CHARGES,0) - nvl(ADMIN_CHARGES ,0) , nvl(PTF_SURPLUS,0) into ln_net_value,ln_ptf_surplus
      SELECT NVL (ALLOCATION_CONTRIBUTION, 0),
             NVL (ADMIN_CHARGES, 0),
             NVL (mortality_rate1, 0),
             NVL (SURRENDER_VALUE, 0),
             NVL (SV_RATE_OF_BONUS, 0),
             NVL (BASIC_CONTRIBUTION, 0),
             NVL (SUM_ASSURED, 0)
        INTO ln_allocated_contribution,
             ln_admin_charges,
             ln_mortality_rate1,
             ln_SURRENDER_VALUE,
             ln_SV_RATE_OF_BONUS,
             ln_basic_contribution,
             ln_dtl_sum_covered
        FROM TK_ILLUSTRATIONDTL_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND ILLUSTRATION_ID = P_ILLUSTRATION_ID
             AND policy_year = ln_policy_year;

          BEGIN
             SELECT RATE
               INTO ln_bonus_charges_rate
               FROM ILAS_SUB_PROD_RATES_SETUP_T
              WHERE     ORG_ID = P_ORG_ID
                    AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                    AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                    AND BENEFIT_CODE = ln_benefit_code
                    AND RATE_TYPE_ID = 17
                    AND POLICY_TERM = ln_policy_year
                    AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                    ;
          EXCEPTION
             WHEN OTHERS
             THEN
                ln_bonus_charges_rate := 0;
          END;

      ln_bid_offer := ln_allocated_contribution * ln_bid_rate;
      ln_inflation_adj_contribution := 0;

      DBMS_OUTPUT.put_line ('ln_bid_offer ' || ln_bid_offer);
      DBMS_OUTPUT.put_line (
         'ln_allocated_contribution ' || ln_allocated_contribution);
      DBMS_OUTPUT.put_line ('ln_bid_rate ' || ln_bid_rate);
      
      FOR CROW IN C1
      LOOP
         -- GET BONUS RATE FROM RATING TABLE FOR SELECTED PROFIT RATE
         BEGIN
            SELECT RTD.RATE
              INTO ln_BONUS_RATE
              FROM IL_RATING_TABLE_HD_T RTH
                   INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                      ON (    RTH.ORG_ID = RTB.ORG_ID
                          AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                          AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                          AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                   INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                      ON (    RTB.ORG_ID = RTD.ORG_ID
                          AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                          AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                          AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                          AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
             WHERE     RTH.ORG_ID = P_ORG_ID
                   AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                   AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                   AND RTH.HD_RATE_ID = 6
                       and RTB.BENEFIT_CODE = LN_BENEFIT_CODE 
                   AND crow.rate >= RTB.VAL_FROM
                   AND crow.rate <= RTB.VAL_TO
                   AND ld_illustration_date BETWEEN TRUNC (
                                                       RTB.EFFECTIVE_FROM)
                                                AND TRUNC (
                                                       NVL (RTB.EFFECTIVE_TO,
                                                            SYSDATE))
                   AND RTD.TERM = ln_policy_term
                   AND RTD.POLICY_YEAR = ln_policy_year;
         EXCEPTION
            WHEN OTHERS
            THEN
            DBMS_OUTPUT.put_line (
               'error in bonus rates query' || sqlerrm);
               ln_BONUS_RATE := 0;
         END;

         IF crow.ROW_NUMBER = 1
         THEN
            ln_sum_assured_at_risk1 :=
                 ln_sum_covered
               - ln_cashvalue1
               - ln_allocated_contribution * (1 - ln_bid_rate);
            -- for GBA mortality is calculated on fixed sum covered
            ln_sum_assured_at_risk1 := ln_dtl_sum_covered;

            IF ln_sum_assured_at_risk1 < 0
            THEN
               ln_sum_assured_at_risk1 := 0;
            END IF;

            -- calculate admin charges for next policy year
            IF ln_policy_year > 1
            THEN
               ln_sum_assured_at_risk1 :=
                    ln_sum_assured_at_risk1
                  * POWER ( (1 + ln_Indexation_sumassured_rate),
                           ln_policy_year - 1);
            --                        ln_sum_assured_at_risk1   := ln_sum_assured_at_risk1   + round ( ln_sum_assured_at_risk1 *   ln_Indexation_sumassured_rate ,2);
            END IF;


            ln_mortality_charges1 :=
               ROUND (ln_sum_assured_at_risk1 * ln_mortality_rate1, 2);
            ln_net_value :=
                 ln_cashvalue1
               + ln_allocated_contribution
               - ln_admin_charges
               - ln_bid_offer
               - ln_mortality_charges1;
            ln_investment_income1 := (ln_net_value) * crow.rate / 100;
            ln_net_value := ln_net_value + ln_investment_income1;
            ln_im_charges1 := ln_net_value * ln_imc_rate;

            ln_cashvalue1 := ROUND (ln_net_value - ln_im_charges1, 2);


            DBMS_OUTPUT.put_line (
               'ln_mortality_charges1 ' || ln_mortality_charges1);
            DBMS_OUTPUT.put_line (
               'ln_investment_income1 ' || ln_investment_income1);
            DBMS_OUTPUT.put_line ('ln_im_charges1 ' || ln_im_charges1);

            -- BONUS WORKING
            ln_BONUS_RATE1 := ln_BONUS_RATE;

            ln_BONUS_SV1 :=
               ln_BONUS_RATE1 * (ln_sum_covered / 1000) * ln_SV_RATE_OF_BONUS;
            ln_BONUS_AMOUNT1 := ln_BONUS_RATE1 * ln_sum_covered / 1000;

            -- update surrnder value 
            ln_mortality_charges1_running_total := NVL(ln_mortality_charges1_running_total,0) + NVL(ln_mortality_charges1,0);  

            IF ln_product_type =1 THEN 
                ln_SURRENDER_VALUE := ln_SURRENDER_VALUE * NVL(ln_mortality_charges1_running_total,0);
            END IF;     

            ln_SURRENDER_VALUE := CASE WHEN ln_SURRENDER_VALUE > ln_sum_covered THEN ln_sum_covered ELSE ln_SURRENDER_VALUE END;
            
            ln_SV_PAYABLE1 := ln_SURRENDER_VALUE + ln_BONUS_SV1 * (1-ln_bonus_charges_rate);
            ln_DEATH_BENEFIT1 := ln_sum_covered + ln_BONUS_AMOUNT1 ;

            if ln_policy_year = ln_policy_term and ln_SURRENDER_VALUE=0 then 
                ln_SV_PAYABLE1 := ln_SV_PAYABLE1  + ln_sum_covered;                    
            end if;
            
         ELSIF crow.ROW_NUMBER = 2
         THEN
            ln_sum_assured_at_risk2 :=
                 ln_sum_covered
               - ln_cashvalue2
               - ln_allocated_contribution * (1 - ln_bid_rate);
            -- for GBA mortality is calculated on fixed sum covered
            ln_sum_assured_at_risk2 := ln_dtl_sum_covered;

            IF ln_sum_assured_at_risk2 < 0
            THEN
               ln_sum_assured_at_risk2 := 0;
            END IF;

            -- calculate admin charges for next policy year
            IF ln_policy_year > 1
            THEN
               ln_sum_assured_at_risk2 :=
                    ln_sum_assured_at_risk2
                  * POWER ( (1 + ln_Indexation_sumassured_rate),
                           ln_policy_year - 1);
            --                        ln_sum_assured_at_risk2   := ln_sum_assured_at_risk2   + round ( ln_sum_assured_at_risk2 *   ln_Indexation_sumassured_rate ,2);
            END IF;


            ln_mortality_charges2 :=
               ROUND (ln_sum_assured_at_risk2 * ln_mortality_rate1, 2);
            ln_net_value :=
                 ln_cashvalue2
               + ln_allocated_contribution
               - ln_admin_charges
               - ln_bid_offer
               - ln_mortality_charges2;
            ln_investment_income2 := (ln_net_value) * crow.rate / 100;
            ln_net_value := ln_net_value + ln_investment_income2;
            ln_im_charges2 := ln_net_value * ln_imc_rate;

            ln_cashvalue2 := ROUND (ln_net_value - ln_im_charges2, 2);
            -- BONUS WORKING
            ln_BONUS_RATE2 := ln_BONUS_RATE;

            ln_BONUS_SV2 :=
               ln_BONUS_RATE2 * (ln_sum_covered / 1000) * ln_SV_RATE_OF_BONUS;
            ln_BONUS_AMOUNT2 := ln_BONUS_RATE2 * ln_sum_covered / 1000;

            ln_SV_PAYABLE2 := ln_SURRENDER_VALUE + ln_BONUS_SV2 * (1-ln_bonus_charges_rate);
            ln_DEATH_BENEFIT2 := ln_sum_covered + ln_BONUS_AMOUNT2;

            if ln_policy_year = ln_policy_term and ln_SURRENDER_VALUE=0 then 
                ln_SV_PAYABLE2 := ln_SV_PAYABLE2  + ln_sum_covered;                    
            end if;

            ln_inflation_adj_contribution :=
               ROUND (
                    ln_basic_contribution
                  / POWER ( (1 + ln_inflation_factor), (ln_iterator - 1)),
                  6);
         ELSIF crow.ROW_NUMBER = 3
         THEN
            ln_sum_assured_at_risk3 :=
                 ln_sum_covered
               - ln_cashvalue3
               - ln_allocated_contribution * (1 - ln_bid_rate);
            -- for GBA mortality is calculated on fixed sum covered
            ln_sum_assured_at_risk3 := ln_dtl_sum_covered;

            IF ln_sum_assured_at_risk3 < 0
            THEN
               ln_sum_assured_at_risk3 := 0;
            END IF;

            -- calculate admin charges for next policy year
            IF ln_policy_year > 1
            THEN
               ln_sum_assured_at_risk3 :=
                    ln_sum_assured_at_risk3
                  * POWER ( (1 + ln_Indexation_sumassured_rate),
                           ln_policy_year - 1);
            --                        ln_sum_assured_at_risk3   := ln_sum_assured_at_risk3   + round ( ln_sum_assured_at_risk3 *   ln_Indexation_sumassured_rate ,2);
            END IF;


            ln_mortality_charges3 :=
               ROUND (ln_sum_assured_at_risk3 * ln_mortality_rate1, 2);
            ln_net_value :=
                 ln_cashvalue3
               + ln_allocated_contribution
               - ln_admin_charges
               - ln_bid_offer
               - ln_mortality_charges3;
            ln_investment_income3 := (ln_net_value) * crow.rate / 100;
            ln_net_value := ln_net_value + ln_investment_income3;
            ln_im_charges3 := ln_net_value * ln_imc_rate;

            ln_cashvalue3 := ROUND (ln_net_value - ln_im_charges3, 2);

            -- BONUS WORKING
            ln_BONUS_RATE3 := ln_BONUS_RATE;

            ln_BONUS_SV3 :=
               ln_BONUS_RATE3 * (ln_sum_covered / 1000) * ln_SV_RATE_OF_BONUS;
            ln_BONUS_AMOUNT3 := ln_BONUS_RATE3 * ln_sum_covered / 1000;

            ln_SV_PAYABLE3 := ln_SURRENDER_VALUE + ln_BONUS_SV3* (1-ln_bonus_charges_rate);
            ln_DEATH_BENEFIT3 := ln_sum_covered + ln_BONUS_AMOUNT3;

            if ln_policy_year = ln_policy_term and ln_SURRENDER_VALUE=0 then 
                ln_SV_PAYABLE3 := ln_SV_PAYABLE3  + ln_sum_covered;                    
            end if;


         END IF;
      END LOOP;

        ln_inflation_accumulated_cont :=
         ln_inflation_accumulated_cont + ln_inflation_adj_contribution;
      UPDATE TK_ILLUSTRATIONDTL_POS
         SET cash_value1 = ln_cashvalue1,
             cash_value2 = ln_cashvalue2,
             cash_value3 = ln_cashvalue3,
             bid_offer = ln_bid_offer,
             sum_assured_at_risk1 = ln_sum_assured_at_risk1,
             mortality_charges1 = ln_mortality_charges1,
             investment_income1 = ln_investment_income1,
             im_charges1 = ln_im_charges1,
             sum_assured_at_risk2 = ln_sum_assured_at_risk2,
             mortality_charges2 = ln_mortality_charges2,
             investment_income2 = ln_investment_income2,
             im_charges2 = ln_im_charges2,
             sum_assured_at_risk3 = ln_sum_assured_at_risk3,
             mortality_charges3 = ln_mortality_charges3,
             investment_income3 = ln_investment_income3,
             im_charges3 = ln_im_charges3,
             BONUS_RATE1 = ln_BONUS_RATE1,
             BONUS_SV1 = ln_BONUS_SV1,
             BONUS_AMOUNT1 = ln_BONUS_AMOUNT1,
             SV_PAYABLE1 = ln_SV_PAYABLE1,
             DEATH_BENEFIT1 = ln_DEATH_BENEFIT1,
             BONUS_RATE2 = ln_BONUS_RATE2,
             BONUS_SV2 = ln_BONUS_SV2,
             BONUS_AMOUNT2 = ln_BONUS_AMOUNT2,
             SV_PAYABLE2 = ln_SV_PAYABLE2,
             DEATH_BENEFIT2 = ln_DEATH_BENEFIT2,
             BONUS_RATE3 = ln_BONUS_RATE3,
             BONUS_SV3 = ln_BONUS_SV3,
             BONUS_AMOUNT3 = ln_BONUS_AMOUNT3,
             SV_PAYABLE3 = ln_SV_PAYABLE3,
             DEATH_BENEFIT3 = ln_DEATH_BENEFIT3,
             INFLATION_ADJ_CONTRIBUTION = ln_inflation_adj_contribution,
             INFLATION_ACCUMULATED_CONTRI = ln_inflation_accumulated_cont,
             SURRENDER_VALUE=ln_SURRENDER_VALUE
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND ILLUSTRATION_ID = P_ILLUSTRATION_ID
             AND policy_year = ln_policy_year;

      ln_policy_year := ln_policy_year + 1;
      ln_iterator := ln_iterator + 1;
   END LOOP;

   COMMIT;
END;
/

prompt
prompt Creating procedure GENERATE_IL_DETAIL_POS_1MAR25_P
prompt ==================================================
prompt
CREATE OR REPLACE PROCEDURE GENERATE_IL_DETAIL_POS_1mar25_P (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_policy_year                  NUMBER;
   ln_allocation_percentage        NUMBER;
   ln_allocation_contribution      NUMBER;
   ln_mortality_rate1              NUMBER;
   ln_mortality_rate2              NUMBER;

   ln_age1                         NUMBER;
   ln_age2                         NUMBER;
   lc_gender1                      VARCHAR2 (1);
   lc_gender2                      VARCHAR2 (1);
   ln_effective_age_factor         NUMBER;
   ln_effective_age                NUMBER;
   ln_basic_contribution           NUMBER;
   ln_invested_contribution        NUMBER;
   ln_policy_term                  NUMBER;
   ln_pay_term                     NUMBER;

   ln_sum_covered                  NUMBER;
   ln_sum_at_risk                  NUMBER;

   ln_mortality_charges            NUMBER;
   ln_reins_amount                 NUMBER;
   ln_ptf_surplus                  NUMBER;
   ln_waqala_charges               NUMBER;
   ln_contingency_margin           NUMBER;

   ln_admin_charges                NUMBER;


   ln_Indexation_admin_ch_rate     NUMBER;

   ln_Indexation_sumassured_rate   NUMBER;
   ln_Indexation_contribute_rate   NUMBER;
   ln_waqala_rate                  NUMBER;
   ln_contingency_margin_rate      NUMBER;
   ln_Investment_income_rate       NUMBER;
   ln_expected_claim_rate          NUMBER;
   ln_new_age1                     NUMBER := 0;

   lc_is_joint_life                VARCHAR2 (1) := 'N';
   LC_BENEFIT_CODE                 NUMBER;

   ln_PAIDUP_VALUE                 NUMBER;
   ln_SV_RATE_OF_SA                NUMBER;
   ln_SURRENDER_VALUE              NUMBER;
   ln_SV_RATE_OF_BONUS             NUMBER;
   ln_x                            NUMBER;
   ln_y                            NUMBER;
   ln_z                            NUMBER;
   ln_mx_at_maturity_age           NUMBER;
   ln_dx_at_maturity_age           NUMBER;
   ln_nx_at_maturity_age           NUMBER;

   ln_mx_at_maturity_age_bonus     NUMBER;
   ln_dx_at_maturity_age_bonus     NUMBER;
   ln_nx_at_maturity_age_bonus     NUMBER;

   ln_mx_at_current_age            NUMBER;
   ln_dx_at_current_age            NUMBER;
   ln_nx_at_current_age            NUMBER;
   ln_surrender_charge_rate        NUMBER;
   ld_illustration_date            DATE;
   ln_product_type                 number;

BEGIN
   -- initialize variables
   ln_policy_year := 1;
   ln_invested_contribution := 0;
   ln_ptf_surplus := 0;

   ln_mx_at_current_age := 0;
   ln_dx_at_current_age := 0;
   ln_nx_at_current_age := 0;

   -- Get Main Plan ( basic benefit) code
   SELECT BENEFIT_CODE
     INTO LC_BENEFIT_CODE
     FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND MAPPING_TYPE = 'B';

   SELECT 
       PRODUCT_TYPE_IL into ln_product_type 
    FROM GLAS_SUB_PRODUCT_SETUP_T 
    WHERE     ORG_ID = P_ORG_ID
      AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
      AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
 ;
 
   BEGIN
      -- get basic details from illustration header
      SELECT NVL (age1, 0),
             NVL (age2, 0),
             basic_contribution,
             SUM_COVERED_MODAL,
             GENDER1,
             GENDER2,
             POLICY_TERM,
             PAYMENT_TERM,
             NVL (SUM_COVERED_INDEX, 0) SUM_COVERED_INDEX,
             NVL (CONTRIBUTION_INDEX, 0) CONTRIBUTION_INDEX,
             NVL (CONT_MARGIN, 0) CONT_MARGIN,
             NVL (WAQALA_FEE, 0) WAQALA_FEE,
             NVL (EXPECTED_CLAIM, 0) EXPECTED_CLAIM,
             NVL (INVESTMENT_INCOME, 0) INVESTMENT_INCOME,
             TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE)),
             nvl( SECOND_LIFE,'N') 
        INTO ln_age1,
             ln_age2,
             ln_basic_contribution,
             ln_SUM_COVERED,
             lc_gender1,
             lc_gender2,
             ln_POLICY_TERM,
             ln_pay_term,
             ln_Indexation_sumassured_rate,
             ln_Indexation_contribute_rate,
             ln_contingency_margin_rate,
             ln_waqala_rate,
             ln_expected_claim_rate,
             ln_Investment_income_rate,
             ld_illustration_date,
             lc_is_joint_life
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_SUM_COVERED := 0;
         lc_gender1 := 0;
         lc_gender2 := 0;
         ln_POLICY_TERM := 0;
         ln_Indexation_sumassured_rate := 0;
         ln_Indexation_contribute_rate := 0;
         ln_contingency_margin_rate := 0;
         ln_waqala_rate := 0;
         ln_expected_claim_rate := 0;
         ln_Investment_income_rate := 0;
         ld_illustration_date := TRUNC (SYSDATE);
   END;

   BEGIN
      -- get admin charges for sub classes setup   Rate Type 21 is Policy Fee / admin ch
      SELECT NVL (RATE, 0)
        INTO ln_admin_charges
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 21
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_admin_charges := 0;
   END;

   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (RATE, 0)
        INTO ln_Indexation_admin_ch_rate
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 20
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_Indexation_admin_ch_rate := 0;
   END;

   -- get mx , dx, nx at maturity age
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age,
             ln_dx_at_maturity_age,
             ln_nx_at_maturity_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM - 2;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age := 0;
         ln_dx_at_maturity_age := 0;
         ln_nx_at_maturity_age := 0;
   END;

   -- get mx , dx, nx at maturity age for bounus
   BEGIN
      -- get SV TABLE DATA at maturity age - 2
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age_bonus,
             ln_dx_at_maturity_age_bonus,
             ln_nx_at_maturity_age_bonus
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM-2;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age_bonus := 0;
         ln_dx_at_maturity_age_bonus := 0;
         ln_nx_at_maturity_age_bonus := 0;
   END;

   -- get mx , dx, nx at current age + 1
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_current_age, ln_dx_at_current_age, ln_nx_at_current_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + 1;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_current_age := 0;
         ln_dx_at_current_age := 0;
         ln_nx_at_current_age := 0;
   END;

   ln_y :=
      CASE
         WHEN (ln_nx_at_current_age - ln_nx_at_maturity_age) = 0
         THEN
            0
         ELSE
              (  ln_mx_at_current_age
               - ln_mx_at_maturity_age
               + ln_dx_at_maturity_age)
            / (ln_nx_at_current_age - ln_nx_at_maturity_age)
      END;

   -- get age factor to calculate effective age in case of joint life
   IF lc_is_joint_life = 'Y'
   THEN
      ln_new_age1 := ln_age2 - 2;
      
   END IF;

   IF ln_new_age1 > 0 AND lc_is_joint_life = 'Y'
   THEN
      SELECT VALUE
        INTO ln_effective_age_factor
        FROM TK_EFFECTIVE_AGE_CHART_T
       WHERE AGE_DIFFERENCE = ABS (ln_age1 - ln_new_age1);
   ELSE
      ln_effective_age_factor := 0;
   END IF;

   -- calculate effective age in case of joint life
   IF ln_age1 >= ln_new_age1 OR lc_is_joint_life = 'N'
   THEN
      ln_effective_age := ln_age1 - ln_effective_age_factor;
   ELSE
      ln_effective_age := ln_new_age1 - ln_effective_age_factor;
   END IF;



   -- delete existing data before generating fresh data
   DELETE FROM TK_ILLUSTRATIONDTL_POS
         WHERE     ORG_ID = P_ORG_ID
               AND BRANCH_ID = P_BRANCH_ID
               AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND ISSUE_COUNT = P_ISSUE_COUNT
               AND DOCUMENT_NO = P_DOCUMENT_NO
               AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND ILLUSTRATION_ID = P_ILLUSTRATION_ID;

   COMMIT;

   ln_effective_age := ln_effective_age - 1; -- reduce age one year to add policy year later as below query it will add one year again for first row
   DBMS_OUTPUT.put_line ('effective age :' || TO_CHAR (ln_effective_age));

   WHILE ln_policy_year <= ln_POLICY_TERM
   LOOP
      --        ln_allocation_percentage
      --           select RATE  into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= 1 AND  TYPE_ID=1 AND NO_OF_YEARS=2;
      BEGIN
         SELECT RATE
           INTO ln_allocation_percentage
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 1
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_allocation_percentage := 0;
      END;

      -- get surrender charges rate

      BEGIN
         SELECT RATE
           INTO ln_surrender_charge_rate
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 16
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_surrender_charge_rate := 0;
      END;

      --           select RATE into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= P_ORG_ID AND  TYPE_ID=1 AND NO_OF_YEARS=1;

      --        ln_mortality_rate1
      --           begin
      --
      --            --   select m_rate into ln_mortality_rate1 from tk_mortality_rate_t where m_age=ln_effective_age +ln_policy_year and m_year=(ln_effective_age +1 -17) ;
      --            select M_RATE into ln_mortality_rate1
      --            FROM GLAS_SUB_PROD_MORT_RT_T
      --            where  ORG_ID= P_ORG_ID  AND  MAIN_PRODUCT_CODE=P_MAIN_PRODUCT_CODE
      --            AND SUB_PRODUCT_CODE=P_SUB_PRODUCT_CODE AND  BENEFIT_CODE= LC_BENEFIT_CODE and M_YEAR =1 and M_age=ln_effective_age +ln_policy_year and GENDER=lc_gender1 ;
      --            dbms_output.put_line('mortality rate 1 success:'||ln_mortality_rate1);
      --           exception when others then
      --                ln_mortality_rate1:=0;
      --           end;

      BEGIN
         SELECT RTD.RATE
           INTO ln_mortality_rate1
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 2
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
                AND ln_policy_year >= RTB.VAL_FROM
                AND ln_policy_year <= RTB.VAL_TO
                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
                AND RTD.TERM = ln_policy_term
                AND RTD.age = ln_effective_age + 1;

         ln_mortality_rate1 := ln_mortality_rate1 / 1000;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate1 := 0;
      END;

      --        ln_mortality_rate2
      BEGIN
         --            select m_rate into ln_mortality_rate2 from tk_mortality_rate_t where m_age=ln_age2+ ln_policy_year and m_year= (ln_age2  -17);
         SELECT M_RATE
           INTO ln_mortality_rate2
           FROM GLAS_SUB_PROD_MORT_RT_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND M_YEAR = 1
                AND m_age = ln_age2 + ln_policy_year
                AND GENDER = lc_gender2;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate2 := 0;
      END;


      -- calculate admin charges for next policy year
      IF ln_policy_year > 1
      THEN
         ln_admin_charges :=
              ln_admin_charges
            + ROUND (ln_admin_charges * ln_Indexation_admin_ch_rate, 2);
         ln_SUM_COVERED :=
              ln_SUM_COVERED
            + ROUND (ln_SUM_COVERED * ln_Indexation_sumassured_rate, 2);

         IF ln_policy_year <= ln_pay_term
         THEN
            ln_basic_contribution :=
                 ln_basic_contribution
               + ROUND (
                    ln_basic_contribution * ln_Indexation_contribute_rate,
                    2);
         ELSE
            ln_basic_contribution := 0;
         END IF;
      END IF;

      ln_invested_contribution :=
         ln_invested_contribution + ln_basic_contribution;

      --          ln_sum_at_risk             := ln_sum_covered + ln_ptf_surplus;
      ln_allocation_contribution :=
         ROUND (ln_basic_contribution * ln_allocation_percentage, 2);
      --        ln_mortality_charges       := round( ln_sum_at_risk * (ln_mortality_rate1+ln_mortality_rate2)  ,2);
      --         ln_waqala_charges          := round( ln_mortality_charges * ln_waqala_rate ,2);
      --       ln_contingency_margin      := round( ln_mortality_charges * ln_contingency_margin_rate ,2);
      --   ln_reins_amount            := round( ln_mortality_charges - ln_waqala_charges - ln_contingency_margin ,2);

      --       ln_ptf_surplus             := round( (ln_reins_amount +ln_contingency_margin)  * ln_Investment_income_rate  ,2)+
      --                                   round(ln_reins_amount * (1- ln_expected_claim_rate),2);

      ln_PAIDUP_VALUE := (ln_sum_covered * ln_policy_year) / ln_POLICY_TERM;

      -- get mx , dx, nx at current age - 2
      ln_mx_at_current_age := 0;
      ln_dx_at_current_age := 0;
      ln_nx_at_current_age := 0;

      BEGIN
         -- get SV TABLE DATA 
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year - 2;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
      END;

      ln_x :=
         CASE
            WHEN ln_dx_at_current_age = 0
            THEN
               0
            ELSE
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age
                  + ln_dx_at_maturity_age)
               / ln_dx_at_current_age
         END;


      -- get mx , dx, nx at current age - 3
      ln_mx_at_current_age := 0;
      ln_dx_at_current_age := 0;
      ln_nx_at_current_age := 0;

--      BEGIN
--         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
--         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
--           INTO ln_mx_at_current_age,
--                ln_dx_at_current_age,
--                ln_nx_at_current_age
--           FROM IL_SV_TABLE_T
--          WHERE     ORG_ID = P_ORG_ID
--                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
--                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
--                AND RATE_CODE = ln_age1 + ln_policy_year - 3;
--
--         ln_z :=
--            CASE
--               WHEN ln_dx_at_current_age = 0
--               THEN
--                  0
--               ELSE
--                    (ln_nx_at_current_age - ln_nx_at_maturity_age)
--                  / ln_dx_at_current_age
--            END;
--
--         LN_SV_RATE_OF_SA :=
--            CASE
--               WHEN ln_policy_year < 3
--               THEN
--                  0
--               WHEN ln_x = 1
--               THEN
--                  1
--               ELSE
--                    ln_x
--                  - (  CASE
--                          WHEN ln_policy_year = 3 THEN ln_y / 1.036
--                          ELSE ln_y
--                       END
--                     * ln_z)
--            END;
--      EXCEPTION
--         WHEN OTHERS
--     --    THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_SA
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 7 -- it is for SV of SA rating header
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                  AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN LN_POLICY_YEAR  ELSE NVL(RTD.POLICY_YEAR,1) END
                ;
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_SA :=0;
          END;
--      END;
        
--      LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered;
        IF LN_SV_RATE_OF_SA<>0 and ln_product_type=1 THEN 
            LN_SURRENDER_VALUE := 10000 / LN_SV_RATE_OF_SA ;
        elsif ln_product_type<>1 then  
            LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered /10000;
        
        END IF;
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;

      -- get mx , dx, nx at current age
      BEGIN
         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year -2;

          LN_SV_RATE_OF_BONUS :=
         CASE
            WHEN (ln_dx_at_current_age = 0 OR ln_policy_year < 4 ) and ln_product_type=1
            THEN
               0
            ELSE
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age_bonus
                  + ln_dx_at_maturity_age_bonus)
               / ln_dx_at_current_age
         END;

         IF ln_product_type = 1 THEN 

                LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
                CASE
                    WHEN ln_dx_at_current_age = 0  OR ln_policy_year < 3
                    THEN
                       0
                    ELSE
                         (  ln_mx_at_current_age
                          - ln_mx_at_maturity_age_bonus
                          + ln_dx_at_maturity_age_bonus)
                       / ln_dx_at_current_age
                 END;
       
         END IF;     

      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_BONUS
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
            WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 8 -- it is for SV of Bonus rating header
               and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
--                AND RTD.TERM = ln_policy_term
--                AND RTD.age = ln_effective_age + 1
            --    and RTD.POLICY_YEAR= (ln_POLICY_TERM - ln_policy_year )
                
                AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN (ln_POLICY_TERM - ln_policy_year )  ELSE NVL(RTD.POLICY_YEAR,1) END
                               ;
                                                        
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_BONUS :=0;
          END;

         IF ln_product_type =1 THEN 

            LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
            CASE
            WHEN ln_policy_year < 3
            THEN
               0
            ELSE
                 LN_SV_RATE_OF_BONUS
            END;
         END IF; 
           LN_SV_RATE_OF_BONUS := 
                 CASE
                            WHEN ln_policy_year < 4 and ln_product_type =1
                            THEN
                               0
                            ELSE
                                 LN_SV_RATE_OF_BONUS
                         END;
             
      END;


      INSERT INTO TK_ILLUSTRATIONDTL_POS (ORG_ID,
                                          BRANCH_ID,
                                          MAIN_PRODUCT_CODE,
                                          SUB_PRODUCT_CODE,
                                          ISSUE_COUNT,
                                          DOCUMENT_NO,
                                          DOCUMENT_YEAR,
                                          APPLICATION_ID,
                                          ILLUSTRATION_ID,
                                          EFFECTIVE_AGE,
                                          POLICY_YEAR,
                                          BASIC_CONTRIBUTION,
                                          INVESTED_CONTRIBUTION,
                                          ALLOCATION_PERCENTAGE,
                                          ALLOCATION_CONTRIBUTION,
                                          MORTALITY_RATE1,
                                          MORTALITY_RATE2,
                                          SUM_ASSURED,
                                          SUM_ASSURED_AT_RISK,
                                          MORTALITY_CHARGES,
                                          PTF_SURPLUS,
                                          WAQALA_CHARGES,
                                          CONTINGENCY_MARGIN,
                                          REINS_AMOUNT,
                                          ADMIN_CHARGES,
                                          PAIDUP_VALUE,
                                          SV_RATE_OF_SA,
                                          SURRENDER_VALUE,
                                          SV_RATE_OF_BONUS,
                                          SURRENDER_CHARGE_RATE)
           VALUES (P_ORG_ID,
                   P_BRANCH_ID,
                   P_MAIN_PRODUCT_CODE,
                   P_SUB_PRODUCT_CODE,
                   P_ISSUE_COUNT,
                   P_DOCUMENT_NO,
                   P_DOCUMENT_YEAR,
                   P_APPLICATION_ID,
                   P_ILLUSTRATION_ID,
                   ln_effective_age + ln_policy_year,
                   ln_policy_year,
                   ln_basic_contribution,
                   ln_invested_contribution,
                   ln_allocation_percentage,
                   ln_allocation_contribution,
                   ln_mortality_rate1,
                   ln_mortality_rate2,
                   ln_SUM_COVERED,
                   ln_sum_at_risk,
                   ln_mortality_charges,
                   ln_ptf_surplus,
                   ln_waqala_charges,
                   ln_contingency_margin,
                   ln_reins_amount,
                   ln_admin_charges,
                   LN_PAIDUP_VALUE,
                   LN_SV_RATE_OF_SA,
                   LN_SURRENDER_VALUE,
                   LN_SV_RATE_OF_BONUS,
                   ln_surrender_charge_rate);

      -- increment the counter
      ln_policy_year := ln_policy_year + 1;
   END LOOP;

   COMMIT;
   UPDATE_ILLUST_CASHVALUE_POS_P (P_ORG_ID,
                                  P_BRANCH_ID,
                                  P_MAIN_PRODUCT_CODE,
                                  P_SUB_PRODUCT_CODE,
                                  P_ISSUE_COUNT,
                                  P_DOCUMENT_NO,
                                  P_DOCUMENT_YEAR,
                                  P_APPLICATION_ID,
                                  P_ILLUSTRATION_ID);
END;
/

prompt
prompt Creating procedure GENERATE_IL_DETAIL_POS_P
prompt ===========================================
prompt
CREATE OR REPLACE PROCEDURE GENERATE_IL_DETAIL_POS_P (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_policy_year                  NUMBER;
   ln_allocation_percentage        NUMBER;
   ln_allocation_contribution      NUMBER;
   ln_mortality_rate1              NUMBER;
   ln_mortality_rate2              NUMBER;

   ln_age1                         NUMBER;
   ln_age2                         NUMBER;
   lc_gender1                      VARCHAR2 (1);
   lc_gender2                      VARCHAR2 (1);
   ln_effective_age_factor         NUMBER;
   ln_effective_age                NUMBER;
   ln_basic_contribution           NUMBER;
   ln_invested_contribution        NUMBER;
   ln_policy_term                  NUMBER;
   ln_pay_term                     NUMBER;

   ln_sum_covered                  NUMBER;
   ln_sum_at_risk                  NUMBER;

   ln_mortality_charges            NUMBER;
   ln_reins_amount                 NUMBER;
   ln_ptf_surplus                  NUMBER;
   ln_waqala_charges               NUMBER;
   ln_contingency_margin           NUMBER;

   ln_admin_charges                NUMBER;


   ln_Indexation_admin_ch_rate     NUMBER;

   ln_Indexation_sumassured_rate   NUMBER;
   ln_Indexation_contribute_rate   NUMBER;
   ln_waqala_rate                  NUMBER;
   ln_contingency_margin_rate      NUMBER;
   ln_Investment_income_rate       NUMBER;
   ln_expected_claim_rate          NUMBER;
   ln_new_age1                     NUMBER := 0;

   lc_is_joint_life                VARCHAR2 (1) := 'N';
   LC_BENEFIT_CODE                 NUMBER;

   ln_PAIDUP_VALUE                 NUMBER;
   ln_SV_RATE_OF_SA                NUMBER;
   ln_SURRENDER_VALUE              NUMBER;
   ln_SV_RATE_OF_BONUS             NUMBER;
   ln_DISCOUNTING_RATE             NUMBER;
   ln_x                            NUMBER;
   ln_y                            NUMBER;
   ln_z                            NUMBER;
   ln_mx_at_maturity_age           NUMBER;
   ln_dx_at_maturity_age           NUMBER;
   ln_nx_at_maturity_age           NUMBER;

   ln_mx_at_maturity_age_bonus     NUMBER;
   ln_dx_at_maturity_age_bonus     NUMBER;
   ln_nx_at_maturity_age_bonus     NUMBER;

   ln_mx_at_current_age            NUMBER;
   ln_dx_at_current_age            NUMBER;
   ln_nx_at_current_age            NUMBER;
   ln_surrender_charge_rate        NUMBER;
   ld_illustration_date            DATE;
      ln_product_type                 number;

BEGIN
   -- initialize variables
   ln_policy_year := 1;
   ln_invested_contribution := 0;
   ln_ptf_surplus := 0;

   ln_mx_at_current_age := 0;
   ln_dx_at_current_age := 0;
   ln_nx_at_current_age := 0;

   -- Get Main Plan ( basic benefit) code
   SELECT BENEFIT_CODE
     INTO LC_BENEFIT_CODE
     FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND MAPPING_TYPE = 'B';

  SELECT 
       PRODUCT_TYPE_IL into ln_product_type 
    FROM GLAS_SUB_PRODUCT_SETUP_T 
    WHERE     ORG_ID = P_ORG_ID
      AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
      AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
 ;
   BEGIN
      -- get basic details from illustration header
      SELECT NVL (age1, 0),
             NVL (age2, 0),
             basic_contribution,
             SUM_COVERED_MODAL,
             GENDER1,
             GENDER2,
             POLICY_TERM,
             PAYMENT_TERM,
             NVL (SUM_COVERED_INDEX, 0) SUM_COVERED_INDEX,
             NVL (CONTRIBUTION_INDEX, 0) CONTRIBUTION_INDEX,
             NVL (CONT_MARGIN, 0) CONT_MARGIN,
             NVL (WAQALA_FEE, 0) WAQALA_FEE,
             NVL (EXPECTED_CLAIM, 0) EXPECTED_CLAIM,
             NVL (INVESTMENT_INCOME, 0) INVESTMENT_INCOME,
             TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE)),
             nvl( SECOND_LIFE,'N') 
        INTO ln_age1,
             ln_age2,
             ln_basic_contribution,
             ln_SUM_COVERED,
             lc_gender1,
             lc_gender2,
             ln_POLICY_TERM,
             ln_pay_term,
             ln_Indexation_sumassured_rate,
             ln_Indexation_contribute_rate,
             ln_contingency_margin_rate,
             ln_waqala_rate,
             ln_expected_claim_rate,
             ln_Investment_income_rate,
             ld_illustration_date,
             lc_is_joint_life
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_SUM_COVERED := 0;
         lc_gender1 := 0;
         lc_gender2 := 0;
         ln_POLICY_TERM := 0;
         ln_Indexation_sumassured_rate := 0;
         ln_Indexation_contribute_rate := 0;
         ln_contingency_margin_rate := 0;
         ln_waqala_rate := 0;
         ln_expected_claim_rate := 0;
         ln_Investment_income_rate := 0;
         ld_illustration_date := TRUNC (SYSDATE);
   END;

   BEGIN
      -- get admin charges for sub classes setup   Rate Type 21 is Policy Fee / admin ch
      SELECT NVL (RATE, 0)
        INTO ln_admin_charges
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 21
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_admin_charges := 0;
   END;

   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (RATE, 0)
        INTO ln_Indexation_admin_ch_rate
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 20
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_Indexation_admin_ch_rate := 0;
   END;

   -- get mx , dx, nx at maturity age
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age,
             ln_dx_at_maturity_age,
             ln_nx_at_maturity_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM - 2;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age := 0;
         ln_dx_at_maturity_age := 0;
         ln_nx_at_maturity_age := 0;
   END;

   -- get mx , dx, nx at maturity age for bounus
   BEGIN
      -- get SV TABLE DATA at maturity age - 2
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age_bonus,
             ln_dx_at_maturity_age_bonus,
             ln_nx_at_maturity_age_bonus
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age_bonus := 0;
         ln_dx_at_maturity_age_bonus := 0;
         ln_nx_at_maturity_age_bonus := 0;
   END;

   -- get mx , dx, nx at current age + 1
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_current_age, ln_dx_at_current_age, ln_nx_at_current_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + 1;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_current_age := 0;
         ln_dx_at_current_age := 0;
         ln_nx_at_current_age := 0;
   END;

   ln_y :=
      CASE
         WHEN (ln_nx_at_current_age - ln_nx_at_maturity_age) = 0
         THEN
            0
         ELSE
              (  ln_mx_at_current_age
               - ln_mx_at_maturity_age
               + ln_dx_at_maturity_age)
            / (ln_nx_at_current_age - ln_nx_at_maturity_age)
      END;

   -- get age factor to calculate effective age in case of joint life
   IF lc_is_joint_life = 'Y'
   THEN
      ln_new_age1 := ln_age2 - 2;
   END IF;

   IF ln_new_age1 > 0 AND lc_is_joint_life = 'Y'
   THEN
      SELECT VALUE
        INTO ln_effective_age_factor
        FROM TK_EFFECTIVE_AGE_CHART_T
       WHERE AGE_DIFFERENCE = ABS (ln_age1 - ln_new_age1);
   ELSE
      ln_effective_age_factor := 0;
   END IF;

   -- calculate effective age in case of joint life
   IF ln_age1 >= ln_new_age1 OR lc_is_joint_life = 'N'
   THEN
      ln_effective_age := ln_age1 - ln_effective_age_factor;
   ELSE
      ln_effective_age := ln_new_age1 - ln_effective_age_factor;
   END IF;



   -- delete existing data before generating fresh data
   DELETE FROM TK_ILLUSTRATIONDTL_POS
         WHERE     ORG_ID = P_ORG_ID
               AND BRANCH_ID = P_BRANCH_ID
               AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND ISSUE_COUNT = P_ISSUE_COUNT
               AND DOCUMENT_NO = P_DOCUMENT_NO
               AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND ILLUSTRATION_ID = P_ILLUSTRATION_ID;

   COMMIT;

   ln_effective_age := ln_effective_age - 1; -- reduce age one year to add policy year later as below query it will add one year again for first row
   DBMS_OUTPUT.put_line ('effective age :' || TO_CHAR (ln_effective_age));

   WHILE ln_policy_year <= ln_POLICY_TERM
   LOOP
      --        ln_allocation_percentage
      --           select RATE  into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= 1 AND  TYPE_ID=1 AND NO_OF_YEARS=2;
      BEGIN
         SELECT RATE
           INTO ln_allocation_percentage
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 1
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_allocation_percentage := 0;
      END;

      -- get surrender charges rate

      BEGIN
         SELECT RATE
           INTO ln_surrender_charge_rate
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 16
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_surrender_charge_rate := 0;
      END;

      --           select RATE into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= P_ORG_ID AND  TYPE_ID=1 AND NO_OF_YEARS=1;

      --        ln_mortality_rate1
      --           begin
      --
      --            --   select m_rate into ln_mortality_rate1 from tk_mortality_rate_t where m_age=ln_effective_age +ln_policy_year and m_year=(ln_effective_age +1 -17) ;
      --            select M_RATE into ln_mortality_rate1
      --            FROM GLAS_SUB_PROD_MORT_RT_T
      --            where  ORG_ID= P_ORG_ID  AND  MAIN_PRODUCT_CODE=P_MAIN_PRODUCT_CODE
      --            AND SUB_PRODUCT_CODE=P_SUB_PRODUCT_CODE AND  BENEFIT_CODE= LC_BENEFIT_CODE and M_YEAR =1 and M_age=ln_effective_age +ln_policy_year and GENDER=lc_gender1 ;
      --            dbms_output.put_line('mortality rate 1 success:'||ln_mortality_rate1);
      --           exception when others then
      --                ln_mortality_rate1:=0;
      --           end;

      BEGIN
         SELECT RTD.RATE
           INTO ln_mortality_rate1
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 2
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
                AND ln_policy_year >= RTB.VAL_FROM
                AND ln_policy_year <= RTB.VAL_TO
                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
                AND RTD.TERM = ln_policy_term
                AND RTD.age = ln_effective_age + 1;

         ln_mortality_rate1 := ln_mortality_rate1 / 1000;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate1 := 0;
      END;

      --        ln_mortality_rate2
      BEGIN
         --            select m_rate into ln_mortality_rate2 from tk_mortality_rate_t where m_age=ln_age2+ ln_policy_year and m_year= (ln_age2  -17);
         SELECT M_RATE
           INTO ln_mortality_rate2
           FROM GLAS_SUB_PROD_MORT_RT_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND M_YEAR = 1
                AND m_age = ln_age2 + ln_policy_year
                AND GENDER = lc_gender2;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate2 := 0;
      END;


      -- calculate admin charges for next policy year
      IF ln_policy_year > 1
      THEN
         ln_admin_charges :=
              ln_admin_charges
            + ROUND (ln_admin_charges * ln_Indexation_admin_ch_rate, 2);
         ln_SUM_COVERED :=
              ln_SUM_COVERED
            + ROUND (ln_SUM_COVERED * ln_Indexation_sumassured_rate, 2);

         IF ln_policy_year <= ln_pay_term
         THEN
            ln_basic_contribution :=
                 ln_basic_contribution
               + ROUND (
                    ln_basic_contribution * ln_Indexation_contribute_rate,
                    2);
         ELSE
            ln_basic_contribution := 0;
         END IF;
      END IF;

      ln_invested_contribution :=
         ln_invested_contribution + ln_basic_contribution;

      --          ln_sum_at_risk             := ln_sum_covered + ln_ptf_surplus;
      ln_allocation_contribution :=
         ROUND (ln_basic_contribution * ln_allocation_percentage, 2);
      --        ln_mortality_charges       := round( ln_sum_at_risk * (ln_mortality_rate1+ln_mortality_rate2)  ,2);
      --         ln_waqala_charges          := round( ln_mortality_charges * ln_waqala_rate ,2);
      --       ln_contingency_margin      := round( ln_mortality_charges * ln_contingency_margin_rate ,2);
      --   ln_reins_amount            := round( ln_mortality_charges - ln_waqala_charges - ln_contingency_margin ,2);

      --       ln_ptf_surplus             := round( (ln_reins_amount +ln_contingency_margin)  * ln_Investment_income_rate  ,2)+
      --                                   round(ln_reins_amount * (1- ln_expected_claim_rate),2);

      ln_PAIDUP_VALUE := (ln_sum_covered * ln_policy_year) / ln_POLICY_TERM;

      -- get mx , dx, nx at current age - 2
      ln_mx_at_current_age := 0;
      ln_dx_at_current_age := 0;
      ln_nx_at_current_age := 0;

      BEGIN
         -- get SV TABLE DATA 
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
      END;

      ln_x :=
         CASE
            WHEN ln_dx_at_current_age = 0
            THEN
               0
            ELSE
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age
                  + ln_dx_at_maturity_age)
               / ln_dx_at_current_age
         END;


      -- get mx , dx, nx at current age - 3
--      ln_mx_at_current_age := 0;
--      ln_dx_at_current_age := 0;
--      ln_nx_at_current_age := 0;

--      BEGIN
--         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
--         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
--           INTO ln_mx_at_current_age,
--                ln_dx_at_current_age,
--                ln_nx_at_current_age
--           FROM IL_SV_TABLE_T
--          WHERE     ORG_ID = P_ORG_ID
--                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
--                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
--                AND RATE_CODE = ln_age1 + ln_policy_year - 3;
--
--         ln_z :=
--            CASE
--               WHEN ln_dx_at_current_age = 0
--               THEN
--                  0
--               ELSE
--                    (ln_nx_at_current_age - ln_nx_at_maturity_age)
--                  / ln_dx_at_current_age
--            END;
--
--         LN_SV_RATE_OF_SA :=
--            CASE
--               WHEN ln_policy_year < 3
--               THEN
--                  0
--               WHEN ln_x = 1
--               THEN
--                  1
--               ELSE
--                    ln_x
--                  - (  CASE
--                          WHEN ln_policy_year = 3 THEN ln_y / 1.036
--                          ELSE ln_y
--                       END
--                     * ln_z)
--            END;
--      EXCEPTION
--         WHEN OTHERS
--     --    THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_SA
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 7 -- it is for SV of SA rating header
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                  AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN LN_POLICY_YEAR  ELSE NVL(RTD.POLICY_YEAR,1) END
                ;
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_SA :=0;
          END;
--      END;

--      LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered;
        IF LN_SV_RATE_OF_SA<>0 and ln_product_type=1 THEN 
            LN_SURRENDER_VALUE := 10000 / LN_SV_RATE_OF_SA ;
        elsif ln_product_type<>1 then  
            LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered /10000;
        
        END IF;
        
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;

      -- get mx , dx, nx at current age
      BEGIN
         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year ;

          LN_SV_RATE_OF_BONUS :=
         CASE
            WHEN (ln_dx_at_current_age = 0 OR ln_policy_year < 4 ) and ln_product_type = 1 
            THEN
               0
            ELSE 
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age_bonus
                  + ln_dx_at_maturity_age_bonus)
               / ln_dx_at_current_age
         END;
         
--           IF ln_product_type = 1 THEN 
--
--                    LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
--                    CASE
--                        WHEN ln_dx_at_current_age = 0  OR ln_policy_year < 3
--                        THEN
--                           0
--                        ELSE
--                             (  ln_mx_at_current_age
--                              - ln_mx_at_maturity_age_bonus
--                              + ln_dx_at_maturity_age_bonus)
--                           / ln_dx_at_current_age
--                     END;
--            end if; 
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_BONUS
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
            WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 8 -- it is for SV of Bonus rating header
               and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
--                AND RTD.TERM = ln_policy_term
--                AND RTD.age = ln_effective_age + 1
            --    and RTD.POLICY_YEAR= (ln_POLICY_TERM - ln_policy_year )
                
                AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN (ln_POLICY_TERM - ln_policy_year )  ELSE NVL(RTD.POLICY_YEAR,1) END
                               ;
                                                        
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_BONUS :=0;
          END;
          
           LN_SV_RATE_OF_BONUS := 
                 CASE
                            WHEN ln_policy_year < 4 and ln_product_type = 1 
                            THEN
                               0
                            ELSE
                                 LN_SV_RATE_OF_BONUS
                         END;
             
      END;
      ln_DISCOUNTING_RATE :=0;
         BEGIN
          SELECT RTD.RATE
           INTO ln_DISCOUNTING_RATE
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
            WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 9 -- it is for discounting rate in rating header
               and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
--                AND RTD.TERM = ln_policy_term
--                AND RTD.age = ln_effective_age + 1
            --    and RTD.POLICY_YEAR= (ln_POLICY_TERM - ln_policy_year )
                
                AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN (ln_POLICY_TERM - ln_policy_year )  ELSE NVL(RTD.POLICY_YEAR,1) END
                               ;
                                                        
                EXCEPTION WHEN OTHERS THEN
                ln_DISCOUNTING_RATE :=0;
          END;      

            IF ln_product_type =1 THEN 
                LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
                CASE
                WHEN ln_policy_year < 3
                THEN
                   0
                ELSE
                     ln_DISCOUNTING_RATE
                END;
            end if;
            
      INSERT INTO TK_ILLUSTRATIONDTL_POS (ORG_ID,
                                          BRANCH_ID,
                                          MAIN_PRODUCT_CODE,
                                          SUB_PRODUCT_CODE,
                                          ISSUE_COUNT,
                                          DOCUMENT_NO,
                                          DOCUMENT_YEAR,
                                          APPLICATION_ID,
                                          ILLUSTRATION_ID,
                                          EFFECTIVE_AGE,
                                          POLICY_YEAR,
                                          BASIC_CONTRIBUTION,
                                          INVESTED_CONTRIBUTION,
                                          ALLOCATION_PERCENTAGE,
                                          ALLOCATION_CONTRIBUTION,
                                          MORTALITY_RATE1,
                                          MORTALITY_RATE2,
                                          SUM_ASSURED,
                                          SUM_ASSURED_AT_RISK,
                                          MORTALITY_CHARGES,
                                          PTF_SURPLUS,
                                          WAQALA_CHARGES,
                                          CONTINGENCY_MARGIN,
                                          REINS_AMOUNT,
                                          ADMIN_CHARGES,
                                          PAIDUP_VALUE,
                                          SV_RATE_OF_SA,
                                          SURRENDER_VALUE,
                                          SV_RATE_OF_BONUS,
                                          SURRENDER_CHARGE_RATE)
           VALUES (P_ORG_ID,
                   P_BRANCH_ID,
                   P_MAIN_PRODUCT_CODE,
                   P_SUB_PRODUCT_CODE,
                   P_ISSUE_COUNT,
                   P_DOCUMENT_NO,
                   P_DOCUMENT_YEAR,
                   P_APPLICATION_ID,
                   P_ILLUSTRATION_ID,
                   ln_effective_age + ln_policy_year,
                   ln_policy_year,
                   ln_basic_contribution,
                   ln_invested_contribution,
                   ln_allocation_percentage,
                   ln_allocation_contribution,
                   ln_mortality_rate1,
                   ln_mortality_rate2,
                   ln_SUM_COVERED,
                   ln_sum_at_risk,
                   ln_mortality_charges,
                   ln_ptf_surplus,
                   ln_waqala_charges,
                   ln_contingency_margin,
                   ln_reins_amount,
                   ln_admin_charges,
                   LN_PAIDUP_VALUE,
                   LN_SV_RATE_OF_SA,
                   LN_SURRENDER_VALUE,
                   LN_SV_RATE_OF_BONUS,
                   ln_surrender_charge_rate);

      -- increment the counter
      ln_policy_year := ln_policy_year + 1;
   END LOOP;

   COMMIT;
   UPDATE_ILLUST_CASHVALUE_POS_P (P_ORG_ID,
                                  P_BRANCH_ID,
                                  P_MAIN_PRODUCT_CODE,
                                  P_SUB_PRODUCT_CODE,
                                  P_ISSUE_COUNT,
                                  P_DOCUMENT_NO,
                                  P_DOCUMENT_YEAR,
                                  P_APPLICATION_ID,
                                  P_ILLUSTRATION_ID);
END;
/

prompt
prompt Creating procedure GENERATE_IL_DETAIL_POS_P1
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE GENERATE_IL_DETAIL_POS_P1 (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_policy_year                  NUMBER;
   ln_allocation_percentage        NUMBER;
   ln_allocation_contribution      NUMBER;
   ln_mortality_rate1              NUMBER;
   ln_mortality_rate2              NUMBER;

   ln_age1                         NUMBER;
   ln_age2                         NUMBER;
   lc_gender1                      VARCHAR2 (1);
   lc_gender2                      VARCHAR2 (1);
   ln_effective_age_factor         NUMBER;
   ln_effective_age                NUMBER;
   ln_basic_contribution           NUMBER;
   ln_invested_contribution        NUMBER;
   ln_policy_term                  NUMBER;
   ln_pay_term                     NUMBER;

   ln_sum_covered                  NUMBER;
   ln_sum_at_risk                  NUMBER;

   ln_mortality_charges            NUMBER;
   ln_reins_amount                 NUMBER;
   ln_ptf_surplus                  NUMBER;
   ln_waqala_charges               NUMBER;
   ln_contingency_margin           NUMBER;

   ln_admin_charges                NUMBER;


   ln_Indexation_admin_ch_rate     NUMBER;

   ln_Indexation_sumassured_rate   NUMBER;
   ln_Indexation_contribute_rate   NUMBER;
   ln_waqala_rate                  NUMBER;
   ln_contingency_margin_rate      NUMBER;
   ln_Investment_income_rate       NUMBER;
   ln_expected_claim_rate          NUMBER;
   ln_new_age1                     NUMBER := 0;

   lc_is_joint_life                VARCHAR2 (1) := 'N';
   LC_BENEFIT_CODE                 NUMBER;

   ln_PAIDUP_VALUE                 NUMBER;
   ln_SV_RATE_OF_SA                NUMBER;
   ln_SURRENDER_VALUE              NUMBER;
   ln_SV_RATE_OF_BONUS             NUMBER;
   ln_DISCOUNTING_RATE             NUMBER;
   ln_x                            NUMBER;
   ln_y                            NUMBER;
   ln_z                            NUMBER;
   ln_mx_at_maturity_age           NUMBER;
   ln_dx_at_maturity_age           NUMBER;
   ln_nx_at_maturity_age           NUMBER;

   ln_mx_at_maturity_age_bonus     NUMBER;
   ln_dx_at_maturity_age_bonus     NUMBER;
   ln_nx_at_maturity_age_bonus     NUMBER;

   ln_mx_at_current_age            NUMBER;
   ln_dx_at_current_age            NUMBER;
   ln_nx_at_current_age            NUMBER;
   ln_surrender_charge_rate        NUMBER;
   ld_illustration_date            DATE;
      ln_product_type                 number;

BEGIN
   -- initialize variables
   ln_policy_year := 1;
   ln_invested_contribution := 0;
   ln_ptf_surplus := 0;

   ln_mx_at_current_age := 0;
   ln_dx_at_current_age := 0;
   ln_nx_at_current_age := 0;

   -- Get Main Plan ( basic benefit) code
   SELECT BENEFIT_CODE
     INTO LC_BENEFIT_CODE
     FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND MAPPING_TYPE = 'B';

  SELECT 
       PRODUCT_TYPE_IL into ln_product_type 
    FROM GLAS_SUB_PRODUCT_SETUP_T 
    WHERE     ORG_ID = P_ORG_ID
      AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
      AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
 ;
   BEGIN
      -- get basic details from illustration header
      SELECT NVL (age1, 0),
             NVL (age2, 0),
             basic_contribution,
             SUM_COVERED_MODAL,
             GENDER1,
             GENDER2,
             POLICY_TERM,
             PAYMENT_TERM,
             NVL (SUM_COVERED_INDEX, 0) SUM_COVERED_INDEX,
             NVL (CONTRIBUTION_INDEX, 0) CONTRIBUTION_INDEX,
             NVL (CONT_MARGIN, 0) CONT_MARGIN,
             NVL (WAQALA_FEE, 0) WAQALA_FEE,
             NVL (EXPECTED_CLAIM, 0) EXPECTED_CLAIM,
             NVL (INVESTMENT_INCOME, 0) INVESTMENT_INCOME,
             TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE)),
             nvl( SECOND_LIFE,'N') 
        INTO ln_age1,
             ln_age2,
             ln_basic_contribution,
             ln_SUM_COVERED,
             lc_gender1,
             lc_gender2,
             ln_POLICY_TERM,
             ln_pay_term,
             ln_Indexation_sumassured_rate,
             ln_Indexation_contribute_rate,
             ln_contingency_margin_rate,
             ln_waqala_rate,
             ln_expected_claim_rate,
             ln_Investment_income_rate,
             ld_illustration_date,
             lc_is_joint_life
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_SUM_COVERED := 0;
         lc_gender1 := 0;
         lc_gender2 := 0;
         ln_POLICY_TERM := 0;
         ln_Indexation_sumassured_rate := 0;
         ln_Indexation_contribute_rate := 0;
         ln_contingency_margin_rate := 0;
         ln_waqala_rate := 0;
         ln_expected_claim_rate := 0;
         ln_Investment_income_rate := 0;
         ld_illustration_date := TRUNC (SYSDATE);
   END;

   BEGIN
      -- get admin charges for sub classes setup   Rate Type 21 is Policy Fee / admin ch
      SELECT NVL (RATE, 0)
        INTO ln_admin_charges
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 21
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_admin_charges := 0;
   END;

   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (RATE, 0)
        INTO ln_Indexation_admin_ch_rate
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 20
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_Indexation_admin_ch_rate := 0;
   END;

   -- get mx , dx, nx at maturity age
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age,
             ln_dx_at_maturity_age,
             ln_nx_at_maturity_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM - 2;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age := 0;
         ln_dx_at_maturity_age := 0;
         ln_nx_at_maturity_age := 0;
   END;

   -- get mx , dx, nx at maturity age for bounus
   BEGIN
      -- get SV TABLE DATA at maturity age - 2
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age_bonus,
             ln_dx_at_maturity_age_bonus,
             ln_nx_at_maturity_age_bonus
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age_bonus := 0;
         ln_dx_at_maturity_age_bonus := 0;
         ln_nx_at_maturity_age_bonus := 0;
   END;

   -- get mx , dx, nx at current age + 1
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_current_age, ln_dx_at_current_age, ln_nx_at_current_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + 1;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_current_age := 0;
         ln_dx_at_current_age := 0;
         ln_nx_at_current_age := 0;
   END;

   ln_y :=
      CASE
         WHEN (ln_nx_at_current_age - ln_nx_at_maturity_age) = 0
         THEN
            0
         ELSE
              (  ln_mx_at_current_age
               - ln_mx_at_maturity_age
               + ln_dx_at_maturity_age)
            / (ln_nx_at_current_age - ln_nx_at_maturity_age)
      END;

   -- get age factor to calculate effective age in case of joint life
   IF lc_is_joint_life = 'Y'
   THEN
      ln_new_age1 := ln_age2 - 2;
   END IF;

   IF ln_new_age1 > 0 AND lc_is_joint_life = 'Y'
   THEN
      SELECT VALUE
        INTO ln_effective_age_factor
        FROM TK_EFFECTIVE_AGE_CHART_T
       WHERE AGE_DIFFERENCE = ABS (ln_age1 - ln_new_age1);
   ELSE
      ln_effective_age_factor := 0;
   END IF;

   -- calculate effective age in case of joint life
   IF ln_age1 >= ln_new_age1 OR lc_is_joint_life = 'N'
   THEN
      ln_effective_age := ln_age1 - ln_effective_age_factor;
   ELSE
      ln_effective_age := ln_new_age1 - ln_effective_age_factor;
   END IF;



   -- delete existing data before generating fresh data
   DELETE FROM TK_ILLUSTRATIONDTL_POS
         WHERE     ORG_ID = P_ORG_ID
               AND BRANCH_ID = P_BRANCH_ID
               AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND ISSUE_COUNT = P_ISSUE_COUNT
               AND DOCUMENT_NO = P_DOCUMENT_NO
               AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND ILLUSTRATION_ID = P_ILLUSTRATION_ID;

   COMMIT;

   ln_effective_age := ln_effective_age - 1; -- reduce age one year to add policy year later as below query it will add one year again for first row
   DBMS_OUTPUT.put_line ('effective age :' || TO_CHAR (ln_effective_age));

   WHILE ln_policy_year <= ln_POLICY_TERM
   LOOP
      --        ln_allocation_percentage
      --           select RATE  into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= 1 AND  TYPE_ID=1 AND NO_OF_YEARS=2;
      BEGIN
         SELECT RATE
           INTO ln_allocation_percentage
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 1
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_allocation_percentage := 0;
      END;

      -- get surrender charges rate

      BEGIN
         SELECT RATE
           INTO ln_surrender_charge_rate
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 16
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_surrender_charge_rate := 0;
      END;

      --           select RATE into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= P_ORG_ID AND  TYPE_ID=1 AND NO_OF_YEARS=1;

      --        ln_mortality_rate1
      --           begin
      --
      --            --   select m_rate into ln_mortality_rate1 from tk_mortality_rate_t where m_age=ln_effective_age +ln_policy_year and m_year=(ln_effective_age +1 -17) ;
      --            select M_RATE into ln_mortality_rate1
      --            FROM GLAS_SUB_PROD_MORT_RT_T
      --            where  ORG_ID= P_ORG_ID  AND  MAIN_PRODUCT_CODE=P_MAIN_PRODUCT_CODE
      --            AND SUB_PRODUCT_CODE=P_SUB_PRODUCT_CODE AND  BENEFIT_CODE= LC_BENEFIT_CODE and M_YEAR =1 and M_age=ln_effective_age +ln_policy_year and GENDER=lc_gender1 ;
      --            dbms_output.put_line('mortality rate 1 success:'||ln_mortality_rate1);
      --           exception when others then
      --                ln_mortality_rate1:=0;
      --           end;

      BEGIN
         SELECT RTD.RATE
           INTO ln_mortality_rate1
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 2
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
                AND ln_policy_year >= RTB.VAL_FROM
                AND ln_policy_year <= RTB.VAL_TO
                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
                AND RTD.TERM = ln_policy_term
                AND RTD.age = ln_effective_age + 1;

         ln_mortality_rate1 := ln_mortality_rate1 / 1000;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate1 := 0;
      END;

      --        ln_mortality_rate2
      BEGIN
         --            select m_rate into ln_mortality_rate2 from tk_mortality_rate_t where m_age=ln_age2+ ln_policy_year and m_year= (ln_age2  -17);
         SELECT M_RATE
           INTO ln_mortality_rate2
           FROM GLAS_SUB_PROD_MORT_RT_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND M_YEAR = 1
                AND m_age = ln_age2 + ln_policy_year
                AND GENDER = lc_gender2;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate2 := 0;
      END;


      -- calculate admin charges for next policy year
      IF ln_policy_year > 1
      THEN
         ln_admin_charges :=
              ln_admin_charges
            + ROUND (ln_admin_charges * ln_Indexation_admin_ch_rate, 2);
         ln_SUM_COVERED :=
              ln_SUM_COVERED
            + ROUND (ln_SUM_COVERED * ln_Indexation_sumassured_rate, 2);

         IF ln_policy_year <= ln_pay_term
         THEN
            ln_basic_contribution :=
                 ln_basic_contribution
               + ROUND (
                    ln_basic_contribution * ln_Indexation_contribute_rate,
                    2);
         ELSE
            ln_basic_contribution := 0;
         END IF;
      END IF;

      ln_invested_contribution :=
         ln_invested_contribution + ln_basic_contribution;

      --          ln_sum_at_risk             := ln_sum_covered + ln_ptf_surplus;
      ln_allocation_contribution :=
         ROUND (ln_basic_contribution * ln_allocation_percentage, 2);
      --        ln_mortality_charges       := round( ln_sum_at_risk * (ln_mortality_rate1+ln_mortality_rate2)  ,2);
      --         ln_waqala_charges          := round( ln_mortality_charges * ln_waqala_rate ,2);
      --       ln_contingency_margin      := round( ln_mortality_charges * ln_contingency_margin_rate ,2);
      --   ln_reins_amount            := round( ln_mortality_charges - ln_waqala_charges - ln_contingency_margin ,2);

      --       ln_ptf_surplus             := round( (ln_reins_amount +ln_contingency_margin)  * ln_Investment_income_rate  ,2)+
      --                                   round(ln_reins_amount * (1- ln_expected_claim_rate),2);

      ln_PAIDUP_VALUE := (ln_sum_covered * ln_policy_year) / ln_POLICY_TERM;

      -- get mx , dx, nx at current age - 2
      ln_mx_at_current_age := 0;
      ln_dx_at_current_age := 0;
      ln_nx_at_current_age := 0;

      BEGIN
         -- get SV TABLE DATA 
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
      END;

      ln_x :=
         CASE
            WHEN ln_dx_at_current_age = 0
            THEN
               0
            ELSE
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age
                  + ln_dx_at_maturity_age)
               / ln_dx_at_current_age
         END;


      -- get mx , dx, nx at current age - 3
--      ln_mx_at_current_age := 0;
--      ln_dx_at_current_age := 0;
--      ln_nx_at_current_age := 0;

--      BEGIN
--         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
--         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
--           INTO ln_mx_at_current_age,
--                ln_dx_at_current_age,
--                ln_nx_at_current_age
--           FROM IL_SV_TABLE_T
--          WHERE     ORG_ID = P_ORG_ID
--                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
--                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
--                AND RATE_CODE = ln_age1 + ln_policy_year - 3;
--
--         ln_z :=
--            CASE
--               WHEN ln_dx_at_current_age = 0
--               THEN
--                  0
--               ELSE
--                    (ln_nx_at_current_age - ln_nx_at_maturity_age)
--                  / ln_dx_at_current_age
--            END;
--
--         LN_SV_RATE_OF_SA :=
--            CASE
--               WHEN ln_policy_year < 3
--               THEN
--                  0
--               WHEN ln_x = 1
--               THEN
--                  1
--               ELSE
--                    ln_x
--                  - (  CASE
--                          WHEN ln_policy_year = 3 THEN ln_y / 1.036
--                          ELSE ln_y
--                       END
--                     * ln_z)
--            END;
--      EXCEPTION
--         WHEN OTHERS
--     --    THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_SA
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 7 -- it is for SV of SA rating header
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                  AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN LN_POLICY_YEAR  ELSE NVL(RTD.POLICY_YEAR,1) END
                ;
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_SA :=0;
          END;
--      END;

--      LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered;
        IF LN_SV_RATE_OF_SA<>0 and ln_product_type=1 THEN 
            LN_SURRENDER_VALUE := 10000 / LN_SV_RATE_OF_SA ;
        elsif ln_product_type<>1 then  
            LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered /10000;
        
        END IF;
        
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;

      -- get mx , dx, nx at current age
      BEGIN
         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year ;

          LN_SV_RATE_OF_BONUS :=
         CASE
            WHEN (ln_dx_at_current_age = 0 OR ln_policy_year < 4 ) and ln_product_type = 1 
            THEN
               0
            ELSE 
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age_bonus
                  + ln_dx_at_maturity_age_bonus)
               / ln_dx_at_current_age
         END;
         
--           IF ln_product_type = 1 THEN 
--
--                    LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
--                    CASE
--                        WHEN ln_dx_at_current_age = 0  OR ln_policy_year < 3
--                        THEN
--                           0
--                        ELSE
--                             (  ln_mx_at_current_age
--                              - ln_mx_at_maturity_age_bonus
--                              + ln_dx_at_maturity_age_bonus)
--                           / ln_dx_at_current_age
--                     END;
--            end if; 
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_BONUS
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
            WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 8 -- it is for SV of Bonus rating header
               and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
--                AND RTD.TERM = ln_policy_term
--                AND RTD.age = ln_effective_age + 1
            --    and RTD.POLICY_YEAR= (ln_POLICY_TERM - ln_policy_year )
                
                AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN (ln_POLICY_TERM - ln_policy_year )  ELSE NVL(RTD.POLICY_YEAR,1) END
                               ;
                                                        
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_BONUS :=0;
          END;
          
           LN_SV_RATE_OF_BONUS := 
                 CASE
                            WHEN ln_policy_year < 4 and ln_product_type = 1 
                            THEN
                               0
                            ELSE
                                 LN_SV_RATE_OF_BONUS
                         END;
             
      END;
      ln_DISCOUNTING_RATE :=0;
         BEGIN
          SELECT RTD.RATE
           INTO ln_DISCOUNTING_RATE
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
            WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 9 -- it is for discounting rate in rating header
               and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
--                AND RTD.TERM = ln_policy_term
--                AND RTD.age = ln_effective_age + 1
            --    and RTD.POLICY_YEAR= (ln_POLICY_TERM - ln_policy_year )
                
                AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN (ln_POLICY_TERM - ln_policy_year )  ELSE NVL(RTD.POLICY_YEAR,1) END
                               ;
                                                        
                EXCEPTION WHEN OTHERS THEN
                ln_DISCOUNTING_RATE :=0;
          END;      

            IF ln_product_type =1 THEN 
                LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
                CASE
                WHEN ln_policy_year < 3
                THEN
                   0
                ELSE
                     ln_DISCOUNTING_RATE
                END;
            end if;
            
      INSERT INTO TK_ILLUSTRATIONDTL_POS (ORG_ID,
                                          BRANCH_ID,
                                          MAIN_PRODUCT_CODE,
                                          SUB_PRODUCT_CODE,
                                          ISSUE_COUNT,
                                          DOCUMENT_NO,
                                          DOCUMENT_YEAR,
                                          APPLICATION_ID,
                                          ILLUSTRATION_ID,
                                          EFFECTIVE_AGE,
                                          POLICY_YEAR,
                                          BASIC_CONTRIBUTION,
                                          INVESTED_CONTRIBUTION,
                                          ALLOCATION_PERCENTAGE,
                                          ALLOCATION_CONTRIBUTION,
                                          MORTALITY_RATE1,
                                          MORTALITY_RATE2,
                                          SUM_ASSURED,
                                          SUM_ASSURED_AT_RISK,
                                          MORTALITY_CHARGES,
                                          PTF_SURPLUS,
                                          WAQALA_CHARGES,
                                          CONTINGENCY_MARGIN,
                                          REINS_AMOUNT,
                                          ADMIN_CHARGES,
                                          PAIDUP_VALUE,
                                          SV_RATE_OF_SA,
                                          SURRENDER_VALUE,
                                          SV_RATE_OF_BONUS,
                                          SURRENDER_CHARGE_RATE)
           VALUES (P_ORG_ID,
                   P_BRANCH_ID,
                   P_MAIN_PRODUCT_CODE,
                   P_SUB_PRODUCT_CODE,
                   P_ISSUE_COUNT,
                   P_DOCUMENT_NO,
                   P_DOCUMENT_YEAR,
                   P_APPLICATION_ID,
                   P_ILLUSTRATION_ID,
                   ln_effective_age + ln_policy_year,
                   ln_policy_year,
                   ln_basic_contribution,
                   ln_invested_contribution,
                   ln_allocation_percentage,
                   ln_allocation_contribution,
                   ln_mortality_rate1,
                   ln_mortality_rate2,
                   ln_SUM_COVERED,
                   ln_sum_at_risk,
                   ln_mortality_charges,
                   ln_ptf_surplus,
                   ln_waqala_charges,
                   ln_contingency_margin,
                   ln_reins_amount,
                   ln_admin_charges,
                   LN_PAIDUP_VALUE,
                   LN_SV_RATE_OF_SA,
                   LN_SURRENDER_VALUE,
                   LN_SV_RATE_OF_BONUS,
                   ln_surrender_charge_rate);

      -- increment the counter
      ln_policy_year := ln_policy_year + 1;
   END LOOP;

   COMMIT;
   UPDATE_ILLUST_CASHVALUE_POS_P (P_ORG_ID,
                                  P_BRANCH_ID,
                                  P_MAIN_PRODUCT_CODE,
                                  P_SUB_PRODUCT_CODE,
                                  P_ISSUE_COUNT,
                                  P_DOCUMENT_NO,
                                  P_DOCUMENT_YEAR,
                                  P_APPLICATION_ID,
                                  P_ILLUSTRATION_ID);
END;
/

prompt
prompt Creating procedure GET_MORTALITY_CHART_P
prompt ========================================
prompt
CREATE OR REPLACE PROCEDURE get_mortality_chart_p (
   p_org_id       NUMBER,
   p_type         VARCHAR2,
   prc        OUT SYS_REFCURSOR)
AS
   LC_VALUES   VARCHAR2 (4000);
   LC_QUERY    VARCHAR2 (4000);
BEGIN
   IF LOWER (p_type) = LOWER ('c')
   THEN
      SELECT DISTINCT
             LISTAGG (myLetter, ',') WITHIN GROUP (ORDER BY myLetter)
        INTO LC_VALUES
        FROM (SELECT DISTINCT m_year myLetter
                FROM TK_MORTALITY_RATE_T
               WHERE org_id = p_org_id);

      LC_QUERY :=
            'select * from
(select m_age,m_year,m_rate from TK_MORTALITY_RATE_T where org_id='
         || p_org_id
         || ' )
pivot
(
max(m_rate)
for m_year in('
         || LC_VALUES
         || ')
)
order by m_age  ';
   END IF;

   IF LOWER (p_type) = LOWER ('r')
   THEN
      SELECT DISTINCT
             LISTAGG (myLetter, ',') WITHIN GROUP (ORDER BY myLetter)
        INTO LC_VALUES
        FROM (SELECT DISTINCT m_year myLetter
                FROM TK_MORTALITY_RATE_REINSURER_T
               WHERE org_id = p_org_id);

      LC_QUERY :=
            'select * from
(select m_age,m_year,m_rate from TK_MORTALITY_RATE_REINSURER_T where org_id='
         || p_org_id
         || ' )
pivot
(
max(m_rate)
for m_year in('
         || LC_VALUES
         || ')
)
order by m_age  ';
   END IF;

   OPEN prc FOR LC_QUERY;
END;
/

prompt
prompt Creating procedure GOAL_SEEK_CALCULATOR_SUB_P
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE goal_seek_calculator_sub_p (
   P_ORG_ID                NUMBER,
   P_BRANCH_ID             NUMBER,
   P_MAIN_PRODUCT_CODE     NUMBER,
   P_SUB_PRODUCT_CODE      NUMBER,
   P_ISSUE_COUNT           NUMBER,
   P_DOCUMENT_NO           VARCHAR2,
   P_DOCUMENT_YEAR         NUMBER,
   P_APPLICATION_ID        NUMBER,
   p_target_cash_value     NUMBER,
   p_starting_value        NUMBER DEFAULT 0,
   p_iterator_increment    NUMBER,
   p_target_year           NUMBER,
   iteration               NUMBER,
   p_submit_tag            VARCHAR2)
AS
   ln_return_cash_value        NUMBER;
   ln_target_cash_value        NUMBER;
   ln_basic_contribution       NUMBER;
   ln_iterator                 NUMBER;
   ln_starting_value           NUMBER;
   ln_min_basic_contribution   NUMBER;
   ln_min_cash_value           NUMBER;
   ln_iterator_increment       NUMBER;
BEGIN
   ln_starting_value := p_starting_value;
   ln_iterator := 1;
   ln_iterator_increment := ROUND (p_iterator_increment / 2);

   ln_basic_contribution := ln_starting_value;

   ln_return_cash_value := ln_basic_contribution;
   ln_target_cash_value := p_target_cash_value;


   DELETE FROM GOAL_SEEK_LOG_T logs
         WHERE     logs.ORG_ID = P_ORG_ID
               AND logs.BRANCH_ID = P_BRANCH_ID
               AND logs.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND logs.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND logs.DOCUMENT_NO = P_DOCUMENT_NO
               AND logs.DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND logs.APPLICATION_ID = P_APPLICATION_ID
               AND logs.ISSUE_COUNT = P_ISSUE_COUNT;

   COMMIT;

   WHILE ln_return_cash_value <= ln_target_cash_value
   LOOP
      ln_basic_contribution := ln_basic_contribution + ln_iterator;

      IF p_submit_tag = 'N'
      THEN
         UPDATE TK_ILLUSTRATIONHD_POS pos
            SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
                TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution,
                SUM_COVERED =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * COVER_MULTIPLE,
                SUM_COVERED_MODAL =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * COVER_MULTIPLE,
                BASIC_CONTRIBUTION =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT;
      ELSE
         UPDATE TK_ILLUSTRATIONHD_POS pos
            SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
                TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution--               ,SUM_COVERED  = case pos.payment_mode when 'A' then 1 when 'H' then 2 when 'Q' then 4 when 'M' then 12 end * ln_basic_contribution * COVER_MULTIPLE
                                                                --               ,SUM_COVERED_MODAL  = case pos.payment_mode when 'A' then 1 when 'H' then 2 when 'Q' then 4 when 'M' then 12 end * ln_basic_contribution * COVER_MULTIPLE
                ,
                COVER_MULTIPLE =
                   ROUND (
                        SUM_COVERED
                      / (  CASE pos.payment_mode
                              WHEN 'A' THEN 1
                              WHEN 'H' THEN 2
                              WHEN 'Q' THEN 4
                              WHEN 'M' THEN 12
                           END
                         * ln_basic_contribution),
                      2),
                BASIC_CONTRIBUTION =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT;
      END IF;

      COMMIT;

      GENERATE_IL_DETAIL_MONTHLY_P (P_ORG_ID,
                                    P_BRANCH_ID,
                                    P_MAIN_PRODUCT_CODE,
                                    P_SUB_PRODUCT_CODE,
                                    P_ISSUE_COUNT,
                                    P_DOCUMENT_NO,
                                    P_DOCUMENT_YEAR,
                                    P_APPLICATION_ID,
                                    1);

        SELECT cash_value2
          INTO ln_return_cash_value
          FROM TK_ILLUSTRATIONDTL_MONTHLY_T pos
         WHERE     pos.ORG_ID = P_ORG_ID
               AND pos.BRANCH_ID = P_BRANCH_ID
               AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND pos.DOCUMENT_NO = P_DOCUMENT_NO
               AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND pos.APPLICATION_ID = P_APPLICATION_ID
               AND pos.ISSUE_COUNT = P_ISSUE_COUNT
               AND ILLUSTRATION_ID = 1
      ORDER BY policy_year DESC, policy_month DESC fetch next 1 rows only;

        INSERT INTO GOAL_SEEK_LOG_T VALUES(P_ORG_ID,P_BRANCH_ID,P_MAIN_PRODUCT_CODE,P_SUB_PRODUCT_CODE,P_DOCUMENT_NO,P_DOCUMENT_YEAR,P_APPLICATION_ID,P_ISSUE_COUNT,
        ln_iterator,ln_basic_contribution,ln_return_cash_value,ln_target_cash_value, p_target_year,'5plr.admin',sysdate);

        --dbms_output.put_line('iteration is '|| ln_iterator ||' and basic contribtion is '|| ln_basic_contribution || ' and cash value is '|| ln_return_cash_value);
        ln_iterator := ln_iterator + ln_iterator_increment;
    end loop;
    COMMIT;

    select min(basic_contribution), min(cash_value) into ln_min_basic_contribution ,ln_min_cash_value
    from
    (select * from GOAL_SEEK_LOG_T logs where logs.ORG_ID= P_ORG_ID and  logs.BRANCH_ID = P_BRANCH_ID and logs.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE and logs.SUB_PRODUCT_CODE= P_SUB_PRODUCT_CODE
            and  logs.DOCUMENT_NO= P_DOCUMENT_NO and  logs.DOCUMENT_YEAR=P_DOCUMENT_YEAR and logs.APPLICATION_ID=P_APPLICATION_ID and logs.ISSUE_COUNT=P_ISSUE_COUNT   order by iterator desc fetch next 2 rows only);

    if ln_min_cash_value <  ln_target_cash_value then
        goal_seek_calculator_sub_p(P_ORG_ID ,P_BRANCH_ID ,P_MAIN_PRODUCT_CODE ,P_SUB_PRODUCT_CODE ,P_ISSUE_COUNT ,P_DOCUMENT_NO ,P_DOCUMENT_YEAR ,P_APPLICATION_ID
        ,ln_target_cash_value ,ln_min_basic_contribution,ln_iterator_increment,p_target_year,iteration+1,p_submit_tag);
    end if;

exception when others then
        dbms_output.put_line('error is '|| SQLERRM );
    NULL;
end;
/

prompt
prompt Creating procedure GOAL_SEEK_CALCULATOR_P
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE goal_seek_calculator_p (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   p_target_cash_value    NUMBER,
   p_starting_value       NUMBER DEFAULT 0)
AS
   ln_return_cash_value            NUMBER;
   ln_target_cash_value            NUMBER;
   ln_basic_contribution           NUMBER;
   ln_basic_contribution_current   NUMBER;
   ln_iterator                     NUMBER;
   ln_starting_value               NUMBER;
   lv_payment_mode                 VARCHAR2 (1);
   ln_target_year                  NUMBER;
   ln_min_basic_contribution       NUMBER;
   ln_min_cash_value               NUMBER;
   ln_iterator_increment           NUMBER;

   lc_converted_proposal_no        VARCHAR2 (50);
   lc_submit_tag                   VARCHAR2 (1) := 'N';
   ln_age1                         NUMBER;
   ln_min_covermultiple            NUMBER;
   ln_calc_covermultiple           NUMBER;
   ln_no_of_persons                NUMBER;
BEGIN
   ln_starting_value := p_starting_value;

   -- get age
   BEGIN
      SELECT age1, BASIC_CONTRIBUTION_MODAL, NVL (NO_OF_PERSONS, 1)
        INTO ln_age1, ln_basic_contribution_current, ln_no_of_persons
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND APPLICATION_ID = P_APPLICATION_ID
             AND ISSUE_COUNT = P_ISSUE_COUNT;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_age1 := 0;
   END;

   -- get minimumn cover multipe for age
   BEGIN
      SELECT MIN (COVER_CODE)
        INTO ln_min_covermultiple
        FROM TK_SUB_PRODUCT_COVER_T
       WHERE     ORG_ID = P_ORG_ID
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ln_age1 >= AGE_FROM
             AND ln_age1 <= AGE_TO;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_age1 := 0;
   END;

   -- check proposal is submitted

   BEGIN
      SELECT DISTINCT NVL (CONVERTED_DOC_NO, 'N')
        INTO lc_converted_proposal_no
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND APPLICATION_ID = P_APPLICATION_ID
             AND CONVERTED_DOC_NO IS NOT NULL;
   EXCEPTION
      WHEN OTHERS
      THEN
         lc_converted_proposal_no := 'N';
         lc_submit_tag := 'N';
   END;

   BEGIN
      -- check if any version of proposal is converted to policy then get policy number
      SELECT DISTINCT SUBMIT_TAG
        INTO lc_submit_tag
        FROM IL_DOC_HEADER_T DH
       WHERE     DH.ORG_ID = P_ORG_ID
             AND dh.record_type = 'O'
             AND NVL (SUBMIT_TAG, 'n') = 'Y'
             AND document_type = 'Q'
             AND MASTER_REF_NO =
                    (SELECT DISTINCT master_ref_no
                       FROM il_doc_header_t
                      WHERE     document_type = 'Q'
                            AND DOC_REFERENCE_NO = lc_converted_proposal_no);
   EXCEPTION
      WHEN OTHERS
      THEN
         lc_submit_tag := 'N';
   END;


   IF ln_starting_value = 0
   THEN
      BEGIN
         SELECT MIN_CONTRIBUTION,
                pos.payment_mode,
                TO_CHAR (SYSDATE, 'YYYY') + POLICY_TERM
           INTO ln_basic_contribution, lv_payment_mode, ln_target_year
           FROM GLAS_SUB_PROD_P_MODE_LOAD_T prod, TK_ILLUSTRATIONHD_POS pos
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT
                AND pos.ORG_ID = prod.org_id
                AND pos.SUB_PRODUCT_CODE = prod.SUB_PRODUCT_CODE
                AND pos.PAYMENT_MODE = prod.PAYMENT_MODE;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            ln_basic_contribution := 1000;
      END;

      ln_iterator := 0;
      ln_iterator_increment := 5000;
   ELSE
      ln_basic_contribution := ln_starting_value;
      ln_iterator := 1;
      ln_iterator_increment := 1;
   END IF;


   ln_return_cash_value := ln_basic_contribution;
   ln_target_cash_value := p_target_cash_value;

   BEGIN
      SELECT RATE
        INTO ln_target_cash_value
        FROM ILAS_SUB_PROD_RATES_SETUP_T POS
       WHERE     pos.ORG_ID = P_ORG_ID
             AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_TYPE_ID = 29
             AND POLICY_TERM = ln_target_year;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         ln_target_cash_value := p_target_cash_value;
   END;

   -- increase target value by number of persons
   ln_target_cash_value := ln_target_cash_value * ln_no_of_persons;

   DELETE FROM GOAL_SEEK_LOG_T logs
         WHERE     logs.ORG_ID = P_ORG_ID
               AND logs.BRANCH_ID = P_BRANCH_ID
               AND logs.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND logs.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND logs.DOCUMENT_NO = P_DOCUMENT_NO
               AND logs.DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND logs.APPLICATION_ID = P_APPLICATION_ID
               AND logs.ISSUE_COUNT = P_ISSUE_COUNT;

   COMMIT;

   WHILE ln_return_cash_value <= ln_target_cash_value
   LOOP
      ln_basic_contribution := ln_basic_contribution + ln_iterator;

      IF lc_submit_tag = 'N'
      THEN
         UPDATE TK_ILLUSTRATIONHD_POS pos
            SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
                TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution,
                SUM_COVERED =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * COVER_MULTIPLE,
                SUM_COVERED_MODAL =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * COVER_MULTIPLE,
                BASIC_CONTRIBUTION =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT;
      ELSE
         UPDATE TK_ILLUSTRATIONHD_POS pos
            SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
                TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution,
                COVER_MULTIPLE =
                   ROUND (
                        SUM_COVERED
                      / (  CASE pos.payment_mode
                              WHEN 'A' THEN 1
                              WHEN 'H' THEN 2
                              WHEN 'Q' THEN 4
                              WHEN 'M' THEN 12
                           END
                         * ln_basic_contribution),
                      2),
                BASIC_CONTRIBUTION =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT;
      END IF;

      COMMIT;

      GENERATE_IL_DETAIL_MONTHLY_P (P_ORG_ID,
                                    P_BRANCH_ID,
                                    P_MAIN_PRODUCT_CODE,
                                    P_SUB_PRODUCT_CODE,
                                    P_ISSUE_COUNT,
                                    P_DOCUMENT_NO,
                                    P_DOCUMENT_YEAR,
                                    P_APPLICATION_ID,
                                    1);

      BEGIN
           SELECT cash_value2
             INTO ln_return_cash_value
             FROM TK_ILLUSTRATIONDTL_MONTHLY_T pos
            WHERE     pos.ORG_ID = P_ORG_ID
                  AND pos.BRANCH_ID = P_BRANCH_ID
                  AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                  AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                  AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                  AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                  AND pos.APPLICATION_ID = P_APPLICATION_ID
                  AND pos.ISSUE_COUNT = P_ISSUE_COUNT
                  AND ILLUSTRATION_ID = 1
         ORDER BY policy_year DESC, policy_month DESC fetch next 1 rows only
;
      EXCEPTION
         WHEN OTHERS
         THEN
            DBMS_OUTPUT.put_line ('error point 1 ' || SQLERRM);
      END;

      INSERT INTO GOAL_SEEK_LOG_T
           VALUES (P_ORG_ID,
                   P_BRANCH_ID,
                   P_MAIN_PRODUCT_CODE,
                   P_SUB_PRODUCT_CODE,
                   P_DOCUMENT_NO,
                   P_DOCUMENT_YEAR,
                   P_APPLICATION_ID,
                   P_ISSUE_COUNT,
                   ln_iterator,
                   ln_basic_contribution,
                   ln_return_cash_value,
                   ln_target_cash_value,
                   ln_target_year,'5plr.admin',sysdate);

      --dbms_output.put_line('iteration is '|| ln_iterator ||' and basic contribtion is '|| ln_basic_contribution || ' and cash value is '|| ln_return_cash_value);
      ln_iterator := ln_iterator + ln_iterator_increment;
   END LOOP;

   COMMIT;

   BEGIN
      SELECT MIN (basic_contribution), MIN (cash_value)
        INTO ln_min_basic_contribution, ln_min_cash_value
        FROM (  SELECT *
                  FROM GOAL_SEEK_LOG_T logs
                 WHERE     logs.ORG_ID = P_ORG_ID
                       AND logs.BRANCH_ID = P_BRANCH_ID
                       AND logs.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                       AND logs.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                       AND logs.DOCUMENT_NO = P_DOCUMENT_NO
                       AND logs.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                       AND logs.APPLICATION_ID = P_APPLICATION_ID
                       AND logs.ISSUE_COUNT = P_ISSUE_COUNT
              ORDER BY iterator DESC                  fetch next 2 rows only
                                    );

      IF ln_min_cash_value < ln_target_cash_value
      THEN
         goal_seek_calculator_sub_p (P_ORG_ID,
                                     P_BRANCH_ID,
                                     P_MAIN_PRODUCT_CODE,
                                     P_SUB_PRODUCT_CODE,
                                     P_ISSUE_COUNT,
                                     P_DOCUMENT_NO,
                                     P_DOCUMENT_YEAR,
                                     P_APPLICATION_ID,
                                     ln_target_cash_value,
                                     ln_min_basic_contribution,
                                     ln_iterator_increment,
                                     ln_target_year,
                                     2,
                                     lc_submit_tag);
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.put_line ('error point 2 ' || SQLERRM);
   END;

   -- get final contribution and apply ceil function to it.
   SELECT CEIL (BASIC_CONTRIBUTION_MODAL / 100) * 100
     INTO ln_basic_contribution
     FROM TK_ILLUSTRATIONHD_POS pos
    WHERE     pos.ORG_ID = P_ORG_ID
          AND pos.BRANCH_ID = P_BRANCH_ID
          AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND pos.DOCUMENT_NO = P_DOCUMENT_NO
          AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
          AND pos.APPLICATION_ID = P_APPLICATION_ID
          AND pos.ISSUE_COUNT = P_ISSUE_COUNT;

   IF ln_basic_contribution <= ln_basic_contribution_current
   THEN
      ln_basic_contribution := ln_basic_contribution_current;
   END IF;


   -- round contribution upto nearest 100
   IF lc_submit_tag = 'N'
   THEN
      UPDATE TK_ILLUSTRATIONHD_POS pos
         SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
             TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution,
             SUM_COVERED =
                  CASE pos.payment_mode
                     WHEN 'A' THEN 1
                     WHEN 'H' THEN 2
                     WHEN 'Q' THEN 4
                     WHEN 'M' THEN 12
                  END
                * ln_basic_contribution
                * COVER_MULTIPLE,
             SUM_COVERED_MODAL =
                  CASE pos.payment_mode
                     WHEN 'A' THEN 1
                     WHEN 'H' THEN 2
                     WHEN 'Q' THEN 4
                     WHEN 'M' THEN 12
                  END
                * ln_basic_contribution
                * COVER_MULTIPLE,
             BASIC_CONTRIBUTION =
                  CASE pos.payment_mode
                     WHEN 'A' THEN 1
                     WHEN 'H' THEN 2
                     WHEN 'Q' THEN 4
                     WHEN 'M' THEN 12
                  END
                * ln_basic_contribution
       WHERE     pos.ORG_ID = P_ORG_ID
             AND pos.BRANCH_ID = P_BRANCH_ID
             AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND pos.DOCUMENT_NO = P_DOCUMENT_NO
             AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND pos.APPLICATION_ID = P_APPLICATION_ID
             AND pos.ISSUE_COUNT = P_ISSUE_COUNT;
   ELSE
      UPDATE TK_ILLUSTRATIONHD_POS pos
         SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
             TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution,
             COVER_MULTIPLE =
                ROUND (
                     SUM_COVERED
                   / (  CASE pos.payment_mode
                           WHEN 'A' THEN 1
                           WHEN 'H' THEN 2
                           WHEN 'Q' THEN 4
                           WHEN 'M' THEN 12
                        END
                      * ln_basic_contribution),
                   12),
             BASIC_CONTRIBUTION =
                  CASE pos.payment_mode
                     WHEN 'A' THEN 1
                     WHEN 'H' THEN 2
                     WHEN 'Q' THEN 4
                     WHEN 'M' THEN 12
                  END
                * ln_basic_contribution
       WHERE     pos.ORG_ID = P_ORG_ID
             AND pos.BRANCH_ID = P_BRANCH_ID
             AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND pos.DOCUMENT_NO = P_DOCUMENT_NO
             AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND pos.APPLICATION_ID = P_APPLICATION_ID
             AND pos.ISSUE_COUNT = P_ISSUE_COUNT;

      SELECT COVER_MULTIPLE
        INTO ln_calc_covermultiple
        FROM TK_ILLUSTRATIONHD_POS pos
       WHERE     pos.ORG_ID = P_ORG_ID
             AND pos.BRANCH_ID = P_BRANCH_ID
             AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND pos.DOCUMENT_NO = P_DOCUMENT_NO
             AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND pos.APPLICATION_ID = P_APPLICATION_ID
             AND pos.ISSUE_COUNT = P_ISSUE_COUNT;

      IF ln_min_covermultiple > ln_calc_covermultiple
      THEN
         UPDATE TK_ILLUSTRATIONHD_POS pos
            SET COVER_MULTIPLE = ln_min_covermultiple,
                SUM_COVERED =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * ln_min_covermultiple,
                SUM_COVERED_MODAL =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * ln_min_covermultiple
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT;



          GENERATE_IL_DETAIL_MONTHLY_P (P_ORG_ID,
                                        P_BRANCH_ID,
                                        P_MAIN_PRODUCT_CODE,
                                        P_SUB_PRODUCT_CODE,
                                        P_ISSUE_COUNT,
                                        P_DOCUMENT_NO,
                                        P_DOCUMENT_YEAR,
                                        P_APPLICATION_ID,
                                        1);

          BEGIN
               SELECT cash_value2
                 INTO ln_return_cash_value
                 FROM TK_ILLUSTRATIONDTL_MONTHLY_T pos
                WHERE     pos.ORG_ID = P_ORG_ID
                      AND pos.BRANCH_ID = P_BRANCH_ID
                      AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                      AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                      AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                      AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                      AND pos.APPLICATION_ID = P_APPLICATION_ID
                      AND pos.ISSUE_COUNT = P_ISSUE_COUNT
                      AND ILLUSTRATION_ID = 1
             ORDER BY policy_year DESC, policy_month DESC fetch next 1 rows only
;
          EXCEPTION
             WHEN OTHERS
             THEN
                DBMS_OUTPUT.put_line ('error point 1 ' || SQLERRM);
          END;

          -- if again cash value becomes smaller than target then seek again
           if ln_return_cash_value <= ln_target_cash_value then
                goal_seek_calculator_p (
                   P_ORG_ID             , P_BRANCH_ID          ,
                   P_MAIN_PRODUCT_CODE  , P_SUB_PRODUCT_CODE   ,
                   P_ISSUE_COUNT        , P_DOCUMENT_NO        ,
                   P_DOCUMENT_YEAR      , P_APPLICATION_ID     ,
                   p_target_cash_value  , ln_basic_contribution);

           end if;

      END IF;
   END IF;


   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('error is at end ' || SQLERRM);
      NULL;
END;
/

prompt
prompt Creating procedure MIGRATE_DATA_PROC
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE migrate_data_proc AS
  -- Declare a cursor to fetch data from the source table
  CURSOR IDHT_source_data IS
    SELECT * FROM IL_DOC_HEADER_T where rownum<21;
idht_record IL_DOC_HEADER_T%ROWTYPE;
  -- Variables to hold data fetched from the cursor
V_ORG_ID IL_DOC_HEADER_T.ORG_ID%TYPE;
V_BRANCH_ID IL_DOC_HEADER_T.BRANCH_ID%TYPE;
V_MAIN_PRODUCT_CODE IL_DOC_HEADER_T.MAIN_PRODUCT_CODE%TYPE;
V_SUB_PRODUCT_CODE IL_DOC_HEADER_T.SUB_PRODUCT_CODE%TYPE;
V_TAKAFUL_TYPE IL_DOC_HEADER_T.TAKAFUL_TYPE%TYPE;
V_DOCUMENT_TYPE IL_DOC_HEADER_T.DOCUMENT_TYPE%TYPE;
V_DOCUMENT_NO IL_DOC_HEADER_T.DOCUMENT_NO%TYPE;
V_RECORD_TYPE IL_DOC_HEADER_T.RECORD_TYPE%TYPE;
V_DOCUMENT_YEAR IL_DOC_HEADER_T.DOCUMENT_YEAR%TYPE;  
V_ISSUE_COUNT IL_DOC_HEADER_T.ISSUE_COUNT%TYPE; 
V_ENDORSEMENT_NO IL_DOC_HEADER_T.ENDORSEMENT_NO%TYPE; 
V_APPLICATION_ID IL_DOC_HEADER_T.APPLICATION_ID%TYPE; 
V_DOC_REFERENCE_NO IL_DOC_HEADER_T.DOC_REFERENCE_NO%TYPE;        
 

BEGIN
  --variables initialization
  V_ORG_ID:=5;
V_BRANCH_ID:=14;
V_MAIN_PRODUCT_CODE:=4;
V_SUB_PRODUCT_CODE:=6;
V_TAKAFUL_TYPE:='D';
V_DOCUMENT_TYPE:='P';
V_DOCUMENT_NO:='111111';
V_RECORD_TYPE:='O';
V_DOCUMENT_YEAR:='2024';  
V_ISSUE_COUNT:=1; 
V_ENDORSEMENT_NO:=0; 
V_APPLICATION_ID:=13; 
 
  -- Open the cursor
  OPEN IDHT_source_data;

  -- Fetch each row from the cursor
  LOOP
    FETCH IDHT_source_data
      INTO idht_record;
  
    -- Exit the loop when no more rows are fetched
    EXIT WHEN IDHT_source_data%NOTFOUND;
 V_DOC_REFERENCE_NO:=''||V_DOCUMENT_YEAR||V_DOCUMENT_NO;
    -- Insert the fetched data into the target table
insert into IL_DOC_HEADER_T 
(ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO
, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, DOC_REFERENCE_NO
, CLIENT_CODE, FOLIO_CODE, SUM_INSURED, GROSS_PREMIUM, NET_PREMIUM, DOC_CHARGES, REMARKS, PREMIUM_BASIS, PRODUCER_CODE, CURRENCY_CODE, PAYMENT_MODE, PAYMENT_TERM, POLICY_TERM, MEMBER_ID_LABEL, WAKALA_FEE, LOADING_OVRD_RATE, LOADING_RATE, POLICY_FEE, OVERRIDING_RATE, EXCHANGE_RATE, NEXT_DUE_DATE, QUOTATION_DATE, SUB_DOCUMENT_NO, STANDARD_TREATY, POST_DATE, POSTING_TAG, POST_USER, NAME1, NAME2, DOB1, DOB2, AGE1, AGE2, GENDER1, GENDER2, SUM_COVERED, SUM_COVERED_INDEX, CONTRIBUTION_INDEX, BASIC_CONTRIBUTION, GROSS_CONTRIBUTION, NET_CONTRIBUTION, COVER_MULTIPLE, CONT_MARGIN, LAST_AGE_INDEX, EXPECTED_CLAIM, INVESTMENT_INCOME, SECOND_LIFE, BID_OFFER, ISSUE_DATE, COMM_DATE, EXPIRY_DATE, CONVERTED_DOC_NO, PROPOSAL_DATE, OCCUPATIONAL_CLASS, CREATION_DATE, CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATED_BY, POST_BY, CONVERT_TAG, REVISED_TAG, BASE_DOC_NO, CNIC_ISSUE_DATE, CNIC_EXPIRY_DATE, CNIC_NO, WAQALA_FEE, QUOTATION_REF_NO, ALTERATION_TYPE, MASTER_REF_NO, COST_CENTER_CODE, ALTERATION_DATE, ADVANCE_AMOUNT, PAYER_SAME_TAG, SUBMIT_TAG, UNDWT_STATUS, SUM_COVERED_MODAL, BASIC_CONTRIBUTION_MODAL, UNDWT_DECISION, CONVERTED_POLICY_NO, CONVERT_PROPOSAL, RISK_PROFILE, CONTRIBUTION_TYPE, RISK_PROFILE_COMMENTS, ILLUSTRATION_REF_NO, CUSTOMER_PROFILE_COMMENTS, CHANNEL_ID, MODEL_ID, AGENT_ID, PARTNER_ID, TOPUP_AMOUNT, REJECTED_TAG, TOTAL_CONTRIBUTION_MODAL, CANCEL_TAG, CANCEL_BY, CANCEL_DATE, CANCELLATION_REMARKS, CANCELLATION_TYPE, DOC_DISPATCH_DATE, DOC_RECEIVE_DATE, CHARGEABLE_FROM, CHARGEABLE_AMOUNT, MIDDLE_NAME1, LAST_NAME1, ALTERATION_ISSUE_DATE, POLICY_POSTED, NON_FINANCIAL_ACTIVITY, NON_FINANCIAL_SUB_ACTIVITY, UNDWT_DECISION_REASON, UNDWT_NOTES, UNDERWRITING_IL_CREATE, PROPOSAL_APPROVED_BY, UNDWT_OTHER_EXCULUSIONS, UNDWT_DECISION_SYSTEM, PROPOSAL_APPROVED_DATE, PARTNER_BRANCH_ID, BASE_DOC_NO_KEY, ILLUSTRATION_REF_NO_KEY, CONVERTED_DOC_NO_KEY, AGENT_BRANCH_ID, LOCK_TAG, DOC_REFERENCE_KEY, INITIAL_TOPUP, RECEIVE_ACK_DATE, CANCELLATION_DATE, MEDICAL_AMOUNT, DAY_END_PROCESS_TAG, DAY_END_PROCESS_DATE, SUBMIT_DATE, SUBMIT_BY, COVER_MULTIPLE_OLD, AGE1_OLD, GENDER1_OLD, PAYMENT_MODE_OLD, PAYMENT_TERM_OLD, POLICY_TERM_OLD, SUM_COVERED_OLD, DOB1_OLD, SUM_COVERED_MODAL_OLD, BASIC_CONTRIBUTION_MODAL_OLD, BASIC_CONTRIBUTION_OLD, FUND_SWITCH_CHARGES, FUND_CHANGE_TAG, CONSIGNMENT_NO, NAME1_OLD, MIDDLE_NAME1_OLD, LAST_NAME1_OLD, CNIC_NO_OLD, RETURN_TAG, LOCK_BY, LOCK_DATE, IL_REVISE_TAG, AUTO_RENEWAL_TOPUP_TAG, AUTO_RENEWAL_TOPUP_TAG_OLD, POLICY_HOLD_FLAG, SUM_COVERED_INDEX_OLD, CONTRIBUTION_INDEX_OLD, FIRST_SUBMISSION_DATE, FACE_VALUE_INCREASE_TAG, APPROVED_DATE, BANK_REPRESENTATIVE_NAME, BANK_REPRESENTATIVE_CODE, OCCUPATIONAL_INDUSTRY, OCCUPATION, REJECT_COMMENTS, TOTAL_SCORE, CBC_REQUIRED_TAG, PR_DATE, PR_AMOUNT, ANF_OPTION, NIV_ADJUSTMENT_AMOUNT, NIV_ADJUSTMENT_AMOUNT_ADHOC, ASSIGNEE_TAG, BANK_REF_NO, VALID_TAG, PROPOSAL_ENTRY_DATE, INDEX_CHANGE_TYPE)
values (V_ORG_ID, V_BRANCH_ID, V_MAIN_PRODUCT_CODE, V_SUB_PRODUCT_CODE, V_TAKAFUL_TYPE, V_DOCUMENT_TYPE, V_DOCUMENT_NO
, V_RECORD_TYPE, V_DOCUMENT_YEAR, V_ISSUE_COUNT, V_ENDORSEMENT_NO, V_APPLICATION_ID, V_DOC_REFERENCE_NO
, '195', null, null, null, null, null, null, null, null, 'PKR', 'A', 10, 10, null, null, null, null, null, null, null, null, null, null, null, to_date('12-08-2024', 'dd-mm-yyyy'), 'Y', 'GBA.ADMIN', 'the zeal', null, to_date('15-07-1992', 'dd-mm-yyyy'), null, 32, null, 'M', null, 127000.00, null, null, 15589.25, null, null, 0, 0.000000, 55, 0.70, 0.00, null, 0.05, to_date('20-08-2024', 'dd-mm-yyyy'), to_date('20-08-2024', 'dd-mm-yyyy'), null, null, to_date('20-08-2024 11:16:56', 'dd-mm-yyyy hh24:mi:ss'), null, to_date('20-08-2024 11:42:59', 'dd-mm-yyyy hh24:mi:ss'), 'GBA.ADMIN', to_date('20-08-2024 17:05:58', 'dd-mm-yyyy hh24:mi:ss'), 'GBA.ADMIN', null, null, null,V_DOC_REFERENCE_NO, to_date('20-08-2024', 'dd-mm-yyyy'), to_date('30-08-2024', 'dd-mm-yyyy'), '3424234434499', null, null, null, V_DOC_REFERENCE_NO, 'CPS', null, 184410, 'Y', null, 8, 127000, 15589.25, 1, null, null, null, null, null, 'ILL2024/0032151-2', null, 3, 1, 18, 1, 0, null, 15589.25, null, null, null, null, null, null, null, null, null, null, 'fitco tower', null, null, null, null, 'BMI NORMAL', null, null, null, null, 2, null, 2, '5,14,4,6,D,Q,O,2024,1,0,13,000016', '5,14,4,6,2024,2,13,032151', null, '14', null, '5,14,4,6,D,P,O,2024,1,0,13,000009', null, null, null, null, null, null, to_date('06-08-2024', 'dd-mm-yyyy'), 'GBA.ADMIN', null, null, null, null, null, null, null, null, null, null, null, 500, null, null, null, null, null, null, null, 'GBA.ADMIN', to_date('20-08-2024 11:39:42', 'dd-mm-yyyy hh24:mi:ss'), null, 'N', null, null, null, null, to_date('06-08-2024', 'dd-mm-yyyy'), null, null, null, '321222', '8', '92', null, 0, null, null, null, null, null, null, null, '5443444', null, null, null);
  
V_DOCUMENT_NO:=V_DOCUMENT_NO+1; ---temp   
 -- Optionally, you can commit after every insert for large datasets
  --  COMMIT;
  
  END LOOP;

  -- Close the cursor
  CLOSE idht_source_data;

  -- Final commit to ensure all data is saved
  COMMIT;

  DBMS_OUTPUT.PUT_LINE('Data migration completed successfully.');
EXCEPTION
  WHEN OTHERS THEN
    -- Handle any exceptions and rollback changes
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END migrate_data_proc;
/

prompt
prompt Creating procedure POLICYGAINLOSSDAILYPROCESS
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE PolicyGainLossDailyProcess (
   P_ORG_ID       VARCHAR2,
   P_POLICY_NO    VARCHAR2,
   P_FUND_CODE    NUMBER)
AS
   LD_PROCESS_DATE            DATE;
   LD_CURRENT_DATE            DATE := TRUNC (SYSDATE);
   LN_LASTDAY_CLOSING_UNITS   NUMBER;
   LN_CURRENT_BID_PRICE       NUMBER;
   LN_LAST_DAY_BID_PRICE      NUMBER;
   LV_PRICE_TYPE              VARCHAR2 (1);
   LN_OFFER_SPREAD_RATE       NUMBER;
BEGIN
   SELECT f.price_type
     INTO LV_PRICE_TYPE
     FROM FUND_SETUP_T F
    WHERE F.ORG_ID = P_ORG_ID AND F.FUND_CODE = P_FUND_CODE;


   BEGIN
        SELECT PROCESS_DATE + 1
          INTO LD_PROCESS_DATE
          FROM IL_POLICYWISE_DAILY_GAINLOSS_T
         WHERE     ORG_ID = P_ORG_ID
               AND MASTER_REF_NO = P_POLICY_NO
               AND FUND_CODE = P_FUND_CODE
      ORDER BY PROCESS_DATE DESC       FETCH NEXT 1 ROWS ONLY
;


      SELECT P.OFFER_SPREAD_RATE
        INTO LN_OFFER_SPREAD_RATE
        FROM    IL_DOC_HEADER_T DH
             INNER JOIN
                GLAS_SUB_PRODUCT_SETUP_T p
             ON (    dh.ORG_ID = p.ORG_ID
                 AND dh.MAIN_PRODUCT_CODE = p.MAIN_PRODUCT_CODE
                 AND dh.SUB_PRODUCT_CODE = p.SUB_PRODUCT_CODE)
       WHERE     DH.record_type = 'O'
             AND DH.DOCUMENT_TYPE = 'P'
             AND DH.ISSUE_COUNT = 1
             AND DH.ENDORSEMENT_NO = 0
             AND DH.ORG_ID = P_ORG_ID
             AND DH.MASTER_REF_NO = P_POLICY_NO;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         SELECT MIN (TRANSACTION_DATE), MIN (P.OFFER_SPREAD_RATE)
           INTO LD_PROCESS_DATE, LN_OFFER_SPREAD_RATE
           FROM IL_DOC_HEADER_T DH
                INNER JOIN GLAS_SUB_PRODUCT_SETUP_T p
                   ON (    dh.ORG_ID = p.ORG_ID
                       AND dh.MAIN_PRODUCT_CODE = p.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = p.SUB_PRODUCT_CODE)
                INNER JOIN IL_DOC_ALLOC_DTL_BREAKUP_T A
                   ON (    dh.ORG_ID = A.ORG_ID
                       AND dh.BRANCH_ID = A.BRANCH_ID
                       AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                       AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                       AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                       AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                       AND dh.RECORD_TYPE = A.RECORD_TYPE
                       AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                       AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                       AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                       AND dh.APPLICATION_ID = A.APPLICATION_ID)
          WHERE     DH.record_type = 'O'
                AND DH.DOCUMENT_TYPE = 'P'
                AND DH.ISSUE_COUNT = 1
                AND DH.ENDORSEMENT_NO = 0
                AND DH.ORG_ID = P_ORG_ID
                AND DH.MASTER_REF_NO = P_POLICY_NO
                AND A.FUND_CODE = P_FUND_CODE
                AND A.unit_process_date IS NOT NULL
                AND DH.REVISED_TAG IS NULL
                AND TRANSACTION_DATE < TRUNC (SYSDATE);
   END;

   WHILE (LD_PROCESS_DATE < LD_CURRENT_DATE)
   LOOP
      -- check curent bid price
      BEGIN
         SELECT BID_PRICE
           INTO LN_CURRENT_BID_PRICE
           FROM IL_FUND_PRICE_HISTORY_T
          WHERE     ORG_ID = P_ORG_ID
                AND FUND_CODE = P_FUND_CODE
                AND TRANSACTION_DATE = LD_PROCESS_DATE;

         BEGIN
            SELECT NVL (SUM (NVL (NO_OF_UNITS, 0)), 0)
              INTO LN_LASTDAY_CLOSING_UNITS
              FROM    IL_DOC_HEADER_T DH
                   INNER JOIN
                      IL_DOC_ALLOC_DTL_BREAKUP_T A
                   ON (    dh.ORG_ID = A.ORG_ID
                       AND dh.BRANCH_ID = A.BRANCH_ID
                       AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                       AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                       AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                       AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                       AND dh.RECORD_TYPE = A.RECORD_TYPE
                       AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                       AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                       AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                       AND dh.APPLICATION_ID = A.APPLICATION_ID)
             WHERE     DH.record_type = 'O'
                   AND DH.DOCUMENT_TYPE = 'P'
                   AND DH.ISSUE_COUNT = 1
                   AND DH.ENDORSEMENT_NO = 0
                   AND DH.ORG_ID = P_ORG_ID
                   AND DH.MASTER_REF_NO = P_POLICY_NO
                   AND A.FUND_CODE = P_FUND_CODE
                   AND A.unit_process_date IS NOT NULL
                   AND DH.REVISED_TAG IS NULL
                   AND TRANSACTION_DATE <= LD_PROCESS_DATE - 1;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LN_LASTDAY_CLOSING_UNITS := 0;
         END;

         BEGIN
            SELECT BID_PRICE
              INTO LN_LAST_DAY_BID_PRICE
              FROM IL_FUND_PRICE_HISTORY_T
             WHERE     ORG_ID = P_ORG_ID
                   AND FUND_CODE = P_FUND_CODE
                   AND TRANSACTION_DATE = LD_PROCESS_DATE - 1;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LN_LAST_DAY_BID_PRICE := 0;
         END;

         LN_CURRENT_BID_PRICE :=
            CASE
               WHEN LV_PRICE_TYPE = 'O'
               THEN
                  NVL (LN_CURRENT_BID_PRICE, 0) * (1 - LN_OFFER_SPREAD_RATE)
               ELSE
                  NVL (LN_CURRENT_BID_PRICE, 0)
            END;

         LN_LAST_DAY_BID_PRICE :=
            CASE
               WHEN LV_PRICE_TYPE = 'O'
               THEN
                  NVL (LN_LAST_DAY_BID_PRICE, 0) * (1 - LN_OFFER_SPREAD_RATE)
               ELSE
                  NVL (LN_LAST_DAY_BID_PRICE, 0)
            END;

         INSERT INTO IL_POLICYWISE_DAILY_GAINLOSS_T (ORG_ID,
                                                     PROCESS_DATE,
                                                     MASTER_REF_NO,
                                                     FUND_CODE,
                                                     NO_OF_UNTS,
                                                     LAST_DAY_PRICE,
                                                     CURRENT_DAY_PRICE,
                                                     LAST_DAY_AMOUNT,
                                                     CURRENT_DAY_AMOUNT,
                                                     GAINLOSS_AMOUNT,
                                                     CREATION_DATE)
              VALUES (
                        P_ORG_ID,
                        LD_PROCESS_DATE,
                        P_POLICY_NO,
                        P_FUND_CODE,
                        LN_LASTDAY_CLOSING_UNITS,
                        LN_LAST_DAY_BID_PRICE,
                        LN_CURRENT_BID_PRICE,
                        LN_LASTDAY_CLOSING_UNITS * LN_LAST_DAY_BID_PRICE,
                        LN_LASTDAY_CLOSING_UNITS * LN_CURRENT_BID_PRICE,
                          LN_LASTDAY_CLOSING_UNITS * LN_CURRENT_BID_PRICE
                        - LN_LASTDAY_CLOSING_UNITS * LN_LAST_DAY_BID_PRICE,
                        SYSDATE);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LD_PROCESS_DATE := LD_CURRENT_DATE;
      --            LN_CURRENT_BID_PRICE := 0;
      END;



      LD_PROCESS_DATE := LD_PROCESS_DATE + 1;
   END LOOP;
   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      NULL;
END;
/

prompt
prompt Creating procedure RESET_USER_PASSWORD
prompt ======================================
prompt
CREATE OR REPLACE NONEDITIONABLE PROCEDURE reset_user_password(p_username IN VARCHAR2) IS
BEGIN
    -- Step 1: Reset LOCK_TAG to NULL
    UPDATE SM_USERS_T 
    SET LOCK_TAG = NULL
    WHERE USERNAME = p_username;
    
    -- Step 2: Reset LAST_LOCK_DATE to NULL
    UPDATE SM_USERS_T 
    SET LAST_LOCK_DATE = NULL
    WHERE USERNAME = p_username;
    
    -- Step 3: Reset LOGIN_ATTEMPTS to 0
    UPDATE SM_USERS_T 
    SET LOGIN_ATTEMPTS = 0
    WHERE USERNAME = p_username;
    
    -- Step 4: Set ACTIVE to 1
    UPDATE SM_USERS_T 
    SET ACTIVE = 1
    WHERE USERNAME = p_username;
    
    -- Step 5: Reset PASSWORD to a default password ---DEFAULT PASSORD IS admin1011
    UPDATE SM_USERS_T 
    SET PASSWORD = 'rRVDALMMlZSj7c7YQjObN99iT+DxKvcR6NuvvfifzIl7ym2m'
    WHERE USERNAME = p_username;
    
    -- Commit the changes
    COMMIT;
    
    -- Optionally,  add a message or logging for debugging purposes
    DBMS_OUTPUT.PUT_LINE('Password and user details for ' || p_username || ' have been reset.');
END reset_user_password;
/

prompt
prompt Creating procedure SP_PF_CURRENCY_SETUP_CRUD
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE SP_PF_CURRENCY_SETUP_CRUD (
   P_CRUD   IN     VARCHAR2,
   prc         OUT SYS_REFCURSOR)
AS
BEGIN
   IF LOWER (P_CRUD) = LOWER ('SELECT')
   THEN
      OPEN prc FOR
           SELECT *
             FROM CURRENCY_SETUP_T
         ORDER BY CURRENCY_NAME;
   END IF;

   IF LOWER (P_CRUD) = LOWER ('SELECT_ACTIVE')
   THEN
      OPEN prc FOR
           SELECT *
             FROM CURRENCY_SETUP_T
         ORDER BY CURRENCY_NAME;
   END IF;
END SP_PF_CURRENCY_SETUP_CRUD;
/

prompt
prompt Creating trigger RESTRICT_KNOCKOFF_ADJUSTED
prompt ===========================================
prompt
CREATE OR REPLACE TRIGGER RESTRICT_KNOCKOFF_ADJUSTED
   BEFORE UPDATE OF ADJUSTED_AMOUNT
   ON GL_ADVICE_SUB_LEDGER_T
   REFERENCING NEW AS New OLD AS Old
   FOR EACH ROW
DECLARE
BEGIN
   IF (NVL (:NEW.ADJUSTED_AMOUNT, 0) >
          NVL (:NEW.DEBIT_BASE_CURR, 0) + NVL (:NEW.CREDIT_BASE_CURR, 0))
   THEN
      RAISE_APPLICATION_ERROR (
         -20001,
         'Complete Knockoff already done on this advice');
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END RESTRICT_KNOCKOFF_ADJUSTED;
/


prompt Done
spool off
set define on