prompt PL/SQL Developer Export User Objects for user ZEAL_ERP@ORCLGBA
prompt Created by App.Admin on Wednesday, June 11, 2025
set define off
spool TidalERP-Script.log

prompt
prompt Creating table AGENT_AUTHORITY_T
prompt ================================
prompt
create table AGENT_AUTHORITY_T
(
  org_id           NUMBER not null,
  user_id          NUMBER not null,
  agent_auth_id    NUMBER not null,
  number_of_days   NUMBER,
  max_amount       NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  credit_limit     NUMBER,
  agent_comission  NUMBER,
  unlimited_credit VARCHAR2(2),
  parent_agent     NUMBER,
  branch_id        NUMBER not null
)
;
alter table AGENT_AUTHORITY_T
  add constraint PK_AGENT_AUTHORITY_T primary key (ORG_ID, USER_ID, AGENT_AUTH_ID, BRANCH_ID);

prompt
prompt Creating table AGENT_BRANCH_MAPPING_T
prompt =====================================
prompt
create table AGENT_BRANCH_MAPPING_T
(
  agent_id         NUMBER not null,
  branch_id        NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AGENT_BRANCH_MAPPING_T
  add constraint PK_AGENT_BRANCH_MAPPING_T primary key (AGENT_ID, BRANCH_ID);

prompt
prompt Creating table TK_ORGANIZATION_SETUP_T
prompt ======================================
prompt
create table TK_ORGANIZATION_SETUP_T
(
  org_id                NUMBER not null,
  org_desc              VARCHAR2(500),
  active                VARCHAR2(1),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  logo_image            VARCHAR2(4000),
  organization_address  VARCHAR2(300),
  organization_address2 VARCHAR2(300),
  email                 VARCHAR2(100),
  website               VARCHAR2(100),
  uan                   VARCHAR2(10),
  phonenumber           VARCHAR2(100),
  other_lang_org_desc   NVARCHAR2(1000),
  default_country       VARCHAR2(10)
)
;
alter table TK_ORGANIZATION_SETUP_T
  add constraint PK_TK_ORGANIZATION_SETUP_T primary key (ORG_ID);

prompt
prompt Creating table TK_AGENT_SETUP_T
prompt ===============================
prompt
create table TK_AGENT_SETUP_T
(
  org_id              NUMBER not null,
  agent_code          NUMBER not null,
  agent_desc          VARCHAR2(500),
  commission_rate     NUMBER(9,6),
  commission_flat_amt NUMBER(15,2),
  active              VARCHAR2(1),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  agency_code         NUMBER,
  direct_agent        VARCHAR2(1),
  broker              VARCHAR2(1),
  gender              VARCHAR2(1),
  phone_no            VARCHAR2(15),
  address             VARCHAR2(50),
  reference_no        VARCHAR2(50),
  remarks             VARCHAR2(200)
)
;
alter table TK_AGENT_SETUP_T
  add constraint PK_TK_AGENT_SETUP_T primary key (ORG_ID, AGENT_CODE);
alter table TK_AGENT_SETUP_T
  add constraint FK_AGENT_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table AGENT_HIERARCHY_T
prompt ================================
prompt
create table AGENT_HIERARCHY_T
(
  org_id               NUMBER not null,
  agent_id             NUMBER not null,
  parent_agent         NUMBER,
  agent_level          NUMBER not null,
  percentage           VARCHAR2(50),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  effective_start_date DATE,
  effective_end_date   DATE,
  agency_code          NUMBER
)
;
alter table AGENT_HIERARCHY_T
  add constraint PK_AGENT_HIER primary key (ORG_ID, AGENT_LEVEL, AGENT_ID);
alter table AGENT_HIERARCHY_T
  add constraint AGENT_ID_FK foreign key (ORG_ID, AGENT_ID)
  references TK_AGENT_SETUP_T (ORG_ID, AGENT_CODE);
alter table AGENT_HIERARCHY_T
  add constraint ORG_ID_FK foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);
alter table AGENT_HIERARCHY_T
  add constraint PARENT_AGENT_FK foreign key (ORG_ID, PARENT_AGENT)
  references TK_AGENT_SETUP_T (ORG_ID, AGENT_CODE);

prompt
prompt Creating table TK_AGENCY_SETUP_T
prompt ================================
prompt
create table TK_AGENCY_SETUP_T
(
  org_id           NUMBER not null,
  agency_code      NUMBER not null,
  agency_desc      VARCHAR2(200),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  overriding_rate  NUMBER(9,6),
  reference_no     VARCHAR2(50),
  remarks          VARCHAR2(200)
)
;
alter table TK_AGENCY_SETUP_T
  add constraint PK_TK_AGENCY_SETUP_T primary key (ORG_ID, AGENCY_CODE);
alter table TK_AGENCY_SETUP_T
  add constraint FK_AGENCY_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table AGENT_LEVEL_DEFINITION_T
prompt =======================================
prompt
create table AGENT_LEVEL_DEFINITION_T
(
  org_id               NUMBER not null,
  agency_code          NUMBER not null,
  level_id             NUMBER not null,
  level_description    VARCHAR2(250),
  level_length         NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  overriding_rate      NUMBER,
  effective_start_date DATE,
  effective_end_date   DATE
)
;
alter table AGENT_LEVEL_DEFINITION_T
  add constraint PK_AGENT_LEVEL primary key (ORG_ID, AGENCY_CODE, LEVEL_ID);
alter table AGENT_LEVEL_DEFINITION_T
  add constraint FK_AG_LEVEL_AGENCY foreign key (ORG_ID, AGENCY_CODE)
  references TK_AGENCY_SETUP_T (ORG_ID, AGENCY_CODE);

prompt
prompt Creating table AGENT_PLAN_MAPPING
prompt =================================
prompt
create table AGENT_PLAN_MAPPING
(
  org_id           NUMBER not null,
  tp_id            NUMBER not null,
  plan_mapping_id  NUMBER not null,
  user_id          NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  branch_id        NUMBER not null
)
;
alter table AGENT_PLAN_MAPPING
  add constraint PK_AP_MAPPING_T primary key (ORG_ID, TP_ID, PLAN_MAPPING_ID, USER_ID, BRANCH_ID);

prompt
prompt Creating table AGENT_REGISTRATION_T
prompt ===================================
prompt
create table AGENT_REGISTRATION_T
(
  agent_id              NUMBER not null,
  agent_name            VARCHAR2(100),
  email                 VARCHAR2(250),
  contact               VARCHAR2(15),
  username              VARCHAR2(100),
  is_approved           VARCHAR2(1),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  remarks               VARCHAR2(500),
  address               VARCHAR2(200),
  ntn_number            VARCHAR2(13),
  name_of_director      VARCHAR2(50),
  cnic                  VARCHAR2(20),
  contact_person        VARCHAR2(50),
  authorize_person_name VARCHAR2(50),
  city                  VARCHAR2(60),
  active                VARCHAR2(1)
)
;
alter table AGENT_REGISTRATION_T
  add constraint PK_AGENT_REGISTRATION_T primary key (AGENT_ID);

prompt
prompt Creating table AGT_L1_PRD_BNS_CRITEREA_T
prompt ========================================
prompt
create table AGT_L1_PRD_BNS_CRITEREA_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  policy_id         NUMBER not null,
  min_persistency_2 NUMBER not null,
  min_persistency_3 NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AGT_L1_PRD_BNS_CRITEREA_T
  add constraint CONSTRAINT_NAME unique (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID);

prompt
prompt Creating table AGT_L1_PRS_BNS_CRITEREA_T
prompt ========================================
prompt
create table AGT_L1_PRS_BNS_CRITEREA_T
(
  org_id                     NUMBER not null,
  channel_id                 NUMBER not null,
  model_id                   NUMBER not null,
  policy_id                  NUMBER not null,
  stipend_type               VARCHAR2(1) not null,
  min_due_plan               NUMBER not null,
  min_due_contribution_2year NUMBER not null,
  min_persistency_2          NUMBER not null,
  min_persistency_3          NUMBER not null,
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE
)
;
alter table AGT_L1_PRS_BNS_CRITEREA_T
  add constraint PK_AGT_L1_PRS_BNS_CRITEREA_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, STIPEND_TYPE);

prompt
prompt Creating table AGT_L2_PMT_TRGT_CRITEREA_T
prompt =========================================
prompt
create table AGT_L2_PMT_TRGT_CRITEREA_T
(
  org_id                NUMBER not null,
  channel_id            NUMBER not null,
  model_id              NUMBER not null,
  policy_id             NUMBER not null,
  first_qtr_target_pct  NUMBER,
  second_qtr_target_pct NUMBER,
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  first_qtr_team_pct    NUMBER,
  second_qtr_team_pct   NUMBER
)
;
alter table AGT_L2_PMT_TRGT_CRITEREA_T
  add constraint PK_AGT_L2_PMT_TRGT_CRITEREA_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID);

prompt
prompt Creating table AGT_L2_PRD_BNS_CRITEREA_T
prompt ========================================
prompt
create table AGT_L2_PRD_BNS_CRITEREA_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  policy_id         NUMBER not null,
  min_persistency_2 NUMBER not null,
  min_persistency_3 NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AGT_L2_PRD_BNS_CRITEREA_T
  add constraint PK_AGT_L2_PRD_BNS_CRITEREA_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID);

prompt
prompt Creating table AML_TYPE_DOCUMENT_MAPPING_T
prompt ==========================================
prompt
create table AML_TYPE_DOCUMENT_MAPPING_T
(
  org_id           NUMBER not null,
  aml_type         VARCHAR2(3) not null,
  document_type    VARCHAR2(10) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  doc_percentage   NUMBER
)
;
alter table AML_TYPE_DOCUMENT_MAPPING_T
  add constraint PK_AML_TYPE_DOC_MAPPING_T primary key (ORG_ID, AML_TYPE, DOCUMENT_TYPE);

prompt
prompt Creating table AM_AGENCY_DESIGNATION_T
prompt ======================================
prompt
create table AM_AGENCY_DESIGNATION_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  designation_id    NUMBER not null,
  designation_name  VARCHAR2(5),
  designation_level VARCHAR2(3),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_AGENCY_DESIGNATION_T
  add constraint PK_AM_AGENCY_DESIGNATION_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, DESIGNATION_ID);

prompt
prompt Creating table AM_AGENT_BANK_T
prompt ==============================
prompt
create table AM_AGENT_BANK_T
(
  org_id           NUMBER not null,
  agent_id         NUMBER not null,
  serial_no        NUMBER not null,
  bank_code        VARCHAR2(3),
  branch_code      VARCHAR2(3),
  account_no       VARCHAR2(40),
  iban             VARCHAR2(40),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGENT_BANK_T
  add constraint PK_AM_AGENT_BANK_T primary key (ORG_ID, AGENT_ID, SERIAL_NO);

prompt
prompt Creating table AM_AGENT_T
prompt =========================
prompt
create table AM_AGENT_T
(
  org_id                         NUMBER not null,
  agent_id                       NUMBER not null,
  agent_name                     VARCHAR2(150),
  active                         VARCHAR2(1),
  cnic                           VARCHAR2(15),
  prefix                         VARCHAR2(2),
  father_husband_name            VARCHAR2(100),
  dob                            DATE,
  doj                            DATE,
  mother_name                    VARCHAR2(20),
  agent_status                   VARCHAR2(2),
  agent_type                     VARCHAR2(2),
  marital_status                 VARCHAR2(1),
  religion                       VARCHAR2(3),
  nationality                    VARCHAR2(3),
  email_id                       VARCHAR2(50),
  gender                         VARCHAR2(2),
  created_by                     VARCHAR2(50),
  creation_date                  DATE,
  last_updated_by                VARCHAR2(50),
  last_update_date               DATE,
  cdc_check_date                 DATE,
  username                       VARCHAR2(200),
  nic_expiry_date                DATE,
  first_name                     VARCHAR2(150),
  middle_name                    VARCHAR2(150),
  last_name                      VARCHAR2(150),
  agent_code                     VARCHAR2(50),
  empolyee_id                    NUMBER,
  contract_sent_date             DATE,
  contract_receive_date          DATE,
  appointment_letter_sent_date   DATE,
  appointment_letter_receivedate DATE,
  active_comment                 VARCHAR2(250)
)
;
alter table AM_AGENT_T
  add constraint PK_AM_AGENT_T primary key (ORG_ID, AGENT_ID);

prompt
prompt Creating table AM_AGENT_PARTNER_T
prompt =================================
prompt
create table AM_AGENT_PARTNER_T
(
  org_id           NUMBER not null,
  agent_id         NUMBER not null,
  partner_id       NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGENT_PARTNER_T
  add constraint PK_AM_AGENT_PARTNER_T primary key (ORG_ID, AGENT_ID, PARTNER_ID);
alter table AM_AGENT_PARTNER_T
  add constraint AM_AGENT_PARTNER_T_R01 foreign key (ORG_ID, AGENT_ID)
  references AM_AGENT_T (ORG_ID, AGENT_ID);

prompt
prompt Creating table AM_AGENT_CHANNEL_T
prompt =================================
prompt
create table AM_AGENT_CHANNEL_T
(
  org_id           NUMBER not null,
  agent_id         NUMBER not null,
  partner_id       NUMBER not null,
  channel_id       NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGENT_CHANNEL_T
  add constraint PK_AM_AGENT_CHANNEL_T primary key (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID);
alter table AM_AGENT_CHANNEL_T
  add constraint AM_AGENT_CHANNEL_T_R01 foreign key (ORG_ID, AGENT_ID, PARTNER_ID)
  references AM_AGENT_PARTNER_T (ORG_ID, AGENT_ID, PARTNER_ID);

prompt
prompt Creating table AM_AGENT_CHANNEL_MODEL_T
prompt =======================================
prompt
create table AM_AGENT_CHANNEL_MODEL_T
(
  org_id                         NUMBER not null,
  agent_id                       NUMBER not null,
  partner_id                     NUMBER not null,
  channel_id                     NUMBER not null,
  model_id                       NUMBER not null,
  created_by                     VARCHAR2(50),
  creation_date                  DATE,
  last_updated_by                VARCHAR2(50),
  last_update_date               DATE,
  termination_id                 NUMBER,
  termination_date               DATE,
  termination_by                 VARCHAR2(50),
  delete_flag                    VARCHAR2(1),
  reinstate_id                   NUMBER,
  reinstate_date                 DATE,
  reinstate_by                   VARCHAR2(50),
  joining_date                   DATE,
  agent_status                   VARCHAR2(2),
  agent_type                     VARCHAR2(2),
  contract_sent_date             DATE,
  contract_receive_date          DATE,
  appointment_letter_sent_date   DATE,
  appointment_letter_receivedate DATE,
  active_comment                 VARCHAR2(250),
  active                         VARCHAR2(1)
)
;
alter table AM_AGENT_CHANNEL_MODEL_T
  add constraint PK_AM_AGENT_CHANNEL_MODEL_T primary key (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID);
alter table AM_AGENT_CHANNEL_MODEL_T
  add constraint AM_AGENT_CHANNEL_MODEL_T_R01 foreign key (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID)
  references AM_AGENT_CHANNEL_T (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID);

prompt
prompt Creating table AM_AGENT_COM_TRANSFER_DTL_T
prompt ==========================================
prompt
create table AM_AGENT_COM_TRANSFER_DTL_T
(
  org_id                  NUMBER not null,
  process_id              NUMBER not null,
  branch_id               NUMBER not null,
  main_product_code       NUMBER not null,
  sub_product_code        NUMBER not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  serial_no               NUMBER not null,
  commission_cycle_id     NUMBER not null,
  channel_id              NUMBER not null,
  channel_model_id        NUMBER not null,
  agent_code              NUMBER not null,
  cycle_level             VARCHAR2(20),
  designation             VARCHAR2(20),
  cycle_type              VARCHAR2(20),
  allocation_category     VARCHAR2(50),
  commission_rate         NUMBER(9,6),
  commission_flat_amt     NUMBER(15,2),
  commission_amount       NUMBER(15,2),
  agency_type             VARCHAR2(20),
  shares                  NUMBER,
  gross_contribution      NUMBER,
  activity_type           VARCHAR2(100),
  activity_date           DATE,
  comm_percent_share      NUMBER,
  doc_reference_no        VARCHAR2(50),
  contribution_received   NUMBER,
  comm_settled            NUMBER,
  installment_no          NUMBER,
  created_by              VARCHAR2(50),
  creation_date           DATE,
  allocation_id           NUMBER not null,
  doc_ref_no_key          VARCHAR2(150),
  hold_comment            VARCHAR2(500),
  release_comment         VARCHAR2(500),
  cycle_nature            VARCHAR2(10),
  allocation_type         NUMBER,
  transferred_comm_amount NUMBER default (0),
  transfer_to_agent       NUMBER not null
)
;
alter table AM_AGENT_COM_TRANSFER_DTL_T
  add constraint PK_AM_AGENT_COM_TRANSFER_DTL_T primary key (ORG_ID, PROCESS_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO, COMMISSION_CYCLE_ID, ALLOCATION_ID, CHANNEL_ID, CHANNEL_MODEL_ID, AGENT_CODE, TRANSFER_TO_AGENT);

prompt
prompt Creating table AM_AGENT_COM_TRANSFER_T
prompt ======================================
prompt
create table AM_AGENT_COM_TRANSFER_T
(
  process_id        NUMBER not null,
  org_id            NUMBER not null,
  agent_id          NUMBER,
  transfer_date     DATE,
  transfer_reason   NUMBER,
  transfer_to_agent NUMBER,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  post_flag         VARCHAR2(5),
  posted_date       DATE,
  posted_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_AGENT_COM_TRANSFER_T
  add constraint PK_AM_AGENT_COM_TRANSFER primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_AGENT_CONTR_PROMOTION_T
prompt =========================================
prompt
create table AM_AGENT_CONTR_PROMOTION_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  record_id        NUMBER not null,
  contribution_1   NUMBER,
  contribution_2   NUMBER,
  contribution_3   NUMBER,
  contribution_4   NUMBER,
  contribution_5   NUMBER,
  contribution_6   NUMBER,
  contribution_7   NUMBER,
  contribution_8   NUMBER,
  contribution_9   NUMBER,
  contribution_10  NUMBER,
  contribution_11  NUMBER,
  contribution_12  NUMBER,
  no_of_cases_1    NUMBER,
  no_of_cases_2    NUMBER,
  no_of_cases_3    NUMBER,
  no_of_cases_4    NUMBER,
  no_of_cases_5    NUMBER,
  no_of_cases_6    NUMBER,
  no_of_cases_7    NUMBER,
  no_of_cases_8    NUMBER,
  no_of_cases_9    NUMBER,
  no_of_cases_10   NUMBER,
  no_of_cases_11   NUMBER,
  no_of_cases_12   NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGENT_CONTR_PROMOTION_T
  add constraint PK_AM_AGENT_CONTR_PROMOTION_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, RECORD_ID);

prompt
prompt Creating table AM_AGENT_DESIGNATION_T
prompt =====================================
prompt
create table AM_AGENT_DESIGNATION_T
(
  org_id                NUMBER not null,
  agent_id              NUMBER not null,
  partner_id            NUMBER not null,
  channel_id            NUMBER not null,
  model_id              NUMBER not null,
  designation_id        NUMBER not null,
  is_salaried           VARCHAR2(1),
  supervisor_id         NUMBER,
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  supervisor_channel_id NUMBER,
  supervisor_model_id   NUMBER,
  supervisor_partner_id NUMBER,
  supervisor_level_id   NUMBER
)
;
alter table AM_AGENT_DESIGNATION_T
  add constraint PK_AM_AGENT_DESIGNATION_T primary key (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, DESIGNATION_ID);
alter table AM_AGENT_DESIGNATION_T
  add constraint AM_AGENT_DESIGNATION_T_R01 foreign key (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID)
  references AM_AGENT_CHANNEL_MODEL_T (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID);

prompt
prompt Creating table AM_AGENT_EDU_HISTORY_T
prompt =====================================
prompt
create table AM_AGENT_EDU_HISTORY_T
(
  org_id           NUMBER not null,
  agent_id         NUMBER not null,
  education_id     NUMBER not null,
  education_type   VARCHAR2(3),
  degree_name      VARCHAR2(30),
  institution_code VARCHAR2(20),
  passing_year     NUMBER,
  passing_gpa      NUMBER,
  passing_grade    VARCHAR2(3),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGENT_EDU_HISTORY_T
  add constraint PK_AM_AGENT_EDU_HISTORY_T primary key (ORG_ID, AGENT_ID, EDUCATION_ID);

prompt
prompt Creating table AM_AGENT_EMP_HISTORY_T
prompt =====================================
prompt
create table AM_AGENT_EMP_HISTORY_T
(
  org_id            NUMBER not null,
  agent_id          NUMBER not null,
  employment_id     NUMBER not null,
  employer_name     VARCHAR2(50),
  designation       VARCHAR2(20),
  from_date         DATE,
  to_date           DATE,
  is_current        VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  employment_status VARCHAR2(2),
  reason_of_leaving VARCHAR2(500)
)
;
alter table AM_AGENT_EMP_HISTORY_T
  add constraint PK_AM_AGENT_EMP_HISTORY_T primary key (ORG_ID, AGENT_ID, EMPLOYMENT_ID);

prompt
prompt Creating table AM_AGENT_HIERARCHY_CHANGE_T
prompt ==========================================
prompt
create table AM_AGENT_HIERARCHY_CHANGE_T
(
  change_id        NUMBER not null,
  org_id           NUMBER not null,
  agent_id         NUMBER,
  change_date      DATE,
  change_reason    VARCHAR2(250),
  lock_flag        VARCHAR2(5),
  locked_date      DATE,
  locked_by        VARCHAR2(150),
  post_flag        VARCHAR2(5),
  posted_date      DATE,
  posted_by        VARCHAR2(150),
  creation_date    DATE,
  created_by       VARCHAR2(150),
  last_update_date DATE,
  last_updated_by  VARCHAR2(150)
)
;
alter table AM_AGENT_HIERARCHY_CHANGE_T
  add constraint PK_AM_AGENT_HIERARCHY_CHANGE_T primary key (ORG_ID, CHANGE_ID);

prompt
prompt Creating table AM_AGENT_HIERARCHY_REASON_T
prompt ==========================================
prompt
create table AM_AGENT_HIERARCHY_REASON_T
(
  code             NUMBER not null,
  org_id           NUMBER not null,
  description      VARCHAR2(150),
  active_flag      VARCHAR2(5),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGENT_HIERARCHY_REASON_T
  add constraint PK_AM_AGENT_HIERARCHY_REASON_T primary key (ORG_ID, CODE);

prompt
prompt Creating table AM_AGENT_LEVEL_CHANGE_T
prompt ======================================
prompt
create table AM_AGENT_LEVEL_CHANGE_T
(
  level_change_id     NUMBER not null,
  org_id              NUMBER not null,
  agent_id            NUMBER,
  level_change_date   DATE,
  level_change_type   CHAR(1),
  level_change_reason VARCHAR2(250),
  lock_flag           VARCHAR2(5),
  locked_date         DATE,
  locked_by           VARCHAR2(150),
  post_flag           VARCHAR2(5),
  posted_date         DATE,
  posted_by           VARCHAR2(150),
  creation_date       DATE,
  created_by          VARCHAR2(150),
  last_update_date    DATE,
  last_updated_by     VARCHAR2(150)
)
;
alter table AM_AGENT_LEVEL_CHANGE_T
  add constraint PK_AM_AGENT_LEVEL_CHANGE_T primary key (ORG_ID, LEVEL_CHANGE_ID);

prompt
prompt Creating table AM_AGENT_PARTNER_BRANCHES_T
prompt ==========================================
prompt
create table AM_AGENT_PARTNER_BRANCHES_T
(
  org_id           NUMBER not null,
  agent_id         NUMBER not null,
  partner_id       NUMBER not null,
  branch_id        NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGENT_PARTNER_BRANCHES_T
  add constraint PK_AM_AGENT_PARTNER_BRANCHES_T primary key (ORG_ID, AGENT_ID, PARTNER_ID, BRANCH_ID);

prompt
prompt Creating table AM_AGENT_PERSISTENCY_LV1_T
prompt =========================================
prompt
create table AM_AGENT_PERSISTENCY_LV1_T
(
  org_id                       NUMBER not null,
  process_year                 NUMBER not null,
  agent_id                     NUMBER not null,
  persistency_year             NUMBER not null,
  total_count                  NUMBER not null,
  paid_count                   NUMBER not null,
  persistency_percentage       NUMBER not null,
  renewed_contribution         NUMBER,
  due_contribution             NUMBER,
  contribution_pers_percentage NUMBER,
  created_by                   VARCHAR2(50),
  creation_date                DATE
)
;
alter table AM_AGENT_PERSISTENCY_LV1_T
  add constraint PK_AM_AGENT_PERSISTENCY_LV1_T primary key (ORG_ID, PROCESS_YEAR, AGENT_ID, PERSISTENCY_YEAR);

prompt
prompt Creating table AM_AGENT_PERSISTENCY_LV2_T
prompt =========================================
prompt
create table AM_AGENT_PERSISTENCY_LV2_T
(
  org_id                       NUMBER not null,
  process_year                 NUMBER not null,
  partner_id                   NUMBER not null,
  agent_id                     NUMBER not null,
  persistency_year             NUMBER not null,
  total_count                  NUMBER not null,
  paid_count                   NUMBER not null,
  persistency_percentage       NUMBER not null,
  renewed_contribution         NUMBER,
  due_contribution             NUMBER,
  contribution_pers_percentage NUMBER,
  created_by                   VARCHAR2(50),
  creation_date                DATE
)
;
alter table AM_AGENT_PERSISTENCY_LV2_T
  add constraint PK_AM_AGENT_PERSISTENCY_LV2_T primary key (ORG_ID, PROCESS_YEAR, PARTNER_ID, AGENT_ID, PERSISTENCY_YEAR);

prompt
prompt Creating table AM_AGENT_PERSISTENCY_LV3_T
prompt =========================================
prompt
create table AM_AGENT_PERSISTENCY_LV3_T
(
  org_id                       NUMBER not null,
  process_year                 NUMBER not null,
  partner_id                   NUMBER not null,
  channel_id                   NUMBER not null,
  agent_id                     NUMBER not null,
  persistency_year             NUMBER not null,
  total_count                  NUMBER not null,
  paid_count                   NUMBER not null,
  persistency_percentage       NUMBER not null,
  renewed_contribution         NUMBER,
  due_contribution             NUMBER,
  contribution_pers_percentage NUMBER,
  created_by                   VARCHAR2(50),
  creation_date                DATE
)
;
alter table AM_AGENT_PERSISTENCY_LV3_T
  add constraint PK_AM_AGENT_PERSISTENCY_LV3_T primary key (ORG_ID, PROCESS_YEAR, PARTNER_ID, CHANNEL_ID, AGENT_ID, PERSISTENCY_YEAR);

prompt
prompt Creating table AM_AGENT_PERSISTENCY_T
prompt =====================================
prompt
create table AM_AGENT_PERSISTENCY_T
(
  org_id                       NUMBER not null,
  process_year                 NUMBER not null,
  partner_id                   NUMBER not null,
  channel_id                   NUMBER not null,
  model_id                     NUMBER not null,
  agent_id                     NUMBER not null,
  persistency_year             NUMBER not null,
  total_count                  NUMBER not null,
  paid_count                   NUMBER not null,
  persistency_percentage       NUMBER not null,
  created_by                   VARCHAR2(50),
  creation_date                DATE,
  renewed_contribution         NUMBER,
  due_contribution             NUMBER,
  description_other_lang       NVARCHAR2(500),
  contribution_pers_percentage NUMBER
)
;
alter table AM_AGENT_PERSISTENCY_T
  add constraint PK_AM_AGENT_PERSISTENCY_T primary key (ORG_ID, PROCESS_YEAR, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID, PERSISTENCY_YEAR);

prompt
prompt Creating table AM_AGENT_REINSTATE_HEADER_T
prompt ==========================================
prompt
create table AM_AGENT_REINSTATE_HEADER_T
(
  org_id           NUMBER not null,
  reinstate_id     NUMBER not null,
  agent_id         NUMBER,
  reinstate_date   DATE,
  reinstate_reason NUMBER,
  lock_flag        VARCHAR2(5),
  locked_date      DATE,
  locked_by        VARCHAR2(150),
  post_flag        VARCHAR2(5),
  posted_date      DATE,
  posted_by        VARCHAR2(150),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGENT_REINSTATE_HEADER_T
  add constraint PK_AM_AGENT_REINSTATE_HEADER_T primary key (ORG_ID, REINSTATE_ID);

prompt
prompt Creating table AM_AGENT_REINSTATE_REASON_T
prompt ==========================================
prompt
create table AM_AGENT_REINSTATE_REASON_T
(
  code             NUMBER not null,
  org_id           NUMBER not null,
  description      VARCHAR2(150),
  active_flag      VARCHAR2(5),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGENT_REINSTATE_REASON_T
  add constraint PK_AM_REINSTATE_REASON_T primary key (ORG_ID, CODE);

prompt
prompt Creating table AM_AGENT_TERMINATION_T
prompt =====================================
prompt
create table AM_AGENT_TERMINATION_T
(
  termination_id     NUMBER not null,
  org_id             NUMBER not null,
  agent_id           NUMBER,
  termination_type   VARCHAR2(150),
  termination_date   DATE,
  termination_reason NUMBER,
  transfer_to_agent  NUMBER,
  lock_flag          VARCHAR2(5),
  locked_date        DATE,
  locked_by          VARCHAR2(150),
  post_flag          VARCHAR2(5),
  posted_date        DATE,
  posted_by          VARCHAR2(150),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table AM_AGENT_TERMINATION_T
  add constraint PK_AM_AGENT_TERMINATION_T primary key (ORG_ID, TERMINATION_ID);

prompt
prompt Creating table AM_AGENT_TRAINING_T
prompt ==================================
prompt
create table AM_AGENT_TRAINING_T
(
  org_id           NUMBER not null,
  agent_id         NUMBER not null,
  training_id      NUMBER not null,
  training_name    VARCHAR2(250) not null,
  batch_number     VARCHAR2(50),
  venue            VARCHAR2(250),
  from_date        DATE,
  to_date          DATE,
  training_result  VARCHAR2(150),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGENT_TRAINING_T
  add constraint PK_AM_AGENT_TRAINING_T primary key (ORG_ID, AGENT_ID, TRAINING_ID);

prompt
prompt Creating table AM_AGENT_TRANSFER_REASON_T
prompt =========================================
prompt
create table AM_AGENT_TRANSFER_REASON_T
(
  code             NUMBER not null,
  org_id           NUMBER not null,
  description      VARCHAR2(150),
  active_flag      VARCHAR2(5),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  reason_subject   VARCHAR2(300),
  reason_content   VARCHAR2(300)
)
;
alter table AM_AGENT_TRANSFER_REASON_T
  add constraint PK_AM_AGENT_TRANSFER_REASON_T primary key (ORG_ID, CODE);

prompt
prompt Creating table AM_AGENT_TRANSFER_T
prompt ==================================
prompt
create table AM_AGENT_TRANSFER_T
(
  transfer_id       NUMBER not null,
  org_id            NUMBER not null,
  agent_id          NUMBER,
  transfer_type     VARCHAR2(150),
  transfer_date     DATE,
  transfer_reason   NUMBER,
  transfer_to_agent NUMBER,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  post_flag         VARCHAR2(5),
  posted_date       DATE,
  posted_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_AGENT_TRANSFER_T
  add constraint PK_AM_AGENT_TRANSFER_T primary key (ORG_ID, TRANSFER_ID);

prompt
prompt Creating table AM_AGT_HIERARCHY_LOG_T
prompt =====================================
prompt
create table AM_AGT_HIERARCHY_LOG_T
(
  org_id                 NUMBER not null,
  partner_id             NUMBER not null,
  channel_id             NUMBER not null,
  model_id               NUMBER not null,
  record_id              NUMBER not null,
  agent_id               NUMBER not null,
  previous_supervisor_id NUMBER not null,
  new_supervisor_id      NUMBER not null,
  process_description    VARCHAR2(50),
  created_by             VARCHAR2(50),
  creation_date          DATE
)
;
alter table AM_AGT_HIERARCHY_LOG_T
  add constraint PK_AM_AGT_HIERARCHY_LOG_T primary key (ORG_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, RECORD_ID);

prompt
prompt Creating table AM_AGT_L1_PERS_BONUS_T
prompt =====================================
prompt
create table AM_AGT_L1_PERS_BONUS_T
(
  org_id                 NUMBER not null,
  channel_id             NUMBER not null,
  model_id               NUMBER not null,
  policy_id              NUMBER not null,
  persistency_ratio_from NUMBER not null,
  persistency_ratio_to   NUMBER not null,
  persistency_bonus      NUMBER not null,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table AM_AGT_L1_PERS_BONUS_T
  add constraint PK_AM_AGT_L1_PERS_BONUS_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, PERSISTENCY_RATIO_FROM, PERSISTENCY_RATIO_TO, PERSISTENCY_BONUS);

prompt
prompt Creating table AM_AGT_L1_PRDCT_BONUS_T
prompt ======================================
prompt
create table AM_AGT_L1_PRDCT_BONUS_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  designation_id   NUMBER not null,
  target_frequency VARCHAR2(1) not null,
  target_amount    NUMBER not null,
  bonus_percentage NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  stipend_type     VARCHAR2(1) not null
)
;
alter table AM_AGT_L1_PRDCT_BONUS_T
  add constraint PK_AM_AGT_L1_PRDCT_BONUS_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID);

prompt
prompt Creating table AM_AGT_L1_PROD_BONUS_T
prompt =====================================
prompt
create table AM_AGT_L1_PROD_BONUS_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  designation_id   NUMBER not null,
  no_of_cases      NUMBER not null,
  frequency        VARCHAR2(1) not null,
  contribution     NUMBER not null,
  bonus_percentage NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_AGT_L1_PROD_BONUS_T
  add constraint PK_AM_AGT_L1_PROD_BONUS_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID);

prompt
prompt Creating table AM_AGT_L2_PMT_TARGET_T
prompt =====================================
prompt
create table AM_AGT_L2_PMT_TARGET_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  policy_id         NUMBER not null,
  designation_id    NUMBER not null,
  frequency         VARCHAR2(1) not null,
  contribution      NUMBER not null,
  no_of_consultants NUMBER not null,
  no_of_managers    NUMBER not null,
  bonus_percentage  NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  contribution_2    NUMBER
)
;
alter table AM_AGT_L2_PMT_TARGET_T
  add constraint PK_AM_AGT_L2_PMT_TARGET_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID);

prompt
prompt Creating table AM_AGT_L2_PRD_BONUS_T
prompt ====================================
prompt
create table AM_AGT_L2_PRD_BONUS_T
(
  org_id               NUMBER not null,
  channel_id           NUMBER not null,
  model_id             NUMBER not null,
  policy_id            NUMBER not null,
  designation_id       NUMBER not null,
  min_month_asst       NUMBER not null,
  avg_month_business   NUMBER not null,
  min_additional_contr NUMBER not null,
  bonus_percentage     NUMBER not null,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table AM_AGT_L2_PRD_BONUS_T
  add constraint PK_AM_AGT_L2_PRD_BONUS_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID);

prompt
prompt Creating table AM_PARTNER_T
prompt ===========================
prompt
create table AM_PARTNER_T
(
  org_id                NUMBER not null,
  partner_id            NUMBER not null,
  partner_name          VARCHAR2(100),
  is_partner            VARCHAR2(1),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  bank_code             NUMBER,
  branch_code           NUMBER,
  bank_account          VARCHAR2(50),
  text_seperator        VARCHAR2(1),
  version_no            NUMBER,
  serial_no             NUMBER,
  extra_information     VARCHAR2(200),
  pmd_type              VARCHAR2(50),
  contribution_type     VARCHAR2(50),
  file_prefix           VARCHAR2(25),
  file_extension        VARCHAR2(25),
  suite_analysis_allow  VARCHAR2(1),
  is_bank               VARCHAR2(1),
  logo_attachment       VARCHAR2(500),
  short_code            VARCHAR2(50),
  doc_type              VARCHAR2(1),
  is_header_include     VARCHAR2(1),
  show_suite_score      VARCHAR2(1),
  merge_installment     VARCHAR2(1),
  os_net_off_suspense   VARCHAR2(1),
  is_bank_acc_mandatory VARCHAR2(1),
  agency_code           VARCHAR2(50)
)
;
alter table AM_PARTNER_T
  add constraint PK_AM_PARTNER_T primary key (ORG_ID, PARTNER_ID);

prompt
prompt Creating table AM_PARTNER_GROUP_T
prompt =================================
prompt
create table AM_PARTNER_GROUP_T
(
  org_id           NUMBER not null,
  partner_id       NUMBER not null,
  partner_group_id NUMBER not null,
  group_name       VARCHAR2(150),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  active_flag      VARCHAR2(1)
)
;
alter table AM_PARTNER_GROUP_T
  add constraint PK_AM_PARTNER_GROUP_T primary key (ORG_ID, PARTNER_ID, PARTNER_GROUP_ID);
alter table AM_PARTNER_GROUP_T
  add constraint AM_PARTNER_GROUP_T_FK1 foreign key (ORG_ID, PARTNER_ID)
  references AM_PARTNER_T (ORG_ID, PARTNER_ID);

prompt
prompt Creating table AM_PARTNER_REGION_T
prompt ==================================
prompt
create table AM_PARTNER_REGION_T
(
  org_id              NUMBER not null,
  partner_id          NUMBER not null,
  partner_group_id    NUMBER not null,
  partner_region_id   NUMBER not null,
  partner_region_name VARCHAR2(150),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  active_flag         VARCHAR2(1)
)
;
alter table AM_PARTNER_REGION_T
  add constraint PK_AM_PARTNER_REGION_T primary key (ORG_ID, PARTNER_ID, PARTNER_GROUP_ID, PARTNER_REGION_ID);
alter table AM_PARTNER_REGION_T
  add constraint AM_PARTNER_REGION_T_FK1 foreign key (ORG_ID, PARTNER_ID, PARTNER_GROUP_ID)
  references AM_PARTNER_GROUP_T (ORG_ID, PARTNER_ID, PARTNER_GROUP_ID);

prompt
prompt Creating table AM_PARTNER_AREA_T
prompt ================================
prompt
create table AM_PARTNER_AREA_T
(
  org_id            NUMBER not null,
  partner_id        NUMBER not null,
  partner_group_id  NUMBER not null,
  partner_region_id NUMBER not null,
  partner_area_id   NUMBER not null,
  partner_area_name VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  active_flag       VARCHAR2(1)
)
;
alter table AM_PARTNER_AREA_T
  add constraint PK_AM_PARTNER_AREA_T primary key (ORG_ID, PARTNER_ID, PARTNER_GROUP_ID, PARTNER_REGION_ID, PARTNER_AREA_ID);
alter table AM_PARTNER_AREA_T
  add constraint AM_PARTNER_AREA_T_FK1 foreign key (ORG_ID, PARTNER_ID, PARTNER_GROUP_ID, PARTNER_REGION_ID)
  references AM_PARTNER_REGION_T (ORG_ID, PARTNER_ID, PARTNER_GROUP_ID, PARTNER_REGION_ID);

prompt
prompt Creating table AM_PARTNER_BRANCHES_T
prompt ====================================
prompt
create table AM_PARTNER_BRANCHES_T
(
  org_id                NUMBER not null,
  partner_id            NUMBER not null,
  partner_branch_id     NUMBER not null,
  partner_branch_name   VARCHAR2(100),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  org_branch_id         VARCHAR2(50),
  region_id             NUMBER,
  agency_branch_id      NUMBER,
  extra_information     VARCHAR2(200),
  group_id              NUMBER,
  area_id               NUMBER,
  branch_manual_code    VARCHAR2(20),
  banca_branch_category VARCHAR2(30),
  branch_rm_name        VARCHAR2(50),
  branch_rm_code        VARCHAR2(20),
  default_tag           VARCHAR2(1),
  active                VARCHAR2(1)
)
;
alter table AM_PARTNER_BRANCHES_T
  add constraint PK_AM_PARTNER_BRANCHES_T primary key (ORG_ID, PARTNER_ID, PARTNER_BRANCH_ID);
alter table AM_PARTNER_BRANCHES_T
  add constraint AM_PARTNER_BRANCHES_T_FK1 foreign key (ORG_ID, PARTNER_ID)
  references AM_PARTNER_T (ORG_ID, PARTNER_ID);
alter table AM_PARTNER_BRANCHES_T
  add constraint AM_PARTNER_BRANCHES_T_FK2 foreign key (ORG_ID, PARTNER_ID, GROUP_ID)
  references AM_PARTNER_GROUP_T (ORG_ID, PARTNER_ID, PARTNER_GROUP_ID);
alter table AM_PARTNER_BRANCHES_T
  add constraint AM_PARTNER_BRANCHES_T_FK3 foreign key (ORG_ID, PARTNER_ID, GROUP_ID, REGION_ID)
  references AM_PARTNER_REGION_T (ORG_ID, PARTNER_ID, PARTNER_GROUP_ID, PARTNER_REGION_ID);
alter table AM_PARTNER_BRANCHES_T
  add constraint AM_PARTNER_BRANCHES_T_FK4 foreign key (ORG_ID, PARTNER_ID, GROUP_ID, REGION_ID, AREA_ID)
  references AM_PARTNER_AREA_T (ORG_ID, PARTNER_ID, PARTNER_GROUP_ID, PARTNER_REGION_ID, PARTNER_AREA_ID);

prompt
prompt Creating table AM_AGT_PRT_BR_ADMIN_MAP_T
prompt ========================================
prompt
create table AM_AGT_PRT_BR_ADMIN_MAP_T
(
  org_id            NUMBER not null,
  partner_id        NUMBER not null,
  username          VARCHAR2(50) not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  partner_branch_id NUMBER not null
)
;
alter table AM_AGT_PRT_BR_ADMIN_MAP_T
  add constraint PK_AGT_BR_MAP primary key (ORG_ID, PARTNER_ID, PARTNER_BRANCH_ID, USERNAME);
alter table AM_AGT_PRT_BR_ADMIN_MAP_T
  add constraint FK_BR_AG_BR_MAP_AG foreign key (ORG_ID, PARTNER_ID, PARTNER_BRANCH_ID)
  references AM_PARTNER_BRANCHES_T (ORG_ID, PARTNER_ID, PARTNER_BRANCH_ID);

prompt
prompt Creating table AM_AGT_VALIDATION_POLICY_T
prompt =========================================
prompt
create table AM_AGT_VALIDATION_POLICY_T
(
  org_id             NUMBER not null,
  policy_id          NUMBER not null,
  channel_id         NUMBER not null,
  model_id           NUMBER not null,
  app_id             NUMBER not null,
  policy_description VARCHAR2(250) not null,
  policy_start_date  DATE,
  policy_end_date    DATE,
  active_tag         CHAR(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table AM_AGT_VALIDATION_POLICY_T
  add constraint PK_AM_AGT_VALIDATION_POLICY_T primary key (ORG_ID, POLICY_ID, CHANNEL_ID, MODEL_ID, APP_ID);

prompt
prompt Creating table AM_CHANNEL_MODEL_T
prompt =================================
prompt
create table AM_CHANNEL_MODEL_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  model_name       VARCHAR2(50),
  model_desc       VARCHAR2(100),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  commission_type  VARCHAR2(1)
)
;
alter table AM_CHANNEL_MODEL_T
  add constraint PK_AM_CHANNEL_MODEL_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID);

prompt
prompt Creating table AM_COMPENSATION_T
prompt ================================
prompt
create table AM_COMPENSATION_T
(
  org_id                     NUMBER not null,
  designation_id             NUMBER not null,
  compensation_id            NUMBER not null,
  salary_type                VARCHAR2(2),
  monthly_stipend            NUMBER,
  sectorial_allowance        NUMBER,
  semi_annual_perf_incentive NUMBER,
  monthly_fuel_limit         NUMBER,
  monthly_mobile_allowance   NUMBER,
  tablet_pc                  NUMBER,
  laptop                     NUMBER,
  car_make_id                NUMBER,
  car_model_id               NUMBER,
  annual_life_insurance      NUMBER,
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE,
  vehicl_allowance           NUMBER
)
;
alter table AM_COMPENSATION_T
  add constraint PK_AM_COMPENSATION_T primary key (ORG_ID, DESIGNATION_ID, COMPENSATION_ID);

prompt
prompt Creating table AM_COMPENSATION_TYPE_T
prompt =====================================
prompt
create table AM_COMPENSATION_TYPE_T
(
  org_id                 NUMBER not null,
  compensation_type_id   NUMBER not null,
  compensation_type_name VARCHAR2(250) not null,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table AM_COMPENSATION_TYPE_T
  add constraint PK_AM_COMPENSATION_TYPE_T primary key (ORG_ID, COMPENSATION_TYPE_ID);

prompt
prompt Creating table AM_DESIGNATION_T
prompt ===============================
prompt
create table AM_DESIGNATION_T
(
  org_id            NUMBER not null,
  designation_id    NUMBER not null,
  designation_name  VARCHAR2(5),
  designation_level VARCHAR2(3),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_DESIGNATION_T
  add constraint PK_AM_DESIGNATION_T primary key (ORG_ID, DESIGNATION_ID);

prompt
prompt Creating table AM_DISTRIBUTION_CHANNEL_T
prompt ========================================
prompt
create table AM_DISTRIBUTION_CHANNEL_T
(
  org_id             NUMBER not null,
  channel_id         NUMBER not null,
  channel_name       VARCHAR2(50),
  channel_desc       VARCHAR2(100),
  active             VARCHAR2(2),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  channel_short_code VARCHAR2(10)
)
;
alter table AM_DISTRIBUTION_CHANNEL_T
  add constraint PK_AM_DISTRIBUTION_CHANNEL_T primary key (ORG_ID, CHANNEL_ID);

prompt
prompt Creating table AM_GL_AGENT_PERS_AMT_T
prompt =====================================
prompt
create table AM_GL_AGENT_PERS_AMT_T
(
  org_id              NUMBER not null,
  channel_id          NUMBER not null,
  model_id            NUMBER not null,
  policy_id           NUMBER not null,
  designation_id      NUMBER not null,
  compensation_type   VARCHAR2(1) not null,
  compensation_amount NUMBER not null,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE
)
;
alter table AM_GL_AGENT_PERS_AMT_T
  add constraint PK_AM_GL_AGENT_PERS_AMT_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID, COMPENSATION_TYPE);

prompt
prompt Creating table AM_GL_AGENT_TRGT_AMT_T
prompt =====================================
prompt
create table AM_GL_AGENT_TRGT_AMT_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  designation_id   NUMBER not null,
  target_amount_1  NUMBER,
  target_amount_2  NUMBER,
  target_amount_3  NUMBER,
  target_amount_4  NUMBER,
  target_amount_5  NUMBER,
  target_amount_6  NUMBER,
  target_amount_7  NUMBER,
  target_amount_8  NUMBER,
  target_amount_9  NUMBER,
  target_amount_10 NUMBER,
  target_amount_11 NUMBER,
  target_amount_12 NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_GL_AGENT_TRGT_AMT_T
  add constraint PK_AM_GL_AGENT_TRGT_AMT_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID);

prompt
prompt Creating table AM_GL_AGENT_VALID_T
prompt ==================================
prompt
create table AM_GL_AGENT_VALID_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  designation_id   NUMBER not null,
  freqeuncy        VARCHAR2(1) not null,
  target_type      VARCHAR2(1) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_GL_AGENT_VALID_T
  add constraint PK_AM_GL_AGENT_VALID_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID);

prompt
prompt Creating table AM_HIERARCHY_CHANNEL_MODEL_T
prompt ===========================================
prompt
create table AM_HIERARCHY_CHANNEL_MODEL_T
(
  org_id                 NUMBER not null,
  agent_id               NUMBER not null,
  partner_id             NUMBER not null,
  channel_id             NUMBER not null,
  model_id               NUMBER not null,
  previous_supervisor_id NUMBER,
  new_supervisor_id      NUMBER,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  change_id              NUMBER not null,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table AM_HIERARCHY_CHANNEL_MODEL_T
  add constraint PK_AM_HIERARCHY_CHANNEL_MODEL primary key (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, CHANGE_ID);
alter table AM_HIERARCHY_CHANNEL_MODEL_T
  add foreign key (ORG_ID, CHANGE_ID)
  references AM_AGENT_HIERARCHY_CHANGE_T (ORG_ID, CHANGE_ID);

prompt
prompt Creating table AM_HIERARCHY_TERMINATION_T
prompt =========================================
prompt
create table AM_HIERARCHY_TERMINATION_T
(
  org_id                 NUMBER not null,
  agent_id               NUMBER not null,
  partner_id             NUMBER not null,
  channel_id             NUMBER not null,
  model_id               NUMBER not null,
  previous_supervisor_id NUMBER,
  new_supervisor_id      NUMBER,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  record_id              NUMBER not null
)
;
alter table AM_HIERARCHY_TERMINATION_T
  add constraint PK_AM_HIER_TERMINATION_T primary key (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, RECORD_ID);

prompt
prompt Creating table AM_HOSPITALIZATION_BENEFIT_T
prompt ===========================================
prompt
create table AM_HOSPITALIZATION_BENEFIT_T
(
  org_id           NUMBER not null,
  designation_id   NUMBER not null,
  h_benefit_id     NUMBER not null,
  relation_type    VARCHAR2(5),
  benefit_amount   NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  benefit_type     VARCHAR2(50)
)
;
alter table AM_HOSPITALIZATION_BENEFIT_T
  add constraint PK_AM_H_BENEFIT_T primary key (ORG_ID, DESIGNATION_ID, H_BENEFIT_ID);

prompt
prompt Creating table AM_KPI_TYPE_T
prompt ============================
prompt
create table AM_KPI_TYPE_T
(
  org_id           NUMBER not null,
  kpi_code         NUMBER not null,
  kpi_description  VARCHAR2(150),
  active_flag      VARCHAR2(1),
  display_order    NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_KPI_TYPE_T
  add constraint PK_AM_KPI_TYPE_T primary key (ORG_ID, KPI_CODE);

prompt
prompt Creating table AM_L1_AGT_CONTR_PROMOTION_T
prompt ==========================================
prompt
create table AM_L1_AGT_CONTR_PROMOTION_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  designation_from NUMBER not null,
  designation_to   NUMBER not null,
  durations        NUMBER not null,
  no_of_cases      NUMBER,
  contribution     NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_L1_AGT_CONTR_PROMOTION_T
  add constraint PK_AM_L1_AGT_CONTR_PROMOTION_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_FROM, DESIGNATION_TO, DURATIONS);

prompt
prompt Creating table AM_L1_AGT_CONT_TARGETS_T
prompt =======================================
prompt
create table AM_L1_AGT_CONT_TARGETS_T
(
  org_id                   NUMBER not null,
  channel_id               NUMBER not null,
  model_id                 NUMBER not null,
  policy_id                NUMBER not null,
  record_id                NUMBER not null,
  designation_level        NUMBER not null,
  freqeuncy_mode           CHAR(1) not null,
  no_of_cases              NUMBER,
  contribution             NUMBER,
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  contribution_target_type VARCHAR2(100)
)
;
alter table AM_L1_AGT_CONT_TARGETS_T
  add constraint PK_AM_L1_AGT_CONT_TARGETS_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, RECORD_ID);

prompt
prompt Creating table AM_L1_AGT_NEW_JOIN_PERS_T
prompt ========================================
prompt
create table AM_L1_AGT_NEW_JOIN_PERS_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  policy_id         NUMBER not null,
  designation_level NUMBER not null,
  master_record_id  NUMBER not null,
  record_id         NUMBER not null,
  compensation_type NUMBER not null,
  amount            NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_L1_AGT_NEW_JOIN_PERS_T
  add constraint PK_AM_L1_AGT_NEW_JOIN_PERS_T primary key (ORG_ID, CHANNEL_ID, POLICY_ID, DESIGNATION_LEVEL, MASTER_RECORD_ID, RECORD_ID);

prompt
prompt Creating table AM_L1_AGT_PERS_PROMOTION_T
prompt =========================================
prompt
create table AM_L1_AGT_PERS_PROMOTION_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  designation_from NUMBER not null,
  designation_to   NUMBER not null,
  durations        NUMBER not null,
  year_number      NUMBER,
  persistency      NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  record_id        NUMBER not null
)
;
alter table AM_L1_AGT_PERS_PROMOTION_T
  add constraint PK_AM_L1_AGT_PERS_PROMOTION_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, RECORD_ID);

prompt
prompt Creating table AM_L1_AGT_PERS_TARGETS_T
prompt =======================================
prompt
create table AM_L1_AGT_PERS_TARGETS_T
(
  org_id                 NUMBER not null,
  channel_id             NUMBER not null,
  model_id               NUMBER not null,
  policy_id              NUMBER not null,
  record_id              NUMBER not null,
  designation_level      NUMBER not null,
  year_number            NUMBER not null,
  persistancy_percentage NUMBER(10,2),
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table AM_L1_AGT_PERS_TARGETS_T
  add constraint PK_AM_L1_AGT_PERS_TARGETS_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, RECORD_ID);

prompt
prompt Creating table AM_L1_AGT_PROMOTION_MST_T
prompt ========================================
prompt
create table AM_L1_AGT_PROMOTION_MST_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  designation_from NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE
)
;
alter table AM_L1_AGT_PROMOTION_MST_T
  add constraint PK_AM_AGT_PROMOTION_MST_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_FROM);

prompt
prompt Creating table AM_L1_AGT_SALARY_PERS_T
prompt ======================================
prompt
create table AM_L1_AGT_SALARY_PERS_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  policy_id         NUMBER not null,
  designation_level NUMBER not null,
  master_record_id  NUMBER not null,
  record_id         NUMBER not null,
  persistency_from  NUMBER(10,2) not null,
  persistency_to    NUMBER(10,2) not null,
  compensation_type NUMBER not null,
  amount            NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_L1_AGT_SALARY_PERS_T
  add constraint PK_AM_L1_AGT_SALARY_PERS_T primary key (ORG_ID, CHANNEL_ID, POLICY_ID, DESIGNATION_LEVEL, MASTER_RECORD_ID, RECORD_ID);

prompt
prompt Creating table AM_L1_AGT_SALARY_VALID_T
prompt =======================================
prompt
create table AM_L1_AGT_SALARY_VALID_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  policy_id         NUMBER not null,
  designation_level NUMBER not null,
  record_id         NUMBER not null,
  contribution_from NUMBER not null,
  contribution_to   NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_L1_AGT_SALARY_VALID_T
  add constraint PK_AM_L1_AGT_SALARY_VALID_T primary key (ORG_ID, CHANNEL_ID, POLICY_ID, DESIGNATION_LEVEL, RECORD_ID);

prompt
prompt Creating table AM_L2_AGT_PERS_TARGETS_T
prompt =======================================
prompt
create table AM_L2_AGT_PERS_TARGETS_T
(
  org_id                 NUMBER not null,
  channel_id             NUMBER not null,
  model_id               NUMBER not null,
  policy_id              NUMBER not null,
  record_id              NUMBER not null,
  designation_level      NUMBER not null,
  year_number            NUMBER not null,
  persistancy_percentage NUMBER(10,2),
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table AM_L2_AGT_PERS_TARGETS_T
  add constraint PK_AM_L2_AGT_PERS_TARGETS_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, RECORD_ID);

prompt
prompt Creating table AM_L2_AGT_PROM_PERS_TARGETS_T
prompt ============================================
prompt
create table AM_L2_AGT_PROM_PERS_TARGETS_T
(
  org_id                 NUMBER not null,
  channel_id             NUMBER not null,
  model_id               NUMBER not null,
  policy_id              NUMBER not null,
  record_id              NUMBER not null,
  designation_id         NUMBER not null,
  designation_id_to      NUMBER not null,
  year_number            NUMBER not null,
  persistancy_percentage NUMBER(10,2),
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table AM_L2_AGT_PROM_PERS_TARGETS_T
  add constraint PK_AM_L2_AGT_PROM_PERS_TARGETS_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, RECORD_ID, DESIGNATION_ID, DESIGNATION_ID_TO);

prompt
prompt Creating table AM_LEVEL_CHANGE_REASON_T
prompt =======================================
prompt
create table AM_LEVEL_CHANGE_REASON_T
(
  code             NUMBER not null,
  org_id           NUMBER not null,
  reason_type      CHAR(1),
  description      VARCHAR2(150),
  active_flag      VARCHAR2(5),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_LEVEL_CHANGE_REASON_T
  add constraint PK_AM_LEVEL_CHANGE_REASON_T primary key (ORG_ID, CODE);

prompt
prompt Creating table AM_LEVEL_CHANNEL_MODEL_T
prompt =======================================
prompt
create table AM_LEVEL_CHANNEL_MODEL_T
(
  org_id            NUMBER not null,
  agent_id          NUMBER not null,
  partner_id        NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  previous_level    NUMBER,
  new_level         NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  level_change_id   NUMBER not null,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  new_supervisor_id NUMBER
)
;
alter table AM_LEVEL_CHANNEL_MODEL_T
  add constraint PK_AM_LEVEL_CHANNEL_MODEL_T primary key (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, LEVEL_CHANGE_ID);
alter table AM_LEVEL_CHANNEL_MODEL_T
  add foreign key (ORG_ID, LEVEL_CHANGE_ID)
  references AM_AGENT_LEVEL_CHANGE_T (ORG_ID, LEVEL_CHANGE_ID);

prompt
prompt Creating table AM_LV1_PERS_BONUS_DTL_T
prompt ======================================
prompt
create table AM_LV1_PERS_BONUS_DTL_T
(
  org_id               NUMBER not null,
  process_id           NUMBER not null,
  policy_id            NUMBER not null,
  partner_id           NUMBER not null,
  channel_id           NUMBER not null,
  model_id             NUMBER not null,
  designation_id       NUMBER,
  agent_id             NUMBER not null,
  due_plan             NUMBER,
  due_contribution     NUMBER,
  renewed_contribution NUMBER,
  persistency_year_2   NUMBER,
  persistency_year_3   NUMBER,
  bonus_amount         NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  persistency_bonus    NUMBER,
  disp_persistency_2   VARCHAR2(25),
  disp_persistency_3   VARCHAR2(25)
)
;
alter table AM_LV1_PERS_BONUS_DTL_T
  add constraint PK_AM_LV1_PERS_BONUS_DTL_T primary key (ORG_ID, PROCESS_ID, POLICY_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID);

prompt
prompt Creating table AM_LV1_PERS_BONUS_HEADER_T
prompt =========================================
prompt
create table AM_LV1_PERS_BONUS_HEADER_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  agent_id          NUMBER,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  persistency_type  VARCHAR2(1)
)
;
alter table AM_LV1_PERS_BONUS_HEADER_T
  add constraint PK_AM_LV1_PERS_BONUS_HEADER_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_LV1_POSITION_TARGET_DTL_T
prompt ===========================================
prompt
create table AM_LV1_POSITION_TARGET_DTL_T
(
  org_id                            NUMBER not null,
  process_id                        NUMBER not null,
  policy_id                         NUMBER not null,
  partner_id                        NUMBER not null,
  channel_id                        NUMBER not null,
  model_id                          NUMBER not null,
  designation_id                    NUMBER,
  agent_id                          NUMBER not null,
  target_amount                     NUMBER,
  target_plan_count                 NUMBER,
  target_persistency_percentage_2   NUMBER,
  target_persistency_percentage_3   NUMBER,
  achieved_amount                   NUMBER,
  achieved_plan_count               NUMBER,
  achieved_persistency_percentage_2 NUMBER,
  achieved_persistency_percentage_3 NUMBER,
  achieved_plan_count_percentage    NUMBER,
  achieved_amount_percentage        NUMBER,
  created_by                        VARCHAR2(50),
  creation_date                     DATE,
  last_updated_by                   VARCHAR2(50),
  last_update_date                  DATE,
  new_designation_id                NUMBER,
  disp_persistency_3                VARCHAR2(25),
  disp_persistency_2                VARCHAR2(25)
)
;
alter table AM_LV1_POSITION_TARGET_DTL_T
  add constraint PK_AM_LV1_POSITION_TARGET_DTL_T primary key (ORG_ID, PROCESS_ID, POLICY_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID);

prompt
prompt Creating table AM_LV1_POSITION_TGT_HEADER_T
prompt ===========================================
prompt
create table AM_LV1_POSITION_TGT_HEADER_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  persistency_type  VARCHAR2(1),
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_LV1_POSITION_TGT_HEADER_T
  add constraint PK_AM_LV1_POSITION_TGT_HEADER_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_LV1_PRDCT_BONUS_DTL_T
prompt =======================================
prompt
create table AM_LV1_PRDCT_BONUS_DTL_T
(
  org_id             NUMBER not null,
  process_id         NUMBER not null,
  policy_id          NUMBER not null,
  partner_id         NUMBER not null,
  channel_id         NUMBER not null,
  model_id           NUMBER not null,
  designation_id     NUMBER,
  agent_id           NUMBER not null,
  target_amount      NUMBER,
  paid_contribution  NUMBER,
  bonus_percentage   NUMBER,
  bonus_amount       NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  disp_persistency_3 VARCHAR2(25),
  disp_persistency_2 VARCHAR2(25)
)
;
alter table AM_LV1_PRDCT_BONUS_DTL_T
  add constraint PK_AM_LV1_PRDCT_BONUS_DTL_T primary key (ORG_ID, PROCESS_ID, POLICY_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID);

prompt
prompt Creating table AM_LV1_PRDCT_BONUS_HEADER_T
prompt ==========================================
prompt
create table AM_LV1_PRDCT_BONUS_HEADER_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_LV1_PRDCT_BONUS_HEADER_T
  add constraint PK_AM_LV1_PRDCT_BONUS_HEADER_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_LV1_PROD_BONUS_DTL_T
prompt ======================================
prompt
create table AM_LV1_PROD_BONUS_DTL_T
(
  org_id             NUMBER not null,
  process_id         NUMBER not null,
  policy_id          NUMBER not null,
  partner_id         NUMBER not null,
  channel_id         NUMBER not null,
  model_id           NUMBER not null,
  designation_id     NUMBER,
  agent_id           NUMBER not null,
  target_amount      NUMBER,
  plan_count         NUMBER,
  target_plan_count  NUMBER,
  paid_contribution  NUMBER,
  persistency_year_2 NUMBER,
  persistency_year_3 NUMBER,
  bonus_percentage   NUMBER,
  bonus_amount       NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  disp_persistency_3 VARCHAR2(25),
  disp_persistency_2 VARCHAR2(25)
)
;
alter table AM_LV1_PROD_BONUS_DTL_T
  add constraint PK_AM_LV1_PROD_BONUS_DTL_T primary key (ORG_ID, PROCESS_ID, POLICY_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID);

prompt
prompt Creating table AM_LV1_PROD_BONUS_HEADER_T
prompt =========================================
prompt
create table AM_LV1_PROD_BONUS_HEADER_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  agent_id          NUMBER,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  persistency_type  VARCHAR2(1)
)
;
alter table AM_LV1_PROD_BONUS_HEADER_T
  add constraint PK_AM_LV1_PROD_BONUS_HEADER_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_LV1_PROMOTION_TARGET_DTL_T
prompt ============================================
prompt
create table AM_LV1_PROMOTION_TARGET_DTL_T
(
  org_id                            NUMBER not null,
  process_id                        NUMBER not null,
  policy_id                         NUMBER not null,
  partner_id                        NUMBER not null,
  channel_id                        NUMBER not null,
  model_id                          NUMBER not null,
  designation_id                    NUMBER,
  agent_id                          NUMBER not null,
  target_amount                     NUMBER,
  target_plan_count                 NUMBER,
  target_persistency_percentage_2   NUMBER,
  target_persistency_percentage_3   NUMBER,
  achieved_amount                   NUMBER,
  achieved_plan_count               NUMBER,
  achieved_persistency_percentage_2 NUMBER,
  achieved_persistency_percentage_3 NUMBER,
  achieved_plan_count_percentage    NUMBER,
  achieved_amount_percentage        NUMBER,
  created_by                        VARCHAR2(50),
  creation_date                     DATE,
  last_updated_by                   VARCHAR2(50),
  last_update_date                  DATE,
  new_designation_id                NUMBER,
  disp_pers_year_2                  VARCHAR2(50),
  disp_pers_year_3                  VARCHAR2(50)
)
;
alter table AM_LV1_PROMOTION_TARGET_DTL_T
  add constraint PK_AM_LV1_PRM_BONUS_DTL_T primary key (ORG_ID, PROCESS_ID, POLICY_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID);

prompt
prompt Creating table AM_LV1_PROMOTION_TARGET_HEADER_T
prompt ===============================================
prompt
create table AM_LV1_PROMOTION_TARGET_HEADER_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  persistency_type  VARCHAR2(1)
)
;
alter table AM_LV1_PROMOTION_TARGET_HEADER_T
  add constraint PK_AM_LV1_PRM_TARGET_HEADER_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_LV1_SLRY_DETAIL_T
prompt ===================================
prompt
create table AM_LV1_SLRY_DETAIL_T
(
  org_id                  NUMBER not null,
  process_id              NUMBER not null,
  policy_id               NUMBER not null,
  partner_id              NUMBER not null,
  channel_id              NUMBER not null,
  model_id                NUMBER not null,
  agent_id                NUMBER not null,
  designation_level       NUMBER,
  plan_count              NUMBER,
  paid_contribution       NUMBER,
  contribution_percentage NUMBER,
  compensation_type_id    NUMBER not null,
  compensation_amount     NUMBER,
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  disp_persistency_2      VARCHAR2(25)
)
;
alter table AM_LV1_SLRY_DETAIL_T
  add constraint PK_LV1_SLRY_DETAIL_T primary key (ORG_ID, PROCESS_ID, POLICY_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID, COMPENSATION_TYPE_ID);

prompt
prompt Creating table AM_LV1_SLRY_HEADER_T
prompt ===================================
prompt
create table AM_LV1_SLRY_HEADER_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  agent_id          NUMBER,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  persistency_type  VARCHAR2(1),
  fiscal_year       VARCHAR2(50),
  quater            VARCHAR2(10)
)
;
alter table AM_LV1_SLRY_HEADER_T
  add constraint PK_AM_LV1_SLRY_HEADER_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_LV2_NHIRED_TARGETS_DTL_T
prompt ==========================================
prompt
create table AM_LV2_NHIRED_TARGETS_DTL_T
(
  org_id                   NUMBER not null,
  channel_id               NUMBER not null,
  model_id                 NUMBER not null,
  policy_id                NUMBER not null,
  designation_id           NUMBER not null,
  target_contribution_q1   NUMBER not null,
  target_contribution_q2   NUMBER not null,
  target_consultant_q1     NUMBER not null,
  target_consultant_q2     NUMBER not null,
  target_manager_q1        NUMBER not null,
  target_manager_q2        NUMBER not null,
  achieved_contribution_q1 NUMBER not null,
  achieved_contribution_q2 NUMBER not null,
  achieved_consultant_q1   NUMBER not null,
  achieved_consultant_q2   NUMBER not null,
  achieved_manager_q1      NUMBER not null,
  achieved_manager_q2      NUMBER not null,
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE
)
;
alter table AM_LV2_NHIRED_TARGETS_DTL_T
  add constraint PK_AM_LV2_NHIRED_TARGETS_DTL_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID);

prompt
prompt Creating table AM_LV2_NHIRED_TARGETS_HD_T
prompt =========================================
prompt
create table AM_LV2_NHIRED_TARGETS_HD_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_LV2_NHIRED_TARGETS_HD_T
  add constraint PK_AM_LV2_NHIRED_TARGETS_HD_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_LV2_POSITION_TARGET_DTL_T
prompt ===========================================
prompt
create table AM_LV2_POSITION_TARGET_DTL_T
(
  org_id                           NUMBER not null,
  process_id                       NUMBER not null,
  policy_id                        NUMBER not null,
  partner_id                       NUMBER not null,
  channel_id                       NUMBER not null,
  model_id                         NUMBER not null,
  designation_id                   NUMBER,
  agent_id                         NUMBER not null,
  target_plan                      NUMBER,
  achieved_plan                    NUMBER,
  achieved_plan_percentage         NUMBER,
  achieved_plan_weight             NUMBER,
  achieved_plan_weight_per         NUMBER,
  target_contribution              NUMBER,
  achieved_contribution            NUMBER,
  achieved_contribution_percentage NUMBER,
  achieved_contribution_weight     NUMBER,
  achieved_contribution_weight_per NUMBER,
  target_producers                 NUMBER,
  achieved_producers               NUMBER,
  achieved_producers_percentage    NUMBER,
  achieved_producers_weight        NUMBER,
  achieved_producers_weight_per    NUMBER,
  target_qlf_managers              NUMBER,
  achieved_qlf_managers            NUMBER,
  achieved_qlf_managers_percentage NUMBER,
  achieved_qlf_managers_weight     NUMBER,
  achieved_qlf_managers_weight_per NUMBER,
  target_strength                  NUMBER,
  achieved_strength                NUMBER,
  strength_percentage              NUMBER,
  strength_weight                  NUMBER,
  strength_weight_per              NUMBER,
  created_by                       VARCHAR2(50),
  creation_date                    DATE,
  last_updated_by                  VARCHAR2(50),
  last_update_date                 DATE,
  target_persistency_2             NUMBER,
  target_persistency_3             NUMBER,
  achieved_persistency_2           NUMBER,
  achieved_persistency_3           NUMBER
)
;
alter table AM_LV2_POSITION_TARGET_DTL_T
  add constraint PK_AM_LV2_POSITION_TARGET_DTL_T primary key (ORG_ID, PROCESS_ID, POLICY_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID);

prompt
prompt Creating table AM_LV2_POSITION_TGT_HEADER_T
prompt ===========================================
prompt
create table AM_LV2_POSITION_TGT_HEADER_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  persistency_type  VARCHAR2(1),
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_LV2_POSITION_TGT_HEADER_T
  add constraint PK_AM_LV2_POSITION_TGT_HEADER_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_LV2_PROD_BONUS_DTL_T
prompt ======================================
prompt
create table AM_LV2_PROD_BONUS_DTL_T
(
  org_id               NUMBER not null,
  process_id           NUMBER not null,
  policy_id            NUMBER not null,
  partner_id           NUMBER not null,
  channel_id           NUMBER not null,
  model_id             NUMBER not null,
  designation_id       NUMBER,
  agent_id             NUMBER not null,
  min_additional_contr NUMBER,
  avg_business         NUMBER,
  excess_contribution  NUMBER,
  no_of_month          NUMBER,
  persistency_year_2   NUMBER,
  persistency_year_3   NUMBER,
  bonus_percentage     NUMBER,
  bonus_amount         NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  disp_persistency_2   VARCHAR2(50),
  disp_persistency_3   VARCHAR2(50)
)
;
alter table AM_LV2_PROD_BONUS_DTL_T
  add constraint PK_AM_LV2_PROD_BONUS_DTL primary key (ORG_ID, PROCESS_ID, POLICY_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID);

prompt
prompt Creating table AM_LV2_PROD_BONUS_HEADER_T
prompt =========================================
prompt
create table AM_LV2_PROD_BONUS_HEADER_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  agent_id          NUMBER,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  persistency_type  VARCHAR2(1),
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table AM_LV2_PROD_BONUS_HEADER_T
  add constraint PK_AM_LV2_PROD_BONUS_HEADER_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_LV2_PROMOTION_TARGET_DTL_T
prompt ============================================
prompt
create table AM_LV2_PROMOTION_TARGET_DTL_T
(
  org_id                           NUMBER not null,
  process_id                       NUMBER not null,
  policy_id                        NUMBER not null,
  partner_id                       NUMBER not null,
  channel_id                       NUMBER not null,
  model_id                         NUMBER not null,
  designation_id                   NUMBER,
  designation_id_to                NUMBER,
  agent_id                         NUMBER not null,
  target_plan                      NUMBER,
  achieved_plan                    NUMBER,
  achieved_plan_percentage         NUMBER,
  achieved_plan_weight             NUMBER,
  achieved_plan_weight_per         NUMBER,
  target_contribution              NUMBER,
  achieved_contribution            NUMBER,
  achieved_contribution_percentage NUMBER,
  achieved_contribution_weight     NUMBER,
  achieved_contribution_weight_per NUMBER,
  target_producers                 NUMBER,
  achieved_producers               NUMBER,
  achieved_producers_percentage    NUMBER,
  achieved_producers_weight        NUMBER,
  achieved_producers_weight_per    NUMBER,
  target_qlf_managers              NUMBER,
  achieved_qlf_managers            NUMBER,
  achieved_qlf_managers_percentage NUMBER,
  achieved_qlf_managers_weight     NUMBER,
  achieved_qlf_managers_weight_per NUMBER,
  target_strength                  NUMBER,
  achieved_strength                NUMBER,
  strength_percentage              NUMBER,
  strength_weight                  NUMBER,
  strength_weight_per              NUMBER,
  created_by                       VARCHAR2(50),
  creation_date                    DATE,
  last_updated_by                  VARCHAR2(50),
  last_update_date                 DATE,
  target_persistency_2             NUMBER,
  target_persistency_3             NUMBER,
  achieved_persistency_2           NUMBER,
  achieved_persistency_3           NUMBER
)
;
alter table AM_LV2_PROMOTION_TARGET_DTL_T
  add constraint PK_AM_LV2_PROMOTION_TARGET_DTL_T primary key (ORG_ID, PROCESS_ID, POLICY_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID);

prompt
prompt Creating table AM_LV2_PROMOTION_TARGET_HEADER_T
prompt ===============================================
prompt
create table AM_LV2_PROMOTION_TARGET_HEADER_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  persistency_type  VARCHAR2(1)
)
;
alter table AM_LV2_PROMOTION_TARGET_HEADER_T
  add constraint PK_AM_LV2_PRM_TARGET_HEADER_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_LV2_SALARY_VALID_DTL_T
prompt ========================================
prompt
create table AM_LV2_SALARY_VALID_DTL_T
(
  org_id               NUMBER not null,
  process_id           NUMBER not null,
  policy_id            NUMBER not null,
  partner_id           NUMBER not null,
  channel_id           NUMBER not null,
  model_id             NUMBER not null,
  designation_id       NUMBER,
  agent_id             NUMBER not null,
  paid_contribution    NUMBER,
  persistency_impact   NUMBER,
  no_of_producers      NUMBER,
  producer_impact      NUMBER,
  persistency_2nd_year NUMBER,
  gross_salary         NUMBER,
  net_impact           NUMBER,
  net_salary           NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table AM_LV2_SALARY_VALID_DTL_T
  add constraint PK_AM_LV2_SALARY_VALID_DTL_T primary key (ORG_ID, PROCESS_ID, POLICY_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID);

prompt
prompt Creating table AM_LV2_SLRY_HEADER_T
prompt ===================================
prompt
create table AM_LV2_SLRY_HEADER_T
(
  org_id            NUMBER not null,
  process_id        NUMBER not null,
  agent_id          NUMBER,
  partner_id        NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_branch_id NUMBER,
  from_date         DATE,
  to_date           DATE,
  lock_flag         VARCHAR2(5),
  locked_date       DATE,
  locked_by         VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  persistency_type  VARCHAR2(1),
  fiscal_year       VARCHAR2(50),
  quater            VARCHAR2(10)
)
;
alter table AM_LV2_SLRY_HEADER_T
  add constraint PK_AM_LV2_SLRY_HEADER_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_MGR_PROMOTION_DTL_T
prompt =====================================
prompt
create table AM_MGR_PROMOTION_DTL_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  policy_id         NUMBER not null,
  designation_id    NUMBER not null,
  kpi_type          NUMBER not null,
  kpi_weight        NUMBER not null,
  value_1           NUMBER,
  value_2           NUMBER,
  value_3           NUMBER,
  value_4           NUMBER,
  value_5           NUMBER,
  value_6           NUMBER,
  value_7           NUMBER,
  value_8           NUMBER,
  value_9           NUMBER,
  value_10          NUMBER,
  value_11          NUMBER,
  value_12          NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  designation_id_to NUMBER not null
)
;
alter table AM_MGR_PROMOTION_DTL_T
  add constraint PK_AM_MGR_PROMOTION_DTL_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID, DESIGNATION_ID_TO, KPI_TYPE);

prompt
prompt Creating table AM_MGR_PROMOTION_HD_T
prompt ====================================
prompt
create table AM_MGR_PROMOTION_HD_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  policy_id         NUMBER not null,
  designation_id    NUMBER not null,
  target_frequency  VARCHAR2(10) not null,
  target_type       VARCHAR2(10) not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  designation_id_to NUMBER not null
)
;
alter table AM_MGR_PROMOTION_HD_T
  add constraint PK_AM_MGR_PROMOTION_HD_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID, DESIGNATION_ID_TO);

prompt
prompt Creating table AM_MGR_SALARY_DTL_T
prompt ==================================
prompt
create table AM_MGR_SALARY_DTL_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  policy_id         NUMBER not null,
  designation_id    NUMBER not null,
  kpi_weight        NUMBER not null,
  value_1           NUMBER,
  value_2           NUMBER,
  value_3           NUMBER,
  value_4           NUMBER,
  value_5           NUMBER,
  value_6           NUMBER,
  value_7           NUMBER,
  value_8           NUMBER,
  value_9           NUMBER,
  value_10          NUMBER,
  value_11          NUMBER,
  value_12          NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  compensation_type NUMBER not null,
  hd_record_id      NUMBER not null,
  kpi_type          NUMBER not null
)
;
alter table AM_MGR_SALARY_DTL_T
  add constraint PK_AM_MGR_SALARY_DTL_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, HD_RECORD_ID, COMPENSATION_TYPE);

prompt
prompt Creating table AM_MGR_SALARY_HD_T
prompt =================================
prompt
create table AM_MGR_SALARY_HD_T
(
  org_id            NUMBER not null,
  channel_id        NUMBER not null,
  model_id          NUMBER not null,
  policy_id         NUMBER not null,
  designation_id    NUMBER not null,
  target_frequency  VARCHAR2(10) not null,
  target_type       VARCHAR2(10) not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  contribution_from NUMBER,
  contribution_to   NUMBER,
  record_id         NUMBER not null
)
;
alter table AM_MGR_SALARY_HD_T
  add constraint PK_AM_MGR_SALARY_HD_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, RECORD_ID);

prompt
prompt Creating table AM_MGR_TARGET_DTL_T
prompt ==================================
prompt
create table AM_MGR_TARGET_DTL_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  designation_id   NUMBER not null,
  kpi_type         NUMBER not null,
  kpi_weight       NUMBER not null,
  value_1          NUMBER,
  value_2          NUMBER,
  value_3          NUMBER,
  value_4          NUMBER,
  value_5          NUMBER,
  value_6          NUMBER,
  value_7          NUMBER,
  value_8          NUMBER,
  value_9          NUMBER,
  value_10         NUMBER,
  value_11         NUMBER,
  value_12         NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_MGR_TARGET_DTL_T
  add constraint PK_AM_MGR_TARGET_DTL_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID, KPI_TYPE);

prompt
prompt Creating table AM_MGR_TARGET_HD_T
prompt =================================
prompt
create table AM_MGR_TARGET_HD_T
(
  org_id           NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  designation_id   NUMBER not null,
  target_frequency VARCHAR2(10) not null,
  target_type      VARCHAR2(10) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE
)
;
alter table AM_MGR_TARGET_HD_T
  add constraint PK_AM_MGR_TARGET_HD_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, DESIGNATION_ID);

prompt
prompt Creating table AM_MONTHLY_STIPEND_T
prompt ===================================
prompt
create table AM_MONTHLY_STIPEND_T
(
  org_id             NUMBER not null,
  designation_id     NUMBER not null,
  compensation_id    NUMBER not null,
  stipend_id         NUMBER not null,
  min_premium        NUMBER,
  max_premium        NUMBER,
  monthly_salary     NUMBER,
  additional_benefit NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table AM_MONTHLY_STIPEND_T
  add constraint PK_AM_MONTHLY_STIPEND_T primary key (ORG_ID, DESIGNATION_ID, COMPENSATION_ID, STIPEND_ID);

prompt
prompt Creating table AM_MONXMONT_FORMAT_DTL_T
prompt =======================================
prompt
create table AM_MONXMONT_FORMAT_DTL_T
(
  serial_no        NUMBER,
  org_id           NUMBER,
  partner_id       NUMBER,
  format_type      VARCHAR2(20),
  format_category  VARCHAR2(20),
  expression_value VARCHAR2(200),
  expression_type  VARCHAR2(200),
  display_order    NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  prefix           VARCHAR2(200),
  postfix          VARCHAR2(200)
)
;

prompt
prompt Creating table AM_OVERRDING_DOC_DETAIL_T
prompt ========================================
prompt
create table AM_OVERRDING_DOC_DETAIL_T
(
  record_id         NUMBER not null,
  org_id            NUMBER not null,
  branch_id         NUMBER,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10),
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10),
  issue_count       NUMBER,
  application_id    NUMBER,
  endorsement_no    NUMBER,
  created_date      DATE,
  created_by        VARCHAR2(50)
)
;
alter table AM_OVERRDING_DOC_DETAIL_T
  add constraint PK_AM_OVERRDING_DOC_DETAIL_T primary key (ORG_ID, RECORD_ID);

prompt
prompt Creating table AM_PARTNER_BANK_MAP_T
prompt ====================================
prompt
create table AM_PARTNER_BANK_MAP_T
(
  org_id           NUMBER not null,
  bank_id          NUMBER not null,
  partner_id       NUMBER not null,
  active_tag       VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  default_tag      VARCHAR2(1)
)
;
alter table AM_PARTNER_BANK_MAP_T
  add constraint PK_AM_PARTNER_BANK_MAP_T primary key (ORG_ID, PARTNER_ID, BANK_ID);

prompt
prompt Creating table AM_PARTNER_CHANNEL_T
prompt ===================================
prompt
create table AM_PARTNER_CHANNEL_T
(
  org_id           NUMBER not null,
  partner_id       NUMBER not null,
  channel_id       NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_PARTNER_CHANNEL_T
  add constraint PK_AM_PARTNER_CHANNEL_T primary key (ORG_ID, PARTNER_ID, CHANNEL_ID);

prompt
prompt Creating table AM_PARTNER_DOC_STATUS_MAP_T
prompt ==========================================
prompt
create table AM_PARTNER_DOC_STATUS_MAP_T
(
  org_id           NUMBER not null,
  partner_id       NUMBER not null,
  status_code      NUMBER,
  doc_status_id    NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_PARTNER_DOC_STATUS_MAP_T
  add constraint AM_PARTNER_DOC_MAP_T primary key (ORG_ID, PARTNER_ID, DOC_STATUS_ID);

prompt
prompt Creating table AM_PARTNER_POLICY_MAP_T
prompt ======================================
prompt
create table AM_PARTNER_POLICY_MAP_T
(
  org_id           NUMBER not null,
  partner_id       NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  policy_id        NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_PARTNER_POLICY_MAP_T
  add constraint PK_AM_PARTNER_POLICY_MAP_T primary key (ORG_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, POLICY_ID);

prompt
prompt Creating table AM_PARTNER_PRODUCT_MAP_T
prompt =======================================
prompt
create table AM_PARTNER_PRODUCT_MAP_T
(
  org_id           NUMBER not null,
  product_id       NUMBER not null,
  partner_id       NUMBER not null,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_PARTNER_PRODUCT_MAP_T
  add constraint PK_AM_PARTNER_PRODUCT_MAP_T primary key (ORG_ID, PARTNER_ID, PRODUCT_ID);

prompt
prompt Creating table AM_PARTNER_REFREE_T
prompt ==================================
prompt
create table AM_PARTNER_REFREE_T
(
  org_id           NUMBER not null,
  partner_id       NUMBER not null,
  emp_id           NUMBER not null,
  emp_name         VARCHAR2(250) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_PARTNER_REFREE_T
  add constraint PK_AM_PARTNER_REFREE_T primary key (ORG_ID, PARTNER_ID, EMP_ID);

prompt
prompt Creating table AM_PERSISTANCY_PROCESS_T
prompt =======================================
prompt
create table AM_PERSISTANCY_PROCESS_T
(
  org_id           NUMBER not null,
  process_id       NUMBER not null,
  process_date     DATE not null,
  partner_id       NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  agent_id         NUMBER not null,
  as_at_date       DATE,
  lock_flag        VARCHAR2(5),
  locked_date      DATE,
  locked_by        VARCHAR2(150),
  post_flag        VARCHAR2(5),
  posted_date      DATE,
  posted_by        VARCHAR2(150),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_PERSISTANCY_PROCESS_T
  add constraint PK_AM_PERSISTANCY_PROCESS_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table AM_PERSISTENCY_BONUS_T
prompt =====================================
prompt
create table AM_PERSISTENCY_BONUS_T
(
  org_id           NUMBER not null,
  designation_id   NUMBER not null,
  p_bonus_id       NUMBER not null,
  bonus_type       VARCHAR2(5),
  bonus_from       DATE,
  bonus_to         DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  percentage       NUMBER
)
;
alter table AM_PERSISTENCY_BONUS_T
  add constraint PK_AM_P_BONUS_T primary key (ORG_ID, DESIGNATION_ID, P_BONUS_ID);

prompt
prompt Creating table AM_PERSISTENCY_SLAB_T
prompt ====================================
prompt
create table AM_PERSISTENCY_SLAB_T
(
  org_id           NUMBER not null,
  designation_id   NUMBER not null,
  p_bonus_id       NUMBER not null,
  p_slab_id        NUMBER not null,
  from_percentage  NUMBER,
  to_percentage    NUMBER,
  bonus_percentage NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_PERSISTENCY_SLAB_T
  add constraint PK_AM_P_SLAB_T primary key (ORG_ID, DESIGNATION_ID, P_BONUS_ID, P_SLAB_ID);

prompt
prompt Creating table AM_PERSIST_PROCESS_DETAIL_T
prompt ==========================================
prompt
create table AM_PERSIST_PROCESS_DETAIL_T
(
  org_id                       NUMBER not null,
  process_id                   NUMBER not null,
  process_year                 NUMBER not null,
  partner_id                   NUMBER not null,
  channel_id                   NUMBER not null,
  model_id                     NUMBER not null,
  agent_id                     NUMBER not null,
  persistency_year             NUMBER not null,
  total_count                  NUMBER not null,
  paid_count                   NUMBER not null,
  persistency_percentage       NUMBER not null,
  created_by                   VARCHAR2(50),
  creation_date                DATE,
  renewed_contribution         NUMBER,
  due_contribution             NUMBER,
  contribution_pers_percentage NUMBER
)
;
alter table AM_PERSIST_PROCESS_DETAIL_T
  add constraint PK_AM_PERSIST_PROCESS_DETAIL_T primary key (ORG_ID, PROCESS_ID, PROCESS_YEAR, PARTNER_ID, CHANNEL_ID, MODEL_ID, AGENT_ID, PERSISTENCY_YEAR);

prompt
prompt Creating table AM_PERS_DETAIL_T
prompt ===============================
prompt
create table AM_PERS_DETAIL_T
(
  org_id                 NUMBER not null,
  process_id             NUMBER not null,
  process_year           NUMBER not null,
  persistency_year       NUMBER not null,
  total_count            NUMBER not null,
  paid_count             NUMBER not null,
  persistency_percentage NUMBER not null
)
;
alter table AM_PERS_DETAIL_T
  add constraint PK_AM_PERS_DETAIL_T primary key (ORG_ID, PROCESS_ID, PERSISTENCY_YEAR);

prompt
prompt Creating table AM_PRS_SLRY_VALID_IMPACT_T
prompt =========================================
prompt
create table AM_PRS_SLRY_VALID_IMPACT_T
(
  org_id           NUMBER not null,
  policy_id        NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  record_id        NUMBER not null,
  figure_from      NUMBER,
  figure_to        NUMBER,
  impact           NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_PRS_SLRY_VALID_IMPACT_T
  add constraint PK_AM_PRS_SLRY_VALID_IMPACT_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, RECORD_ID);

prompt
prompt Creating table AM_REGION_SETUP_T
prompt ================================
prompt
create table AM_REGION_SETUP_T
(
  org_id           NUMBER not null,
  region_id        NUMBER not null,
  region_desc      VARCHAR2(20),
  active           VARCHAR2(2),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_REGION_SETUP_T
  add constraint PK_AM_REGION_SETUP_T primary key (ORG_ID, REGION_ID);

prompt
prompt Creating table AM_REINSTATE_CHANNEL_MODEL_T
prompt ===========================================
prompt
create table AM_REINSTATE_CHANNEL_MODEL_T
(
  org_id        NUMBER not null,
  agent_id      NUMBER not null,
  partner_id    NUMBER not null,
  channel_id    NUMBER not null,
  model_id      NUMBER not null,
  created_by    VARCHAR2(50),
  creation_date DATE,
  reinstate_id  NUMBER not null
)
;
alter table AM_REINSTATE_CHANNEL_MODEL_T
  add constraint PK_REINSTATE_CHANNEL_MODEL_T primary key (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, REINSTATE_ID);
alter table AM_REINSTATE_CHANNEL_MODEL_T
  add foreign key (ORG_ID, REINSTATE_ID)
  references AM_AGENT_REINSTATE_HEADER_T (ORG_ID, REINSTATE_ID);

prompt
prompt Creating table AM_SALARY_VALID_IMPACT_T
prompt =======================================
prompt
create table AM_SALARY_VALID_IMPACT_T
(
  org_id           NUMBER not null,
  policy_id        NUMBER not null,
  channel_id       NUMBER not null,
  model_id         NUMBER not null,
  record_id        NUMBER not null,
  number_from      NUMBER,
  number_to        NUMBER,
  impact           NUMBER,
  impact_category  VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  designation_id   NUMBER
)
;
alter table AM_SALARY_VALID_IMPACT_T
  add constraint PK_AM_PERS_IMPACT_T primary key (ORG_ID, CHANNEL_ID, MODEL_ID, POLICY_ID, RECORD_ID);

prompt
prompt Creating table AM_SCORING_CRITERIA_T
prompt ====================================
prompt
create table AM_SCORING_CRITERIA_T
(
  org_id               NUMBER not null,
  designation_id       NUMBER not null,
  scoring_criteria_id  NUMBER not null,
  minimum_criteria     NUMBER,
  maximum_criteria     NUMBER,
  criteria_description VARCHAR2(150),
  criteria_score       NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table AM_SCORING_CRITERIA_T
  add constraint PK_AM_SCORING_CRITERIA_T primary key (ORG_ID, DESIGNATION_ID, SCORING_CRITERIA_ID);

prompt
prompt Creating table AM_TARGET_AND_VALIDATION_T
prompt =========================================
prompt
create table AM_TARGET_AND_VALIDATION_T
(
  org_id              NUMBER not null,
  designation_id      NUMBER not null,
  target_id           NUMBER not null,
  premimum_rs_annual  NUMBER,
  premium_rs_monthly  NUMBER,
  cases_num           NUMBER,
  validation_period   NUMBER,
  grace_period        NUMBER,
  validation_criteria NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE
)
;
alter table AM_TARGET_AND_VALIDATION_T
  add constraint PK_AM_TARGET_AND_VALIDATION_T primary key (ORG_ID, DESIGNATION_ID, TARGET_ID);

prompt
prompt Creating table AM_TERMINATION_CHANNEL_MODEL_T
prompt =============================================
prompt
create table AM_TERMINATION_CHANNEL_MODEL_T
(
  org_id        NUMBER not null,
  agent_id      NUMBER not null,
  partner_id    NUMBER not null,
  channel_id    NUMBER not null,
  model_id      NUMBER not null,
  created_by    VARCHAR2(50),
  creation_date DATE,
  terminated_id NUMBER not null
)
;
alter table AM_TERMINATION_CHANNEL_MODEL_T
  add constraint PK_TERMINATION_CHANNEL_MODEL_T primary key (ORG_ID, AGENT_ID, PARTNER_ID, CHANNEL_ID, MODEL_ID, TERMINATED_ID);
alter table AM_TERMINATION_CHANNEL_MODEL_T
  add foreign key (ORG_ID, TERMINATED_ID)
  references AM_AGENT_TERMINATION_T (ORG_ID, TERMINATION_ID);

prompt
prompt Creating table AM_TERMINATION_DOC_DETAIL_GL_T
prompt =============================================
prompt
create table AM_TERMINATION_DOC_DETAIL_GL_T
(
  org_id               NUMBER not null,
  branch_id            NUMBER not null,
  product_code         NUMBER not null,
  sub_product_code     NUMBER not null,
  takaful_type         VARCHAR2(1) not null,
  document_type        VARCHAR2(1) not null,
  document_no          VARCHAR2(10) not null,
  record_type          VARCHAR2(1) not null,
  document_year        VARCHAR2(10) not null,
  issue_count          NUMBER not null,
  endorsement_no       NUMBER not null,
  application_id       NUMBER not null,
  gdh_doc_reference_no VARCHAR2(50),
  master_ref_no        VARCHAR2(500) not null,
  termination_id       NUMBER,
  transfer_to_agent    NUMBER,
  partner_branch_id    NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE
)
;
alter table AM_TERMINATION_DOC_DETAIL_GL_T
  add foreign key (ORG_ID, TERMINATION_ID)
  references AM_AGENT_TERMINATION_T (ORG_ID, TERMINATION_ID);

prompt
prompt Creating table AM_TERMINATION_DOC_DETAIL_T
prompt ==========================================
prompt
create table AM_TERMINATION_DOC_DETAIL_T
(
  org_id            NUMBER not null,
  termination_id    NUMBER not null,
  doc_type          VARCHAR2(50),
  doc_ref_no        VARCHAR2(150) not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  transfer_to_agent NUMBER,
  partner_branch_id NUMBER
)
;
alter table AM_TERMINATION_DOC_DETAIL_T
  add constraint PK_AM_TERMINATION_DOC_DETAIL_T primary key (ORG_ID, TERMINATION_ID, DOC_REF_NO);
alter table AM_TERMINATION_DOC_DETAIL_T
  add foreign key (ORG_ID, TERMINATION_ID)
  references AM_AGENT_TERMINATION_T (ORG_ID, TERMINATION_ID);

prompt
prompt Creating table AM_TERMINATION_DOC_HISTORY_T
prompt ===========================================
prompt
create table AM_TERMINATION_DOC_HISTORY_T
(
  org_id              NUMBER not null,
  termination_id      NUMBER not null,
  doc_type            VARCHAR2(50),
  doc_ref_no          VARCHAR2(150) not null,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  transfer_from_agent NUMBER,
  partner_branch_id   NUMBER
)
;
alter table AM_TERMINATION_DOC_HISTORY_T
  add constraint AM_TERMINATION_DOC_MASTER_T primary key (ORG_ID, TERMINATION_ID, DOC_REF_NO);
alter table AM_TERMINATION_DOC_HISTORY_T
  add foreign key (ORG_ID, TERMINATION_ID)
  references AM_AGENT_TERMINATION_T (ORG_ID, TERMINATION_ID);

prompt
prompt Creating table AM_TERMINATION_REASON_T
prompt ======================================
prompt
create table AM_TERMINATION_REASON_T
(
  code             NUMBER not null,
  org_id           NUMBER not null,
  description      VARCHAR2(150),
  active_flag      VARCHAR2(5),
  display_order    NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  terminate_type   VARCHAR2(50)
)
;
alter table AM_TERMINATION_REASON_T
  add constraint PK_AM_TERMINATION_REASON_T primary key (ORG_ID, CODE);

prompt
prompt Creating table AM_TRANSFER_DETAIL_GL_T
prompt ======================================
prompt
create table AM_TRANSFER_DETAIL_GL_T
(
  org_id               NUMBER not null,
  branch_id            NUMBER not null,
  product_code         NUMBER not null,
  sub_product_code     NUMBER not null,
  takaful_type         VARCHAR2(1) not null,
  document_type        VARCHAR2(1) not null,
  document_no          VARCHAR2(50) not null,
  record_type          VARCHAR2(1) not null,
  document_year        VARCHAR2(10) not null,
  issue_count          NUMBER not null,
  endorsement_no       NUMBER not null,
  application_id       NUMBER not null,
  gdh_doc_reference_no VARCHAR2(50),
  master_ref_no        VARCHAR2(500) not null,
  transfer_id          NUMBER not null,
  transfer_to_agent    NUMBER not null,
  partner_branch_id    NUMBER,
  created_by           VARCHAR2(50) not null,
  creation_date        DATE not null
)
;
alter table AM_TRANSFER_DETAIL_GL_T
  add foreign key (ORG_ID, TRANSFER_ID)
  references AM_AGENT_TRANSFER_T (ORG_ID, TRANSFER_ID);

prompt
prompt Creating table AM_TRANSFER_DOC_DETAIL_T
prompt =======================================
prompt
create table AM_TRANSFER_DOC_DETAIL_T
(
  org_id              NUMBER not null,
  transfer_id         NUMBER not null,
  doc_type            VARCHAR2(50),
  doc_ref_no          VARCHAR2(150) not null,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  transfer_to_agent   NUMBER,
  partner_id          NUMBER,
  channel_id          NUMBER,
  model_id            NUMBER,
  partner_branch_id   NUMBER,
  transfer_from_agent INTEGER
)
;
alter table AM_TRANSFER_DOC_DETAIL_T
  add constraint PK_AM_TRANSFER_DOC_DETAIL_T primary key (ORG_ID, TRANSFER_ID, DOC_REF_NO);
alter table AM_TRANSFER_DOC_DETAIL_T
  add foreign key (ORG_ID, TRANSFER_ID)
  references AM_AGENT_TRANSFER_T (ORG_ID, TRANSFER_ID);

prompt
prompt Creating table AM_TRANSFER_DOC_HISTORY_T
prompt ========================================
prompt
create table AM_TRANSFER_DOC_HISTORY_T
(
  org_id              NUMBER not null,
  transfer_id         NUMBER not null,
  doc_type            VARCHAR2(50),
  doc_ref_no          VARCHAR2(150) not null,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  transfer_from_agent NUMBER,
  partner_id          NUMBER,
  channel_id          NUMBER,
  model_id            NUMBER,
  partner_branch_id   NUMBER
)
;
alter table AM_TRANSFER_DOC_HISTORY_T
  add constraint AM_TRANSFER_DOC_HISTORY_T primary key (ORG_ID, TRANSFER_ID, DOC_REF_NO);

prompt
prompt Creating table AM_VEHICLE_MAKE_T
prompt ================================
prompt
create table AM_VEHICLE_MAKE_T
(
  org_id           NUMBER not null,
  make_id          NUMBER not null,
  make_name        VARCHAR2(40),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_VEHICLE_MAKE_T
  add constraint PK_AM_VEHICLE_MAKE_T primary key (ORG_ID, MAKE_ID);

prompt
prompt Creating table AM_VEHICLE_MODEL_T
prompt =================================
prompt
create table AM_VEHICLE_MODEL_T
(
  org_id           NUMBER not null,
  make_id          NUMBER not null,
  model_id         NUMBER not null,
  model_name       VARCHAR2(40),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table AM_VEHICLE_MODEL_T
  add constraint PK_AM_VEHICLE_MODEL_T primary key (ORG_ID, MAKE_ID, MODEL_ID);

prompt
prompt Creating table ANNOUNCEMENT_MAPPING_T
prompt =====================================
prompt
create table ANNOUNCEMENT_MAPPING_T
(
  org_id           NUMBER not null,
  announcement_id  NUMBER not null,
  grades           VARCHAR2(150),
  positions        VARCHAR2(50),
  locations        VARCHAR2(50),
  payrollids       VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  organizations    VARCHAR2(200),
  application_id   NUMBER
)
;
alter table ANNOUNCEMENT_MAPPING_T
  add constraint PK_ANNOUNCEMENT_MAPPING_T primary key (ORG_ID, ANNOUNCEMENT_ID);

prompt
prompt Creating table ANNOUNCEMENT_T
prompt =============================
prompt
create table ANNOUNCEMENT_T
(
  org_id            NUMBER not null,
  application_id    NUMBER not null,
  announcement_id   NUMBER not null,
  announcement_name VARCHAR2(500),
  description       VARCHAR2(600),
  date_from         DATE,
  date_to           DATE,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  file_path         VARCHAR2(300),
  url               VARCHAR2(500)
)
;
alter table ANNOUNCEMENT_T
  add constraint PK_ANNOUNCEMENT_T primary key (ORG_ID, APPLICATION_ID, ANNOUNCEMENT_ID);

prompt
prompt Creating table AUDIT_LOGS_T
prompt ===========================
prompt
create table AUDIT_LOGS_T
(
  serial_no NUMBER not null,
  tablename VARCHAR2(50),
  userid    VARCHAR2(50),
  log_date  DATE,
  sql_query VARCHAR2(4000)
)
;
alter table AUDIT_LOGS_T
  add constraint PK_AUDIT_LOGS_T primary key (SERIAL_NO);

prompt
prompt Creating table BANK_FORMAT_HD_T
prompt ===============================
prompt
create table BANK_FORMAT_HD_T
(
  serial_no        NUMBER,
  org_id           NUMBER,
  bank_id          NUMBER,
  format_type      VARCHAR2(20),
  format_category  VARCHAR2(20),
  expression_value VARCHAR2(200),
  expression_type  VARCHAR2(200),
  display_order    NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  prefix           VARCHAR2(200),
  postfix          VARCHAR2(200)
)
;

prompt
prompt Creating table BANK_RECON_BANK_CHARGES_T
prompt ========================================
prompt
create table BANK_RECON_BANK_CHARGES_T
(
  org_id           NUMBER not null,
  recon_process_id NUMBER not null,
  serial_no        NUMBER not null,
  charged_date     DATE,
  amount           NUMBER,
  creation_date    DATE,
  created_by       VARCHAR2(50),
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table BANK_RECON_BANK_CHARGES_T
  add constraint BANK_RECON_BANK_CHARGES_T_PK primary key (ORG_ID, RECON_PROCESS_ID, SERIAL_NO);

prompt
prompt Creating table BANK_RECON_DTL_T
prompt ===============================
prompt
create table BANK_RECON_DTL_T
(
  org_id             NUMBER not null,
  header_id          NUMBER not null,
  detail_id          NUMBER not null,
  row_description    VARCHAR2(250),
  no_of_rows         NUMBER,
  cr_amount          NUMBER,
  dr_amount          NUMBER,
  closing_amount     NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  transaction_date   DATE,
  voucher_type       VARCHAR2(50),
  voucher_no         NUMBER,
  voucher_date       DATE,
  reconciliation_tag VARCHAR2(1)
)
;
alter table BANK_RECON_DTL_T
  add constraint PK_BANK_RECON_DTL_T primary key (ORG_ID, HEADER_ID, DETAIL_ID);

prompt
prompt Creating table BANK_RECON_HD_T
prompt ==============================
prompt
create table BANK_RECON_HD_T
(
  org_id              NUMBER not null,
  header_id           NUMBER not null,
  bank_code           VARCHAR2(50),
  upload_date         DATE,
  file_name           VARCHAR2(250),
  no_of_rows          NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  total_debit_amount  NUMBER,
  total_credit_amount NUMBER,
  matching_type       VARCHAR2(2),
  payment_type        VARCHAR2(1),
  recon_type          VARCHAR2(1),
  opening_balance     NUMBER,
  branch_code         NUMBER,
  bank_account        VARCHAR2(100),
  coa_code            VARCHAR2(100),
  bank_account_code   VARCHAR2(100)
)
;
alter table BANK_RECON_HD_T
  add constraint PK_BANK_RECON_HD_T primary key (ORG_ID, HEADER_ID);

prompt
prompt Creating table BANK_RECON_VOUCHER_T
prompt ===================================
prompt
create table BANK_RECON_VOUCHER_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER,
  voucher_type      VARCHAR2(10),
  fiscal_year       VARCHAR2(10),
  voucher_no        VARCHAR2(10),
  detail_sr_no      NUMBER,
  serial_no         NUMBER not null,
  detail_id         NUMBER,
  voucher_amount    NUMBER,
  creation_date     DATE,
  created_by        VARCHAR2(50),
  last_updated_by   VARCHAR2(50),
  last_updated_date DATE,
  recon_process_id  NUMBER,
  voucher_date      DATE,
  matching_type     VARCHAR2(2)
)
;
alter table BANK_RECON_VOUCHER_T
  add constraint BANK_RECON_VOUCHER_T_PK primary key (ORG_ID, SERIAL_NO);

prompt
prompt Creating table BANK_STATEMENT_TAG_T
prompt ===================================
prompt
create table BANK_STATEMENT_TAG_T
(
  org_id              NUMBER not null,
  gl_tag_code         NUMBER not null,
  tag_code            NUMBER not null,
  tag_name            VARCHAR2(100) not null,
  gl_nature           VARCHAR2(10) not null,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  cost_center_code    VARCHAR2(50),
  credit_voucher_type VARCHAR2(20),
  debit_voucher_type  VARCHAR2(20)
)
;
alter table BANK_STATEMENT_TAG_T
  add constraint PK_BANK_STATEMENT_TAG_T primary key (ORG_ID, TAG_CODE);

prompt
prompt Creating table BENEFIT_TYPE_T
prompt =============================
prompt
create table BENEFIT_TYPE_T
(
  org_id                  NUMBER not null,
  benefit_type_code       NUMBER not null,
  benefit_type_short_desc VARCHAR2(30),
  benefit_type_title      VARCHAR2(100),
  death_benefit           VARCHAR2(1),
  remarks                 VARCHAR2(200),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  active                  VARCHAR2(1),
  application_id          NUMBER not null,
  calculation_type        NUMBER,
  include_in_tsar         VARCHAR2(1),
  calculation_value       VARCHAR2(500),
  calculation_variable    VARCHAR2(500),
  calculation_type_tsar   VARCHAR2(1)
)
;
create unique index BENEFIT_TYPE_T_INDEX1 on BENEFIT_TYPE_T (ORG_ID, APPLICATION_ID, BENEFIT_TYPE_CODE);
alter table BENEFIT_TYPE_T
  add constraint BENEFIT_TYPE_T_PK primary key (ORG_ID, APPLICATION_ID, BENEFIT_TYPE_CODE);

prompt
prompt Creating table BIRTHDAY_EMAIL_LOG_T
prompt ===================================
prompt
create table BIRTHDAY_EMAIL_LOG_T
(
  org_id          NUMBER not null,
  rec_id          NUMBER not null,
  email_date      DATE,
  status          VARCHAR2(1),
  email_subject   VARCHAR2(250),
  email_body      VARCHAR2(2000),
  email_signature VARCHAR2(300),
  to_email        VARCHAR2(2000),
  bcc_email       VARCHAR2(4000),
  image_name      VARCHAR2(150),
  created_by      VARCHAR2(50),
  creation_date   DATE,
  signature2      VARCHAR2(150),
  email_to_name   VARCHAR2(2000)
)
;
alter table BIRTHDAY_EMAIL_LOG_T
  add constraint PK_BIRTHDAY_EMAIL_LOG_T primary key (ORG_ID, REC_ID);

prompt
prompt Creating table BRANCH_CURRENCY_MAPPING_T
prompt ========================================
prompt
create table BRANCH_CURRENCY_MAPPING_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  currency_code    VARCHAR2(50) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  active           VARCHAR2(1),
  default_tag      VARCHAR2(50)
)
;
alter table BRANCH_CURRENCY_MAPPING_T
  add constraint BRANCH_CURRENCY_MAPPING_T_PK primary key (ORG_ID, BRANCH_ID, CURRENCY_CODE);

prompt
prompt Creating table BRANCH_WISE_DISCOUNT_T
prompt =====================================
prompt
create table BRANCH_WISE_DISCOUNT_T
(
  org_id                  NUMBER not null,
  branch_id               VARCHAR2(10) not null,
  product_code            VARCHAR2(10) not null,
  sub_product_code        VARCHAR2(10) not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  branch_code             NUMBER not null,
  special_discount        NUMBER,
  special_discount_amount NUMBER,
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE
)
;
alter table BRANCH_WISE_DISCOUNT_T
  add constraint PK_BR_WISE_DISC primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BRANCH_CODE);

prompt
prompt Creating table BULK_KO_HEADER_T
prompt ===============================
prompt
create table BULK_KO_HEADER_T
(
  knockoff_id        NUMBER not null,
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  sl_type            VARCHAR2(50),
  sl_code            VARCHAR2(50),
  knockoff_date      DATE,
  from_date          DATE,
  to_date            DATE,
  filter             VARCHAR2(20),
  multi_bank         VARCHAR2(1),
  bank_code          VARCHAR2(50),
  branch_code        VARCHAR2(50),
  bank_account       VARCHAR2(50),
  instrument_type    VARCHAR2(50),
  instrument_number  VARCHAR2(50),
  instrument_date    DATE,
  instrument_amount  NUMBER,
  voucher_type       VARCHAR2(50),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  post_flag          VARCHAR2(1),
  posted_date        DATE,
  posted_by          VARCHAR2(50),
  drawn_on           VARCHAR2(50),
  endorsement_no     VARCHAR2(300),
  claim_no           VARCHAR2(300),
  channel            VARCHAR2(300),
  agent              VARCHAR2(300),
  employee           VARCHAR2(300),
  location           VARCHAR2(300),
  lob                VARCHAR2(300),
  bu                 VARCHAR2(300),
  policy_year        VARCHAR2(300),
  policy_no          VARCHAR2(50),
  cost_center_code   VARCHAR2(50),
  lock_flag          VARCHAR2(1),
  drawn_on_bank      VARCHAR2(50),
  verified_flag      NVARCHAR2(5),
  verified_by        NVARCHAR2(50),
  verified_date      DATE,
  cancel_flag        VARCHAR2(1),
  cancel_by          VARCHAR2(50),
  cancel_date        DATE,
  reverse_flag       VARCHAR2(2),
  bank_account_code  VARCHAR2(50),
  advice_group       VARCHAR2(20),
  header_description VARCHAR2(150),
  voucher_ref_no     VARCHAR2(50),
  locked_date        DATE,
  instrument_no      VARCHAR2(50),
  locked_by          VARCHAR2(150),
  advice_type        VARCHAR2(25),
  advice_number      VARCHAR2(50),
  batch_number       VARCHAR2(100)
)
;
alter table BULK_KO_HEADER_T
  add constraint BULK_KNOCKOFF_PAYMENT_PK primary key (KNOCKOFF_ID, ORG_ID, BRANCH_ID);

prompt
prompt Creating table GL_SUBLEDGER_ACCOUNTS
prompt ====================================
prompt
create table GL_SUBLEDGER_ACCOUNTS
(
  sl_type          VARCHAR2(10) not null,
  sl_code          VARCHAR2(50) not null,
  sl_desc          VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  org_id           NUMBER not null,
  auto_tag         VARCHAR2(1),
  active           VARCHAR2(1)
)
;
alter table GL_SUBLEDGER_ACCOUNTS
  add constraint GL_SUBLEDGER_ACCOUNTS_PK primary key (ORG_ID, SL_TYPE, SL_CODE);

prompt
prompt Creating table BULK_KO_DETAIL_T
prompt ===============================
prompt
create table BULK_KO_DETAIL_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  knockoff_id         NUMBER not null,
  ko_sr_no            NUMBER not null,
  advice_type         VARCHAR2(10),
  fiscal_year         VARCHAR2(10),
  advice_no           VARCHAR2(10),
  sl_sr_no            NUMBER,
  cost_center_code    VARCHAR2(10),
  coa_code            VARCHAR2(50),
  sl_type             VARCHAR2(10),
  sl_code             VARCHAR2(50),
  sl_description      VARCHAR2(500),
  debit_base_curr     NUMBER,
  credit_base_curr    NUMBER,
  currency_code       VARCHAR2(10),
  exchange_rate       NUMBER,
  debit_foreign_curr  NUMBER,
  credit_foreign_curr NUMBER,
  document_reference  VARCHAR2(500),
  knockoff_amount     NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  ledger_description  VARCHAR2(500),
  policy_year         VARCHAR2(300),
  policy_no           VARCHAR2(300),
  endorsement_no      VARCHAR2(300),
  claim_no            VARCHAR2(300),
  bu                  VARCHAR2(300),
  lob                 VARCHAR2(300),
  location            VARCHAR2(300),
  employee            VARCHAR2(300),
  channel             VARCHAR2(300),
  agent               VARCHAR2(300),
  row_description     VARCHAR2(300),
  tax_flag            VARCHAR2(1),
  tax_code            VARCHAR2(10),
  advice_amount       NUMBER,
  adjusted_amount     NUMBER,
  detail_sr_no        NUMBER,
  error_msg           VARCHAR2(300),
  tax_code1           VARCHAR2(50),
  tax_value1          NUMBER,
  tax_code2           VARCHAR2(50),
  tax_value2          NUMBER,
  tax_code3           VARCHAR2(50),
  tax_value3          NUMBER,
  tax_code4           VARCHAR2(50),
  tax_value4          NUMBER,
  knock_off_amount    NUMBER,
  tax_payer_status    VARCHAR2(100),
  tax_payer_type      VARCHAR2(100),
  all_dimensions      VARCHAR2(300),
  partial_amount      NUMBER,
  validation_flag     CHAR(1),
  advice_group        VARCHAR2(20),
  cnic                VARCHAR2(60),
  payment_mode        VARCHAR2(2),
  advice_payment_type CHAR(1),
  instrument_number   VARCHAR2(50),
  voucher_ref_no      VARCHAR2(150)
)
;
alter table BULK_KO_DETAIL_T
  add constraint PK_BULK_KO_PAYM_DETAIL primary key (ORG_ID, BRANCH_ID, KNOCKOFF_ID, KO_SR_NO);
alter table BULK_KO_DETAIL_T
  add constraint BULK_KO_PMT_DETAIL_T_R01 foreign key (ORG_ID, SL_TYPE, SL_CODE)
  references GL_SUBLEDGER_ACCOUNTS (ORG_ID, SL_TYPE, SL_CODE);
alter table BULK_KO_DETAIL_T
  add constraint FK_BULK_KO_PAYM_HEADER foreign key (KNOCKOFF_ID, ORG_ID, BRANCH_ID)
  references BULK_KO_HEADER_T (KNOCKOFF_ID, ORG_ID, BRANCH_ID);

prompt
prompt Creating table BULK_POSDTL_T
prompt ============================
prompt
create table BULK_POSDTL_T
(
  org_id                                 NUMBER not null,
  bulk_pos_id                            NUMBER not null,
  dtl_sr_no                              NUMBER not null,
  branch_id                              NUMBER not null,
  main_product_code                      NUMBER not null,
  sub_product_code                       NUMBER not null,
  document_no                            VARCHAR2(10),
  document_year                          NUMBER,
  application_id                         NUMBER not null,
  doc_reference_no                       VARCHAR2(50),
  issue_count                            NUMBER not null,
  cnic_no                                VARCHAR2(50),
  name1                                  VARCHAR2(50),
  middle_name1                           VARCHAR2(50),
  last_name1                             VARCHAR2(50),
  dob1                                   DATE,
  age1                                   NUMBER(3),
  mobile_no                              VARCHAR2(20),
  payment_term                           NUMBER,
  policy_term                            NUMBER(3),
  basic_contribution_modal               NUMBER,
  sum_covered_modal                      NUMBER,
  basic_contribution                     NUMBER(15,2),
  comm_date                              DATE,
  total_contribution_modal               NUMBER,
  channel_id                             NUMBER,
  gender1                                VARCHAR2(1),
  model_id                               NUMBER,
  agent_id                               NUMBER,
  partner_id                             NUMBER,
  partner_branch_id                      NUMBER,
  title                                  VARCHAR2(50),
  payment_mode                           VARCHAR2(1),
  cover_multiple                         NUMBER,
  sum_covered_index                      NUMBER(15,2),
  contribution_index                     NUMBER(15,2),
  no_of_persons                          NUMBER,
  taxstatus                              VARCHAR2(5),
  sum_covered                            NUMBER(15,2),
  created_by                             VARCHAR2(50),
  creation_date                          DATE,
  error_remarks                          VARCHAR2(600),
  convert_to_proposal                    VARCHAR2(1),
  master_ref_no                          VARCHAR2(50),
  beneficiary_name                       VARCHAR2(200),
  beneficiary_dob                        DATE,
  beneficiary_relation                   NUMBER(9,6),
  beneficiary_cnic                       VARCHAR2(25),
  beneficiary_percentage                 NUMBER(15,2),
  is_guardian                            VARCHAR2(1),
  guardian_name                          VARCHAR2(50),
  guardian_relation_code                 VARCHAR2(10),
  guardian_dob                           DATE,
  guardian_cnic_no                       VARCHAR2(50),
  assets_bonuses_last_year               NUMBER,
  assets_bonuses_current_year            NUMBER,
  assets_property_last_year              NUMBER,
  assets_annual_current_year             NUMBER,
  assets_inheritance_last_year           NUMBER,
  assets_inheritance_current_year        NUMBER,
  assets_annual_last_year                NUMBER,
  liability_expenses_last_year           NUMBER,
  liability_expenses_current_year        NUMBER,
  assets_property_current_year           NUMBER,
  saving_and_investment                  NUMBER,
  health_insurance                       NUMBER,
  desirable_returns                      NUMBER,
  desirable_pension                      NUMBER,
  life_insurance                         NUMBER,
  desirable_sum_assured                  NUMBER,
  desirable_limit_coverage               NUMBER,
  pension_planning                       NUMBER,
  life_stage_recom                       VARCHAR2(200),
  protection_need_recom                  VARCHAR2(200),
  appetite_for_risk_recom                VARCHAR2(200),
  policy_recommendation                  VARCHAR2(200),
  year_commitment                        VARCHAR2(200),
  risk_elements                          VARCHAR2(200),
  membership_recom                       VARCHAR2(200),
  consultant_name                        VARCHAR2(500),
  consultant_code                        VARCHAR2(500),
  cold_contact                           VARCHAR2(500),
  known_duration                         VARCHAR2(50),
  is_relative                            VARCHAR2(10),
  relation_state                         VARCHAR2(500),
  takaful_purpose                        VARCHAR2(50),
  application_pending                    VARCHAR2(10),
  covered_income                         NUMBER,
  unfavorable_info                       VARCHAR2(10),
  unfavorable_detail                     VARCHAR2(500),
  saving_need                            VARCHAR2(50),
  building_capital                       NUMBER,
  planning_children_wedding              NUMBER,
  planning_children_education            NUMBER,
  retirement_income                      NUMBER,
  financial_security_in_event_of_death   NUMBER,
  financial_security_in_event_of_illness NUMBER,
  investing_capital                      NUMBER,
  saving_needs                           NUMBER,
  liability_loan_last_year               NUMBER,
  liability_loan_current_year            NUMBER,
  illustration_ref_no_key                VARCHAR2(400),
  proposal_no_key                        VARCHAR2(400),
  email_address                          VARCHAR2(100),
  reprocess_tag                          VARCHAR2(1),
  occupation                             VARCHAR2(50),
  annual_salary                          NUMBER,
  employment_class                       VARCHAR2(1),
  type_of_employment                     VARCHAR2(50),
  nature_of_business                     VARCHAR2(50),
  band_code                              VARCHAR2(50),
  average_monthly_income                 NUMBER,
  working_tag                            VARCHAR2(10),
  client_category                        VARCHAR2(10),
  source_of_income                       VARCHAR2(50),
  length_of_service                      NUMBER,
  retirement_age                         NUMBER,
  covered_in_pension_scheme              VARCHAR2(1),
  designation                            VARCHAR2(100),
  employer_detail                        VARCHAR2(1000),
  daily_duties                           VARCHAR2(500),
  comments                               VARCHAR2(2000)
)
;
alter table BULK_POSDTL_T
  add constraint PK_BULK_POSDTL_T primary key (ORG_ID, BULK_POS_ID, DTL_SR_NO);

prompt
prompt Creating table BULK_POSHD_T
prompt ===========================
prompt
create table BULK_POSHD_T
(
  org_id            NUMBER not null,
  bulk_pos_id       NUMBER not null,
  process_date      DATE,
  remarks           VARCHAR2(150),
  created_by        VARCHAR2(150),
  created_at        DATE,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  is_process        VARCHAR2(1)
)
;
alter table BULK_POSHD_T
  add constraint PK_BULK_POSHD_T primary key (ORG_ID, BULK_POS_ID);

prompt
prompt Creating table BULK_PR_HD_T
prompt ===========================
prompt
create table BULK_PR_HD_T
(
  org_id       NUMBER not null,
  bulk_pr_id   NUMBER not null,
  process_date DATE,
  remarks      VARCHAR2(150),
  created_by   VARCHAR2(150),
  created_at   DATE
)
;
alter table BULK_PR_HD_T
  add constraint PK_BULK_PR_HD_T primary key (ORG_ID, BULK_PR_ID);

prompt
prompt Creating table BUNDLE_SETUP_T
prompt =============================
prompt
create table BUNDLE_SETUP_T
(
  org_id             NUMBER not null,
  app_id             NUMBER not null,
  bundle_id          NUMBER not null,
  bundle_code        NVARCHAR2(50),
  bundle_description NVARCHAR2(500),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table BUNDLE_SETUP_T
  add primary key (ORG_ID, APP_ID, BUNDLE_ID);

prompt
prompt Creating table BUSINESS_UNIT_T
prompt ==============================
prompt
create table BUSINESS_UNIT_T
(
  org_id           NUMBER not null,
  bu_ref           VARCHAR2(30) not null,
  bu_name          VARCHAR2(500),
  active           VARCHAR2(2),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table BUSINESS_UNIT_T
  add constraint PK_BU_T primary key (ORG_ID, BU_REF);

prompt
prompt Creating table CHART_OF_ACCOUNT_GL_T
prompt ====================================
prompt
create table CHART_OF_ACCOUNT_GL_T
(
  coa_code         VARCHAR2(20) not null,
  coa_desc         VARCHAR2(250),
  coa_type         VARCHAR2(1),
  coa_nature       VARCHAR2(10),
  coa_sub_nature   VARCHAR2(10),
  coa_level        NUMBER,
  coa_active       VARCHAR2(1),
  created_by       VARCHAR2(20),
  creation_date    TIMESTAMP(6),
  last_updated_by  VARCHAR2(100),
  last_update_date TIMESTAMP(6),
  vertical_parent  VARCHAR2(20),
  org_id           NUMBER not null,
  sl_mandatory_tag VARCHAR2(1),
  auto_tag         VARCHAR2(1),
  knockoff_tag     VARCHAR2(1)
)
;
alter table CHART_OF_ACCOUNT_GL_T
  add constraint PK_GL_COA primary key (COA_CODE, ORG_ID);

prompt
prompt Creating table CHECKLIST_ANSWERS_T
prompt ==================================
prompt
create table CHECKLIST_ANSWERS_T
(
  org_id           NUMBER not null,
  checklist_key    VARCHAR2(100) not null,
  question_id      VARCHAR2(20) not null,
  answer           VARCHAR2(20),
  created_by       VARCHAR2(50),
  creation_date    TIMESTAMP(6),
  last_updated_by  VARCHAR2(50),
  last_update_date TIMESTAMP(6),
  remarks          VARCHAR2(500)
)
;
alter table CHECKLIST_ANSWERS_T
  add primary key (ORG_ID, CHECKLIST_KEY, QUESTION_ID);
alter table CHECKLIST_ANSWERS_T
  add foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table CLAIM_CANCE_REASONS_SETUP_T
prompt ==========================================
prompt
create table CLAIM_CANCE_REASONS_SETUP_T
(
  claim_cancellation_code NUMBER not null,
  org_id                  NUMBER not null,
  short_name              VARCHAR2(20),
  title                   VARCHAR2(100),
  description             VARCHAR2(300),
  display_order           VARCHAR2(10),
  active                  VARCHAR2(1),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE
)
;
alter table CLAIM_CANCE_REASONS_SETUP_T
  add constraint PK_CLAIM_CANCE_REASONS_SETUP_T primary key (CLAIM_CANCELLATION_CODE, ORG_ID);

prompt
prompt Creating table CLAIM_DECLINE_REASONS_SETUP_T
prompt ============================================
prompt
create table CLAIM_DECLINE_REASONS_SETUP_T
(
  org_id             NUMBER not null,
  claim_decline_code VARCHAR2(10) not null,
  short_name         VARCHAR2(30),
  title              VARCHAR2(30),
  description        VARCHAR2(1000),
  display_order      NUMBER,
  active             VARCHAR2(2),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table CLAIM_DECLINE_REASONS_SETUP_T
  add constraint PK_TK_CLAIM_DECLINE_T primary key (ORG_ID, CLAIM_DECLINE_CODE);

prompt
prompt Creating table CLAIM_EVENT_MATRIX_MAPPING_T
prompt ===========================================
prompt
create table CLAIM_EVENT_MATRIX_MAPPING_T
(
  org_id           NUMBER not null,
  event_id         NUMBER not null,
  matrix_id        VARCHAR2(100) not null,
  execution_order  VARCHAR2(1),
  death_tag        VARCHAR2(1),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  annuity_tag      VARCHAR2(1),
  application_id   NUMBER not null
)
;
alter table CLAIM_EVENT_MATRIX_MAPPING_T
  add constraint PK_EVENT_MATRIX_MAPPING_T primary key (ORG_ID, EVENT_ID, MATRIX_ID, APPLICATION_ID);

prompt
prompt Creating table CLAIM_REGISTRATION_T
prompt ===================================
prompt
create table CLAIM_REGISTRATION_T
(
  org_id                   VARCHAR2(10) not null,
  branch_id                VARCHAR2(10) not null,
  sub_product_code         VARCHAR2(10) not null,
  claim_no                 VARCHAR2(10) not null,
  claim_registration_no    VARCHAR2(50),
  reported_by              VARCHAR2(50),
  policy_holder            VARCHAR2(50),
  reporting_date           DATE,
  event_date               DATE,
  insured_name_reported    VARCHAR2(50),
  policy_no                VARCHAR2(50),
  loss_type                NUMBER,
  insured_id               NUMBER,
  loss_nature              VARCHAR2(20),
  cause_of_loss            NUMBER,
  remarks                  VARCHAR2(4000),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  initial_claim_amount     NUMBER,
  is_transferred           VARCHAR2(1),
  claim_intimation_nm      VARCHAR2(50),
  reported_mob_nm          VARCHAR2(15),
  reported_cnic            VARCHAR2(200),
  reported_email           VARCHAR2(200),
  reported_relation        VARCHAR2(200),
  application_id           NUMBER not null,
  endorsement_no           NUMBER,
  event_place              VARCHAR2(200),
  admission_date           DATE,
  discharge_date           DATE,
  issue_date               DATE,
  last_active_at_work_date DATE,
  last_salary_paid_date    DATE,
  intimation_source        VARCHAR2(20),
  fax_no                   VARCHAR2(100),
  total_days               NUMBER,
  event_country            VARCHAR2(5),
  event_state              VARCHAR2(7),
  proximate_cause          VARCHAR2(150),
  district                 VARCHAR2(150),
  cause_detail             VARCHAR2(100),
  claim_detail_no          VARCHAR2(16),
  item_cnic_no             VARCHAR2(30),
  claim_year               VARCHAR2(4) not null,
  employee_id              NUMBER,
  hospital_type            VARCHAR2(10),
  panel_hospital           VARCHAR2(50),
  non_panel_hospital       VARCHAR2(200),
  reporting_time           VARCHAR2(15),
  claim_payment_type       VARCHAR2(20),
  issue_count              NUMBER,
  cancel_tag               VARCHAR2(1),
  cancel_by                VARCHAR2(50),
  cancel_date              DATE,
  posting_by               VARCHAR2(50),
  posting_tag              VARCHAR2(1),
  posting_date             DATE,
  process_by               VARCHAR2(50),
  process_tag              VARCHAR2(1),
  process_date             DATE,
  hr_claim                 VARCHAR2(1),
  approve_tag              VARCHAR2(1),
  reject_tag               VARCHAR2(1),
  rejection_reason         NUMBER
)
;
alter table CLAIM_REGISTRATION_T
  add constraint PK_GL_CLAIM_REGISTRATION_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, CLAIM_YEAR);

prompt
prompt Creating table CLAIM_REOPEN_REASON_SETUP_T
prompt ==========================================
prompt
create table CLAIM_REOPEN_REASON_SETUP_T
(
  claim_reopen_code NUMBER not null,
  org_id            NUMBER not null,
  short_name        VARCHAR2(20),
  title             VARCHAR2(100),
  description       VARCHAR2(300),
  display_order     VARCHAR2(10),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table CLAIM_REOPEN_REASON_SETUP_T
  add constraint PK_CLAIM_REOPEN_REASON_SETUP_T primary key (CLAIM_REOPEN_CODE, ORG_ID);

prompt
prompt Creating table CLAIM_REPORTING_CHANNEL_T
prompt ========================================
prompt
create table CLAIM_REPORTING_CHANNEL_T
(
  claim_rc_code    NUMBER not null,
  org_id           NUMBER not null,
  short_name       VARCHAR2(20),
  title            VARCHAR2(100),
  remarks          VARCHAR2(300),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table CLAIM_REPORTING_CHANNEL_T
  add constraint PK_CLAIM_REPORTING_CHANNEL_T primary key (CLAIM_RC_CODE, ORG_ID);

prompt
prompt Creating table CLAIM_RETAKAFUL_T
prompt ================================
prompt
create table CLAIM_RETAKAFUL_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  sub_product_code NUMBER not null,
  claim_no         VARCHAR2(10) not null,
  benefit_code     NUMBER not null,
  application_id   NUMBER not null,
  treaty_code      NUMBER not null,
  retakaful_code   NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  claim_year       VARCHAR2(4) not null,
  ri_share         NUMBER,
  ri_claim_amount  NUMBER
)
;
alter table CLAIM_RETAKAFUL_T
  add constraint PK_CLAIM_RETAK_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, BENEFIT_CODE, APPLICATION_ID, TREATY_CODE, RETAKAFUL_CODE, CLAIM_YEAR);

prompt
prompt Creating table CLIENT_DIRECTOR_SETUP_T
prompt ======================================
prompt
create table CLIENT_DIRECTOR_SETUP_T
(
  org_id              NUMBER not null,
  client_code         NUMBER not null,
  director_id         NUMBER not null,
  director_name       VARCHAR2(50),
  active              VARCHAR2(1),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  gender              VARCHAR2(1),
  country_code        VARCHAR2(20),
  director_cnic       NUMBER,
  director_dob        DATE,
  director_age        NUMBER,
  designation_code    NUMBER,
  address             VARCHAR2(100),
  city_code           VARCHAR2(10),
  state_code          VARCHAR2(10),
  aml_screening       VARCHAR2(1),
  cnic_issue_date     DATE,
  cnic_expiry_date    DATE,
  file_path           VARCHAR2(500),
  father_husband_name VARCHAR2(100)
)
;
alter table CLIENT_DIRECTOR_SETUP_T
  add constraint PK_CLIENT_DIRECTOR_SETUP primary key (ORG_ID, DIRECTOR_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_INCOME_BAND_T
prompt =================================
prompt
create table GLAS_INCOME_BAND_T
(
  org_id           NUMBER not null,
  band_code        NUMBER not null,
  band_desc        VARCHAR2(50),
  min_income       NUMBER,
  max_income       NUMBER,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_INCOME_BAND_T
  add constraint PK_INC_BAND primary key (ORG_ID, BAND_CODE);
alter table GLAS_INCOME_BAND_T
  add constraint FK_INC_BAND_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_CLIENT_SETUP_T
prompt ==================================
prompt
create table GLAS_CLIENT_SETUP_T
(
  org_id                     NUMBER not null,
  client_code                NUMBER not null,
  client_desc                VARCHAR2(500),
  client_short_desc          VARCHAR2(250),
  address                    VARCHAR2(200),
  email                      VARCHAR2(500),
  phone                      VARCHAR2(15),
  active                     VARCHAR2(1),
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE,
  client_type                VARCHAR2(10),
  age                        NUMBER(3),
  dob                        DATE,
  height                     NUMBER,
  weight                     NUMBER,
  bmi                        NUMBER,
  occupation                 NUMBER,
  vat_reg_no                 VARCHAR2(50),
  vat_reg_date               DATE,
  nature_of_business         VARCHAR2(10),
  name_in_arabic             NVARCHAR2(500),
  contact_person_name        VARCHAR2(500),
  contact_person_no          VARCHAR2(50),
  contact_person_designation VARCHAR2(200),
  group_code                 VARCHAR2(10),
  height_scale               VARCHAR2(10),
  weight_scale               VARCHAR2(10),
  title                      VARCHAR2(10),
  client_nature              VARCHAR2(10),
  band_code                  NUMBER,
  client_category            VARCHAR2(10),
  cnic_no                    VARCHAR2(50),
  cnic_issue_date            DATE,
  cnic_expiry_date           DATE,
  father_name                VARCHAR2(50),
  maiden_name                VARCHAR2(50),
  marital_status             VARCHAR2(10),
  place_of_birth             VARCHAR2(50),
  passport_no                VARCHAR2(50),
  no_of_dependents           NUMBER,
  nationality_code           VARCHAR2(10),
  religion_code              NUMBER,
  working_tag                VARCHAR2(1),
  first_name                 VARCHAR2(50),
  middle_name                VARCHAR2(50),
  last_name                  VARCHAR2(50),
  annual_salary              NUMBER,
  total_sar                  NUMBER,
  referral_source            NUMBER,
  referral_other             VARCHAR2(10),
  gender                     VARCHAR2(10),
  nrp_tag                    VARCHAR2(1),
  communication_channel      VARCHAR2(10),
  father_cnic_no             VARCHAR2(50),
  father_cnic_issue_date     DATE,
  father_cnic_expiry_date    DATE,
  spouse_cnic_no             VARCHAR2(50),
  spouse_cnic_issue_date     DATE,
  spouse_cnic_expiry_date    DATE,
  category_code              VARCHAR2(10),
  source_of_income           NUMBER,
  credit_limit               NUMBER,
  credit_limit_days          NUMBER,
  credit_limit_tag           VARCHAR2(1),
  residencey                 VARCHAR2(50),
  uscitizen                  VARCHAR2(50),
  taxstatus                  VARCHAR2(50),
  entry_type                 VARCHAR2(10),
  mapped_username            VARCHAR2(200),
  action_type                VARCHAR2(200),
  action_detail              VARCHAR2(500),
  aml_type                   VARCHAR2(2)
)
;
alter table GLAS_CLIENT_SETUP_T
  add constraint PK_CLIENT_SETUP_T primary key (ORG_ID, CLIENT_CODE);
alter table GLAS_CLIENT_SETUP_T
  add constraint FK_CLIENT_INC_BAND foreign key (ORG_ID, BAND_CODE)
  references GLAS_INCOME_BAND_T (ORG_ID, BAND_CODE);
alter table GLAS_CLIENT_SETUP_T
  add constraint FK_CLIENT_SETUP_T_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table CLIENT_SETUP_ANNEXURE01_T
prompt ========================================
prompt
create table CLIENT_SETUP_ANNEXURE01_T
(
  annexure_sno        NUMBER not null,
  org_id              NUMBER not null,
  client_code         NUMBER not null,
  fullname            VARCHAR2(50),
  birthdate           DATE,
  occupation          VARCHAR2(50),
  currentresidence    VARCHAR2(50),
  currentcountry      VARCHAR2(50),
  residencytype       VARCHAR2(20),
  stay                VARCHAR2(20),
  visithome           VARCHAR2(50),
  returndate          DATE,
  homeplan            VARCHAR2(50),
  estatedetails       VARCHAR2(50),
  bankaccounts        VARCHAR2(50),
  settle_plan         VARCHAR2(20),
  country_nationality VARCHAR2(20),
  stayduration        VARCHAR2(50),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  family_lived        VARCHAR2(50)
)
;
alter table CLIENT_SETUP_ANNEXURE01_T
  add constraint PK_CLIENT_SETUP_ANNEXURE01_T primary key (ORG_ID, ANNEXURE_SNO, CLIENT_CODE);
alter table CLIENT_SETUP_ANNEXURE01_T
  add constraint FK_CLIENT_SETUP_ANNEXURE01_T foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_STATUS_SETUP_T
prompt ====================================
prompt
create table IL_DOC_STATUS_SETUP_T
(
  org_id              NUMBER not null,
  status_code         NUMBER not null,
  status_desc         VARCHAR2(50),
  active              VARCHAR2(1),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  manual_code         NUMBER,
  monthly_process_tag VARCHAR2(1),
  status_desc_print   VARCHAR2(50),
  min_residual_value  NUMBER,
  top_up_tag          VARCHAR2(1),
  claim_tag           VARCHAR2(5),
  report_path         VARCHAR2(500),
  group_code          NUMBER,
  category_code       NUMBER,
  event_code          NUMBER,
  is_inforce_status   VARCHAR2(1),
  persistency_flag    VARCHAR2(1),
  surplus_tag         VARCHAR2(1),
  valid_for_cnic_exp  VARCHAR2(1)
)
;
alter table IL_DOC_STATUS_SETUP_T
  add constraint PK_IL_DOC_STATUS primary key (ORG_ID, STATUS_CODE);
alter table IL_DOC_STATUS_SETUP_T
  add constraint FK_IL_DOC_STATUS_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_COST_CENTER_SETUP_T
prompt =====================================
prompt
create table TK_COST_CENTER_SETUP_T
(
  org_id                  NUMBER not null,
  cost_center_code        VARCHAR2(10) not null,
  cost_center_description VARCHAR2(200),
  auto_tag                VARCHAR2(1),
  active                  VARCHAR2(1),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE
)
;
alter table TK_COST_CENTER_SETUP_T
  add constraint TK_COST_CENTER_SETUP_T_PK primary key (ORG_ID, COST_CENTER_CODE);

prompt
prompt Creating table GLAS_SUB_PRODUCT_SETUP_T
prompt =======================================
prompt
create table GLAS_SUB_PRODUCT_SETUP_T
(
  org_id                       NUMBER not null,
  main_product_code            NUMBER not null,
  sub_product_code             NUMBER not null,
  description                  VARCHAR2(200),
  short_desc                   VARCHAR2(50),
  nature_code                  NUMBER,
  reinsurer_code               NUMBER,
  reinsurer_type               NUMBER,
  reinsurer_sub_code           NUMBER,
  reinsurer_effective_date     DATE,
  start_sq_policy              NUMBER,
  start_sq_claim               NUMBER,
  created_by                   VARCHAR2(50),
  creation_date                DATE,
  last_updated_by              VARCHAR2(50),
  last_update_date             DATE,
  active                       VARCHAR2(1),
  sum_covered_index            NUMBER(15,2),
  contribution_index           NUMBER(15,2),
  cont_margin                  NUMBER(9,6),
  last_age_index               NUMBER(3),
  waqala_fee                   NUMBER(15,2),
  expected_claim               NUMBER(15,2),
  wakala_fees                  NUMBER(15,2),
  application_id               NUMBER,
  min_premium                  NUMBER,
  min_no_of_insured            NUMBER,
  default_commission_rate      NUMBER,
  starting_sequence_no         NUMBER,
  default_renewal_days         NUMBER,
  cost_center_code             VARCHAR2(50),
  profit_center_code           VARCHAR2(50),
  policy_cancellation          VARCHAR2(1),
  age_basis                    VARCHAR2(20),
  investment_income            NUMBER,
  max_maturity_age             NUMBER,
  beneficiary_tag              VARCHAR2(1),
  rate_rounding                NUMBER,
  calculation_age_type         VARCHAR2(1),
  product_type_il              NUMBER,
  min_contribution             NUMBER,
  bid_offer                    NUMBER,
  cbc_tag                      VARCHAR2(1),
  treaty_type                  VARCHAR2(10),
  treaty_code                  NUMBER,
  treaty_detail_code           NUMBER,
  contribution_type_il         NUMBER,
  ptf_rate                     NUMBER,
  pia_rate                     NUMBER,
  allocation_notes             VARCHAR2(500),
  allow_reverse_calc           VARCHAR2(20),
  offer_spread_rate            NUMBER,
  validity_days                NUMBER,
  topup_allocation             NUMBER,
  pay_term                     VARCHAR2(5),
  max_contribution_adhoc       NUMBER,
  min_contribution_adhoc       NUMBER,
  auto_calculation_tag         VARCHAR2(10),
  max_partial_surrender        NUMBER,
  min_residual_value           NUMBER,
  other_lang_desc              NVARCHAR2(200),
  welcome_text                 VARCHAR2(2000),
  welcome_text_other_lang      NVARCHAR2(2000),
  anf_months_after_comm        NUMBER,
  anf_valid_months             NUMBER,
  non_payment_status           NUMBER,
  lapse_reinstate_years        NUMBER,
  surrender_processing_fee     NUMBER,
  indexation_on                VARCHAR2(1),
  fund_switch_charges          NUMBER,
  days_renew_intimation_before NUMBER,
  days_renew_intimation_after  NUMBER,
  lapse_charges_months         NUMBER,
  duplicate_pmd_charges        NUMBER,
  credit_shield                VARCHAR2(1),
  zakat_refund_days            NUMBER,
  auto_renewal_topup_tag       CHAR(1),
  lapse_days_no                NUMBER,
  fund_required                VARCHAR2(1),
  flp_days                     NUMBER,
  input_basis                  VARCHAR2(1),
  illustration_details_bases   VARCHAR2(10),
  auto_underwriting_tag        VARCHAR2(1),
  discounting_factor           NUMBER,
  second_life                  VARCHAR2(1),
  product_category             NUMBER,
  tabarru_calc_type            VARCHAR2(3),
  bid_offer_price_same         VARCHAR2(1),
  need_analysis_reqd           VARCHAR2(1),
  bundle_at_issue              NUMBER,
  duplicate_bundle             NUMBER,
  expected_comm_days           NUMBER,
  score_from                   NUMBER,
  score_to                     NUMBER,
  cnic_expiry_days             NUMBER,
  otp_mandatory                VARCHAR2(1),
  claim_lag_days               NUMBER
)
;
alter table GLAS_SUB_PRODUCT_SETUP_T
  add constraint PK_SUB_PR_SETUP primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);
alter table GLAS_SUB_PRODUCT_SETUP_T
  add constraint FK_DOC_STATUS_ANF_PROD foreign key (ORG_ID, NON_PAYMENT_STATUS)
  references IL_DOC_STATUS_SETUP_T (ORG_ID, STATUS_CODE);
alter table GLAS_SUB_PRODUCT_SETUP_T
  add constraint FK_PROD_CC foreign key (ORG_ID, COST_CENTER_CODE)
  references TK_COST_CENTER_SETUP_T (ORG_ID, COST_CENTER_CODE);
alter table GLAS_SUB_PRODUCT_SETUP_T
  add constraint FK_SUB_PR_SETUP_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_DOC_HEADER_T
prompt ==============================
prompt
create table TK_DOC_HEADER_T
(
  org_id                      NUMBER not null,
  branch_id                   NUMBER not null,
  product_code                NUMBER not null,
  sub_product_code            NUMBER not null,
  takaful_type                VARCHAR2(1) not null,
  document_type               VARCHAR2(1) not null,
  document_no                 VARCHAR2(10) not null,
  record_type                 VARCHAR2(1) not null,
  document_year               VARCHAR2(10) not null,
  issue_count                 NUMBER not null,
  endorsement_no              NUMBER not null,
  application_id              NUMBER not null,
  gdh_doc_reference_no        VARCHAR2(50),
  pps_party_code              NUMBER,
  pps_folio_code              VARCHAR2(20),
  gdh_issue_date              DATE,
  gdh_comm_date               DATE,
  gdh_expiry_date             DATE,
  gdh_sum_insured             NUMBER(15,2),
  gdh_gross_premium           NUMBER(15,2),
  gdh_net_premium             NUMBER(15,2),
  gdh_policycharges           NUMBER(15,2),
  creation_date               DATE,
  created_by                  VARCHAR2(50),
  last_update_date            DATE,
  last_updated_by             VARCHAR2(50),
  remarks                     VARCHAR2(500),
  member_id_type              VARCHAR2(10),
  premium_basis               VARCHAR2(3),
  producer_code               NUMBER,
  currency_code               VARCHAR2(10),
  payment_mode                VARCHAR2(10),
  payer_type                  VARCHAR2(10),
  rate_based_on               VARCHAR2(10),
  data_type                   VARCHAR2(10),
  member_id_label             VARCHAR2(100),
  wakala_fee                  NUMBER(15,2),
  loading_ovrd_rate           NUMBER(9,6),
  loading_rate                NUMBER(9,6),
  policy_fee                  NUMBER(15,2),
  overriding_rate             NUMBER(9,6),
  exchange_rate               NUMBER(9,6),
  next_due_date               DATE,
  quotation_date              DATE,
  sub_document_no             NUMBER,
  standard_treaty             VARCHAR2(10),
  post_date                   DATE,
  posting_tag                 VARCHAR2(1),
  post_user                   VARCHAR2(50),
  name1                       VARCHAR2(50),
  name2                       VARCHAR2(50),
  dob1                        DATE,
  dob2                        DATE,
  age1                        NUMBER(3),
  age2                        NUMBER(3),
  gender1                     VARCHAR2(1),
  gender2                     VARCHAR2(1),
  policy_term                 NUMBER(3),
  sum_covered                 NUMBER(15,2),
  sum_covered_index           NUMBER(15,2),
  contribution_index          NUMBER(15,2),
  basic_contribution          NUMBER(15,2),
  gross_contribution          NUMBER(15,2),
  net_contribution            NUMBER(15,2),
  cover_multiple              NUMBER(3),
  cont_margin                 NUMBER(9,6),
  last_age_index              NUMBER(3),
  waqala_fee                  NUMBER(15,2),
  expected_claim              NUMBER(15,2),
  investment_income           NUMBER(15,2),
  second_life                 VARCHAR2(1),
  bid_offer                   NUMBER(15,2),
  issue_date                  DATE,
  comm_date                   DATE,
  expiry_date                 DATE,
  quotation_ref_no            VARCHAR2(50),
  proposal_date               DATE,
  occupational_class          VARCHAR2(5),
  revised_tag                 VARCHAR2(1),
  convert_tag                 VARCHAR2(1),
  specialdiscount             NUMBER,
  specialdiscountamount       NUMBER,
  advance_amount              NUMBER,
  cover_type                  VARCHAR2(10),
  base_doc_no                 VARCHAR2(50),
  max_age_limit               NUMBER,
  period_type                 VARCHAR2(10),
  document_days               NUMBER,
  converted_policy_no         VARCHAR2(50),
  conert_proposal             VARCHAR2(1),
  ifrs_date                   DATE,
  alteration_type             VARCHAR2(10),
  alteration_date             DATE,
  class_load_basis            VARCHAR2(1),
  cost_center_code            VARCHAR2(10),
  knockoff_amount             NUMBER,
  master_ref_no               VARCHAR2(500),
  receivable_from             VARCHAR2(10),
  retakaful_contribution      NUMBER,
  alteration_issue_date       DATE,
  retakaful_sa                NUMBER,
  discount_pct_no_wakala      NUMBER,
  discount_amount_no_wakala   NUMBER,
  policy_renewal_reference_no VARCHAR2(50),
  org_branch_id               VARCHAR2(50),
  is_renewal_document         VARCHAR2(10),
  business_type               VARCHAR2(1),
  lock_tag                    VARCHAR2(5),
  lock_user                   VARCHAR2(50),
  lock_date                   DATE,
  approve_tag                 VARCHAR2(5),
  approval_comments           VARCHAR2(500),
  aml_risk_profile            VARCHAR2(1),
  max_child                   NUMBER,
  max_maternity               NUMBER,
  is_branch_wise_discount     VARCHAR2(5),
  process_pending_tag         VARCHAR2(1),
  commission_amount           NUMBER
)
;
alter table TK_DOC_HEADER_T
  add constraint PK_DOC_HEADER primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);
alter table TK_DOC_HEADER_T
  add constraint FK_DOCH_CLIENT foreign key (ORG_ID, PPS_PARTY_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);
alter table TK_DOC_HEADER_T
  add constraint FK_DOCH_SUB_PRODUCT foreign key (ORG_ID, PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);
alter table TK_DOC_HEADER_T
  add constraint FK_TK_DOC_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table CL_DOC_CLAIM_INSURED_ITEMS_T
prompt ===========================================
prompt
create table CL_DOC_CLAIM_INSURED_ITEMS_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  product_code       NUMBER not null,
  sub_product_code   NUMBER not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  issue_count        NUMBER not null,
  endorsement_no     NUMBER not null,
  application_id     NUMBER not null,
  item_no            NUMBER not null,
  item_type          VARCHAR2(1),
  item_name          VARCHAR2(50),
  first_name         VARCHAR2(50),
  father_name        VARCHAR2(50),
  last_name          VARCHAR2(50),
  gender             VARCHAR2(1),
  nationality_code   NUMBER,
  date_of_birth      DATE,
  joining_date       DATE,
  effective_date     DATE,
  designation_code   NUMBER,
  category_code      NUMBER,
  salary             NUMBER,
  sum_insured        NUMBER,
  item_branch_id     NUMBER,
  life_class         NUMBER,
  accidental_class   NUMBER,
  account_no         NUMBER,
  loan_period        NUMBER,
  personal_id        VARCHAR2(50),
  remarks            VARCHAR2(500),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  height             NUMBER,
  weight             NUMBER,
  bmi                NUMBER,
  smoker_type        VARCHAR2(1),
  over_age_tag       VARCHAR2(1),
  below_age_tag      VARCHAR2(1),
  over_fcl_tag       VARCHAR2(1),
  below_fcl_tag      VARCHAR2(1),
  fcl                NUMBER(15,2),
  decision_type      NUMBER,
  basic_contribution NUMBER(15,2),
  gross_contribution NUMBER(15,2),
  sum_assured        NUMBER(15,2),
  retirement_date    DATE,
  age                NUMBER(3)
)
;
alter table CL_DOC_CLAIM_INSURED_ITEMS_T
  add constraint PK_DOC_CL_INS_ITEMS primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO);
alter table CL_DOC_CLAIM_INSURED_ITEMS_T
  add constraint FK_DOC_CL_INS_ITEMS_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table CL_DOC_CLAIM_IN_BENEFIT_T
prompt ========================================
prompt
create table CL_DOC_CLAIM_IN_BENEFIT_T
(
  org_id             VARCHAR2(10) not null,
  branch_id          VARCHAR2(10) not null,
  product_code       VARCHAR2(10) not null,
  sub_product_code   VARCHAR2(10) not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  item_no            NUMBER not null,
  benefit_code       NUMBER not null,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  sum_assured        NUMBER(15,2),
  basic_contribution NUMBER(15,2),
  gross_contribution NUMBER(15,2),
  calculated_sa      NUMBER(15,2)
)
;
alter table CL_DOC_CLAIM_IN_BENEFIT_T
  add constraint PK_DOC_CL_INS_BENEFIT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ITEM_NO, BENEFIT_CODE);

prompt
prompt Creating table COA_DIMENSION_MAPPING_T
prompt ======================================
prompt
create table COA_DIMENSION_MAPPING_T
(
  org_id           NUMBER not null,
  coa_code         VARCHAR2(10) not null,
  coa_d_m_id       NUMBER not null,
  dimension_id     NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table COA_DIMENSION_MAPPING_T
  add constraint PK_COA_D_M_T primary key (ORG_ID, COA_CODE, COA_D_M_ID);

prompt
prompt Creating table COA_LEVEL_DEFINITION_T
prompt =====================================
prompt
create table COA_LEVEL_DEFINITION_T
(
  org_id            NUMBER not null,
  level_id          NUMBER not null,
  level_description VARCHAR2(250),
  level_length      NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table COA_LEVEL_DEFINITION_T
  add constraint PK_COA_LEVEL_DEFINITION primary key (ORG_ID, LEVEL_ID);

prompt
prompt Creating table COMM_CYCLE_HEADER_T
prompt ==================================
prompt
create table COMM_CYCLE_HEADER_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  batch_no         NUMBER not null,
  batch_date       DATE,
  from_date        DATE,
  to_date          DATE,
  lock_flag        NVARCHAR2(20),
  comments         VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  description      VARCHAR2(500),
  posted_user_name VARCHAR2(50),
  post_date        DATE,
  post_flag        VARCHAR2(20),
  batch_name       VARCHAR2(100)
)
;
alter table COMM_CYCLE_HEADER_T
  add constraint COMM_CYCLE_HEADER_PK primary key (ORG_ID, BRANCH_ID, BATCH_NO);

prompt
prompt Creating table COMM_CYCLE_DETAIL_T
prompt ==================================
prompt
create table COMM_CYCLE_DETAIL_T
(
  s_no                 NUMBER not null,
  org_id               NUMBER not null,
  branch_id            NUMBER not null,
  batch_no             NUMBER not null,
  serial_no            NUMBER,
  commission_cycle_id  NUMBER,
  product_code         NUMBER,
  sub_product_code     NUMBER,
  takaful_type         VARCHAR2(1),
  document_type        VARCHAR2(1),
  document_no          VARCHAR2(10),
  record_type          VARCHAR2(1),
  document_year        VARCHAR2(10),
  issue_count          NUMBER not null,
  endorsement_no       NUMBER not null,
  application_id       NUMBER not null,
  gdh_doc_reference_no VARCHAR2(50),
  agent_code           NUMBER,
  commission_rate      NUMBER(9,6),
  commission_flat_amt  NUMBER(15,2),
  commission_amount    NUMBER(15,2),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  agency_type          VARCHAR2(20),
  received_amount      NUMBER,
  comm_payble          NUMBER,
  comm_settled         NUMBER,
  comm_pending         NUMBER,
  payment_amount       NUMBER,
  gross_contribution   NUMBER,
  installment_no       NUMBER
)
;
alter table COMM_CYCLE_DETAIL_T
  add constraint COMM_CYCLE_DETAIL_PK primary key (ORG_ID, BRANCH_ID, BATCH_NO, S_NO);
alter table COMM_CYCLE_DETAIL_T
  add constraint FK_COMM_CYCLE_HEADER foreign key (ORG_ID, BRANCH_ID, BATCH_NO)
  references COMM_CYCLE_HEADER_T (ORG_ID, BRANCH_ID, BATCH_NO);

prompt
prompt Creating table COMM_CYCLE_PROC_HOLD_HISTORY_T
prompt =============================================
prompt
create table COMM_CYCLE_PROC_HOLD_HISTORY_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  s_no                NUMBER not null,
  serial_no           NUMBER not null,
  commission_cycle_id NUMBER not null,
  product_code        NUMBER not null,
  sub_product_code    NUMBER not null,
  takaful_type        VARCHAR2(1) not null,
  document_type       VARCHAR2(1) not null,
  document_no         VARCHAR2(10) not null,
  record_type         VARCHAR2(1) not null,
  document_year       VARCHAR2(10) not null,
  issue_count         NUMBER not null,
  endorsement_no      NUMBER not null,
  application_id      NUMBER not null,
  installment_no      NUMBER,
  action_type         VARCHAR2(20),
  hold_action         VARCHAR2(1),
  action_by           VARCHAR2(50),
  action_date         DATE,
  action_comments     VARCHAR2(500)
)
;
alter table COMM_CYCLE_PROC_HOLD_HISTORY_T
  add constraint PK_COMM_CYCLE_HOLD_HISTORY primary key (ORG_ID, BRANCH_ID, S_NO, SERIAL_NO, COMMISSION_CYCLE_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table COUNTRY
prompt ======================
prompt
create table COUNTRY
(
  country_code     VARCHAR2(20) not null,
  country_desc     VARCHAR2(200),
  sec_active_flag  VARCHAR2(3),
  country_prefix   VARCHAR2(10),
  cik_label        NVARCHAR2(30),
  structure_code   NVARCHAR2(20),
  country_oder     NUMBER,
  pf_tabs_allow    VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  default_currency VARCHAR2(50),
  region           VARCHAR2(10),
  market_type      VARCHAR2(20),
  dialing_code     NUMBER,
  phone_no_length  NUMBER
)
;
create index IDX_COUNTRY on COUNTRY (COUNTRY_CODE, COUNTRY_DESC);
alter table COUNTRY
  add primary key (COUNTRY_CODE);

prompt
prompt Creating table COUNTRY_STATE_T
prompt ==============================
prompt
create table COUNTRY_STATE_T
(
  country_code     VARCHAR2(20) not null,
  state_code       NUMBER not null,
  state_name       VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  active           VARCHAR2(1),
  short_code       VARCHAR2(5)
)
;
alter table COUNTRY_STATE_T
  add constraint PK_COUNTRY_STATE_T primary key (COUNTRY_CODE, STATE_CODE);
alter table COUNTRY_STATE_T
  add constraint FK_COUNTRY_STATE foreign key (COUNTRY_CODE)
  references COUNTRY (COUNTRY_CODE);

prompt
prompt Creating table COUNTRY_CITY_T
prompt =============================
prompt
create table COUNTRY_CITY_T
(
  country_code     VARCHAR2(20) not null,
  state_code       NUMBER not null,
  city_code        NUMBER not null,
  city_name        VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  active           VARCHAR2(1),
  service_provider VARCHAR2(100)
)
;
alter table COUNTRY_CITY_T
  add constraint PK_COUNTRY_CITY_T primary key (COUNTRY_CODE, STATE_CODE, CITY_CODE);
alter table COUNTRY_CITY_T
  add constraint FK_STATE_CITY foreign key (COUNTRY_CODE, STATE_CODE)
  references COUNTRY_STATE_T (COUNTRY_CODE, STATE_CODE);

prompt
prompt Creating table COURIER_MESSAGES_T
prompt =================================
prompt
create table COURIER_MESSAGES_T
(
  message_id        NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  ref_no            VARCHAR2(100),
  hold_tag          VARCHAR2(1),
  group_code        NUMBER,
  category_code     NUMBER,
  event_code        NUMBER,
  template_id       NUMBER,
  other_lang_tag    VARCHAR2(1),
  org_id            NUMBER,
  effective_date    DATE,
  attachment_path   VARCHAR2(500),
  rpt_generated_tag VARCHAR2(1),
  rpt_parameters    VARCHAR2(1000),
  day_end_date      DATE
)
;
alter table COURIER_MESSAGES_T
  add constraint PK_COURIER_MESSAGES primary key (MESSAGE_ID);

prompt
prompt Creating table CURRENCY_RATES_HISTORY_T
prompt =======================================
prompt
create table CURRENCY_RATES_HISTORY_T
(
  currency_date VARCHAR2(15) not null,
  currency_code VARCHAR2(50) not null,
  currency_name VARCHAR2(500),
  unit_per_usd  VARCHAR2(50),
  usd_per_unit  VARCHAR2(50),
  base_currency VARCHAR2(20) not null
)
;
alter table CURRENCY_RATES_HISTORY_T
  add constraint PK_CURRENCY_RATE primary key (BASE_CURRENCY, CURRENCY_DATE, CURRENCY_CODE);

prompt
prompt Creating table CURRENCY_SETUP_T
prompt ===============================
prompt
create table CURRENCY_SETUP_T
(
  currency_code      VARCHAR2(50),
  currency_name      VARCHAR2(500),
  base_currency_flag VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table CURRENCY_SETUP_T
  add constraint CURRENCY_SETUP_T_U01 unique (CURRENCY_CODE);

prompt
prompt Creating table DIGITAL_PROPOSAL_T
prompt =================================
prompt
create table DIGITAL_PROPOSAL_T
(
  org_id                   NUMBER not null,
  header_id                NUMBER not null,
  cnic_no                  VARCHAR2(25),
  issuance_date            DATE,
  expiry_date              DATE,
  full_name                VARCHAR2(100),
  date_of_birth            DATE,
  father_name              VARCHAR2(100),
  mother_name              VARCHAR2(100),
  birth_place              VARCHAR2(100),
  correspondence_address   VARCHAR2(250),
  country                  VARCHAR2(100),
  city                     VARCHAR2(100),
  district                 VARCHAR2(100),
  other_nationality        VARCHAR2(100),
  email_address            VARCHAR2(100),
  mobile_no                VARCHAR2(25),
  whatsapp_no              VARCHAR2(25),
  nominee_full_name_1      VARCHAR2(100),
  nominee_relationship_1   VARCHAR2(10),
  nominee_full_name_2      VARCHAR2(100),
  nominee_relationship_2   VARCHAR2(10),
  div_name                 VARCHAR2(25),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  payment_mode             VARCHAR2(1),
  policy_term              NUMBER,
  payment_term             NUMBER,
  partner_id               NUMBER,
  channel_id               NUMBER,
  model_id                 NUMBER,
  agent_id                 NUMBER,
  partner_branch_id        NUMBER,
  title_code               NUMBER,
  basic_contribution_modal NUMBER,
  comm_date                DATE,
  no_of_person             NUMBER,
  cover_multiple           NUMBER,
  contribution_indexation  NUMBER,
  sum_covered_indexation   NUMBER,
  total_contribution_modal NUMBER,
  state                    VARCHAR2(100),
  main_product_code        NUMBER,
  sub_product_code         NUMBER,
  branch_id                NUMBER,
  application_id           NUMBER,
  sum_covered              NUMBER,
  sum_covered_modal        NUMBER,
  basic_contribution       NUMBER,
  illustration_no          VARCHAR2(50),
  proposal_no              VARCHAR2(50),
  status                   VARCHAR2(10),
  package_id               NUMBER
)
;
alter table DIGITAL_PROPOSAL_T
  add constraint PK_DIGITAL_PROPOSAL_T primary key (ORG_ID, HEADER_ID);

prompt
prompt Creating table DIMENSION_SETUP_T
prompt ================================
prompt
create table DIMENSION_SETUP_T
(
  org_id           NUMBER not null,
  dimension_id     NUMBER not null,
  dimension_name   VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  mandatory_tag    VARCHAR2(2)
)
;
alter table DIMENSION_SETUP_T
  add constraint PK_DIMENSION_T primary key (ORG_ID, DIMENSION_ID);

prompt
prompt Creating table DOCUMENT_APPROVAL_SETUP_T
prompt ========================================
prompt
create table DOCUMENT_APPROVAL_SETUP_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  approval_order   NUMBER not null,
  document_type    VARCHAR2(2) not null,
  approver         VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table DOCUMENT_APPROVAL_SETUP_T
  add primary key (ORG_ID, APPLICATION_ID, APPROVAL_ORDER, DOCUMENT_TYPE);

prompt
prompt Creating table DOCUMENT_TYPE_SETUP_T
prompt ====================================
prompt
create table DOCUMENT_TYPE_SETUP_T
(
  org_id           NUMBER not null,
  document_type    VARCHAR2(1) not null,
  description      VARCHAR2(50),
  active           VARCHAR2(1),
  creation_date    DATE,
  created_by       VARCHAR2(50),
  last_update_date DATE,
  last_updated_by  VARCHAR2(50),
  financial_tag    VARCHAR2(1)
)
;
alter table DOCUMENT_TYPE_SETUP_T
  add constraint PK_DOC_TYPE primary key (ORG_ID, DOCUMENT_TYPE);
alter table DOCUMENT_TYPE_SETUP_T
  add constraint FK_DOCTYPE_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table DOC_PRINTING_SETUP_T
prompt ===================================
prompt
create table DOC_PRINTING_SETUP_T
(
  org_id            NUMBER not null,
  doc_printing_code VARCHAR2(50) not null,
  doc_printing_desc VARCHAR2(50),
  active            VARCHAR2(20),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  template_name     VARCHAR2(500),
  application_id    VARCHAR2(20) not null,
  claim_tag         VARCHAR2(1),
  template_type     VARCHAR2(20),
  attachment        VARCHAR2(4000),
  show_after_lock   VARCHAR2(1),
  reprinting_tag    VARCHAR2(1)
)
;
alter table DOC_PRINTING_SETUP_T
  add constraint PK_DOC_PRINTING primary key (ORG_ID, DOC_PRINTING_CODE, APPLICATION_ID);

prompt
prompt Creating table DOC_PRINTING_DOC_MAPPING_T
prompt =========================================
prompt
create table DOC_PRINTING_DOC_MAPPING_T
(
  org_id            NUMBER not null,
  doc_printing_code VARCHAR2(50) not null,
  doctype_code      VARCHAR2(50) not null,
  active            VARCHAR2(20),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  person_name       VARCHAR2(50),
  designation       VARCHAR2(50),
  application_id    VARCHAR2(20) not null
)
;
alter table DOC_PRINTING_DOC_MAPPING_T
  add constraint PK_DOC_PRINTING_DOC primary key (ORG_ID, DOC_PRINTING_CODE, DOCTYPE_CODE, APPLICATION_ID);
alter table DOC_PRINTING_DOC_MAPPING_T
  add constraint FK_DOC_HEADER foreign key (ORG_ID, DOC_PRINTING_CODE, APPLICATION_ID)
  references DOC_PRINTING_SETUP_T (ORG_ID, DOC_PRINTING_CODE, APPLICATION_ID);

prompt
prompt Creating table DOC_PRINTING_PARAMETER_T
prompt =======================================
prompt
create table DOC_PRINTING_PARAMETER_T
(
  org_id            NUMBER not null,
  doc_printing_code VARCHAR2(50) not null,
  serial_no         NUMBER not null,
  db_column_name    VARCHAR2(50),
  active            VARCHAR2(20),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  application_id    VARCHAR2(20) not null
)
;
alter table DOC_PRINTING_PARAMETER_T
  add constraint PK_DOC_PRINTING_PARA_DOC primary key (ORG_ID, DOC_PRINTING_CODE, SERIAL_NO, APPLICATION_ID);
alter table DOC_PRINTING_PARAMETER_T
  add constraint FK_DOC_PRINTING_HEADER foreign key (ORG_ID, DOC_PRINTING_CODE, APPLICATION_ID)
  references DOC_PRINTING_SETUP_T (ORG_ID, DOC_PRINTING_CODE, APPLICATION_ID);

prompt
prompt Creating table DOC_PRINTING_SUB_PRODUCT_MAP_T
prompt =============================================
prompt
create table DOC_PRINTING_SUB_PRODUCT_MAP_T
(
  org_id               NUMBER not null,
  application_id       NUMBER not null,
  main_product_code    NUMBER,
  sub_product_code     NUMBER,
  sub_product_map_code NUMBER not null,
  doc_printing_code    NUMBER not null,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table DOC_PRINTING_SUB_PRODUCT_MAP_T
  add primary key (SUB_PRODUCT_MAP_CODE, DOC_PRINTING_CODE, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table DOC_REF_FORMAT_DTL_T
prompt ===================================
prompt
create table DOC_REF_FORMAT_DTL_T
(
  org_id           NUMBER not null,
  doc_ref_id       NUMBER not null,
  app_id           NUMBER,
  expression_type  VARCHAR2(20),
  expression_value VARCHAR2(500),
  display_order    NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  code             VARCHAR2(20),
  column_id        VARCHAR2(50)
)
;
alter table DOC_REF_FORMAT_DTL_T
  add constraint PK_DOC_REF_FORMAT_T primary key (ORG_ID, DOC_REF_ID);

prompt
prompt Creating table DOC_REF_FORMAT_HD_T
prompt ==================================
prompt
create table DOC_REF_FORMAT_HD_T
(
  code             VARCHAR2(20) not null,
  org_id           NUMBER not null,
  app_id           NUMBER,
  description      VARCHAR2(200),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  tablename        VARCHAR2(50)
)
;
alter table DOC_REF_FORMAT_HD_T
  add constraint PK_DOC_REF_FORMAT_HD_T primary key (CODE, ORG_ID);

prompt
prompt Creating table MESSAGE_STATUS_SETUP_T
prompt =====================================
prompt
create table MESSAGE_STATUS_SETUP_T
(
  status_id          NUMBER not null,
  status_description VARCHAR2(50),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table MESSAGE_STATUS_SETUP_T
  add constraint PK_MSG_STATUS primary key (STATUS_ID);

prompt
prompt Creating table SM_EMAIL_TYPES_T
prompt ===============================
prompt
create table SM_EMAIL_TYPES_T
(
  type_id     NUMBER not null,
  type_name   VARCHAR2(50),
  email       VARCHAR2(50),
  email_pwd   VARCHAR2(500),
  smtp_server VARCHAR2(150),
  smtp_port   NUMBER,
  email_to    VARCHAR2(500),
  email_bcc   VARCHAR2(500),
  email_cc    VARCHAR2(500)
)
;
alter table SM_EMAIL_TYPES_T
  add constraint PK_SM_EMAIL_TYPES primary key (TYPE_ID);

prompt
prompt Creating table EMAIL_MESSAGES_T
prompt ===============================
prompt
create table EMAIL_MESSAGES_T
(
  message_id        NUMBER not null,
  message_text      VARCHAR2(4000),
  status_id         NUMBER,
  retry_count       NUMBER,
  reason            VARCHAR2(2000),
  subject           VARCHAR2(500),
  fromemail         VARCHAR2(300),
  toemail           VARCHAR2(300),
  bccemail          VARCHAR2(400),
  email_type_id     NUMBER,
  email_cc          VARCHAR2(300),
  email_bcc         VARCHAR2(300),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  ref_no            VARCHAR2(100),
  hold_tag          VARCHAR2(1),
  group_code        NUMBER,
  category_code     NUMBER,
  event_code        NUMBER,
  template_id       NUMBER,
  other_lang_tag    VARCHAR2(1),
  org_id            NUMBER,
  effective_date    DATE,
  attachment_path   VARCHAR2(500),
  rpt_generated_tag VARCHAR2(1),
  rpt_parameters    VARCHAR2(1000),
  day_end_date      DATE,
  reject_tag        VARCHAR2(1),
  rejected_by       VARCHAR2(50),
  reject_date       DATE
)
;
alter table EMAIL_MESSAGES_T
  add constraint PK_EMAIL_MESSAGES primary key (MESSAGE_ID);
alter table EMAIL_MESSAGES_T
  add constraint FK_EMAIL_MSG_EMAIL_TYPE_MSG foreign key (EMAIL_TYPE_ID)
  references SM_EMAIL_TYPES_T (TYPE_ID);
alter table EMAIL_MESSAGES_T
  add constraint FK_EMAIL_MSG_STATUS_MSG foreign key (STATUS_ID)
  references MESSAGE_STATUS_SETUP_T (STATUS_ID);

prompt
prompt Creating table MESSAGE_TYPE_SETUP_T
prompt ===================================
prompt
create table MESSAGE_TYPE_SETUP_T
(
  message_type_id          NUMBER not null,
  message_type_description VARCHAR2(50),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE
)
;
alter table MESSAGE_TYPE_SETUP_T
  add constraint PK_MSG_TYPE primary key (MESSAGE_TYPE_ID);

prompt
prompt Creating table EMAIL_TEMPLATES_T
prompt ================================
prompt
create table EMAIL_TEMPLATES_T
(
  template_id              NUMBER not null,
  template_name            VARCHAR2(50),
  template_subject         VARCHAR2(500),
  template_body            VARCHAR2(2500),
  creation_date            DATE,
  created_by               VARCHAR2(50),
  last_update_date         DATE,
  last_updated_by          VARCHAR2(50),
  application_id           NUMBER,
  template_type_id         NUMBER,
  template_body_other_lang NVARCHAR2(2000),
  org_id                   NUMBER
)
;
alter table EMAIL_TEMPLATES_T
  add constraint PK_EMAIL_TEMPLATES_T primary key (TEMPLATE_ID);
alter table EMAIL_TEMPLATES_T
  add constraint FK_EMAIL_MSG_TYPE foreign key (TEMPLATE_TYPE_ID)
  references MESSAGE_TYPE_SETUP_T (MESSAGE_TYPE_ID);

prompt
prompt Creating table EMAIL_TEMPLATES_T_04092024
prompt =========================================
prompt
create table EMAIL_TEMPLATES_T_04092024
(
  template_id              NUMBER,
  template_name            VARCHAR2(50),
  template_subject         VARCHAR2(500),
  template_body            VARCHAR2(2500),
  creation_date            DATE,
  created_by               VARCHAR2(50),
  last_update_date         DATE,
  last_updated_by          VARCHAR2(50),
  application_id           NUMBER,
  template_type_id         NUMBER,
  template_body_other_lang NVARCHAR2(2000),
  org_id                   NUMBER
)
;

prompt
prompt Creating table EMPLOYEE_ATTACHMENT_T
prompt ====================================
prompt
create table EMPLOYEE_ATTACHMENT_T
(
  org_id           NUMBER not null,
  employeeid       NUMBER not null,
  attachment_code  NUMBER not null,
  file_path        VARCHAR2(300),
  attachment_type  VARCHAR2(1),
  attachment_desc  VARCHAR2(200),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table EMPLOYEE_ATTACHMENT_T
  add constraint PK_EMPLOYEE_ATTACHMENT_T primary key (ORG_ID, EMPLOYEEID, ATTACHMENT_CODE);

prompt
prompt Creating table EMPLOYMENT_CLASS_T
prompt =================================
prompt
create table EMPLOYMENT_CLASS_T
(
  org_id              NUMBER not null,
  employment_class_id NUMBER not null,
  employment_class    VARCHAR2(1),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE
)
;
alter table EMPLOYMENT_CLASS_T
  add constraint PK_EMPLOYMENT_CLASS_T primary key (ORG_ID, EMPLOYMENT_CLASS_ID);

prompt
prompt Creating table EMPLOYMENT_TYPE_T
prompt ================================
prompt
create table EMPLOYMENT_TYPE_T
(
  org_id              NUMBER not null,
  employment_class_id NUMBER not null,
  employment_type_id  NUMBER not null,
  employment_type     VARCHAR2(100),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE
)
;
alter table EMPLOYMENT_TYPE_T
  add constraint PK_EMPLOYMENT_TYPE_T primary key (ORG_ID, EMPLOYMENT_CLASS_ID, EMPLOYMENT_TYPE_ID);

prompt
prompt Creating table ENTITY_ADDRESS_T
prompt ===============================
prompt
create table ENTITY_ADDRESS_T
(
  entity_type      VARCHAR2(10) not null,
  entity_code      VARCHAR2(20) not null,
  address_type     VARCHAR2(20) not null,
  address1         VARCHAR2(1000),
  address2         VARCHAR2(100),
  city_code        VARCHAR2(10),
  state_code       VARCHAR2(10),
  country_code     VARCHAR2(10),
  zip_code         VARCHAR2(50),
  phone1           VARCHAR2(30),
  phone2           VARCHAR2(50),
  fax1             VARCHAR2(50),
  fax2             VARCHAR2(50),
  email            VARCHAR2(100),
  website          VARCHAR2(150),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  mobile_phone     NUMBER,
  home_phone       NUMBER,
  office_phone     NUMBER,
  house_no         VARCHAR2(50),
  unit_no          VARCHAR2(50),
  building         VARCHAR2(50),
  org_id           NUMBER not null,
  serial_no        NUMBER not null
)
;
alter table ENTITY_ADDRESS_T
  add constraint PK_ENTITY_ADDRESS_T primary key (ENTITY_TYPE, ENTITY_CODE, ADDRESS_TYPE, ORG_ID, SERIAL_NO);

prompt
prompt Creating table FINAL_SETTLEMENT_PROCESS_T
prompt =========================================
prompt
create table FINAL_SETTLEMENT_PROCESS_T
(
  employee_id          NUMBER,
  employee_name        VARCHAR2(200),
  notify_date          DATE,
  last_date            DATE,
  final_process_date   DATE,
  reason               NUMBER,
  remarks              VARCHAR2(200),
  eligible_for_rehire  VARCHAR2(1),
  add_by               NUMBER,
  add_date             DATE,
  edit_by              NUMBER,
  edit_date            DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  final_settlment_id   NUMBER not null,
  org_id               NUMBER not null,
  final_settlement_tag VARCHAR2(1),
  payperiodsdatesid    NUMBER,
  payrollcalanderid    NUMBER
)
;
alter table FINAL_SETTLEMENT_PROCESS_T
  add primary key (ORG_ID, FINAL_SETTLMENT_ID);

prompt
prompt Creating table FINANCIAL_PRIORITY_T
prompt ===================================
prompt
create table FINANCIAL_PRIORITY_T
(
  org_id              NUMBER not null,
  priority_id         NUMBER not null,
  description         VARCHAR2(200),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  other_language_desc NVARCHAR2(200)
)
;
alter table FINANCIAL_PRIORITY_T
  add constraint PK_FINANCIAL_PRIORITY_T primary key (ORG_ID, PRIORITY_ID);

prompt
prompt Creating table FINANCIAL_SETUP_T
prompt ================================
prompt
create table FINANCIAL_SETUP_T
(
  org_id           NUMBER not null,
  financial_id     NUMBER not null,
  description      VARCHAR2(200),
  financial_type   VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table FINANCIAL_SETUP_T
  add constraint PK_FINANCIAL_SETUP_T primary key (ORG_ID, FINANCIAL_ID);

prompt
prompt Creating table FUND_SETUP_T
prompt ===========================
prompt
create table FUND_SETUP_T
(
  org_id           NUMBER not null,
  fund_code        NUMBER not null,
  fund_desc        VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  maxrate          NUMBER,
  fund_type        VARCHAR2(1),
  launch_date      DATE,
  risk_profile     VARCHAR2(1),
  price_type       VARCHAR2(1),
  other_lang_desc  NVARCHAR2(500),
  abbreviation     VARCHAR2(10)
)
;
alter table FUND_SETUP_T
  add constraint PK_FUND_SETUP_T primary key (ORG_ID, FUND_CODE);

prompt
prompt Creating table FUND_SETUP_TEST_DETAIL_T
prompt =======================================
prompt
create table FUND_SETUP_TEST_DETAIL_T
(
  org_id             NUMBER not null,
  fund_t_code        NUMBER not null,
  fund_detail_t_code NUMBER not null,
  fund_detail_desc   VARCHAR2(50),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table FUND_SETUP_TEST_DETAIL_T
  add constraint PK_FUND_SETUP_TEST_DETAIL_T primary key (ORG_ID, FUND_T_CODE, FUND_DETAIL_T_CODE);

prompt
prompt Creating table FUND_SETUP_TEST_T
prompt ================================
prompt
create table FUND_SETUP_TEST_T
(
  org_id           NUMBER not null,
  fund_t_code      NUMBER not null,
  fund_t_desc      VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  maxrate          NUMBER,
  fund_type        VARCHAR2(1),
  launch_date      DATE,
  risk_profile     VARCHAR2(1),
  price_type       VARCHAR2(1),
  other_lang_desc  NVARCHAR2(500)
)
;
alter table FUND_SETUP_TEST_T
  add constraint PK_FUND_SETUP_TEST_T primary key (ORG_ID, FUND_T_CODE);

prompt
prompt Creating table GENERAL_PARAMETER
prompt ================================
prompt
create table GENERAL_PARAMETER
(
  code             INTEGER not null,
  description      NVARCHAR2(500),
  type             NVARCHAR2(100),
  active           INTEGER,
  fullname         NVARCHAR2(100),
  grp              NVARCHAR2(10),
  priority         INTEGER,
  rpt              NVARCHAR2(10),
  created_by       VARCHAR2(100),
  creation_date    DATE,
  last_updated_by  VARCHAR2(100),
  last_update_date DATE
)
;
alter table GENERAL_PARAMETER
  add constraint GENERAL_PARAMETER_PK primary key (CODE);

prompt
prompt Creating table SM_APPLICATION_SETUPHD_T
prompt =======================================
prompt
create table SM_APPLICATION_SETUPHD_T
(
  application_id   NUMBER(3) not null,
  application_desc VARCHAR2(200),
  app_short_code   VARCHAR2(200),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  branch_required  VARCHAR2(1),
  lob              VARCHAR2(3),
  otp_required     VARCHAR2(1)
)
;
alter table SM_APPLICATION_SETUPHD_T
  add constraint PK_APPHD primary key (APPLICATION_ID);

prompt
prompt Creating table GEN_PARAM_SETUPHD_T
prompt ==================================
prompt
create table GEN_PARAM_SETUPHD_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  setup_id         NUMBER not null,
  setup_name       VARCHAR2(200),
  active           VARCHAR2(1),
  setup_tablename  VARCHAR2(32),
  creation_date    DATE,
  created_by       VARCHAR2(50),
  last_update_date DATE,
  last_updated_by  VARCHAR2(50),
  setup_type       VARCHAR2(1)
)
;
alter table GEN_PARAM_SETUPHD_T
  add constraint PK_GEN_PARAM_NEW primary key (ORG_ID, APPLICATION_ID, SETUP_ID);
alter table GEN_PARAM_SETUPHD_T
  add constraint FK_PARAM_APP foreign key (APPLICATION_ID)
  references SM_APPLICATION_SETUPHD_T (APPLICATION_ID);
alter table GEN_PARAM_SETUPHD_T
  add constraint FK_PARAM_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GEN_PARAM_SETUP_DTL_T
prompt ====================================
prompt
create table GEN_PARAM_SETUP_DTL_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  setup_id         NUMBER not null,
  code             NUMBER not null,
  description      VARCHAR2(200),
  active           VARCHAR2(1),
  creation_date    DATE,
  created_by       VARCHAR2(50),
  last_update_date DATE,
  last_updated_by  VARCHAR2(50),
  abbreviation     VARCHAR2(20),
  default_tag      VARCHAR2(1),
  short_code       VARCHAR2(50),
  remarks          VARCHAR2(300),
  display_order    NUMBER,
  mandatory_tag    VARCHAR2(5),
  defaul_tag       VARCHAR2(1)
)
;
alter table GEN_PARAM_SETUP_DTL_T
  add constraint PK_GEN_PARAM_DTL primary key (ORG_ID, APPLICATION_ID, SETUP_ID, CODE);
alter table GEN_PARAM_SETUP_DTL_T
  add constraint FK_PARAM_HD foreign key (ORG_ID, APPLICATION_ID, SETUP_ID)
  references GEN_PARAM_SETUPHD_T (ORG_ID, APPLICATION_ID, SETUP_ID);

prompt
prompt Creating table GEN_VARIABLE_SETUP_T
prompt ===================================
prompt
create table GEN_VARIABLE_SETUP_T
(
  org_id                NUMBER not null,
  variable_code         VARCHAR2(100) not null,
  variable_name         VARCHAR2(250),
  variable_query        VARCHAR2(4000),
  effective_start_date  DATE,
  effective_end_date    DATE,
  variable_type         VARCHAR2(10),
  variable_query_detail VARCHAR2(4000),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE
)
;
alter table GEN_VARIABLE_SETUP_T
  add constraint PK_GEN_VAR_SETUP primary key (ORG_ID, VARIABLE_CODE);
alter table GEN_VARIABLE_SETUP_T
  add constraint FK_GEN_VAR_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GHAS_BENEFIT_CONTRIBUTION_T
prompt ==========================================
prompt
create table GHAS_BENEFIT_CONTRIBUTION_T
(
  org_id                    NUMBER not null,
  branch_id                 NUMBER not null,
  product_code              NUMBER not null,
  sub_product_code          NUMBER not null,
  takaful_type              VARCHAR2(1) not null,
  document_type             VARCHAR2(1) not null,
  document_no               VARCHAR2(10) not null,
  record_type               VARCHAR2(1) not null,
  document_year             VARCHAR2(10) not null,
  issue_count               NUMBER not null,
  endorsement_no            NUMBER not null,
  application_id            NUMBER,
  plan_code                 NUMBER not null,
  gh_benefit_code           NUMBER not null,
  detail_code               NUMBER not null,
  age_from                  NUMBER,
  age_to                    NUMBER,
  gender                    VARCHAR2(10),
  relation                  NUMBER,
  ben_contribution          NUMBER,
  wakala_amount             NUMBER,
  commission_amount         NUMBER,
  gross_contribution_amount NUMBER,
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_updated_by           VARCHAR2(50),
  last_update_date          DATE
)
;
alter table GHAS_BENEFIT_CONTRIBUTION_T
  add constraint PK_GHAS_BENEFIT_CONTRIBUTION_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, PLAN_CODE, GH_BENEFIT_CODE, DETAIL_CODE);
alter table GHAS_BENEFIT_CONTRIBUTION_T
  add constraint FK_DOC_GH_DOC_BF_CONT_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GHAS_DOC_BENEFIT_FAM_LIMIT_T
prompt ===========================================
prompt
create table GHAS_DOC_BENEFIT_FAM_LIMIT_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  product_code      NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER,
  plan_code         NUMBER not null,
  gh_benefit_code   NUMBER not null,
  detail_code       NUMBER,
  relation_code     NUMBER not null,
  fam_benefit_limit NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GHAS_DOC_BENEFIT_FAM_LIMIT_T
  add constraint PK_GHAS_DOC_BEN_FM_LM_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, PLAN_CODE, GH_BENEFIT_CODE, RELATION_CODE);
alter table GHAS_DOC_BENEFIT_FAM_LIMIT_T
  add constraint FK_DOC_GH_DOC_BF_FAM_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GHAS_DOC_BENEFIT_T
prompt =================================
prompt
create table GHAS_DOC_BENEFIT_T
(
  org_id                         NUMBER not null,
  branch_id                      NUMBER not null,
  product_code                   NUMBER not null,
  sub_product_code               NUMBER not null,
  takaful_type                   VARCHAR2(1) not null,
  document_type                  VARCHAR2(1) not null,
  document_no                    VARCHAR2(10) not null,
  record_type                    VARCHAR2(1) not null,
  document_year                  VARCHAR2(10) not null,
  issue_count                    NUMBER not null,
  endorsement_no                 NUMBER not null,
  application_id                 NUMBER,
  plan_code                      NUMBER not null,
  gh_benefit_code                NUMBER not null,
  benefit_limit                  NUMBER,
  created_by                     VARCHAR2(50),
  creation_date                  DATE,
  last_updated_by                VARCHAR2(50),
  last_update_date               DATE,
  benefit_type                   VARCHAR2(50),
  wakala_percentage              NUMBER,
  commission_percentage          NUMBER,
  peril_limit                    NUMBER,
  deductable_percentage          NUMBER,
  ben_payment_basis              VARCHAR2(20),
  limit_type                     VARCHAR2(3),
  addition_charge_basis          VARCHAR2(20),
  deductable_type                VARCHAR2(10),
  deletion_refund_basis          VARCHAR2(20),
  addition_charge_basis_new_born VARCHAR2(20)
)
;
alter table GHAS_DOC_BENEFIT_T
  add constraint PK_GHAS_DOC_BENEFIT_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, PLAN_CODE, ENDORSEMENT_NO, GH_BENEFIT_CODE);
alter table GHAS_DOC_BENEFIT_T
  add constraint FK_DOC_GH_DOC_BF_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GHAS_DOC_BEN_AGE_LIMIT_T
prompt =======================================
prompt
create table GHAS_DOC_BEN_AGE_LIMIT_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER,
  plan_code        NUMBER not null,
  gh_benefit_code  NUMBER not null,
  detail_code      NUMBER not null,
  relation         NUMBER,
  gender           VARCHAR2(10),
  max_age          NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  min_age          NUMBER
)
;
alter table GHAS_DOC_BEN_AGE_LIMIT_T
  add constraint PK_GHAS_DOC_BEN_AGE_LIMIT_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, PLAN_CODE, GH_BENEFIT_CODE, DETAIL_CODE);
alter table GHAS_DOC_BEN_AGE_LIMIT_T
  add constraint FK_DOC_GH_DOC_BF_AGE_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GHAS_DOC_BEN_CONDITION_T
prompt =======================================
prompt
create table GHAS_DOC_BEN_CONDITION_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  plan_code        NUMBER not null,
  gh_benefit_code  NUMBER not null,
  cond_code        NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GHAS_DOC_BEN_CONDITION_T
  add constraint PK_DOC_BEN_CONDITION_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, PLAN_CODE, GH_BENEFIT_CODE, COND_CODE);

prompt
prompt Creating table GHAS_DOC_BEN_EXCLUSION_T
prompt =======================================
prompt
create table GHAS_DOC_BEN_EXCLUSION_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  plan_code        NUMBER not null,
  gh_benefit_code  NUMBER not null,
  exclusion_code   NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GHAS_DOC_BEN_EXCLUSION_T
  add constraint PK_DOC_BEN_EXCLUSION_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, PLAN_CODE, GH_BENEFIT_CODE, EXCLUSION_CODE);

prompt
prompt Creating table GHAS_DOC_PLANS_T
prompt ===============================
prompt
create table GHAS_DOC_PLANS_T
(
  org_id                     NUMBER not null,
  branch_id                  NUMBER not null,
  product_code               NUMBER not null,
  sub_product_code           NUMBER not null,
  takaful_type               VARCHAR2(1) not null,
  document_type              VARCHAR2(1) not null,
  document_no                VARCHAR2(10) not null,
  record_type                VARCHAR2(1) not null,
  document_year              VARCHAR2(10) not null,
  issue_count                NUMBER not null,
  endorsement_no             NUMBER not null,
  application_id             NUMBER not null,
  plan_code                  NUMBER not null,
  plan_description           VARCHAR2(200),
  active                     VARCHAR2(1),
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE,
  plan_limit                 NUMBER,
  relation_wise_contribution VARCHAR2(10),
  plan_summary               VARCHAR2(500)
)
;
alter table GHAS_DOC_PLANS_T
  add constraint PK_GHAS_DOC_PLANS_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, PLAN_CODE);
alter table GHAS_DOC_PLANS_T
  add constraint FK_DOC_PLANS_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GHAS_DOC_POOL_BEN_T
prompt ==================================
prompt
create table GHAS_DOC_POOL_BEN_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  product_code     VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  pool_code        NUMBER not null,
  benefit_code     NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GHAS_DOC_POOL_BEN_T
  add constraint PK_GHAS_DOC_POOL_BEN_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, POOL_CODE, BENEFIT_CODE);

prompt
prompt Creating table GHAS_DOC_POOL_DIST_T
prompt ===================================
prompt
create table GHAS_DOC_POOL_DIST_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  product_code       NUMBER not null,
  sub_product_code   NUMBER not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  issue_count        NUMBER not null,
  endorsement_no     NUMBER not null,
  application_id     NUMBER,
  pool_code          NUMBER not null,
  detail_code        NUMBER not null,
  pool_relation_code NUMBER,
  pool_benefit_limit NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GHAS_DOC_POOL_DIST_T
  add constraint PK_GHAS_DOC_POOL_DIST_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, ISSUE_COUNT, ENDORSEMENT_NO, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, POOL_CODE, DETAIL_CODE);
alter table GHAS_DOC_POOL_DIST_T
  add constraint FK_DOC_GH_DOC_POOL_DIST_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GHAS_DOC_POOL_LIMIT_T
prompt ====================================
prompt
create table GHAS_DOC_POOL_LIMIT_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  product_code     VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  pool_code        NUMBER not null,
  limit_type       VARCHAR2(20) not null,
  max_limit        NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GHAS_DOC_POOL_LIMIT_T
  add constraint PK_GHAS_DOC_POOL_LIMIT_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, POOL_CODE, LIMIT_TYPE);

prompt
prompt Creating table GHAS_DOC_POOL_MAX_AGE_T
prompt ======================================
prompt
create table GHAS_DOC_POOL_MAX_AGE_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER,
  pool_code        NUMBER not null,
  detail_code      NUMBER not null,
  relation         NUMBER,
  gender           VARCHAR2(10),
  max_age          NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GHAS_DOC_POOL_MAX_AGE_T
  add constraint PK_GHAS_DOC_POOL_MAX_AGE_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, POOL_CODE, DETAIL_CODE);
alter table GHAS_DOC_POOL_MAX_AGE_T
  add constraint FK_DOC_GH_DOC_POOL_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GHAS_DOC_POOL_T
prompt ==============================
prompt
create table GHAS_DOC_POOL_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  product_code        NUMBER not null,
  sub_product_code    NUMBER not null,
  takaful_type        VARCHAR2(1) not null,
  document_type       VARCHAR2(1) not null,
  document_no         VARCHAR2(10) not null,
  record_type         VARCHAR2(1) not null,
  document_year       VARCHAR2(10) not null,
  issue_count         NUMBER not null,
  endorsement_no      NUMBER not null,
  application_id      NUMBER not null,
  pool_code           NUMBER not null,
  pool_name           VARCHAR2(100),
  pool_type           VARCHAR2(20),
  pool_limit          NUMBER,
  admin_percentage    NUMBER,
  contribution_amount NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  pool_category       VARCHAR2(20)
)
;
alter table GHAS_DOC_POOL_T
  add constraint PK_GHAS_DOC_POOL_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, POOL_CODE);
alter table GHAS_DOC_POOL_T
  add constraint FK_DOC_POOL_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GHAS_DOC_SUB_BENEFIT_MAP_T
prompt =========================================
prompt
create table GHAS_DOC_SUB_BENEFIT_MAP_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER,
  plan_code        NUMBER not null,
  gh_benefit_code  NUMBER not null,
  sub_ben_code     NUMBER not null,
  sub_ben_limit    NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  room_type        VARCHAR2(20)
)
;
alter table GHAS_DOC_SUB_BENEFIT_MAP_T
  add constraint PK_GHAS_DOC_SUB_BENEFIT_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, PLAN_CODE, GH_BENEFIT_CODE, SUB_BEN_CODE);
alter table GHAS_DOC_SUB_BENEFIT_MAP_T
  add constraint FK_DOC_GH_DOC_BF_SUB_BF_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GHAS_MED_ENTITY_PLAN_MAP_T
prompt =========================================
prompt
create table GHAS_MED_ENTITY_PLAN_MAP_T
(
  org_id                  NUMBER not null,
  branch_id               VARCHAR2(10) not null,
  product_code            VARCHAR2(10) not null,
  sub_product_code        VARCHAR2(10) not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  plan_code               NUMBER not null,
  medical_entity_category VARCHAR2(50) not null,
  medical_entity          VARCHAR2(50),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE
)
;
alter table GHAS_MED_ENTITY_PLAN_MAP_T
  add constraint PK_GHAS_MED_ENT_PLAN_MAP_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, PLAN_CODE, MEDICAL_ENTITY_CATEGORY);

prompt
prompt Creating table GHAS_PROD_PLANS_T
prompt ================================
prompt
create table GHAS_PROD_PLANS_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  plan_code         NUMBER not null,
  plan_description  VARCHAR2(200),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  plan_limit        NUMBER,
  plan_summary      VARCHAR2(500)
)
;
alter table GHAS_PROD_PLANS_T
  add constraint PK_GHAS_PROD_PLANS_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE);
alter table GHAS_PROD_PLANS_T
  add constraint FK_GLAS_SUB_PRODUCT_SETUP_T foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table GHAS_PROD_BENEFIT_T
prompt ==================================
prompt
create table GHAS_PROD_BENEFIT_T
(
  org_id                NUMBER not null,
  main_product_code     NUMBER not null,
  sub_product_code      NUMBER not null,
  plan_code             NUMBER not null,
  ih_benefit_code       NUMBER not null,
  benefit_limit         NUMBER,
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  benefit_type          VARCHAR2(50),
  wakala_percentage     NUMBER,
  commission_percentage NUMBER,
  peril_limit           NUMBER,
  limit_type            VARCHAR2(3),
  deductable_percentage NUMBER,
  ben_payment_basis     VARCHAR2(20),
  addition_charge_basis VARCHAR2(20)
)
;
alter table GHAS_PROD_BENEFIT_T
  add constraint PK_GHAS_PROD_BENEFIT_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE);
alter table GHAS_PROD_BENEFIT_T
  add constraint FK_GHAS_PROD_PLANS_T foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE)
  references GHAS_PROD_PLANS_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE);

prompt
prompt Creating table GHAS_PROD_BEN_AGE_LIMIT_T
prompt ========================================
prompt
create table GHAS_PROD_BEN_AGE_LIMIT_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  plan_code         NUMBER not null,
  ih_benefit_code   NUMBER not null,
  detail_code       NUMBER not null,
  relation          NUMBER,
  gender            VARCHAR2(10),
  max_age           NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  min_age           NUMBER
)
;
alter table GHAS_PROD_BEN_AGE_LIMIT_T
  add constraint PK_GHAS_PROD_BEN_AGE_LIMIT_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE, DETAIL_CODE);
alter table GHAS_PROD_BEN_AGE_LIMIT_T
  add constraint FK_GHAS_PROD_BEN_AGE_LIMIT_T foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE)
  references GHAS_PROD_BENEFIT_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE);

prompt
prompt Creating table GHAS_PROD_BEN_CONDITION_T
prompt ========================================
prompt
create table GHAS_PROD_BEN_CONDITION_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  plan_code         NUMBER not null,
  ih_benefit_code   NUMBER not null,
  cond_code         NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GHAS_PROD_BEN_CONDITION_T
  add constraint PK_PROD_BEN_CONDITION_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE, COND_CODE);
alter table GHAS_PROD_BEN_CONDITION_T
  add constraint FK_GHAS_PROD_BEN_CONDITION_T foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE)
  references GHAS_PROD_BENEFIT_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE);

prompt
prompt Creating table GHAS_PROD_BEN_CONTR_T
prompt ====================================
prompt
create table GHAS_PROD_BEN_CONTR_T
(
  org_id                    NUMBER not null,
  main_product_code         NUMBER not null,
  sub_product_code          NUMBER not null,
  plan_code                 NUMBER not null,
  ih_benefit_code           NUMBER not null,
  detail_code               NUMBER not null,
  age_from                  NUMBER,
  age_to                    NUMBER,
  gender                    VARCHAR2(10),
  relation                  NUMBER,
  ben_contribution          NUMBER,
  wakala_amount             NUMBER,
  commission_amount         NUMBER,
  gross_contribution_amount NUMBER,
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_updated_by           VARCHAR2(50),
  last_update_date          DATE
)
;
alter table GHAS_PROD_BEN_CONTR_T
  add constraint PK_PROD_GHAS_BEN_CONTR_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE, DETAIL_CODE);
alter table GHAS_PROD_BEN_CONTR_T
  add constraint FK_PROD_GH_BF_CONT_DOC foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE)
  references GHAS_PROD_BENEFIT_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE);

prompt
prompt Creating table GHAS_PROD_BEN_EXCLUSION_T
prompt ========================================
prompt
create table GHAS_PROD_BEN_EXCLUSION_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  plan_code         NUMBER not null,
  ih_benefit_code   NUMBER not null,
  exclusion_code    NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GHAS_PROD_BEN_EXCLUSION_T
  add constraint PK_PROD_BEN_EXCLUSION_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE, EXCLUSION_CODE);
alter table GHAS_PROD_BEN_EXCLUSION_T
  add constraint FK_GHAS_PROD_BEN_EXCLUSION_T foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE)
  references GHAS_PROD_BENEFIT_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE);

prompt
prompt Creating table GHAS_PROD_BEN_FAM_LIMIT_T
prompt ========================================
prompt
create table GHAS_PROD_BEN_FAM_LIMIT_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  plan_code         NUMBER not null,
  ih_benefit_code   NUMBER not null,
  detail_code       NUMBER not null,
  relation_code     NUMBER,
  fam_benefit_limit NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GHAS_PROD_BEN_FAM_LIMIT_T
  add constraint PK_GHAS_PROD_BEN_FM_LM_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE, DETAIL_CODE);
alter table GHAS_PROD_BEN_FAM_LIMIT_T
  add constraint FK_PROD_GH_DOC_BF_FAM_DOC foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE)
  references GHAS_PROD_BENEFIT_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE);

prompt
prompt Creating table GHAS_PROD_SUB_BENEFIT_MAP_T
prompt ==========================================
prompt
create table GHAS_PROD_SUB_BENEFIT_MAP_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  plan_code         NUMBER not null,
  ih_benefit_code   NUMBER not null,
  sub_ben_code      NUMBER not null,
  sub_ben_limit     NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  room_type         VARCHAR2(20)
)
;
alter table GHAS_PROD_SUB_BENEFIT_MAP_T
  add constraint PK_GHAS_PROD_SUB_BENEFIT_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE, SUB_BEN_CODE);
alter table GHAS_PROD_SUB_BENEFIT_MAP_T
  add constraint FK_GHAS_PROD_BENEFIT_T foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE)
  references GHAS_PROD_BENEFIT_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PLAN_CODE, IH_BENEFIT_CODE);

prompt
prompt Creating table GLAS_ALTERATION_TYPE_SETUP_T
prompt ===========================================
prompt
create table GLAS_ALTERATION_TYPE_SETUP_T
(
  org_id             NUMBER not null,
  alteration_type    VARCHAR2(50) not null,
  description        VARCHAR2(1000),
  financial_tag      VARCHAR2(1),
  active             VARCHAR2(2),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  application_id     NUMBER not null,
  eff_date_editable  VARCHAR2(1),
  monthly_tag        VARCHAR2(1),
  group_code         NUMBER,
  category_code      NUMBER,
  event_code         NUMBER,
  report_path        VARCHAR2(300),
  effective_date_on  VARCHAR2(15),
  undwt_required_tag VARCHAR2(1),
  revise_il_tag      VARCHAR2(1),
  installment_tag    VARCHAR2(1)
)
;
alter table GLAS_ALTERATION_TYPE_SETUP_T
  add constraint PK_ALT_TYPE_SETUP primary key (ORG_ID, APPLICATION_ID, ALTERATION_TYPE);

prompt
prompt Creating table GLAS_DISEASE_SETUP_T
prompt ===================================
prompt
create table GLAS_DISEASE_SETUP_T
(
  org_id             NUMBER not null,
  disease_code       NUMBER not null,
  disease_desc       VARCHAR2(500),
  disease_short_desc VARCHAR2(50),
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  disease_reference  VARCHAR2(10),
  disease_long_desc  VARCHAR2(500)
)
;
alter table GLAS_DISEASE_SETUP_T
  add constraint PK_DISEASE_SETUP_T primary key (ORG_ID, DISEASE_CODE);
alter table GLAS_DISEASE_SETUP_T
  add constraint FK_DISEASE_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_BENEFIT_DISEASES_T
prompt ======================================
prompt
create table GLAS_BENEFIT_DISEASES_T
(
  org_id           NUMBER not null,
  benefit_code     NUMBER not null,
  disease_code     NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  application_id   NUMBER not null
)
;
alter table GLAS_BENEFIT_DISEASES_T
  add constraint GLAS_BENEFIT_DISEASES_T_PK primary key (ORG_ID, APPLICATION_ID, BENEFIT_CODE, DISEASE_CODE);
alter table GLAS_BENEFIT_DISEASES_T
  add constraint FK_BENEFIT_DIS_DISEASE foreign key (ORG_ID, DISEASE_CODE)
  references GLAS_DISEASE_SETUP_T (ORG_ID, DISEASE_CODE);

prompt
prompt Creating table GLAS_BENEFIT_SETUP_T
prompt ===================================
prompt
create table GLAS_BENEFIT_SETUP_T
(
  org_id                NUMBER not null,
  benefit_type_code     NUMBER,
  benefit_code          NUMBER not null,
  benefit_desc          VARCHAR2(200),
  short_name            VARCHAR2(50),
  age_from              NUMBER,
  age_to                NUMBER,
  remarks               VARCHAR2(200),
  ref_no                VARCHAR2(50),
  printing_order        NUMBER,
  payment_basis         VARCHAR2(5),
  si_percent            NUMBER,
  salary_percent        NUMBER,
  max_amount            NUMBER,
  min_amount            NUMBER,
  waiting_period_days   NUMBER,
  benefit_period_days   NUMBER,
  scheme_code           NUMBER,
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  active                VARCHAR2(1),
  nature_code           VARCHAR2(10),
  application_id        NUMBER not null,
  exclude_include_tag   VARCHAR2(1),
  is_maternity          VARCHAR2(1),
  quotation_rate_basis  VARCHAR2(2),
  calculation_type_il   NUMBER,
  include_in_tsar       VARCHAR2(1),
  calculation_type_tsar VARCHAR2(1),
  calculation_value     VARCHAR2(500),
  calculation_variable  VARCHAR2(500),
  input_basis           VARCHAR2(10),
  include_term          VARCHAR2(10),
  ttda_flag             VARCHAR2(1),
  annuity_tag           VARCHAR2(1),
  is_opd                VARCHAR2(20),
  edit_claim_amount     VARCHAR2(1),
  other_lang_desc       VARCHAR2(200)
)
;
alter table GLAS_BENEFIT_SETUP_T
  add constraint GLAS_BENEFIT_SETUP_T_PK primary key (ORG_ID, APPLICATION_ID, BENEFIT_CODE);

prompt
prompt Creating table GLAS_BROKER_SETUP_T
prompt ==================================
prompt
create table GLAS_BROKER_SETUP_T
(
  org_id           NUMBER not null,
  broker_code      NUMBER not null,
  description      VARCHAR2(500),
  short_desc       VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_BROKER_SETUP_T
  add constraint PK_BROKER_SETUP primary key (ORG_ID, BROKER_CODE);

prompt
prompt Creating table GLAS_CLIENT_ATTACHMENTS_T
prompt ========================================
prompt
create table GLAS_CLIENT_ATTACHMENTS_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  attachment_code  NUMBER not null,
  attachment_desc  VARCHAR2(50),
  file_path        VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_CLIENT_ATTACHMENTS_T
  add constraint PK_CLIENT_ATTACH_SETUP_T primary key (ORG_ID, CLIENT_CODE, ATTACHMENT_CODE);
alter table GLAS_CLIENT_ATTACHMENTS_T
  add constraint FK_CLIENT_ATTACH_CLIENT foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table GL_BANK_SETUP_T
prompt ==============================
prompt
create table GL_BANK_SETUP_T
(
  org_id           NUMBER not null,
  bank_code        NUMBER not null,
  bank_name        VARCHAR2(200),
  abbreviation     VARCHAR2(20),
  bank_type        VARCHAR2(3),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GL_BANK_SETUP_T
  add constraint GL_BANK_SETUP_T_PK primary key (ORG_ID, BANK_CODE);
alter table GL_BANK_SETUP_T
  add constraint GL_BANK_SETUP_T_UK1 unique (BANK_NAME, ORG_ID);
alter table GL_BANK_SETUP_T
  add constraint GL_BANK_SETUP_T_UK2 unique (ABBREVIATION, BANK_CODE, BANK_NAME, ORG_ID);

prompt
prompt Creating table GL_BANK_BRANCH_SETUP_T
prompt =====================================
prompt
create table GL_BANK_BRANCH_SETUP_T
(
  org_id           NUMBER not null,
  bank_code        NUMBER not null,
  branch_code      NUMBER not null,
  branch_name      VARCHAR2(100),
  branch_address   VARCHAR2(500),
  branch_type      VARCHAR2(10),
  contact_number   VARCHAR2(20),
  fax_number       VARCHAR2(20),
  email            VARCHAR2(50),
  country          VARCHAR2(3),
  state            NUMBER,
  city             NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  contact_person   VARCHAR2(200)
)
;
alter table GL_BANK_BRANCH_SETUP_T
  add constraint GL_BANK_BRANCH_SETUP_T_PK primary key (ORG_ID, BANK_CODE, BRANCH_CODE);
alter table GL_BANK_BRANCH_SETUP_T
  add constraint GL_BANK_BRANCH_SETUP_T_FK1 foreign key (ORG_ID, BANK_CODE)
  references GL_BANK_SETUP_T (ORG_ID, BANK_CODE) on delete cascade;

prompt
prompt Creating table GLAS_CLIENT_BANK_T
prompt =================================
prompt
create table GLAS_CLIENT_BANK_T
(
  client_code      NUMBER,
  org_id           NUMBER,
  serial_no        NUMBER not null,
  bank_code        NUMBER,
  branch_code      NUMBER,
  account_no       VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  iban             VARCHAR2(50)
)
;
alter table GLAS_CLIENT_BANK_T
  add constraint PK_GLAS_CLIENT_BANK_T primary key (SERIAL_NO);
alter table GLAS_CLIENT_BANK_T
  add constraint FK_CLIENTBANK_BANK foreign key (ORG_ID, BANK_CODE)
  references GL_BANK_SETUP_T (ORG_ID, BANK_CODE);
alter table GLAS_CLIENT_BANK_T
  add constraint FK_CLIENTBANK_BRANCH foreign key (ORG_ID, BANK_CODE, BRANCH_CODE)
  references GL_BANK_BRANCH_SETUP_T (ORG_ID, BANK_CODE, BRANCH_CODE);

prompt
prompt Creating table TK_BRANCH_SETUP_T
prompt ================================
prompt
create table TK_BRANCH_SETUP_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  branch_desc       VARCHAR2(100),
  branch_short_code VARCHAR2(50),
  creation_date     DATE,
  created_by        VARCHAR2(50),
  last_update_date  DATE,
  last_updated_by   VARCHAR2(50),
  active            VARCHAR2(1),
  default_currency  VARCHAR2(5),
  region_id         NUMBER,
  bu                VARCHAR2(5),
  default_country   VARCHAR2(5)
)
;
alter table TK_BRANCH_SETUP_T
  add constraint PK_BRANCH_SETUP_T primary key (ORG_ID, BRANCH_ID);
alter table TK_BRANCH_SETUP_T
  add constraint FK_BRANCH_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_CLIENT_BRANCH_MAP_T
prompt =======================================
prompt
create table GLAS_CLIENT_BRANCH_MAP_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  branch_id        NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_CLIENT_BRANCH_MAP_T
  add constraint PK_CLIENT_BR_MAP_SETUP_T primary key (ORG_ID, CLIENT_CODE, BRANCH_ID);
alter table GLAS_CLIENT_BRANCH_MAP_T
  add constraint FK_CLIENTMAP_BRANCH foreign key (ORG_ID, BRANCH_ID)
  references TK_BRANCH_SETUP_T (ORG_ID, BRANCH_ID);
alter table GLAS_CLIENT_BRANCH_MAP_T
  add constraint FK_CLIENTMAP_CLIENT foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_CLIENT_BUS_UNIT_T
prompt =====================================
prompt
create table GLAS_CLIENT_BUS_UNIT_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  bus_unit_code    NUMBER not null,
  bus_unit_desc    VARCHAR2(200),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  country_code     VARCHAR2(20),
  state_code       VARCHAR2(20),
  city_code        VARCHAR2(20)
)
;
alter table GLAS_CLIENT_BUS_UNIT_T
  add constraint PK_CLIENT_BUS_UNIT_SETUP_T primary key (ORG_ID, CLIENT_CODE, BUS_UNIT_CODE);
alter table GLAS_CLIENT_BUS_UNIT_T
  add constraint FK_CLIENTBUS_UNIT_CLIENT foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_CLIENT_CATEGORY_T
prompt =====================================
prompt
create table GLAS_CLIENT_CATEGORY_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  category_code    NUMBER not null,
  category_desc    VARCHAR2(200),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_CLIENT_CATEGORY_T
  add constraint PK_CLIENT_CAT_SETUP_T primary key (ORG_ID, CLIENT_CODE, CATEGORY_CODE);
alter table GLAS_CLIENT_CATEGORY_T
  add constraint FK_CLIENTCAT_CLIENT foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_CLIENT_CONTACTPERSON_T
prompt ==========================================
prompt
create table GLAS_CLIENT_CONTACTPERSON_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  bus_unit_code    NUMBER not null,
  person_code      NUMBER not null,
  contact_name     VARCHAR2(200),
  designation      VARCHAR2(200),
  contact_type     VARCHAR2(1),
  mobile_no        VARCHAR2(50),
  email            VARCHAR2(50),
  landline_no      VARCHAR2(50),
  category         VARCHAR2(1),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  title_name       VARCHAR2(100)
)
;
alter table GLAS_CLIENT_CONTACTPERSON_T
  add constraint PK_CLIENT_CONTACT_PERSON primary key (ORG_ID, CLIENT_CODE, BUS_UNIT_CODE, PERSON_CODE);
alter table GLAS_CLIENT_CONTACTPERSON_T
  add constraint FK_CLIENT_CONTACT_PERSON foreign key (ORG_ID, CLIENT_CODE, BUS_UNIT_CODE)
  references GLAS_CLIENT_BUS_UNIT_T (ORG_ID, CLIENT_CODE, BUS_UNIT_CODE);

prompt
prompt Creating table GLAS_CLIENT_DESIGNATION_T
prompt ========================================
prompt
create table GLAS_CLIENT_DESIGNATION_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  designation_code NUMBER not null,
  designation_desc VARCHAR2(200),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  category_code    NUMBER
)
;
alter table GLAS_CLIENT_DESIGNATION_T
  add constraint PK_CLIENT_DESIG_SETUP_T primary key (ORG_ID, CLIENT_CODE, DESIGNATION_CODE);
alter table GLAS_CLIENT_DESIGNATION_T
  add constraint FK_CLIENTDESIG_CLIENT foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_CLIENT_RECORDS_HEADER_T
prompt ===========================================
prompt
create table GLAS_CLIENT_RECORDS_HEADER_T
(
  org_id               NUMBER not null,
  client_code          NUMBER not null,
  header_id            NUMBER not null,
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table GLAS_CLIENT_RECORDS_HEADER_T
  add constraint PK_GLAS_CLIENT_REC_T primary key (ORG_ID, CLIENT_CODE, HEADER_ID);
alter table GLAS_CLIENT_RECORDS_HEADER_T
  add constraint FK_CLIENT_REC_CLIENT foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_CLIENT_EDU_HISTORY_T
prompt ========================================
prompt
create table GLAS_CLIENT_EDU_HISTORY_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  education_id     NUMBER not null,
  education_type   NUMBER,
  degree_name      VARCHAR2(200),
  institution_code VARCHAR2(200),
  passing_year     NUMBER,
  passing_grade    VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  header_id        NUMBER not null,
  passing_gpa      VARCHAR2(50)
)
;
alter table GLAS_CLIENT_EDU_HISTORY_T
  add constraint PK_GLAS_CLIENT_EDU_T primary key (ORG_ID, CLIENT_CODE, HEADER_ID, EDUCATION_ID);
alter table GLAS_CLIENT_EDU_HISTORY_T
  add constraint FK_CLIENT_EDU_CLIENT_EFF foreign key (ORG_ID, CLIENT_CODE, HEADER_ID)
  references GLAS_CLIENT_RECORDS_HEADER_T (ORG_ID, CLIENT_CODE, HEADER_ID);

prompt
prompt Creating table GLAS_CLIENT_EMP_DTL_T
prompt ====================================
prompt
create table GLAS_CLIENT_EMP_DTL_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  emp_det_code     NUMBER not null,
  emp_name         VARCHAR2(200),
  emp_dob          DATE,
  emp_number       VARCHAR2(50),
  emp_designation  VARCHAR2(200),
  cnic_no          VARCHAR2(20),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  cnic_issue_date  DATE,
  cnic_expiry_date DATE,
  emp_father_name  VARCHAR2(100),
  emp_gender       VARCHAR2(1),
  emp_nationality  VARCHAR2(5)
)
;
alter table GLAS_CLIENT_EMP_DTL_T
  add constraint PK_GLAS_CLIENT_EMP_DTL_T primary key (ORG_ID, CLIENT_CODE, EMP_DET_CODE);
alter table GLAS_CLIENT_EMP_DTL_T
  add constraint FK_CLIENT_EMP_CLIENT foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_CLIENT_EMP_FAM_T
prompt ====================================
prompt
create table GLAS_CLIENT_EMP_FAM_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  emp_det_code     NUMBER not null,
  emp_fam_code     NUMBER not null,
  fam_name         VARCHAR2(200),
  fam_dob          DATE,
  relation_code    NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_CLIENT_EMP_FAM_T
  add constraint PK_GLAS_CLIENT_EMP_FAM_T primary key (ORG_ID, CLIENT_CODE, EMP_DET_CODE, EMP_FAM_CODE);

prompt
prompt Creating table GLAS_CLIENT_EMP_HISTORY_T
prompt ========================================
prompt
create table GLAS_CLIENT_EMP_HISTORY_T
(
  org_id            NUMBER not null,
  client_code       NUMBER not null,
  employment_id     NUMBER not null,
  employer_name     VARCHAR2(200),
  designation       VARCHAR2(50),
  from_date         DATE,
  to_date           DATE,
  is_current        VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  header_id         NUMBER,
  employment_status VARCHAR2(1)
)
;
alter table GLAS_CLIENT_EMP_HISTORY_T
  add constraint PK_GLAS_CLIENT_EMPLOY_T primary key (ORG_ID, CLIENT_CODE, EMPLOYMENT_ID);
alter table GLAS_CLIENT_EMP_HISTORY_T
  add constraint FK_CLIENT_EMPLOY_CLIENT_EFF foreign key (ORG_ID, CLIENT_CODE, HEADER_ID)
  references GLAS_CLIENT_RECORDS_HEADER_T (ORG_ID, CLIENT_CODE, HEADER_ID);

prompt
prompt Creating table GLAS_CLIENT_FAMILY_HIST_T
prompt ========================================
prompt
create table GLAS_CLIENT_FAMILY_HIST_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  person_id        NUMBER not null,
  person_name      VARCHAR2(50),
  relation_code    NUMBER,
  age              NUMBER,
  cause_of_death   NUMBER,
  age_at_death     NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  died_tag         VARCHAR2(1)
)
;
alter table GLAS_CLIENT_FAMILY_HIST_T
  add constraint PK_GLAS_CLIENT_FM_HIST_T primary key (ORG_ID, CLIENT_CODE, PERSON_ID);
alter table GLAS_CLIENT_FAMILY_HIST_T
  add constraint FK_CLIENT_FM_HIST_CLIENT foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_CLIENT_FAM_MED_HIST_T
prompt =========================================
prompt
create table GLAS_CLIENT_FAM_MED_HIST_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  person_id        NUMBER not null,
  med_serial_no    NUMBER not null,
  disease_code     VARCHAR2(50),
  notes            VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_CLIENT_FAM_MED_HIST_T
  add constraint PK_GLAS_CLIENT_MED_HIST_T primary key (ORG_ID, CLIENT_CODE, PERSON_ID, MED_SERIAL_NO);
alter table GLAS_CLIENT_FAM_MED_HIST_T
  add constraint FK_CLIENT_MED_HIST_CLIENT foreign key (ORG_ID, CLIENT_CODE, PERSON_ID)
  references GLAS_CLIENT_FAMILY_HIST_T (ORG_ID, CLIENT_CODE, PERSON_ID);

prompt
prompt Creating table GLAS_CLIENT_GRADES_T
prompt ===================================
prompt
create table GLAS_CLIENT_GRADES_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  grade_code       NUMBER not null,
  grade_desc       VARCHAR2(200),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_CLIENT_GRADES_T
  add constraint PK_CLIENT_GRADE_SETUP_T primary key (ORG_ID, CLIENT_CODE, GRADE_CODE);
alter table GLAS_CLIENT_GRADES_T
  add constraint FK_CLIENTGRADE_CLIENT foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_CLIENT_IMMUNE_HIST_T
prompt ========================================
prompt
create table GLAS_CLIENT_IMMUNE_HIST_T
(
  org_id            NUMBER not null,
  client_code       NUMBER not null,
  header_id         NUMBER not null,
  immunization_id   NUMBER not null,
  immunization_type NUMBER,
  immunization_date DATE,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  immunization_dose VARCHAR2(10)
)
;
alter table GLAS_CLIENT_IMMUNE_HIST_T
  add constraint PK_GLAS_CLIENT_IMMUNE_HIST_T primary key (ORG_ID, CLIENT_CODE, HEADER_ID, IMMUNIZATION_ID);
alter table GLAS_CLIENT_IMMUNE_HIST_T
  add constraint FK_CLIENT_IMM_HIST_CLIENT_EFF foreign key (ORG_ID, CLIENT_CODE, HEADER_ID)
  references GLAS_CLIENT_RECORDS_HEADER_T (ORG_ID, CLIENT_CODE, HEADER_ID);

prompt
prompt Creating table GLAS_CLIENT_PERS_INFO_T
prompt ======================================
prompt
create table GLAS_CLIENT_PERS_INFO_T
(
  org_id                  NUMBER not null,
  client_code             NUMBER not null,
  info_id                 NUMBER not null,
  first_name              VARCHAR2(50),
  middle_name             VARCHAR2(50),
  last_name               VARCHAR2(50),
  title                   VARCHAR2(10),
  gender                  VARCHAR2(10),
  father_name             VARCHAR2(50),
  maiden_name             VARCHAR2(50),
  place_of_birth          VARCHAR2(50),
  marital_status          VARCHAR2(10),
  no_of_dependents        NUMBER,
  nationality_code        VARCHAR2(10),
  religion_code           VARCHAR2(10),
  height                  NUMBER,
  weight                  NUMBER,
  bmi                     NUMBER,
  height_scale            VARCHAR2(10),
  weight_scale            VARCHAR2(10),
  cnic_no                 VARCHAR2(30),
  father_cnic_no          VARCHAR2(30),
  spouse_cnic_no          VARCHAR2(30),
  cnic_issue_date         DATE,
  father_cnic_issue_date  DATE,
  spouse_cnic_issue_date  DATE,
  cnic_expiry_date        DATE,
  father_cnic_expiry_date DATE,
  spouse_cnic_expiry_date DATE,
  dob                     DATE,
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  nrp_tag                 VARCHAR2(10),
  passport_no             VARCHAR2(50),
  age                     NUMBER,
  header_id               NUMBER not null,
  waste                   NUMBER,
  waste_scale             VARCHAR2(10),
  mother_name             VARCHAR2(50),
  spouse_name             VARCHAR2(50),
  passing_gpa             VARCHAR2(50),
  country_of_birth        VARCHAR2(20),
  smoking_status          VARCHAR2(1)
)
;
alter table GLAS_CLIENT_PERS_INFO_T
  add constraint PK_GLAS_CLIENT_PERS_T primary key (ORG_ID, CLIENT_CODE, HEADER_ID, INFO_ID);
alter table GLAS_CLIENT_PERS_INFO_T
  add constraint FK_CLIENT_PERS_CLIENT_EFF foreign key (ORG_ID, CLIENT_CODE, HEADER_ID)
  references GLAS_CLIENT_RECORDS_HEADER_T (ORG_ID, CLIENT_CODE, HEADER_ID);

prompt
prompt Creating table GLAS_CLIENT_PROF_INFO_T
prompt ======================================
prompt
create table GLAS_CLIENT_PROF_INFO_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  info_id          NUMBER not null,
  occupation       VARCHAR2(50),
  band_code        VARCHAR2(50),
  annual_salary    NUMBER,
  working_tag      VARCHAR2(10),
  client_category  VARCHAR2(10),
  source_of_income VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  header_id        NUMBER not null
)
;
alter table GLAS_CLIENT_PROF_INFO_T
  add constraint PK_GLAS_CLIENT_PROF_T primary key (ORG_ID, CLIENT_CODE, HEADER_ID, INFO_ID);
alter table GLAS_CLIENT_PROF_INFO_T
  add constraint FK_CLIENT_PROF_CLIENT_EFF foreign key (ORG_ID, CLIENT_CODE, HEADER_ID)
  references GLAS_CLIENT_RECORDS_HEADER_T (ORG_ID, CLIENT_CODE, HEADER_ID);

prompt
prompt Creating table GLAS_CLIENT_SALARY_SLAB_T
prompt ========================================
prompt
create table GLAS_CLIENT_SALARY_SLAB_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  slab_code        NUMBER not null,
  slab_desc        VARCHAR2(200),
  min_salary       NUMBER(15,2),
  max_salary       NUMBER(15,2),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_CLIENT_SALARY_SLAB_T
  add constraint PK_CLIENT_SALARY_SLAB_SETUP_T primary key (ORG_ID, CLIENT_CODE, SLAB_CODE);
alter table GLAS_CLIENT_SALARY_SLAB_T
  add constraint FK_CLIENT_SALARY_CLIENT foreign key (ORG_ID, CLIENT_CODE)
  references GLAS_CLIENT_SETUP_T (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_CLIENT_SOCIAL_ACCOUNTS_T
prompt ============================================
prompt
create table GLAS_CLIENT_SOCIAL_ACCOUNTS_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  account_id       NUMBER not null,
  account_type     NUMBER,
  account_desc     VARCHAR2(200),
  account_url      VARCHAR2(200),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  header_id        NUMBER not null
)
;
alter table GLAS_CLIENT_SOCIAL_ACCOUNTS_T
  add constraint PK_GLAS_CLIENT_SCA_T primary key (ORG_ID, CLIENT_CODE, HEADER_ID, ACCOUNT_ID);
alter table GLAS_CLIENT_SOCIAL_ACCOUNTS_T
  add constraint FK_CLIENT_SCA_CLIENT_EFF foreign key (ORG_ID, CLIENT_CODE, HEADER_ID)
  references GLAS_CLIENT_RECORDS_HEADER_T (ORG_ID, CLIENT_CODE, HEADER_ID);

prompt
prompt Creating table GLAS_CONDITION_T
prompt ===============================
prompt
create table GLAS_CONDITION_T
(
  org_id            NUMBER not null,
  benefit_code      NUMBER not null,
  application_id    NUMBER not null,
  cond_code         NUMBER not null,
  default_tag       VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  cn_text_quotation VARCHAR2(4000),
  cn_text_policy    VARCHAR2(4000),
  active            VARCHAR2(5),
  print_order       VARCHAR2(5),
  cn_desc           VARCHAR2(150)
)
;
alter table GLAS_CONDITION_T
  add constraint PK_CONDITION primary key (ORG_ID, BENEFIT_CODE, APPLICATION_ID, COND_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_T
prompt ================================
prompt
create table GLAS_DOC_CLIENT_T
(
  org_id                     NUMBER not null,
  branch_id                  NUMBER not null,
  product_code               NUMBER not null,
  sub_product_code           NUMBER not null,
  takaful_type               VARCHAR2(1) not null,
  document_type              VARCHAR2(1) not null,
  document_no                VARCHAR2(10) not null,
  record_type                VARCHAR2(1) not null,
  document_year              VARCHAR2(10) not null,
  issue_count                NUMBER not null,
  endorsement_no             NUMBER not null,
  application_id             NUMBER not null,
  client_code                NUMBER not null,
  client_desc                VARCHAR2(500),
  client_short_desc          VARCHAR2(50),
  address                    VARCHAR2(200),
  email                      VARCHAR2(500),
  phone                      VARCHAR2(15),
  active                     VARCHAR2(1),
  client_type                VARCHAR2(10),
  age                        NUMBER(3),
  dob                        DATE,
  height                     NUMBER,
  weight                     NUMBER,
  bmi                        NUMBER,
  occupation                 NUMBER,
  vat_reg_no                 VARCHAR2(50),
  vat_reg_date               DATE,
  nature_of_business         VARCHAR2(10),
  name_in_arabic             NVARCHAR2(500),
  contact_person_name        VARCHAR2(500),
  contact_person_no          VARCHAR2(50),
  contact_person_designation VARCHAR2(200),
  group_code                 VARCHAR2(10),
  height_scale               VARCHAR2(10),
  weight_scale               VARCHAR2(10),
  title                      VARCHAR2(10),
  client_nature              VARCHAR2(10),
  band_code                  NUMBER,
  client_category            VARCHAR2(10),
  cnic_no                    VARCHAR2(50),
  cnic_issue_date            DATE,
  cnic_expiry_date           DATE,
  father_name                VARCHAR2(50),
  maiden_name                VARCHAR2(50),
  marital_status             VARCHAR2(10),
  place_of_birth             VARCHAR2(50),
  passport_no                VARCHAR2(50),
  no_of_dependents           NUMBER,
  nationality_code           VARCHAR2(10),
  religion_code              NUMBER,
  working_tag                VARCHAR2(1),
  first_name                 VARCHAR2(50),
  middle_name                VARCHAR2(50),
  last_name                  VARCHAR2(50),
  annual_salary              NUMBER,
  total_sar                  NUMBER,
  referral_source            NUMBER,
  referral_other             VARCHAR2(10),
  gender                     VARCHAR2(10),
  nrp_tag                    VARCHAR2(1),
  communication_channel      VARCHAR2(10),
  father_cnic_no             VARCHAR2(50),
  father_cnic_issue_date     DATE,
  father_cnic_expiry_date    DATE,
  spouse_cnic_no             VARCHAR2(50),
  spouse_cnic_issue_date     DATE,
  spouse_cnic_expiry_date    DATE,
  category_code              VARCHAR2(10),
  source_of_income           NUMBER,
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_update_date           DATE,
  last_updated_by            VARCHAR2(50),
  credit_limit               NUMBER,
  credit_limit_days          NUMBER,
  credit_limit_tag           VARCHAR2(1)
)
;
alter table GLAS_DOC_CLIENT_T
  add constraint PK_DOC_CLIENT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_ADDRESS_T
prompt =================================
prompt
create table GLAS_DOC_ADDRESS_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  client_code      NUMBER not null,
  address_type     VARCHAR2(20) not null,
  address1         VARCHAR2(100),
  address2         VARCHAR2(100),
  city_code        VARCHAR2(10),
  state_code       VARCHAR2(10),
  country_code     VARCHAR2(10),
  zip_code         VARCHAR2(50),
  phone1           VARCHAR2(50),
  phone2           VARCHAR2(50),
  fax1             VARCHAR2(50),
  fax2             VARCHAR2(50),
  email            VARCHAR2(100),
  website          VARCHAR2(150),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  mobile_phone     NUMBER,
  home_phone       NUMBER,
  office_phone     NUMBER,
  house_no         VARCHAR2(50),
  unit_no          VARCHAR2(50),
  building         VARCHAR2(50)
)
;
alter table GLAS_DOC_ADDRESS_T
  add constraint PK_DOC_ADDRESS_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, ADDRESS_TYPE);
alter table GLAS_DOC_ADDRESS_T
  add constraint FK_DOC_ADDR_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references GLAS_DOC_CLIENT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_AGENT_OVRD_T
prompt ====================================
prompt
create table GLAS_DOC_AGENT_OVRD_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  agent_code       NUMBER not null,
  supervisor_code  NUMBER,
  commission_rate  NUMBER(9,6),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  parent_agent     NUMBER
)
;
alter table GLAS_DOC_AGENT_OVRD_T
  add constraint PK_DOC_AGENT_OVERRD primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, AGENT_CODE, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_AGENT_T
prompt ===============================
prompt
create table GLAS_DOC_AGENT_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  product_code        NUMBER not null,
  sub_product_code    NUMBER not null,
  takaful_type        VARCHAR2(1) not null,
  document_type       VARCHAR2(1) not null,
  document_no         VARCHAR2(10) not null,
  record_type         VARCHAR2(1) not null,
  document_year       VARCHAR2(10) not null,
  issue_count         NUMBER not null,
  endorsement_no      NUMBER not null,
  application_id      NUMBER not null,
  agent_code          NUMBER not null,
  commission_rate     NUMBER(9,6),
  commission_flat_amt NUMBER(15,2),
  commission_amount   NUMBER(15,2),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  agency_type         VARCHAR2(20),
  commision_type      VARCHAR2(2),
  partner_id          NUMBER not null,
  channel_id          NUMBER not null,
  model_id            NUMBER not null,
  designation_id      NUMBER not null
)
;
alter table GLAS_DOC_AGENT_T
  add constraint PK_DOC_AGENT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, AGENT_CODE, PARTNER_ID, CHANNEL_ID, MODEL_ID, DESIGNATION_ID);
alter table GLAS_DOC_AGENT_T
  add constraint FK_DOC_AGENT_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_APPROVAL_HISTORY_T
prompt ==========================================
prompt
create table GLAS_DOC_APPROVAL_HISTORY_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  product_code     VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  serial_no        NUMBER not null,
  action           VARCHAR2(50),
  comments         VARCHAR2(500),
  approver         VARCHAR2(50),
  action_date      DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  action_type      VARCHAR2(20)
)
;
alter table GLAS_DOC_APPROVAL_HISTORY_T
  add constraint PK_GLAS_DOC_APPR_HIST primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);

prompt
prompt Creating table GLAS_DOC_APPROVAL_T
prompt ==================================
prompt
create table GLAS_DOC_APPROVAL_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  product_code     VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  approval_order   NUMBER not null,
  approver         VARCHAR2(50),
  approval_status  VARCHAR2(20),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_DOC_APPROVAL_T
  add constraint PK_GLAS_DOC_APPR primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, APPROVAL_ORDER);

prompt
prompt Creating table GLAS_DOC_BENEFICIARY_T
prompt =====================================
prompt
create table GLAS_DOC_BENEFICIARY_T
(
  org_id                    NUMBER not null,
  branch_id                 NUMBER not null,
  product_code              NUMBER not null,
  sub_product_code          NUMBER not null,
  takaful_type              VARCHAR2(1) not null,
  document_type             VARCHAR2(1) not null,
  document_no               VARCHAR2(10) not null,
  record_type               VARCHAR2(1) not null,
  document_year             VARCHAR2(10) not null,
  issue_count               NUMBER not null,
  endorsement_no            NUMBER not null,
  application_id            NUMBER not null,
  beneficiary_code          NUMBER not null,
  relation_code             NUMBER(9,6),
  percentage                NUMBER(15,2),
  amount                    NUMBER(15,2),
  cnic_no                   VARCHAR2(50),
  dob                       DATE,
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_update_date          DATE,
  last_updated_by           VARCHAR2(50),
  cnic_issue_date           DATE,
  cnic_expiry_date          DATE,
  beneficiary_name          VARCHAR2(50),
  is_guardian               VARCHAR2(1),
  guardian_name             VARCHAR2(50),
  guardian_relation_code    VARCHAR2(1),
  guardian_dob              DATE,
  guardian_cnic_no          VARCHAR2(50),
  guardian_cnic_issue_date  DATE,
  guardian_cnic_expiry_date DATE
)
;
alter table GLAS_DOC_BENEFICIARY_T
  add constraint PK_DOC_BENEFICIARY primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFICIARY_CODE);
alter table GLAS_DOC_BENEFICIARY_T
  add constraint FK_DOC_BENEFICIARY_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_BENEFIT_T
prompt =================================
prompt
create table GLAS_DOC_BENEFIT_T
(
  org_id                 NUMBER not null,
  branch_id              NUMBER not null,
  product_code           NUMBER not null,
  sub_product_code       NUMBER not null,
  takaful_type           VARCHAR2(1) not null,
  document_type          VARCHAR2(1) not null,
  document_no            VARCHAR2(10) not null,
  record_type            VARCHAR2(1) not null,
  document_year          VARCHAR2(10) not null,
  issue_count            NUMBER not null,
  endorsement_no         NUMBER not null,
  application_id         NUMBER not null,
  benefit_code           NUMBER not null,
  reinsurer_code         NUMBER,
  treaty_code            NUMBER,
  treaty_detail_code     NUMBER,
  rate_based_on          VARCHAR2(1),
  basic_benefit_tag      VARCHAR2(1),
  fcl_tag                VARCHAR2(1),
  quota_share            NUMBER,
  company_retention      NUMBER,
  commission_rate        NUMBER,
  age_from               NUMBER,
  age_to                 NUMBER,
  age_from_renewal       NUMBER,
  payment_basis          VARCHAR2(10),
  si_percent             NUMBER,
  salary_percent         NUMBER,
  max_amount             NUMBER,
  min_amount             NUMBER,
  waiting_period_days    NUMBER,
  benefit_period_days    NUMBER,
  scheme_code            NUMBER,
  salary_factor          NUMBER,
  loading_percent        NUMBER,
  free_cover_limit       NUMBER,
  net_rate               NUMBER,
  gross_rate             NUMBER,
  remarks                VARCHAR2(500),
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE,
  treaty_type            VARCHAR2(10),
  sum_insured_basis      VARCHAR2(10),
  flat_amount            NUMBER,
  percent_of_basic       NUMBER,
  sa_from                NUMBER,
  sa_to                  NUMBER,
  benefit_type           VARCHAR2(1),
  volume_discount        NUMBER,
  class_wise_loading     VARCHAR2(5),
  commision_amount       NUMBER,
  expense_margin_amount  NUMBER,
  net_contribution       NUMBER,
  gross_contribution     NUMBER,
  quota_share_limit      NUMBER,
  treaty_limit           NUMBER,
  claim_loading          NUMBER,
  claim_discount         NUMBER,
  q_net_rate             NUMBER,
  q_gross_rate           NUMBER,
  benefit_total_sa       NUMBER,
  basic_benefit_sa       NUMBER,
  rate_based_on_basic_sa NUMBER,
  monthly_max_amount     NUMBER
)
;
alter table GLAS_DOC_BENEFIT_T
  add constraint PK_DOC_BENEFIT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE);
alter table GLAS_DOC_BENEFIT_T
  add constraint FK_DOC_BENEFIT_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_BENEFIT_CAT_SALARY_T
prompt ============================================
prompt
create table GLAS_DOC_BENEFIT_CAT_SALARY_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  product_code       NUMBER not null,
  sub_product_code   NUMBER not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  issue_count        NUMBER not null,
  endorsement_no     NUMBER not null,
  application_id     NUMBER not null,
  benefit_code       NUMBER not null,
  category_code      NUMBER not null,
  slab_code          NUMBER not null,
  rate_type          VARCHAR2(2),
  rate_value         NUMBER,
  min_rate           NUMBER,
  max_rate           NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  min_salary         NUMBER,
  max_salary         NUMBER,
  monthly_max_amount NUMBER
)
;
alter table GLAS_DOC_BENEFIT_CAT_SALARY_T
  add constraint PK_DOC_BENEFIT_CAT_SAL primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE, CATEGORY_CODE, SLAB_CODE);
alter table GLAS_DOC_BENEFIT_CAT_SALARY_T
  add constraint FK_DOC_BF_CAT_SAL_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE)
  references GLAS_DOC_BENEFIT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE);

prompt
prompt Creating table GLAS_DOC_BENEFIT_CAT_T
prompt =====================================
prompt
create table GLAS_DOC_BENEFIT_CAT_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  product_code       NUMBER not null,
  sub_product_code   NUMBER not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  issue_count        NUMBER not null,
  endorsement_no     NUMBER not null,
  application_id     NUMBER not null,
  benefit_code       NUMBER not null,
  category_code      NUMBER not null,
  rate_type          VARCHAR2(2),
  rate_value         NUMBER,
  min_rate           NUMBER,
  max_rate           NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  monthly_max_amount NUMBER
)
;
alter table GLAS_DOC_BENEFIT_CAT_T
  add constraint PK_GLAS_DOC_BENEFIT_CAT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE, CATEGORY_CODE);
alter table GLAS_DOC_BENEFIT_CAT_T
  add constraint FK_GLAS_DOC_BENEFIT_CAT foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE)
  references GLAS_DOC_BENEFIT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE);

prompt
prompt Creating table GLAS_DOC_BENEFIT_RATES_T
prompt =======================================
prompt
create table GLAS_DOC_BENEFIT_RATES_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  benefit_code     NUMBER not null,
  rate_code        NUMBER not null,
  gender           VARCHAR2(5),
  age_to           NUMBER,
  age_from         NUMBER,
  rate             NUMBER(9,6),
  flat_amount      NUMBER(15,2),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  mortality_rate   NUMBER
)
;
alter table GLAS_DOC_BENEFIT_RATES_T
  add constraint PK_GLAS_DOC_BENEFIT_RATES primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE, RATE_CODE);
alter table GLAS_DOC_BENEFIT_RATES_T
  add constraint FK_GLAS_DOC_BENEFIT_RATES foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE)
  references GLAS_DOC_BENEFIT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE);

prompt
prompt Creating table GLAS_DOC_BENEFIT_SALARY_T
prompt ========================================
prompt
create table GLAS_DOC_BENEFIT_SALARY_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  product_code       NUMBER not null,
  sub_product_code   NUMBER not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  issue_count        NUMBER not null,
  endorsement_no     NUMBER not null,
  application_id     NUMBER not null,
  benefit_code       NUMBER not null,
  slab_code          NUMBER not null,
  rate_type          VARCHAR2(2),
  rate_value         NUMBER,
  min_rate           NUMBER,
  max_rate           NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  min_salary         NUMBER,
  max_salary         NUMBER,
  monthly_max_amount NUMBER
)
;
alter table GLAS_DOC_BENEFIT_SALARY_T
  add constraint GLAS_DOC_BENEFIT_SALARY_T_PK primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, TAKAFUL_TYPE, SUB_PRODUCT_CODE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE, SLAB_CODE);
alter table GLAS_DOC_BENEFIT_SALARY_T
  add constraint FK_DOC_BF_SALARY_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE)
  references GLAS_DOC_BENEFIT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE);

prompt
prompt Creating table TK_CHARGES_SETUP_T
prompt =================================
prompt
create table TK_CHARGES_SETUP_T
(
  org_id            NUMBER not null,
  charge_code       NUMBER not null,
  charge_desc       VARCHAR2(500),
  charge_rate       NUMBER(9,6),
  charge_flat_amt   NUMBER(15,2),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  charge_type       VARCHAR2(5),
  remarks           VARCHAR2(200),
  charge_rate_type  VARCHAR2(2),
  charge_nature     VARCHAR2(5),
  charge_frequency  VARCHAR2(5),
  charge_gl         VARCHAR2(5),
  charge_applied_on VARCHAR2(5),
  prepaid_tag       VARCHAR2(1),
  policy_tag        VARCHAR2(1)
)
;
alter table TK_CHARGES_SETUP_T
  add constraint PK_TK_CHARGE_SETUP_T primary key (ORG_ID, CHARGE_CODE);
alter table TK_CHARGES_SETUP_T
  add constraint FK_CHARGE_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_DOC_CHARGES_T
prompt =================================
prompt
create table GLAS_DOC_CHARGES_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  charge_code      NUMBER not null,
  charge_rate      NUMBER(9,6),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_update_date DATE,
  last_updated_by  VARCHAR2(50),
  charges_amount   NUMBER
)
;
alter table GLAS_DOC_CHARGES_T
  add constraint PK_DOC_CHARGES primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CHARGE_CODE);
alter table GLAS_DOC_CHARGES_T
  add constraint FK_DOC_CHARGES_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);
alter table GLAS_DOC_CHARGES_T
  add constraint FK_DOC_CHARGE_CHARGE foreign key (ORG_ID, CHARGE_CODE)
  references TK_CHARGES_SETUP_T (ORG_ID, CHARGE_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_ATTACH_T
prompt =======================================
prompt
create table GLAS_DOC_CLIENT_ATTACH_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  client_code      NUMBER not null,
  attachment_code  NUMBER not null,
  attachment_desc  VARCHAR2(50),
  file_path        VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_DOC_CLIENT_ATTACH_T
  add constraint PK_DOC_CLIENT_ATTCH primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, ATTACHMENT_CODE);
alter table GLAS_DOC_CLIENT_ATTACH_T
  add constraint FK_DOC_CLIENT_ATTCH_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references GLAS_DOC_CLIENT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_BANK_T
prompt =====================================
prompt
create table GLAS_DOC_CLIENT_BANK_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  client_code      NUMBER not null,
  serial_no        NUMBER not null,
  bank_code        NUMBER,
  branch_code      NUMBER,
  account_no       VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  iban             VARCHAR2(50)
)
;
alter table GLAS_DOC_CLIENT_BANK_T
  add constraint PK_DOC_CLIENT_BANK_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, SERIAL_NO);
alter table GLAS_DOC_CLIENT_BANK_T
  add constraint FK_DOC_CL_BANK_BANK foreign key (ORG_ID, BANK_CODE)
  references GL_BANK_SETUP_T (ORG_ID, BANK_CODE);
alter table GLAS_DOC_CLIENT_BANK_T
  add constraint FK_DOC_CL_BANK_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references GLAS_DOC_CLIENT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_BNF_ATT_T
prompt ========================================
prompt
create table GLAS_DOC_CLIENT_BNF_ATT_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  beneficiary_code NUMBER not null,
  attachment_code  NUMBER not null,
  attachment_desc  VARCHAR2(50),
  file_path        VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_DOC_CLIENT_BNF_ATT_T
  add constraint PK_DOC_CLIENT_BNF_ATT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFICIARY_CODE, ATTACHMENT_CODE);
alter table GLAS_DOC_CLIENT_BNF_ATT_T
  add constraint FK_DOC_CLIENT_BNF_ATT_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFICIARY_CODE)
  references GLAS_DOC_BENEFICIARY_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFICIARY_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_EDU_HISTORY_T
prompt ============================================
prompt
create table GLAS_DOC_CLIENT_EDU_HISTORY_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  client_code      NUMBER not null,
  education_id     NUMBER not null,
  education_type   NUMBER,
  degree_name      VARCHAR2(200),
  institution_code VARCHAR2(200),
  passing_year     NUMBER,
  passing_grade    VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  passing_gpa      VARCHAR2(50)
)
;
alter table GLAS_DOC_CLIENT_EDU_HISTORY_T
  add constraint PK_DOC_CLIENT_EDU_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, EDUCATION_ID);
alter table GLAS_DOC_CLIENT_EDU_HISTORY_T
  add constraint FK_DOC_CL_EDU_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references GLAS_DOC_CLIENT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_EMP_HIST_T
prompt =========================================
prompt
create table GLAS_DOC_CLIENT_EMP_HIST_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  product_code      NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  employment_id     NUMBER not null,
  employer_name     VARCHAR2(200),
  designation       VARCHAR2(50),
  from_date         DATE,
  to_date           DATE,
  is_current        VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  employment_status VARCHAR2(1)
)
;
alter table GLAS_DOC_CLIENT_EMP_HIST_T
  add constraint PK_DOC_CLIENT_EMPLOY_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, EMPLOYMENT_ID);
alter table GLAS_DOC_CLIENT_EMP_HIST_T
  add constraint FK_DOC_CL_EMP_HIST_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references GLAS_DOC_CLIENT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_FAM_HIST_T
prompt =========================================
prompt
create table GLAS_DOC_CLIENT_FAM_HIST_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  client_code      NUMBER not null,
  person_id        NUMBER not null,
  person_name      VARCHAR2(50),
  relation_code    NUMBER,
  age              NUMBER,
  cause_of_death   NUMBER,
  age_at_death     NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  died_tag         VARCHAR2(1)
)
;
alter table GLAS_DOC_CLIENT_FAM_HIST_T
  add constraint PK_DOC_CLIENT_FM_HIST_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, PERSON_ID);
alter table GLAS_DOC_CLIENT_FAM_HIST_T
  add constraint FK_DOC_CL_FAM_HIST_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references GLAS_DOC_CLIENT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_IMMN_HIST_T
prompt ==========================================
prompt
create table GLAS_DOC_CLIENT_IMMN_HIST_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  product_code      NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  immunization_id   NUMBER not null,
  immunization_type NUMBER,
  immunization_date DATE,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  immunization_dose VARCHAR2(10)
)
;
alter table GLAS_DOC_CLIENT_IMMN_HIST_T
  add constraint PK_DOC_CLIENT_IMMUNE_HIST_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, IMMUNIZATION_ID);
alter table GLAS_DOC_CLIENT_IMMN_HIST_T
  add constraint FK_DOC_CL_IMMU_HIST_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references GLAS_DOC_CLIENT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_NOMINEE_T
prompt =================================
prompt
create table GLAS_DOC_NOMINEE_T
(
  org_id                    NUMBER not null,
  branch_id                 NUMBER not null,
  product_code              NUMBER not null,
  sub_product_code          NUMBER not null,
  takaful_type              VARCHAR2(1) not null,
  document_type             VARCHAR2(1) not null,
  document_no               VARCHAR2(10) not null,
  record_type               VARCHAR2(1) not null,
  document_year             VARCHAR2(10) not null,
  issue_count               NUMBER not null,
  endorsement_no            NUMBER not null,
  application_id            NUMBER not null,
  nominee_code              NUMBER not null,
  relation_code             NUMBER(9,6),
  percentage                NUMBER(15,2),
  amount                    NUMBER(15,2),
  cnic_no                   VARCHAR2(50),
  dob                       DATE,
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_update_date          DATE,
  last_updated_by           VARCHAR2(50),
  cnic_issue_date           DATE,
  cnic_expiry_date          DATE,
  nominee_name              VARCHAR2(50),
  is_guardian               VARCHAR2(1),
  guardian_name             VARCHAR2(50),
  guardian_relation_code    VARCHAR2(1),
  guardian_dob              DATE,
  guardian_cnic_no          VARCHAR2(50),
  guardian_cnic_issue_date  DATE,
  guardian_cnic_expiry_date DATE
)
;
alter table GLAS_DOC_NOMINEE_T
  add constraint PK_DOC_NOMINEE primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NOMINEE_CODE);
alter table GLAS_DOC_NOMINEE_T
  add constraint FK_DOC_NOMINEE_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_CLIENT_NOM_ATT_T
prompt ========================================
prompt
create table GLAS_DOC_CLIENT_NOM_ATT_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  nominee_code     NUMBER not null,
  attachment_code  NUMBER not null,
  attachment_desc  VARCHAR2(50),
  file_path        VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_DOC_CLIENT_NOM_ATT_T
  add constraint PK_DOC_CLIENT_NOM_ATT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NOMINEE_CODE, ATTACHMENT_CODE);
alter table GLAS_DOC_CLIENT_NOM_ATT_T
  add constraint FK_DOC_CLIENT_NOM_ATT_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NOMINEE_CODE)
  references GLAS_DOC_NOMINEE_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NOMINEE_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_PERS_INFO_T
prompt ==========================================
prompt
create table GLAS_DOC_CLIENT_PERS_INFO_T
(
  org_id                  NUMBER not null,
  branch_id               NUMBER not null,
  product_code            NUMBER not null,
  sub_product_code        NUMBER not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  client_code             NUMBER not null,
  info_id                 NUMBER not null,
  first_name              VARCHAR2(50),
  middle_name             VARCHAR2(50),
  last_name               VARCHAR2(50),
  title                   VARCHAR2(10),
  gender                  VARCHAR2(10),
  father_name             VARCHAR2(50),
  maiden_name             VARCHAR2(50),
  place_of_birth          VARCHAR2(50),
  marital_status          VARCHAR2(10),
  no_of_dependents        NUMBER,
  nationality_code        VARCHAR2(10),
  religion_code           VARCHAR2(10),
  height                  NUMBER,
  weight                  NUMBER,
  bmi                     NUMBER,
  height_scale            VARCHAR2(10),
  weight_scale            VARCHAR2(10),
  cnic_no                 VARCHAR2(30),
  father_cnic_no          VARCHAR2(30),
  spouse_cnic_no          VARCHAR2(30),
  cnic_issue_date         DATE,
  father_cnic_issue_date  DATE,
  spouse_cnic_issue_date  DATE,
  cnic_expiry_date        DATE,
  father_cnic_expiry_date DATE,
  spouse_cnic_expiry_date DATE,
  dob                     DATE,
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  nrp_tag                 VARCHAR2(10),
  passport_no             VARCHAR2(50),
  age                     NUMBER,
  waste                   NUMBER,
  waste_scale             VARCHAR2(10),
  mother_name             VARCHAR2(50),
  spouse_name             VARCHAR2(50),
  passing_gpa             VARCHAR2(50),
  country_of_birth        VARCHAR2(20),
  smoking_status          VARCHAR2(1)
)
;
alter table GLAS_DOC_CLIENT_PERS_INFO_T
  add constraint PK_DOC_CLIENT_PERS_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, INFO_ID);
alter table GLAS_DOC_CLIENT_PERS_INFO_T
  add constraint FK_DOC_CL_PERS_INFO_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references GLAS_DOC_CLIENT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_PROF_INFO_T
prompt ==========================================
prompt
create table GLAS_DOC_CLIENT_PROF_INFO_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  client_code      NUMBER not null,
  info_id          NUMBER not null,
  occupation       VARCHAR2(50),
  band_code        VARCHAR2(50),
  annual_salary    NUMBER,
  working_tag      VARCHAR2(10),
  client_category  VARCHAR2(10),
  source_of_income VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_DOC_CLIENT_PROF_INFO_T
  add constraint PK_DOC_CLIENT_PROF_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, INFO_ID);
alter table GLAS_DOC_CLIENT_PROF_INFO_T
  add constraint FK_DOC_CL_PROF_INFO_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references GLAS_DOC_CLIENT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_CLIENT_SOCIAL_ACC_T
prompt ===========================================
prompt
create table GLAS_DOC_CLIENT_SOCIAL_ACC_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  client_code      NUMBER not null,
  account_id       NUMBER not null,
  account_type     NUMBER,
  account_desc     VARCHAR2(200),
  account_url      VARCHAR2(200),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_DOC_CLIENT_SOCIAL_ACC_T
  add constraint PK_DOC_CLIENT_SCA_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, ACCOUNT_ID);
alter table GLAS_DOC_CLIENT_SOCIAL_ACC_T
  add constraint FK_DOC_CL_SOC_ACC_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references GLAS_DOC_CLIENT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table GLAS_DOC_CLNT_FAM_MED_HIST_T
prompt ===========================================
prompt
create table GLAS_DOC_CLNT_FAM_MED_HIST_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  client_code      NUMBER not null,
  person_id        NUMBER not null,
  med_serial_no    NUMBER not null,
  disease_code     VARCHAR2(50),
  notes            VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_DOC_CLNT_FAM_MED_HIST_T
  add constraint PK_DOC_CL_FM_MD_HIST primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, PERSON_ID, MED_SERIAL_NO);
alter table GLAS_DOC_CLNT_FAM_MED_HIST_T
  add constraint FK_DOC_CL_FM_MD_HST foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, PERSON_ID)
  references GLAS_DOC_CLIENT_FAM_HIST_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, PERSON_ID);

prompt
prompt Creating table GLAS_DOC_COINSURER_T
prompt ===================================
prompt
create table GLAS_DOC_COINSURER_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER,
  endorsement_no   NUMBER,
  application_id   NUMBER,
  coinsurer_code   NUMBER not null,
  coinsurer_share  NUMBER(9,6),
  coinsurer_amount NUMBER(15,2),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_update_date DATE,
  last_updated_by  VARCHAR2(50),
  coinsurer_type   VARCHAR2(1)
)
;
alter table GLAS_DOC_COINSURER_T
  add constraint PK_DOC_COINSURER primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, COINSURER_CODE);
alter table GLAS_DOC_COINSURER_T
  add constraint FK_DOC_COIN_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_COMMISSION_CYCLE_T
prompt ==========================================
prompt
create table GLAS_DOC_COMMISSION_CYCLE_T
(
  org_id                NUMBER not null,
  branch_id             NUMBER not null,
  serial_no             NUMBER not null,
  commission_cycle_id   NUMBER not null,
  product_code          NUMBER not null,
  sub_product_code      NUMBER not null,
  takaful_type          VARCHAR2(1) not null,
  document_type         VARCHAR2(1) not null,
  document_no           VARCHAR2(10) not null,
  record_type           VARCHAR2(1) not null,
  document_year         VARCHAR2(10) not null,
  issue_count           NUMBER not null,
  endorsement_no        NUMBER not null,
  application_id        NUMBER not null,
  agent_code            NUMBER not null,
  commission_rate       NUMBER(9,6),
  commission_flat_amt   NUMBER(15,2),
  commission_amount     NUMBER(15,2),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  agency_type           VARCHAR2(20),
  shares                NUMBER,
  gross_contribution    NUMBER,
  activity_type         VARCHAR2(100),
  comm_percent_share    NUMBER,
  gdh_doc_reference_no  VARCHAR2(50),
  activity_date         DATE,
  posting_tag           VARCHAR2(50),
  posted_by             VARCHAR2(50),
  posted_date           DATE,
  contribution_received NUMBER,
  comm_settled          NUMBER,
  installment_no        NUMBER not null,
  hold_flag             VARCHAR2(5),
  hold_by               VARCHAR2(50),
  hold_date             DATE,
  hold_comment          VARCHAR2(500),
  release_comment       VARCHAR2(500),
  commissionable_gross  NUMBER
)
;
alter table GLAS_DOC_COMMISSION_CYCLE_T
  add constraint PK_DOC_COMMISION primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, INSTALLMENT_NO, SERIAL_NO, COMMISSION_CYCLE_ID);

prompt
prompt Creating table GLAS_DOC_CONDITIONS_MAP_T
prompt ========================================
prompt
create table GLAS_DOC_CONDITIONS_MAP_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  cn_code          NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  default_tag      VARCHAR2(1)
)
;
alter table GLAS_DOC_CONDITIONS_MAP_T
  add constraint GLAS_DOC_CONDITIONS_MAP_PK primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CN_CODE);
alter table GLAS_DOC_CONDITIONS_MAP_T
  add constraint FK_DOC_COND_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_EXCULUSION_MAP_T
prompt ========================================
prompt
create table GLAS_DOC_EXCULUSION_MAP_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  ex_code          NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  default_tag      VARCHAR2(1)
)
;
alter table GLAS_DOC_EXCULUSION_MAP_T
  add constraint GLAS_DOC_EXCULUSION_MAP_PK primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, EX_CODE);
alter table GLAS_DOC_EXCULUSION_MAP_T
  add constraint FK_DOC_EXCL_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_EXPENSE_MARGIN_T
prompt ========================================
prompt
create table GLAS_DOC_EXPENSE_MARGIN_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  margin_code      NUMBER not null,
  loading_percent  NUMBER(9,6),
  loading_amount   NUMBER(15,2),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_DOC_EXPENSE_MARGIN_T
  add constraint PK_DOC_EXP_M primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, MARGIN_CODE);
alter table GLAS_DOC_EXPENSE_MARGIN_T
  add constraint FK_DOC_EXP_MARGIN_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_INSTALLMENTS_T
prompt ======================================
prompt
create table GLAS_DOC_INSTALLMENTS_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  product_code             NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  serial_no                NUMBER not null,
  due_date                 DATE,
  gross_contribution       VARCHAR2(50),
  wakala_amount            VARCHAR2(50),
  quota_share_contribution VARCHAR2(50),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  osf                      NUMBER,
  ptf                      NUMBER,
  period_end_date          DATE,
  installment_days         NUMBER,
  posting_tag              VARCHAR2(1),
  post_user                VARCHAR2(50),
  post_date                DATE,
  special_discount         NUMBER,
  gross_cont_after_disc    NUMBER,
  received_amount          NUMBER,
  installment_type         VARCHAR2(1),
  discount_with_no_wakala  NUMBER,
  commission_amount        NUMBER
)
;
alter table GLAS_DOC_INSTALLMENTS_T
  add constraint PK_DOC_INSTALLMENTS primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);
alter table GLAS_DOC_INSTALLMENTS_T
  add constraint FK_DOC_INST_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_INSURED_BENEFICIARY_T
prompt =============================================
prompt
create table GLAS_DOC_INSURED_BENEFICIARY_T
(
  org_id                    NUMBER not null,
  branch_id                 NUMBER not null,
  product_code              NUMBER not null,
  sub_product_code          NUMBER not null,
  takaful_type              VARCHAR2(1) not null,
  document_type             VARCHAR2(1) not null,
  document_no               VARCHAR2(10) not null,
  record_type               VARCHAR2(1) not null,
  document_year             VARCHAR2(10) not null,
  issue_count               NUMBER not null,
  endorsement_no            NUMBER not null,
  application_id            NUMBER not null,
  item_no                   NUMBER not null,
  beneficiary_code          NUMBER not null,
  relation_code             NUMBER(9,6),
  percentage                NUMBER(15,2),
  amount                    NUMBER(15,2),
  cnic_no                   VARCHAR2(50),
  dob                       DATE,
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_update_date          DATE,
  last_updated_by           VARCHAR2(50),
  cnic_issue_date           DATE,
  cnic_expiry_date          DATE,
  beneficiary_name          VARCHAR2(50),
  is_guardian               VARCHAR2(1),
  guardian_name             VARCHAR2(50),
  guardian_relation_code    VARCHAR2(10),
  guardian_dob              DATE,
  guardian_cnic_no          VARCHAR2(50),
  guardian_cnic_issue_date  DATE,
  guardian_cnic_expiry_date DATE,
  mobile_no                 VARCHAR2(30),
  beneficiary_email         VARCHAR2(50),
  age                       NUMBER(3)
)
;
alter table GLAS_DOC_INSURED_BENEFICIARY_T
  add constraint PK_DOC_INSURED_BENEFICIARY primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, BENEFICIARY_CODE);

prompt
prompt Creating table GLAS_DOC_INSURED_ITEMS_T
prompt =======================================
prompt
create table GLAS_DOC_INSURED_ITEMS_T
(
  org_id                 NUMBER not null,
  branch_id              NUMBER not null,
  product_code           NUMBER not null,
  sub_product_code       NUMBER not null,
  takaful_type           VARCHAR2(1) not null,
  document_type          VARCHAR2(1) not null,
  document_no            VARCHAR2(10) not null,
  record_type            VARCHAR2(1) not null,
  document_year          VARCHAR2(10) not null,
  issue_count            NUMBER not null,
  endorsement_no         NUMBER not null,
  application_id         NUMBER not null,
  item_no                NUMBER not null,
  item_type              VARCHAR2(1),
  insured_id             NUMBER,
  first_name             VARCHAR2(50),
  father_name            VARCHAR2(50),
  last_name              VARCHAR2(50),
  gender                 VARCHAR2(1),
  nationality_code       VARCHAR2(5),
  date_of_birth          DATE,
  joining_date           DATE,
  effective_date         DATE,
  designation_code       NUMBER,
  category_code          NUMBER,
  salary                 NUMBER,
  sum_insured            NUMBER,
  item_branch_id         NUMBER,
  life_class             NUMBER,
  accidental_class       NUMBER,
  account_no             VARCHAR2(50),
  loan_period            NUMBER,
  personal_id            VARCHAR2(50),
  remarks                VARCHAR2(500),
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE,
  height                 NUMBER,
  weight                 NUMBER,
  bmi                    NUMBER,
  smoker_type            VARCHAR2(1),
  over_age_tag           VARCHAR2(1),
  below_age_tag          VARCHAR2(1),
  over_fcl_tag           VARCHAR2(1),
  below_fcl_tag          VARCHAR2(1),
  fcl                    NUMBER(15,2),
  decision_type          NUMBER,
  basic_contribution     NUMBER(15,2),
  gross_contribution     NUMBER(15,2),
  age                    NUMBER(3),
  retirement_date        DATE,
  cnic                   VARCHAR2(50),
  cnic_issue_date        DATE,
  cnic_expiry_date       DATE,
  employee_email_address VARCHAR2(200),
  employee_contact       NUMBER,
  relation_code          NUMBER,
  plan_code              NUMBER,
  is_over_age            VARCHAR2(1),
  cnic_no                VARCHAR2(50),
  starttime              NUMBER,
  starttimeam            VARCHAR2(1),
  approved_sa            NUMBER,
  decision_code          VARCHAR2(50),
  bank_name              VARCHAR2(50),
  item_status            VARCHAR2(1),
  occupational_class     VARCHAR2(10),
  net_contribution       NUMBER,
  wakala_fee             NUMBER,
  retakaful_contribution NUMBER,
  policy_item            VARCHAR2(1),
  approved_uw_sa         NUMBER,
  retakaful_sa           NUMBER,
  counter_offer_tag      VARCHAR2(1),
  uw_mandatory           VARCHAR2(1),
  folio_no               NUMBER,
  marital_status         VARCHAR2(5),
  commission_amount      NUMBER
)
;
alter table GLAS_DOC_INSURED_ITEMS_T
  add constraint PK_DOC_INS_ITEMS primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO);
alter table GLAS_DOC_INSURED_ITEMS_T
  add constraint FK_DOC_INS_ITEMS_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_INSURED_BENEFIT_T
prompt =========================================
prompt
create table GLAS_DOC_INSURED_BENEFIT_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  product_code             NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  item_no                  NUMBER not null,
  benefit_code             NUMBER not null,
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  sum_assured              NUMBER(15,2),
  basic_contribution       NUMBER(15,2),
  gross_contribution       NUMBER(15,2),
  calculated_sa            NUMBER(15,2),
  net_rate                 NUMBER,
  net_contribution         NUMBER,
  gross_rate               NUMBER,
  retention_sa             NUMBER,
  retention_contribution   NUMBER,
  quota_share_sa           NUMBER,
  quota_share_contribution NUMBER,
  actual_ri_rate           NUMBER,
  basic_sa                 NUMBER,
  gr_as_per_bsa            NUMBER,
  item_effective_days      NUMBER,
  doc_total_days           NUMBER,
  commission_amount        NUMBER
)
;
alter table GLAS_DOC_INSURED_BENEFIT_T
  add constraint PK_DOC_INS_BENEFIT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, BENEFIT_CODE);
alter table GLAS_DOC_INSURED_BENEFIT_T
  add constraint FK_DOC_INS_BF_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO)
  references GLAS_DOC_INSURED_ITEMS_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO);

prompt
prompt Creating table GLAS_DOC_INSURED_BENEFIT_UW_T
prompt ============================================
prompt
create table GLAS_DOC_INSURED_BENEFIT_UW_T
(
  org_id                      NUMBER not null,
  branch_id                   NUMBER not null,
  product_code                NUMBER not null,
  sub_product_code            NUMBER not null,
  takaful_type                VARCHAR2(1) not null,
  document_type               VARCHAR2(1) not null,
  document_no                 VARCHAR2(10) not null,
  record_type                 VARCHAR2(1) not null,
  document_year               VARCHAR2(10) not null,
  issue_count                 NUMBER not null,
  endorsement_no              NUMBER not null,
  application_id              NUMBER not null,
  item_no                     NUMBER not null,
  benefit_code                NUMBER not null,
  created_by                  VARCHAR2(50),
  creation_date               DATE,
  last_updated_by             VARCHAR2(50),
  last_update_date            DATE,
  sum_assured                 NUMBER(15,2),
  basic_contribution          NUMBER(15,2),
  gross_contribution          NUMBER(15,2),
  calculated_sa               NUMBER(15,2),
  net_rate                    NUMBER,
  net_contribution            NUMBER,
  gross_rate                  NUMBER,
  retention_sa                NUMBER,
  retention_contribution      NUMBER,
  quota_share_sa              NUMBER,
  quota_share_contribution    NUMBER,
  uw_loading_rate             NUMBER,
  uw_loading_contribution     NUMBER,
  total_gross_contribution    NUMBER,
  total_net_contribution      NUMBER,
  decision_code               VARCHAR2(50),
  actual_ri_rate              NUMBER,
  effective_date              DATE,
  gr_as_per_bsa               NUMBER,
  item_effective_days         NUMBER,
  doc_total_days              NUMBER,
  observation                 VARCHAR2(300),
  uw_loading_net_rate         NUMBER,
  uw_loading_gross_rate       NUMBER,
  uw_loading_net_contribution NUMBER,
  wakala_fee                  NUMBER
)
;
alter table GLAS_DOC_INSURED_BENEFIT_UW_T
  add constraint PK_DOC_INS_BENEFIT_UW primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, BENEFIT_CODE);
alter table GLAS_DOC_INSURED_BENEFIT_UW_T
  add constraint FK_DOC_INS_BF_DOC_UW foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO)
  references GLAS_DOC_INSURED_ITEMS_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO);

prompt
prompt Creating table GLAS_DOC_INSURED_ITEMS_LOG_T
prompt ===========================================
prompt
create table GLAS_DOC_INSURED_ITEMS_LOG_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  product_code       NUMBER not null,
  sub_product_code   NUMBER not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  issue_count        NUMBER not null,
  endorsement_no     NUMBER not null,
  application_id     NUMBER not null,
  item_no            NUMBER not null,
  item_type          VARCHAR2(1),
  old_gender         VARCHAR2(1),
  old_date_of_birth  DATE,
  old_item_branch_id NUMBER,
  old_age            NUMBER(3),
  old_relation_code  NUMBER,
  old_plan_code      NUMBER,
  old_marital_status VARCHAR2(5),
  new_gender         VARCHAR2(1),
  new_date_of_birth  DATE,
  new_item_branch_id NUMBER,
  new_age            NUMBER(3),
  new_relation_code  NUMBER,
  new_plan_code      NUMBER,
  new_marital_status VARCHAR2(5),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_DOC_INSURED_ITEMS_LOG_T
  add constraint PK_DOC_INS_LOGS primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO);

prompt
prompt Creating table GLAS_DOC_INSURED_ITEMS_STG_T
prompt ===========================================
prompt
create table GLAS_DOC_INSURED_ITEMS_STG_T
(
  org_id                 NUMBER not null,
  branch_id              NUMBER not null,
  product_code           NUMBER not null,
  sub_product_code       NUMBER not null,
  takaful_type           VARCHAR2(1) not null,
  document_type          VARCHAR2(1) not null,
  document_no            VARCHAR2(10) not null,
  record_type            VARCHAR2(1) not null,
  document_year          VARCHAR2(10) not null,
  issue_count            NUMBER not null,
  endorsement_no         NUMBER not null,
  application_id         NUMBER not null,
  item_no                NUMBER not null,
  item_type              VARCHAR2(1),
  insured_id             NUMBER,
  first_name             VARCHAR2(50),
  father_name            VARCHAR2(50),
  last_name              VARCHAR2(50),
  gender                 VARCHAR2(1),
  nationality_code       VARCHAR2(5),
  date_of_birth          DATE,
  joining_date           DATE,
  effective_date         DATE,
  designation_code       NUMBER,
  category_code          NUMBER,
  salary                 NUMBER,
  sum_insured            NUMBER,
  item_branch_id         NUMBER,
  life_class             NUMBER,
  accidental_class       NUMBER,
  account_no             VARCHAR2(50),
  loan_period            NUMBER,
  personal_id            VARCHAR2(50),
  remarks                VARCHAR2(500),
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE,
  height                 NUMBER,
  weight                 NUMBER,
  bmi                    NUMBER,
  smoker_type            VARCHAR2(1),
  over_age_tag           VARCHAR2(1),
  below_age_tag          VARCHAR2(1),
  over_fcl_tag           VARCHAR2(1),
  below_fcl_tag          VARCHAR2(1),
  fcl                    NUMBER(15,2),
  decision_type          NUMBER,
  basic_contribution     NUMBER(15,2),
  gross_contribution     NUMBER(15,2),
  age                    NUMBER(3),
  retirement_date        DATE,
  cnic                   VARCHAR2(50),
  cnic_issue_date        DATE,
  cnic_expiry_date       DATE,
  employee_email_address VARCHAR2(200),
  employee_contact       NUMBER,
  relation_code          NUMBER,
  plan_code              NUMBER,
  is_over_age            VARCHAR2(1),
  cnic_no                VARCHAR2(50),
  starttime              NUMBER,
  starttimeam            VARCHAR2(1),
  approved_sa            NUMBER,
  decision_code          VARCHAR2(50),
  bank_name              VARCHAR2(50),
  item_status            VARCHAR2(1),
  occupational_class     VARCHAR2(10),
  net_contribution       NUMBER,
  wakala_fee             NUMBER,
  retakaful_contribution NUMBER,
  policy_item            VARCHAR2(1),
  approved_uw_sa         NUMBER,
  retakaful_sa           NUMBER,
  counter_offer_tag      VARCHAR2(1),
  uw_mandatory           VARCHAR2(1),
  folio_no               NUMBER,
  marital_status         VARCHAR2(5),
  commission_amount      NUMBER
)
;
alter table GLAS_DOC_INSURED_ITEMS_STG_T
  add constraint PK_DOC_INS_ITEMS_STG primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO);

prompt
prompt Creating table GLAS_DOC_INSURED_ITEM_DTL_T
prompt ==========================================
prompt
create table GLAS_DOC_INSURED_ITEM_DTL_T
(
  org_id                    NUMBER not null,
  branch_id                 NUMBER not null,
  product_code              NUMBER not null,
  sub_product_code          NUMBER not null,
  takaful_type              VARCHAR2(1) not null,
  document_type             VARCHAR2(1) not null,
  document_no               VARCHAR2(10) not null,
  record_type               VARCHAR2(1) not null,
  document_year             VARCHAR2(10) not null,
  issue_count               NUMBER not null,
  endorsement_no            NUMBER not null,
  application_id            NUMBER not null,
  item_no                   NUMBER not null,
  item_code                 NUMBER not null,
  item_name                 VARCHAR2(150),
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_update_date          DATE,
  last_updated_by           VARCHAR2(50),
  field1                    VARCHAR2(500),
  field2                    VARCHAR2(500),
  field3                    VARCHAR2(500),
  house_number              VARCHAR2(150) not null,
  postal_code               VARCHAR2(50),
  own_home                  VARCHAR2(1),
  cover_type                NUMBER,
  cover_start_date          DATE not null,
  property_type             NUMBER,
  no_of_bedroom             NUMBER,
  no_of_bathroom            NUMBER,
  no_of_othr_room           NUMBER,
  build_date                DATE,
  external_wall_made        NUMBER,
  roof_made                 NUMBER,
  roof_flat_percent         NUMBER,
  home_flooded              VARCHAR2(1),
  land_slipped              VARCHAR2(1),
  listed_building           VARCHAR2(1),
  no_of_person_18_and_above NUMBER,
  no_of_person_below_18     NUMBER,
  at_home_time              NUMBER,
  business_done_at_home     NUMBER,
  claim_in_last_5years      VARCHAR2(1),
  no_claim_period_building  NUMBER,
  no_claim_period_content   NUMBER,
  insured_title             NUMBER,
  insured_first_name        VARCHAR2(100),
  insured_sur_name          VARCHAR2(100),
  insured_dob               DATE,
  employment_status         NUMBER,
  is_joint_policy_holder    VARCHAR2(1),
  is_interested_party       VARCHAR2(1),
  payment_mode              NUMBER,
  email_address             VARCHAR2(150),
  mobile_number             VARCHAR2(50),
  promotional_code          VARCHAR2(150),
  travel_journey_type       NUMBER,
  travel_option             NUMBER,
  trvl_health_stmnt         VARCHAR2(1),
  aviva_policy              VARCHAR2(1),
  assumption_stmnt          VARCHAR2(1)
)
;
alter table GLAS_DOC_INSURED_ITEM_DTL_T
  add constraint PK_GL_DOC_INSURED_ITEM_DTL_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, ITEM_CODE);

prompt
prompt Creating table GLAS_DOC_INS_ITEMS_MONTHLY_T
prompt ===========================================
prompt
create table GLAS_DOC_INS_ITEMS_MONTHLY_T
(
  org_id                 NUMBER not null,
  branch_id              NUMBER not null,
  product_code           NUMBER not null,
  sub_product_code       NUMBER not null,
  takaful_type           VARCHAR2(1) not null,
  document_type          VARCHAR2(1) not null,
  document_no            VARCHAR2(10) not null,
  record_type            VARCHAR2(1) not null,
  document_year          VARCHAR2(10) not null,
  issue_count            NUMBER not null,
  endorsement_no         NUMBER not null,
  application_id         NUMBER not null,
  month_id               NUMBER not null,
  item_no                NUMBER not null,
  item_type              VARCHAR2(1),
  insured_id             NUMBER,
  first_name             VARCHAR2(50),
  father_name            VARCHAR2(50),
  last_name              VARCHAR2(50),
  gender                 VARCHAR2(1),
  nationality_code       VARCHAR2(5),
  date_of_birth          DATE,
  joining_date           DATE,
  effective_date         DATE,
  designation_code       NUMBER,
  category_code          NUMBER,
  salary                 NUMBER,
  sum_insured            NUMBER,
  item_branch_id         NUMBER,
  life_class             NUMBER,
  accidental_class       NUMBER,
  account_no             VARCHAR2(50),
  loan_period            NUMBER,
  personal_id            VARCHAR2(50),
  remarks                VARCHAR2(500),
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE,
  height                 NUMBER,
  weight                 NUMBER,
  bmi                    NUMBER,
  smoker_type            VARCHAR2(1),
  over_age_tag           VARCHAR2(1),
  below_age_tag          VARCHAR2(1),
  over_fcl_tag           VARCHAR2(1),
  below_fcl_tag          VARCHAR2(1),
  fcl                    NUMBER(15,2),
  decision_type          NUMBER,
  basic_contribution     NUMBER(15,2),
  gross_contribution     NUMBER(15,2),
  age                    NUMBER(3),
  retirement_date        DATE,
  cnic                   VARCHAR2(50),
  cnic_issue_date        DATE,
  cnic_expiry_date       DATE,
  employee_email_address VARCHAR2(200),
  employee_contact       NUMBER,
  relation_code          NUMBER,
  plan_code              NUMBER,
  is_over_age            VARCHAR2(1),
  cnic_no                VARCHAR2(50),
  starttime              NUMBER,
  starttimeam            VARCHAR2(1),
  approved_sa            NUMBER,
  decision_code          VARCHAR2(50),
  bank_name              VARCHAR2(50),
  item_status            VARCHAR2(1),
  occupational_class     VARCHAR2(10),
  net_contribution       NUMBER,
  wakala_fee             NUMBER,
  retakaful_contribution NUMBER,
  policy_item            VARCHAR2(1),
  approved_uw_sa         NUMBER,
  retakaful_sa           NUMBER,
  counter_offer_tag      VARCHAR2(1),
  uw_mandatory           VARCHAR2(1),
  commission_amount      NUMBER
)
;
alter table GLAS_DOC_INS_ITEMS_MONTHLY_T
  add constraint PK_DOC_INS_ITEMS_MONT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, MONTH_ID, ITEM_NO);
alter table GLAS_DOC_INS_ITEMS_MONTHLY_T
  add constraint FK_DOC_INS_ITEMS_MONT foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_ITEM_BENEFIT_INSTMT_T
prompt =============================================
prompt
create table GLAS_DOC_ITEM_BENEFIT_INSTMT_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  product_code             NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  item_no                  NUMBER not null,
  benefit_code             NUMBER not null,
  serial_no                NUMBER not null,
  due_date                 DATE,
  gross_contribution       VARCHAR2(50),
  wakala_amount            VARCHAR2(50),
  quota_share_contribution VARCHAR2(50),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  osf                      NUMBER,
  ptf                      NUMBER,
  period_end_date          DATE,
  installment_days         NUMBER,
  posting_tag              VARCHAR2(1),
  post_user                VARCHAR2(50),
  post_date                DATE,
  special_discount         NUMBER,
  gross_cont_after_disc    NUMBER,
  received_amount          NUMBER,
  installment_type         VARCHAR2(1),
  commission_amount        NUMBER
)
;
alter table GLAS_DOC_ITEM_BENEFIT_INSTMT_T
  add constraint PK_DOC_ITEM_BENEFIT_INSTMT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, BENEFIT_CODE, SERIAL_NO);
alter table GLAS_DOC_ITEM_BENEFIT_INSTMT_T
  add constraint FK_DOC_ITEM_BENEFIT_INSTMT foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, BENEFIT_CODE)
  references GLAS_DOC_INSURED_BENEFIT_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, BENEFIT_CODE);

prompt
prompt Creating table GLAS_DOC_ITEM_BRANCH_INSTMT_T
prompt ============================================
prompt
create table GLAS_DOC_ITEM_BRANCH_INSTMT_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  product_code             NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  item_branch_id           NUMBER not null,
  serial_no                NUMBER not null,
  due_date                 DATE,
  gross_contribution       VARCHAR2(50),
  wakala_amount            VARCHAR2(50),
  quota_share_contribution VARCHAR2(50),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  osf                      NUMBER,
  ptf                      NUMBER,
  period_end_date          DATE,
  installment_days         NUMBER,
  posting_tag              VARCHAR2(1),
  post_user                VARCHAR2(50),
  post_date                DATE,
  special_discount         NUMBER,
  gross_cont_after_disc    NUMBER,
  received_amount          NUMBER,
  installment_type         VARCHAR2(1),
  discount_with_no_wakala  NUMBER,
  commission_amount        NUMBER
)
;
alter table GLAS_DOC_ITEM_BRANCH_INSTMT_T
  add constraint PK_DOC_ITEM_BRANCH_INSTMT primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_BRANCH_ID, SERIAL_NO);
alter table GLAS_DOC_ITEM_BRANCH_INSTMT_T
  add constraint FK_DOC_ITEM_BRANCH_INSTMT foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_ITEM_INSTALLMENTS_T
prompt ===========================================
prompt
create table GLAS_DOC_ITEM_INSTALLMENTS_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  product_code             NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  item_no                  NUMBER not null,
  serial_no                NUMBER not null,
  due_date                 DATE,
  gross_contribution       VARCHAR2(50),
  wakala_amount            VARCHAR2(50),
  quota_share_contribution VARCHAR2(50),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  osf                      NUMBER,
  ptf                      NUMBER,
  period_end_date          DATE,
  installment_days         NUMBER,
  posting_tag              VARCHAR2(1),
  post_user                VARCHAR2(50),
  post_date                DATE,
  special_discount         NUMBER,
  gross_cont_after_disc    NUMBER,
  received_amount          NUMBER,
  installment_type         VARCHAR2(1),
  commission_amount        NUMBER
)
;
alter table GLAS_DOC_ITEM_INSTALLMENTS_T
  add constraint PK_DOC_ITEM_INSTALLMENTS primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, SERIAL_NO);
alter table GLAS_DOC_ITEM_INSTALLMENTS_T
  add constraint FK_DOC_ITEM_INST foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO)
  references GLAS_DOC_INSURED_ITEMS_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO);

prompt
prompt Creating table GLAS_DOC_MED_DTL_CHLD_T
prompt ======================================
prompt
create table GLAS_DOC_MED_DTL_CHLD_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  item_no          NUMBER not null,
  uw_code          VARCHAR2(5) not null,
  uw_dtl_code      NUMBER not null,
  uw_status        VARCHAR2(5),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  file_attached    VARCHAR2(200),
  remarks          VARCHAR2(500)
)
;
alter table GLAS_DOC_MED_DTL_CHLD_T
  add constraint PK_GLAS_DOC_MED_DTL_CHLD_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, UW_CODE, UW_DTL_CODE);

prompt
prompt Creating table GLAS_DOC_MED_DTL_T
prompt =================================
prompt
create table GLAS_DOC_MED_DTL_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  item_no          NUMBER not null,
  uw_code          VARCHAR2(5) not null,
  uw_status        VARCHAR2(5),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  file_attached    VARCHAR2(200),
  remarks          VARCHAR2(500),
  completion_date  DATE,
  display_order    NUMBER,
  service_provider VARCHAR2(10)
)
;
alter table GLAS_DOC_MED_DTL_T
  add constraint PK_GLAS_DOC_MED_DTL_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, UW_CODE);
alter table GLAS_DOC_MED_DTL_T
  add constraint FK_DOC_INS_MED_DTL_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO)
  references GLAS_DOC_INSURED_ITEMS_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO);

prompt
prompt Creating table GLAS_DOC_POSTING_HISTORY_T
prompt =========================================
prompt
create table GLAS_DOC_POSTING_HISTORY_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  serial_no        NUMBER not null,
  post_by          VARCHAR2(50),
  post_date        VARCHAR2(50),
  matrix_id        VARCHAR2(50),
  voucher_no       VARCHAR2(50),
  advice_no        VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_DOC_POSTING_HISTORY_T
  add constraint PK_DOC_POST_HIST primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);
alter table GLAS_DOC_POSTING_HISTORY_T
  add constraint FK_DOC_POST_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_DOC_VARIABLE_VALUES_T
prompt =========================================
prompt
create table GLAS_DOC_VARIABLE_VALUES_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  variable_name    VARCHAR2(250) not null,
  variable_value   VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_DOC_VARIABLE_VALUES_T
  add constraint PK_DOC_VAR_VALUES primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, VARIABLE_NAME);
alter table GLAS_DOC_VARIABLE_VALUES_T
  add constraint FK_DOC_VAR_VALUES_DOC foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table GLAS_EXCLUTION_T
prompt ===============================
prompt
create table GLAS_EXCLUTION_T
(
  org_id            NUMBER not null,
  benefit_code      NUMBER not null,
  application_id    NUMBER not null,
  exclusion_code    NUMBER not null,
  default_tag       VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  ex_text_quotation VARCHAR2(4000),
  ex_text_policy    VARCHAR2(4000),
  active            VARCHAR2(5),
  print_order       VARCHAR2(5),
  ex_desc           VARCHAR2(150)
)
;
alter table GLAS_EXCLUTION_T
  add constraint PK_EXCLUTION primary key (ORG_ID, BENEFIT_CODE, APPLICATION_ID, EXCLUSION_CODE);

prompt
prompt Creating table GLAS_EXPENSE_MARGIN_SETUP_T
prompt ==========================================
prompt
create table GLAS_EXPENSE_MARGIN_SETUP_T
(
  org_id            NUMBER not null,
  margin_code       NUMBER not null,
  margin_desc       VARCHAR2(500),
  margin_short_desc VARCHAR2(50),
  loading_percent   NUMBER(9,6),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_EXPENSE_MARGIN_SETUP_T
  add constraint PK_EXP_M_SETUP_T primary key (ORG_ID, MARGIN_CODE);
alter table GLAS_EXPENSE_MARGIN_SETUP_T
  add constraint FK_EXP_M_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_FORMULA_SETUP_T
prompt ===================================
prompt
create table GLAS_FORMULA_SETUP_T
(
  org_id             NUMBER not null,
  formula_code       NUMBER not null,
  formula_desc       VARCHAR2(500),
  formula_short_desc VARCHAR2(50),
  formula_value      VARCHAR2(500),
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_FORMULA_SETUP_T
  add constraint PK_FORMULA_SETUP_T primary key (ORG_ID, FORMULA_CODE);
alter table GLAS_FORMULA_SETUP_T
  add constraint FK_FORMULA_SETUP_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_ICD10_SETUP
prompt ===============================
prompt
create table GLAS_ICD10_SETUP
(
  code              VARCHAR2(30) not null,
  description       VARCHAR2(500),
  created_by        VARCHAR2(50),
  created_on        DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  org_id            NUMBER not null,
  short_description VARCHAR2(200),
  icd_rate          NUMBER,
  rate_code         NUMBER not null
)
;
alter table GLAS_ICD10_SETUP
  add constraint GLAS_ICD10_SETUP_PK primary key (ORG_ID, RATE_CODE, CODE);

prompt
prompt Creating table GLAS_MAIN_PROD_CAT_DTL_T
prompt =======================================
prompt
create table GLAS_MAIN_PROD_CAT_DTL_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  categoryhd_id     NUMBER not null,
  categorydtl_id    NUMBER not null,
  description       VARCHAR2(2500),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_MAIN_PROD_CAT_DTL_T
  add primary key (ORG_ID, MAIN_PRODUCT_CODE, CATEGORYHD_ID, CATEGORYDTL_ID);

prompt
prompt Creating table GLAS_MAIN_PROD_CAT_HD_T
prompt ======================================
prompt
create table GLAS_MAIN_PROD_CAT_HD_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  categoryhd_id     NUMBER not null,
  description       VARCHAR2(2500),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_MAIN_PROD_CAT_HD_T
  add primary key (ORG_ID, MAIN_PRODUCT_CODE, CATEGORYHD_ID);

prompt
prompt Creating table GLAS_M_APP_CATEGORY_SETUP_T
prompt ==========================================
prompt
create table GLAS_M_APP_CATEGORY_SETUP_T
(
  org_id           NUMBER not null,
  category_code    NUMBER not null,
  category_desc    VARCHAR2(500),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  file_path        VARCHAR2(500),
  product_id       NUMBER
)
;
alter table GLAS_M_APP_CATEGORY_SETUP_T
  add constraint PK_GLAS_PROD_CAT_MAPPING primary key (ORG_ID, CATEGORY_CODE);

prompt
prompt Creating table GLAS_M_APP_MODAL_DTL_T
prompt =====================================
prompt
create table GLAS_M_APP_MODAL_DTL_T
(
  org_id           NUMBER not null,
  container_id     VARCHAR2(150) not null,
  record_id        NUMBER not null,
  type             VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  description      VARCHAR2(1000),
  display_order    NUMBER
)
;
alter table GLAS_M_APP_MODAL_DTL_T
  add constraint GLAS_M_APP_MODAL_DTL_T primary key (ORG_ID, CONTAINER_ID, RECORD_ID);

prompt
prompt Creating table GLAS_M_APP_MODAL_HD_T
prompt ====================================
prompt
create table GLAS_M_APP_MODAL_HD_T
(
  org_id           NUMBER not null,
  container_id     VARCHAR2(1000) not null,
  active_tag       VARCHAR2(1),
  main_heading     VARCHAR2(400),
  type             VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_M_APP_MODAL_HD_T
  add constraint GLAS_M_APP_MODAL_HD_T primary key (ORG_ID, CONTAINER_ID);

prompt
prompt Creating table GLAS_OCCUPATION_SETUP_T
prompt ======================================
prompt
create table GLAS_OCCUPATION_SETUP_T
(
  org_id                NUMBER not null,
  occupation_code       NUMBER not null,
  occupation_desc       VARCHAR2(500),
  occupation_short_desc VARCHAR2(50),
  class_code            NUMBER,
  active                VARCHAR2(1),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  code                  VARCHAR2(50),
  decision_tag          VARCHAR2(10)
)
;
alter table GLAS_OCCUPATION_SETUP_T
  add constraint PK_OCCUPATION_SETUP_T primary key (ORG_ID, OCCUPATION_CODE);
alter table GLAS_OCCUPATION_SETUP_T
  add constraint FK_OCCUPATION_SETUP_T_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_PAYMENT_MODE_LOAD_T
prompt =======================================
prompt
create table GLAS_PAYMENT_MODE_LOAD_T
(
  org_id           NUMBER not null,
  payment_mode     VARCHAR2(10) not null,
  loading_rate     NUMBER(9,6),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE not null,
  flat_amount      NUMBER
)
;
alter table GLAS_PAYMENT_MODE_LOAD_T
  add constraint PK_PAYM_LOAD_SETUP_T primary key (ORG_ID, PAYMENT_MODE, LAST_UPDATE_DATE);
alter table GLAS_PAYMENT_MODE_LOAD_T
  add constraint FK_PAYM_LOAD_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_PROD_BEN_TERMS_T
prompt ====================================
prompt
create table GLAS_PROD_BEN_TERMS_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  benefit_code      NUMBER not null,
  serial_no         NUMBER not null,
  policy_term       VARCHAR2(100),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  payment_term      VARCHAR2(1)
)
;
alter table GLAS_PROD_BEN_TERMS_T
  add primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE, SERIAL_NO);

prompt
prompt Creating table GLAS_PROD_CAT_MAPPING_T
prompt ======================================
prompt
create table GLAS_PROD_CAT_MAPPING_T
(
  org_id           NUMBER not null,
  category_code    NUMBER not null,
  category_desc    VARCHAR2(500),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_PROD_CAT_MAPPING_T
  add constraint PK_GLAS2_PROD_CAT_MAPPING primary key (ORG_ID, CATEGORY_CODE);

prompt
prompt Creating table GLAS_REINSURER_SETUP_T
prompt =====================================
prompt
create table GLAS_REINSURER_SETUP_T
(
  org_id           NUMBER not null,
  reinsurer_code   NUMBER not null,
  description      VARCHAR2(500),
  short_desc       VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  reinsurer_number VARCHAR2(8)
)
;
alter table GLAS_REINSURER_SETUP_T
  add constraint PK_REINSURER_SETUP primary key (ORG_ID, REINSURER_CODE);
alter table GLAS_REINSURER_SETUP_T
  add constraint FK_REINSURER_SETUP_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_TREATY_DTL_SETUP_T
prompt ======================================
prompt
create table GLAS_TREATY_DTL_SETUP_T
(
  org_id                NUMBER not null,
  treaty_code           NUMBER not null,
  treaty_detail_code    NUMBER not null,
  effective_start_date  DATE,
  treaty_type           VARCHAR2(10),
  currency_code         VARCHAR2(10),
  age_basis             VARCHAR2(10),
  req_based_on          VARCHAR2(10),
  rate_basis            VARCHAR2(10),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  description           VARCHAR2(200),
  short_desc            VARCHAR2(50),
  effective_end_date    DATE,
  application_id        NUMBER not null,
  mapping_type          VARCHAR2(1),
  combine_retention_tag VARCHAR2(1),
  undwt_basis           VARCHAR2(3),
  calculation_basis     NUMBER,
  calculation_age_type  VARCHAR2(1)
)
;
alter table GLAS_TREATY_DTL_SETUP_T
  add constraint PK_TREATY_DTL_SETUP primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE);
alter table GLAS_TREATY_DTL_SETUP_T
  add constraint FK_TREATY_DTL_SETUP_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_REINS_TREATY_MAPPING_T
prompt ==========================================
prompt
create table GLAS_REINS_TREATY_MAPPING_T
(
  org_id             NUMBER not null,
  reinsurer_code     NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_REINS_TREATY_MAPPING_T
  add constraint PK_REINS_TREATY_MAP primary key (ORG_ID, REINSURER_CODE, TREATY_CODE, TREATY_DETAIL_CODE);
alter table GLAS_REINS_TREATY_MAPPING_T
  add constraint FK_REINS_TREATY_MAP_REINS foreign key (ORG_ID, REINSURER_CODE)
  references GLAS_REINSURER_SETUP_T (ORG_ID, REINSURER_CODE);
alter table GLAS_REINS_TREATY_MAPPING_T
  add constraint FK_REINS_TREATY_MAP_TREATY foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE)
  references GLAS_TREATY_DTL_SETUP_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE);

prompt
prompt Creating table GLAS_RELATION_SETUP_T
prompt ====================================
prompt
create table GLAS_RELATION_SETUP_T
(
  org_id              NUMBER not null,
  relation_code       NUMBER not null,
  relation_desc       VARCHAR2(500),
  relation_short_desc VARCHAR2(50),
  gender              VARCHAR2(1),
  active              VARCHAR2(1),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  self_relation       VARCHAR2(10),
  allow_multiple      VARCHAR2(5),
  marital_status      VARCHAR2(5)
)
;
alter table GLAS_RELATION_SETUP_T
  add constraint PK_RELATION_SETUP_T primary key (ORG_ID, RELATION_CODE);
alter table GLAS_RELATION_SETUP_T
  add constraint FK_RELATION_SETUP_T_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_RULE_TR_TYPE_T
prompt ==================================
prompt
create table GLAS_RULE_TR_TYPE_T
(
  org_id           NUMBER not null,
  transaction_type NUMBER not null,
  transaction_desc VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_RULE_TR_TYPE_T
  add constraint PK_RULE_TR primary key (ORG_ID, TRANSACTION_TYPE);
alter table GLAS_RULE_TR_TYPE_T
  add constraint FK_RTR_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_RULE_ATTRIBUTES_T
prompt =====================================
prompt
create table GLAS_RULE_ATTRIBUTES_T
(
  org_id           NUMBER not null,
  transaction_type NUMBER not null,
  variable_code    NUMBER not null,
  variable_name    VARCHAR2(50),
  variable_type    VARCHAR2(20),
  variable_query   VARCHAR2(4000),
  variable_formula VARCHAR2(4000),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_RULE_ATTRIBUTES_T
  add constraint PK_RULE_ATTR primary key (ORG_ID, TRANSACTION_TYPE, VARIABLE_CODE);
alter table GLAS_RULE_ATTRIBUTES_T
  add constraint FK_RULE_ATTR_TR foreign key (ORG_ID, TRANSACTION_TYPE)
  references GLAS_RULE_TR_TYPE_T (ORG_ID, TRANSACTION_TYPE);

prompt
prompt Creating table GLAS_RULE_CONDITIONS_T
prompt =====================================
prompt
create table GLAS_RULE_CONDITIONS_T
(
  org_id           NUMBER not null,
  transaction_type NUMBER not null,
  condition_code   NUMBER not null,
  variable_name    VARCHAR2(50),
  cond_operator    VARCHAR2(50),
  variable_value   VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_RULE_CONDITIONS_T
  add constraint PK_RULE_CND primary key (ORG_ID, TRANSACTION_TYPE, CONDITION_CODE);
alter table GLAS_RULE_CONDITIONS_T
  add constraint FK_RULE_CND foreign key (ORG_ID, TRANSACTION_TYPE)
  references GLAS_RULE_TR_TYPE_T (ORG_ID, TRANSACTION_TYPE);

prompt
prompt Creating table GLAS_RULE_GROUPSHD_T
prompt ===================================
prompt
create table GLAS_RULE_GROUPSHD_T
(
  org_id           NUMBER not null,
  transaction_type NUMBER not null,
  group_code       NUMBER not null,
  group_desc       VARCHAR2(50),
  group_type       NUMBER,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_RULE_GROUPSHD_T
  add constraint PK_RULE_GRPHD primary key (ORG_ID, TRANSACTION_TYPE, GROUP_CODE);
alter table GLAS_RULE_GROUPSHD_T
  add constraint FK_RULE_GRPHD_TR foreign key (ORG_ID, TRANSACTION_TYPE)
  references GLAS_RULE_TR_TYPE_T (ORG_ID, TRANSACTION_TYPE);

prompt
prompt Creating table GLAS_RULE_GROUPSDTL_T
prompt ====================================
prompt
create table GLAS_RULE_GROUPSDTL_T
(
  org_id            NUMBER not null,
  transaction_type  NUMBER not null,
  group_code        NUMBER not null,
  group_detail_code NUMBER not null,
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_RULE_GROUPSDTL_T
  add constraint PK_RULE_GRPDTL primary key (ORG_ID, TRANSACTION_TYPE, GROUP_CODE, GROUP_DETAIL_CODE);
alter table GLAS_RULE_GROUPSDTL_T
  add constraint FK_RULE_GRPDTL_HD foreign key (ORG_ID, TRANSACTION_TYPE, GROUP_CODE)
  references GLAS_RULE_GROUPSHD_T (ORG_ID, TRANSACTION_TYPE, GROUP_CODE);

prompt
prompt Creating table GLAS_RULE_SETUPHD_T
prompt ==================================
prompt
create table GLAS_RULE_SETUPHD_T
(
  org_id           NUMBER not null,
  transaction_type NUMBER not null,
  rule_code        NUMBER not null,
  rule_desc        VARCHAR2(500),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_RULE_SETUPHD_T
  add constraint PK_RULE_HD primary key (ORG_ID, TRANSACTION_TYPE, RULE_CODE);
alter table GLAS_RULE_SETUPHD_T
  add constraint FK_RULE_HD_TR foreign key (ORG_ID, TRANSACTION_TYPE)
  references GLAS_RULE_TR_TYPE_T (ORG_ID, TRANSACTION_TYPE);

prompt
prompt Creating table GLAS_RULE_SETUP_COND_T
prompt =====================================
prompt
create table GLAS_RULE_SETUP_COND_T
(
  org_id           NUMBER not null,
  transaction_type NUMBER not null,
  rule_code        NUMBER not null,
  condition_code   NUMBER not null,
  cond_operator    VARCHAR2(10),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_RULE_SETUP_COND_T
  add constraint PK_RULE_COND primary key (ORG_ID, TRANSACTION_TYPE, RULE_CODE, CONDITION_CODE);
alter table GLAS_RULE_SETUP_COND_T
  add constraint FK_RULE_COND_HD foreign key (ORG_ID, TRANSACTION_TYPE, RULE_CODE)
  references GLAS_RULE_SETUPHD_T (ORG_ID, TRANSACTION_TYPE, RULE_CODE);

prompt
prompt Creating table GLAS_RULE_SETUP_GROUP_T
prompt ======================================
prompt
create table GLAS_RULE_SETUP_GROUP_T
(
  org_id           NUMBER not null,
  transaction_type NUMBER not null,
  rule_code        NUMBER not null,
  group_code       VARCHAR2(4000) not null,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_RULE_SETUP_GROUP_T
  add constraint PK_RULE_DTL primary key (ORG_ID, TRANSACTION_TYPE, RULE_CODE, GROUP_CODE);
alter table GLAS_RULE_SETUP_GROUP_T
  add constraint FK_RULE_DTL_HD foreign key (ORG_ID, TRANSACTION_TYPE, RULE_CODE)
  references GLAS_RULE_SETUPHD_T (ORG_ID, TRANSACTION_TYPE, RULE_CODE);

prompt
prompt Creating table GLAS_SERVICE_PROVIDER_T
prompt ======================================
prompt
create table GLAS_SERVICE_PROVIDER_T
(
  org_id           NUMBER not null,
  sp_code          NUMBER not null,
  sp_desc          VARCHAR2(500),
  sp_short_desc    VARCHAR2(50),
  address          VARCHAR2(200),
  email            VARCHAR2(500),
  phone            VARCHAR2(15),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  limit            NUMBER(15,2),
  ntn              VARCHAR2(10),
  sp_type          VARCHAR2(10),
  sp_reference_no  VARCHAR2(10),
  blacklist        VARCHAR2(1)
)
;
alter table GLAS_SERVICE_PROVIDER_T
  add constraint PK_SP_SETUP_T primary key (ORG_ID, SP_CODE);
alter table GLAS_SERVICE_PROVIDER_T
  add constraint FK_SP_SETUP_T_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_SUB_BENEFITS_T
prompt ==================================
prompt
create table GLAS_SUB_BENEFITS_T
(
  org_id           NUMBER not null,
  benefit_code     NUMBER not null,
  sub_benefit_code NUMBER not null,
  sub_benefit_desc VARCHAR2(200),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  application_id   NUMBER not null,
  is_room_limit    VARCHAR2(2)
)
;
alter table GLAS_SUB_BENEFITS_T
  add constraint GLAS_SUB_BENEFITS_T_PK primary key (ORG_ID, APPLICATION_ID, BENEFIT_CODE, SUB_BENEFIT_CODE);

prompt
prompt Creating table GLAS_SUB_PRODUCT_CHARGES_T
prompt =========================================
prompt
create table GLAS_SUB_PRODUCT_CHARGES_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  charge_code       NUMBER not null,
  charge_rate       NUMBER(9,6),
  charge_flat_amt   NUMBER(15,2),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  frequency_code    VARCHAR2(2),
  default_tag       VARCHAR2(1),
  mandatory_tag     VARCHAR2(1),
  chargeable_tag    VARCHAR2(1),
  apply_on          VARCHAR2(1),
  max_amount        NUMBER,
  min_amount        NUMBER
)
;
alter table GLAS_SUB_PRODUCT_CHARGES_T
  add constraint PK_SUB_PR_CHARGES_SETUP primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, CHARGE_CODE);
alter table GLAS_SUB_PRODUCT_CHARGES_T
  add constraint FK_SUB_PR_SUB_PR_CHRG foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);
alter table GLAS_SUB_PRODUCT_CHARGES_T
  add constraint FK_SUB_PR_SUB_PR_CHRG_CHRG foreign key (ORG_ID, CHARGE_CODE)
  references TK_CHARGES_SETUP_T (ORG_ID, CHARGE_CODE);

prompt
prompt Creating table GLAS_SUB_PRODUCT_FUND_T
prompt ======================================
prompt
create table GLAS_SUB_PRODUCT_FUND_T
(
  org_id               NUMBER not null,
  main_product_code    NUMBER not null,
  sub_product_code     NUMBER not null,
  fund_code            NUMBER not null,
  fund_share           NUMBER(9,6),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  effective_end_date   DATE,
  effective_start_date DATE,
  fund_share_max       NUMBER(9,6),
  default_tag          VARCHAR2(5)
)
;
alter table GLAS_SUB_PRODUCT_FUND_T
  add constraint PK_SUB_PROD_FUND primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, FUND_CODE);
alter table GLAS_SUB_PRODUCT_FUND_T
  add constraint FK_SB_PROD_FUND_FUND foreign key (ORG_ID, FUND_CODE)
  references FUND_SETUP_T (ORG_ID, FUND_CODE);
alter table GLAS_SUB_PRODUCT_FUND_T
  add constraint FK_SB_PROD_FUND_PROD foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table GLAS_SUB_PRODUCT_GL_ACCOUNT_T
prompt ============================================
prompt
create table GLAS_SUB_PRODUCT_GL_ACCOUNT_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  mapping_code      VARCHAR2(50) not null,
  gl_code           VARCHAR2(50) not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_SUB_PRODUCT_GL_ACCOUNT_T
  add constraint PK_SUB_PR_GL_CODE_SETUP primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, MAPPING_CODE, GL_CODE);
alter table GLAS_SUB_PRODUCT_GL_ACCOUNT_T
  add constraint FK_SUB_PR_SUB_PR_GL foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table GLAS_SUB_PRODUCT_RATE_T
prompt ======================================
prompt
create table GLAS_SUB_PRODUCT_RATE_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  type_id           NUMBER not null,
  no_of_years       NUMBER not null,
  rate              NUMBER,
  created_by        VARCHAR2(100),
  creation_date     DATE,
  last_updated_by   VARCHAR2(100),
  last_update_date  DATE
)
;
alter table GLAS_SUB_PRODUCT_RATE_T
  add constraint PK_SUB_PROD_RATE primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TYPE_ID, NO_OF_YEARS);
alter table GLAS_SUB_PRODUCT_RATE_T
  add constraint FK_SB_PROD_RATE_PROD foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_BENEFIT_MAP_T
prompt ==========================================
prompt
create table GLAS_SUB_PROD_BENEFIT_MAP_T
(
  org_id               NUMBER not null,
  main_product_code    NUMBER not null,
  sub_product_code     NUMBER not null,
  benefit_code         NUMBER not null,
  mapping_type         VARCHAR2(2),
  default_tag          VARCHAR2(1),
  class_type           VARCHAR2(2),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  post_retirement      VARCHAR2(1),
  remarks              VARCHAR2(200),
  display_order        NUMBER,
  min_sa               NUMBER,
  max_sa               NUMBER,
  min_age              NUMBER,
  max_age              NUMBER,
  chargable            VARCHAR2(1),
  built_in             VARCHAR2(1),
  min_term             NUMBER,
  max_term             NUMBER,
  maturity_age         NUMBER,
  attachment           VARCHAR2(4000),
  term_wise_tag        VARCHAR2(1),
  sar_on               VARCHAR2(1),
  group_code           VARCHAR2(50),
  loading_factor_type  NUMBER,
  loading_factor_value NUMBER,
  indexation_on        VARCHAR2(1),
  calculation_order    NUMBER,
  wakala_percent       NUMBER,
  sa_type              VARCHAR2(20),
  min_sa_cap           NUMBER,
  max_sa_cap           NUMBER,
  min_rider_term       NUMBER,
  max_rider_term       NUMBER,
  min_payment_term     NUMBER,
  max_payment_term     NUMBER,
  cont_rate_basis      VARCHAR2(1),
  benefit_term_type    VARCHAR2(4),
  max_days_hca         NUMBER,
  applicable_life      NUMBER,
  percent_calc_basis   VARCHAR2(2)
)
;
alter table GLAS_SUB_PROD_BENEFIT_MAP_T
  add constraint PK_SUB_PR_BENEF_SETUP primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE);
alter table GLAS_SUB_PROD_BENEFIT_MAP_T
  add constraint FK_SUB_PR_SUB_PR_BENEFIT foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_BENEFIT_QUES_T
prompt ===========================================
prompt
create table GLAS_SUB_PROD_BENEFIT_QUES_T
(
  org_id            NUMBER,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  benefit_code      NUMBER,
  question_id       NUMBER,
  question_type     VARCHAR2(20),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  display_order     NUMBER
)
;

prompt
prompt Creating table GLAS_SUB_PROD_BENEFIT_RATES_T
prompt ============================================
prompt
create table GLAS_SUB_PROD_BENEFIT_RATES_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  benefit_code      NUMBER not null,
  rate_code         NUMBER not null,
  sum_insured_from  NUMBER,
  gender            VARCHAR2(5),
  smoker_type       VARCHAR2(1),
  class_code        VARCHAR2(10),
  rate              NUMBER(9,6),
  flat_amount       NUMBER(15,2),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  sum_insured_to    NUMBER,
  age_to            NUMBER,
  age_from          NUMBER,
  mortality_rate    NUMBER
)
;
alter table GLAS_SUB_PROD_BENEFIT_RATES_T
  add constraint PK_BF_RATES primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE, RATE_CODE);
alter table GLAS_SUB_PROD_BENEFIT_RATES_T
  add constraint FK_BF_RATES_PRODUCT foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE)
  references GLAS_SUB_PROD_BENEFIT_MAP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_BENF_QUES_T
prompt ========================================
prompt
create table GLAS_SUB_PROD_BENF_QUES_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  benefit_code      NUMBER not null,
  question_id       NUMBER not null,
  question_type     VARCHAR2(20),
  display_order     NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_SUB_PROD_BENF_QUES_T
  add constraint PK_GLAS_SUB_PROD_BENEF_QUES_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE, QUESTION_ID);

prompt
prompt Creating table GLAS_SUB_PROD_BEN_HCA_AMT_T
prompt ==========================================
prompt
create table GLAS_SUB_PROD_BEN_HCA_AMT_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  benefit_code      NUMBER not null,
  serial_no         NUMBER not null,
  daily_amount      NUMBER,
  default_tag       VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_SUB_PROD_BEN_HCA_AMT_T
  add constraint PK_SUB_PROD_BEN_HCA_MAP primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE, SERIAL_NO);
alter table GLAS_SUB_PROD_BEN_HCA_AMT_T
  add constraint FK_SUB_PROD_BEN_HCA_MAP_BEN foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE)
  references GLAS_SUB_PROD_BENEFIT_MAP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_BEN_RIDER_MAP_T
prompt ============================================
prompt
create table GLAS_SUB_PROD_BEN_RIDER_MAP_T
(
  org_id             NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  benefit_code       NUMBER not null,
  rider_mapping_code NUMBER not null,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_SUB_PROD_BEN_RIDER_MAP_T
  add constraint PK_SUB_PROD_BEN_RIDER_MAP primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE, RIDER_MAPPING_CODE);
alter table GLAS_SUB_PROD_BEN_RIDER_MAP_T
  add constraint FK_SUB_PROD_BEN_RIDER_MAP_BEN foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE)
  references GLAS_SUB_PROD_BENEFIT_MAP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_BNF_SA_T
prompt =====================================
prompt
create table GLAS_SUB_PROD_BNF_SA_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  benefit_code      NUMBER not null,
  sa_percent        NUMBER not null,
  default_tag       VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_SUB_PROD_BNF_SA_T
  add constraint PK_SUB_PR_BNF_SA_SETUP primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE, SA_PERCENT);
alter table GLAS_SUB_PROD_BNF_SA_T
  add constraint FK_SUB_PR_BNF_SA_BENEFIT foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE)
  references GLAS_SUB_PROD_BENEFIT_MAP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_EXP_MARGIN_HD_T
prompt ============================================
prompt
create table GLAS_SUB_PROD_EXP_MARGIN_HD_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  hd_code           NUMBER not null,
  volume_size_from  NUMBER,
  volume_size_to    NUMBER,
  minimum_loading   NUMBER,
  remarks           VARCHAR2(250),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_SUB_PROD_EXP_MARGIN_HD_T
  add constraint PK_SUB_PROD_EXP_MARGIN_HD primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE);
alter table GLAS_SUB_PROD_EXP_MARGIN_HD_T
  add constraint FK_SUB_PR_EXP_MARGIN_HD foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_EXP_MARGIN_DTL_T
prompt =============================================
prompt
create table GLAS_SUB_PROD_EXP_MARGIN_DTL_T
(
  org_id             NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  hd_code            NUMBER not null,
  expense_code       NUMBER not null,
  loading_percentage NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_SUB_PROD_EXP_MARGIN_DTL_T
  add constraint PK_SUB_PROD_EXP_MARGIN_DTL primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE, EXPENSE_CODE);
alter table GLAS_SUB_PROD_EXP_MARGIN_DTL_T
  add constraint FK_SUB_PR_EXP_MARGIN_CODE foreign key (ORG_ID, EXPENSE_CODE)
  references GLAS_EXPENSE_MARGIN_SETUP_T (ORG_ID, MARGIN_CODE);
alter table GLAS_SUB_PROD_EXP_MARGIN_DTL_T
  add constraint FK_SUB_PR_EXP_MARGIN_DTL foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE)
  references GLAS_SUB_PROD_EXP_MARGIN_HD_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_FEATURES_T
prompt =======================================
prompt
create table GLAS_SUB_PROD_FEATURES_T
(
  org_id              NUMBER not null,
  main_product_code   NUMBER not null,
  sub_product_code    NUMBER not null,
  feature_code        NUMBER not null,
  feature_description VARCHAR2(500),
  active              VARCHAR2(1),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  feature_value       VARCHAR2(50),
  packages_code       NUMBER,
  application_id      NUMBER
)
;
alter table GLAS_SUB_PROD_FEATURES_T
  add primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, FEATURE_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_LIMIT_SH_RIDER_T
prompt =============================================
prompt
create table GLAS_SUB_PROD_LIMIT_SH_RIDER_T
(
  org_id             NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  benefit_code       NUMBER not null,
  rider_mapping_code NUMBER not null,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_SUB_PROD_LIMIT_SH_RIDER_T
  add constraint PK_SUB_PROD_LM_SH_RID primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE, RIDER_MAPPING_CODE);
alter table GLAS_SUB_PROD_LIMIT_SH_RIDER_T
  add constraint FK_SUB_PROD_LM_SH_RID_BEN foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE)
  references GLAS_SUB_PROD_BENEFIT_MAP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_MORT_RT_T
prompt ======================================
prompt
create table GLAS_SUB_PROD_MORT_RT_T
(
  org_id             NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  benefit_code       NUMBER not null,
  rate_code          NUMBER not null,
  m_age              NUMBER,
  m_year             NUMBER,
  m_rate             NUMBER,
  gender             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  em_rate            NUMBER,
  ri_rate            NUMBER,
  ri_em_rate         NUMBER,
  indexation_rate_id NUMBER
)
;
alter table GLAS_SUB_PROD_MORT_RT_T
  add constraint PK_SUB_PR_MORT_RT_SETUP primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE, RATE_CODE);
alter table GLAS_SUB_PROD_MORT_RT_T
  add constraint FK_SUB_PR_MORT_RT_BENEFIT foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE)
  references GLAS_SUB_PROD_BENEFIT_MAP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_NA_CHK_HD_T
prompt ========================================
prompt
create table GLAS_SUB_PROD_NA_CHK_HD_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  header_id         NUMBER not null,
  descrition        VARCHAR2(2500),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_SUB_PROD_NA_CHK_HD_T
  add primary key (ORG_ID, MAIN_PRODUCT_CODE, HEADER_ID);

prompt
prompt Creating table GLAS_SUB_PROD_OTHER_CONF_T
prompt =========================================
prompt
create table GLAS_SUB_PROD_OTHER_CONF_T
(
  org_id                         NUMBER not null,
  main_product_code              NUMBER not null,
  sub_product_code               NUMBER not null,
  application_id                 NUMBER not null,
  configuration_code             NUMBER not null,
  rider_renewal_cont_rounding    NUMBER,
  rider_first_year_cont_rounding NUMBER,
  created_by                     VARCHAR2(50),
  creation_date                  DATE,
  last_updated_by                VARCHAR2(50),
  last_update_date               DATE,
  claim_amount_rounding          NUMBER,
  term_cont_rounding_type        VARCHAR2(1)
)
;
alter table GLAS_SUB_PROD_OTHER_CONF_T
  add constraint PK_GLAS_SUB_PROD_OTHER_CONF primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, APPLICATION_ID, CONFIGURATION_CODE);
alter table GLAS_SUB_PROD_OTHER_CONF_T
  add constraint FK_GLAS_SUB_PROD_OTHER_CONF foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_PACKAGES_T
prompt =======================================
prompt
create table GLAS_SUB_PROD_PACKAGES_T
(
  org_id               NUMBER not null,
  main_product_code    NUMBER not null,
  sub_product_code     NUMBER not null,
  packages_code        NUMBER not null,
  packages_description VARCHAR2(500),
  active               VARCHAR2(1),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  packages_value       NUMBER,
  application_id       NUMBER
)
;
alter table GLAS_SUB_PROD_PACKAGES_T
  add primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, PACKAGES_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_P_MODE_GRACE_T
prompt ===========================================
prompt
create table GLAS_SUB_PROD_P_MODE_GRACE_T
(
  org_id            NUMBER not null,
  sub_product_code  NUMBER not null,
  payment_mode      VARCHAR2(10) not null,
  grace_period_days NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE not null
)
;
alter table GLAS_SUB_PROD_P_MODE_GRACE_T
  add constraint PK_SUBPM_GRC_SETUP_T primary key (ORG_ID, SUB_PRODUCT_CODE, PAYMENT_MODE);
alter table GLAS_SUB_PROD_P_MODE_GRACE_T
  add constraint FK_SUBP_PAYM_GRC_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_SUB_PROD_P_MODE_LOAD_T
prompt ==========================================
prompt
create table GLAS_SUB_PROD_P_MODE_LOAD_T
(
  org_id                       NUMBER not null,
  sub_product_code             NUMBER not null,
  payment_mode                 VARCHAR2(10) not null,
  loading_rate                 NUMBER(9,6),
  created_by                   VARCHAR2(50),
  creation_date                DATE,
  last_updated_by              VARCHAR2(50),
  last_update_date             DATE not null,
  flat_amount                  NUMBER,
  min_contribution             NUMBER,
  max_contribution             NUMBER,
  grace_period_days            NUMBER,
  days_renew_intimation_before NUMBER,
  days_renew_intimation_after  NUMBER,
  days_auto_renewal_topup      NUMBER
)
;
alter table GLAS_SUB_PROD_P_MODE_LOAD_T
  add constraint PK_SUBPM_LOAD_SETUP_T primary key (ORG_ID, SUB_PRODUCT_CODE, PAYMENT_MODE);
alter table GLAS_SUB_PROD_P_MODE_LOAD_T
  add constraint FK_SUBP_PAYM_LOAD_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table PF_RISK_PROFILE_FACTOR_T
prompt =======================================
prompt
create table PF_RISK_PROFILE_FACTOR_T
(
  org_id        NUMBER not null,
  factor_id     NUMBER not null,
  factor_desc   VARCHAR2(200) not null,
  active        VARCHAR2(1) not null,
  create_user   VARCHAR2(50),
  create_date   TIMESTAMP(6),
  modified_user VARCHAR2(50),
  modified_date TIMESTAMP(6),
  display_order NUMBER
)
;
alter table PF_RISK_PROFILE_FACTOR_T
  add constraint PF_RISK_PROFILE_FACTOR_T_PK primary key (ORG_ID, FACTOR_ID);
alter table PF_RISK_PROFILE_FACTOR_T
  add foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table PF_RISK_PROF_QUESTION_SETUP_T
prompt ============================================
prompt
create table PF_RISK_PROF_QUESTION_SETUP_T
(
  org_id                 NUMBER not null,
  question_id            NUMBER not null,
  question_desc          VARCHAR2(1000),
  risk_profile_factor_id NUMBER not null,
  maximum_score          NUMBER,
  active                 VARCHAR2(1) not null,
  create_user            VARCHAR2(50),
  create_date            TIMESTAMP(6),
  modified_user          VARCHAR2(50),
  modified_date          TIMESTAMP(6),
  valueset_id            NUMBER,
  question_type          VARCHAR2(50),
  question_display_type  VARCHAR2(1),
  sub_standard_on        VARCHAR2(10),
  remarks_on             VARCHAR2(1),
  other_language_desc    NVARCHAR2(2000),
  display_order          NUMBER,
  child_question_on      VARCHAR2(1),
  child_question_id      NUMBER,
  application_id         NUMBER,
  db_feild_name          VARCHAR2(150),
  visible_for_gender     VARCHAR2(1)
)
;
alter table PF_RISK_PROF_QUESTION_SETUP_T
  add constraint PK_RISK_PROF_QUE primary key (ORG_ID, QUESTION_ID);
alter table PF_RISK_PROF_QUESTION_SETUP_T
  add foreign key (ORG_ID, RISK_PROFILE_FACTOR_ID)
  references PF_RISK_PROFILE_FACTOR_T (ORG_ID, FACTOR_ID);

prompt
prompt Creating table GLAS_SUB_PROD_QUESTIONS_T
prompt ========================================
prompt
create table GLAS_SUB_PROD_QUESTIONS_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  question_id       NUMBER not null,
  question_type     VARCHAR2(20),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  display_order     NUMBER
)
;
alter table GLAS_SUB_PROD_QUESTIONS_T
  add constraint PK_SUB_PROD_QUEST_MP primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, QUESTION_ID);
alter table GLAS_SUB_PROD_QUESTIONS_T
  add constraint FK_RISK_PROF_QUE_PROD foreign key (ORG_ID, QUESTION_ID)
  references PF_RISK_PROF_QUESTION_SETUP_T (ORG_ID, QUESTION_ID);

prompt
prompt Creating table GLAS_SUB_PROD_REFUND_PREM_HD_T
prompt =============================================
prompt
create table GLAS_SUB_PROD_REFUND_PREM_HD_T
(
  org_id               NUMBER not null,
  main_product_code    NUMBER not null,
  sub_product_code     NUMBER not null,
  hd_code              NUMBER not null,
  remarks              VARCHAR2(250),
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table GLAS_SUB_PROD_REFUND_PREM_HD_T
  add constraint PK_SUB_PROD_REFUND_PREM_HD primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE);
alter table GLAS_SUB_PROD_REFUND_PREM_HD_T
  add constraint FK_SUB_PR_REFUND_PR_HD foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_REFUND_PRM_DTL_T
prompt =============================================
prompt
create table GLAS_SUB_PROD_REFUND_PRM_DTL_T
(
  org_id                 NUMBER not null,
  main_product_code      NUMBER not null,
  sub_product_code       NUMBER not null,
  hd_code                NUMBER not null,
  dtl_code               NUMBER not null,
  attained_period        NUMBER,
  refund_prem_percentage NUMBER,
  effective_start_date   DATE,
  effective_end_date     DATE,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table GLAS_SUB_PROD_REFUND_PRM_DTL_T
  add constraint PK_SUB_PROD_REFUND_PREM_DTL primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE, DTL_CODE);
alter table GLAS_SUB_PROD_REFUND_PRM_DTL_T
  add constraint FK_SUB_PR_REFUND_PR_DTL foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE)
  references GLAS_SUB_PROD_REFUND_PREM_HD_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE);

prompt
prompt Creating table GLAS_SUB_PROD_UNDWT_CHECKS_T
prompt ===========================================
prompt
create table GLAS_SUB_PROD_UNDWT_CHECKS_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  check_type        NUMBER not null,
  value_type        VARCHAR2(1),
  standard_value1   NUMBER,
  standard_value2   NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GLAS_SUB_PROD_UNDWT_CHECKS_T
  add constraint PK_SUB_PROD_UNDWT_CHECKS primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, CHECK_TYPE);
alter table GLAS_SUB_PROD_UNDWT_CHECKS_T
  add constraint FK_SUB_PR_UNDWT_PR foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table GLAS_SUB_SCHEME_SETUP_T
prompt ======================================
prompt
create table GLAS_SUB_SCHEME_SETUP_T
(
  org_id           NUMBER not null,
  scheme_code      NUMBER not null,
  sub_scheme_code  NUMBER not null,
  description      VARCHAR2(500),
  short_desc       VARCHAR2(50),
  active           VARCHAR2(1),
  percentage       NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GLAS_SUB_SCHEME_SETUP_T
  add constraint PK_SUB_SCHEME_SETUP primary key (ORG_ID, SCHEME_CODE, SUB_SCHEME_CODE);
alter table GLAS_SUB_SCHEME_SETUP_T
  add constraint FK_SUB_SCHEME_SETUP_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_TREATY_BENEFIT_MAPPING_T
prompt ============================================
prompt
create table GLAS_TREATY_BENEFIT_MAPPING_T
(
  org_id              NUMBER not null,
  treaty_code         NUMBER not null,
  treaty_detail_code  NUMBER not null,
  benefit_code        NUMBER not null,
  rate_based_on       VARCHAR2(10),
  basic_benefit_tag   VARCHAR2(1),
  fcl_tag             VARCHAR2(1),
  quota_share         NUMBER(9,6),
  company_retention   NUMBER(15,2),
  commission_rate     NUMBER(9,6),
  age_from            NUMBER(3),
  age_to              NUMBER(3),
  age_from_renewal    NUMBER(3),
  payment_basis       VARCHAR2(2),
  si_percent          NUMBER,
  salary_percent      NUMBER,
  max_amount          NUMBER,
  min_amount          NUMBER,
  waiting_period_days NUMBER,
  benefit_period_days NUMBER,
  scheme_code         NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  amount_limit_type   VARCHAR2(10),
  quota_share_limit   NUMBER(15,2),
  treaty_limit        NUMBER(15,2),
  max_age_renewal     NUMBER,
  charge_rate_type    VARCHAR2(3)
)
;
alter table GLAS_TREATY_BENEFIT_MAPPING_T
  add constraint PK_TREATY_BENIFIT_MAP primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE);

prompt
prompt Creating table GLAS_TREATY_BENEFIT_RATES_T
prompt ==========================================
prompt
create table GLAS_TREATY_BENEFIT_RATES_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  benefit_code       NUMBER not null,
  rate_code          NUMBER not null,
  sum_insured_from   NUMBER,
  gender             VARCHAR2(5),
  smoker_type        VARCHAR2(1),
  class_code         VARCHAR2(10),
  rate               NUMBER(9,6),
  flat_amount        NUMBER(15,2),
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  sum_insured_to     NUMBER,
  age_to             NUMBER,
  age_from           NUMBER,
  mortality_rate     NUMBER
)
;
alter table GLAS_TREATY_BENEFIT_RATES_T
  add constraint PK_TREATY_BENIFIT_LOAD primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, RATE_CODE);
alter table GLAS_TREATY_BENEFIT_RATES_T
  add constraint FK_TREATY_BENIFIT_LOAD_BENEFIT foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE)
  references GLAS_TREATY_BENEFIT_MAPPING_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE);

prompt
prompt Creating table GLAS_TREATY_BENF_CTRY_LOAD_T
prompt ===========================================
prompt
create table GLAS_TREATY_BENF_CTRY_LOAD_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  benefit_code       NUMBER not null,
  country_code       NUMBER not null,
  active             VARCHAR2(1),
  rate               NUMBER(9,6),
  flat_amount        NUMBER(15,2),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_TREATY_BENF_CTRY_LOAD_T
  add constraint PK_TREATY_BENF_CTRY_LOAD primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, COUNTRY_CODE);
alter table GLAS_TREATY_BENF_CTRY_LOAD_T
  add constraint FK_TREATY_BENF_CTRY_LOAD foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE)
  references GLAS_TREATY_BENEFIT_MAPPING_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE)
  novalidate;

prompt
prompt Creating table GLAS_TREATY_BENF_FORMULA_T
prompt =========================================
prompt
create table GLAS_TREATY_BENF_FORMULA_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  benefit_code       NUMBER not null,
  formula_code       NUMBER not null,
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_TREATY_BENF_FORMULA_T
  add constraint PK_TREATY_BENF_FORMULA primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, FORMULA_CODE);
alter table GLAS_TREATY_BENF_FORMULA_T
  add constraint FK_TREATY_BENF_FORMULA_BENF foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE)
  references GLAS_TREATY_BENEFIT_MAPPING_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE);
alter table GLAS_TREATY_BENF_FORMULA_T
  add constraint FK_TREATY_BENF_FORMULA_FRM foreign key (ORG_ID, FORMULA_CODE)
  references GLAS_FORMULA_SETUP_T (ORG_ID, FORMULA_CODE);

prompt
prompt Creating table GLAS_TREATY_BENF_LOADING_T
prompt =========================================
prompt
create table GLAS_TREATY_BENF_LOADING_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  benefit_code       NUMBER not null,
  class_code         NUMBER not null,
  active             VARCHAR2(1),
  rate               NUMBER(9,6),
  flat_amount        NUMBER(15,2),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_TREATY_BENF_LOADING_T
  add constraint PK_TREATY_BENF_LOADING primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, CLASS_CODE);
alter table GLAS_TREATY_BENF_LOADING_T
  add constraint FK_TREATY_BENF_LOADING_BENF foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE)
  references GLAS_TREATY_BENEFIT_MAPPING_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE)
  novalidate;

prompt
prompt Creating table GLAS_TREATY_BEN_REQ_MAP_T
prompt ========================================
prompt
create table GLAS_TREATY_BEN_REQ_MAP_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  benefit_code       NUMBER not null,
  hd_code            NUMBER not null,
  undwt_basis        VARCHAR2(1) not null,
  sum_insured_from   INTEGER,
  sum_insured_to     NUMBER not null,
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  display_order      NUMBER
)
;
alter table GLAS_TREATY_BEN_REQ_MAP_T
  add constraint GLAS_TREATY__BEN_REQ_MAP_T_PK primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, HD_CODE);
alter table GLAS_TREATY_BEN_REQ_MAP_T
  add constraint FK_TREATY_BEN_REQ_BENEFIT foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE)
  references GLAS_TREATY_BENEFIT_MAPPING_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE);

prompt
prompt Creating table GLAS_TREATY_BEN_REQ_DTL_MAP_T
prompt ============================================
prompt
create table GLAS_TREATY_BEN_REQ_DTL_MAP_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  benefit_code       NUMBER not null,
  hd_code            NUMBER not null,
  dtl_code           NUMBER not null,
  age_to             NUMBER(3),
  age_from           NUMBER,
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  uw_code            VARCHAR2(5),
  display_order      NUMBER
)
;
alter table GLAS_TREATY_BEN_REQ_DTL_MAP_T
  add constraint GLAS_TRT_BEN_REQ_DTL_MAP_T_PK primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, HD_CODE, DTL_CODE);
alter table GLAS_TREATY_BEN_REQ_DTL_MAP_T
  add constraint FK_TREATY_BEN_REQ_DTL foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, HD_CODE)
  references GLAS_TREATY_BEN_REQ_MAP_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, HD_CODE);

prompt
prompt Creating table GLAS_TREATY_BNFT_SA_AGE_RATES
prompt ============================================
prompt
create table GLAS_TREATY_BNFT_SA_AGE_RATES
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  benefit_code       NUMBER not null,
  rate_code          NUMBER not null,
  rate_sa_code       NUMBER not null,
  age_to             NUMBER,
  age_from           NUMBER,
  gender             VARCHAR2(5),
  smoker_type        VARCHAR2(1),
  rate               NUMBER(9,6),
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  mortality_rate     NUMBER
)
;
alter table GLAS_TREATY_BNFT_SA_AGE_RATES
  add constraint PK_TREATY_BENIFIT_RATE_SA primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, RATE_CODE, RATE_SA_CODE);
alter table GLAS_TREATY_BNFT_SA_AGE_RATES
  add constraint FK_TREATY_BENIFIT_RATE_SA foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, RATE_CODE)
  references GLAS_TREATY_BENEFIT_RATES_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BENEFIT_CODE, RATE_CODE);

prompt
prompt Creating table GLAS_TREATY_BROKER_COMM_T
prompt ========================================
prompt
create table GLAS_TREATY_BROKER_COMM_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  broker_code        NUMBER not null,
  comm_payable       NUMBER(7,4),
  based_on           VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_TREATY_BROKER_COMM_T
  add constraint PK_TREATY_BROKER_SETUP primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, BROKER_CODE);

prompt
prompt Creating table GLAS_TREATY_FCL_T
prompt ================================
prompt
create table GLAS_TREATY_FCL_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  fcl_code           NUMBER not null,
  lives_from         NUMBER,
  lives_to           NUMBER,
  factor             NUMBER(9,6),
  max_limit          NUMBER(15,2),
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_TREATY_FCL_T
  add constraint PK_TREATY_FCL primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, FCL_CODE);
alter table GLAS_TREATY_FCL_T
  add constraint FK_TREATY_FCL_TREATY foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE)
  references GLAS_TREATY_DTL_SETUP_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE);

prompt
prompt Creating table GLAS_TREATY_INSU_POOL_MAP_T
prompt ==========================================
prompt
create table GLAS_TREATY_INSU_POOL_MAP_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  pool_code          NUMBER not null,
  reinsurer_code     NUMBER(*,4),
  pool_share         NUMBER(7,4),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GLAS_TREATY_INSU_POOL_MAP_T
  add constraint PK_TREATY_INSURER_POOL_SETUP primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, POOL_CODE);
alter table GLAS_TREATY_INSU_POOL_MAP_T
  add constraint FK_TREATY_INSURER_POOL_K foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_TREATY_REQ_DTL_MAP_T
prompt ========================================
prompt
create table GLAS_TREATY_REQ_DTL_MAP_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  hd_code            NUMBER not null,
  dtl_code           NUMBER not null,
  age_to             NUMBER(3),
  age_from           NUMBER,
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  uw_code            VARCHAR2(5),
  display_order      NUMBER
)
;
alter table GLAS_TREATY_REQ_DTL_MAP_T
  add constraint GLAS_TREATY_REQ_DTL_MAP_T_PK primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, HD_CODE, DTL_CODE);

prompt
prompt Creating table GLAS_TREATY_REQ_MAP_T
prompt ====================================
prompt
create table GLAS_TREATY_REQ_MAP_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  hd_code            NUMBER not null,
  undwt_basis        VARCHAR2(1) not null,
  sum_insured_from   INTEGER,
  sum_insured_to     NUMBER not null,
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  display_order      NUMBER
)
;
alter table GLAS_TREATY_REQ_MAP_T
  add constraint GLAS_TREATY_REQ_MAP_T_PK primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, HD_CODE);
alter table GLAS_TREATY_REQ_MAP_T
  add constraint FK_TREATY_REQ_MAP_TREATY foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE)
  references GLAS_TREATY_DTL_SETUP_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE);

prompt
prompt Creating table GLAS_TREATY_VOL_DISC_T
prompt =====================================
prompt
create table GLAS_TREATY_VOL_DISC_T
(
  org_id             NUMBER not null,
  treaty_code        NUMBER not null,
  treaty_detail_code NUMBER not null,
  discount_code      NUMBER not null,
  mapping_type       VARCHAR2(1),
  no_of_lives_from   NUMBER,
  discount_new       NUMBER,
  discount_renewal   NUMBER,
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  no_of_lives_to     NUMBER
)
;
alter table GLAS_TREATY_VOL_DISC_T
  add constraint PK_TREATY_VOL_DISC primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, DISCOUNT_CODE);
alter table GLAS_TREATY_VOL_DISC_T
  add constraint FK_TREATY_VOL_DISC_TREATY foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE)
  references GLAS_TREATY_DTL_SETUP_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE);

prompt
prompt Creating table GLAS_TREATY_VOL_DISC_DTL_T
prompt =========================================
prompt
create table GLAS_TREATY_VOL_DISC_DTL_T
(
  org_id               NUMBER not null,
  treaty_code          NUMBER not null,
  treaty_detail_code   NUMBER not null,
  discount_code        NUMBER not null,
  discount_detail_code NUMBER not null,
  benefit_type_code    NUMBER,
  discount_new         NUMBER,
  discount_renewal     NUMBER,
  active               VARCHAR2(1),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table GLAS_TREATY_VOL_DISC_DTL_T
  add constraint PK_TREATY_VOL_DTL_DISC primary key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, DISCOUNT_CODE, DISCOUNT_DETAIL_CODE);
alter table GLAS_TREATY_VOL_DISC_DTL_T
  add constraint FK_TREATY_VOL_DISC_DTL_TREATY foreign key (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, DISCOUNT_CODE)
  references GLAS_TREATY_VOL_DISC_T (ORG_ID, TREATY_CODE, TREATY_DETAIL_CODE, DISCOUNT_CODE);

prompt
prompt Creating table GLAS_UNDWT_REQ_SETUP_T
prompt =====================================
prompt
create table GLAS_UNDWT_REQ_SETUP_T
(
  org_id           NUMBER not null,
  req_code         NUMBER not null,
  req_type_code    NUMBER,
  description      VARCHAR2(500),
  short_desc       VARCHAR2(50),
  remarks          VARCHAR2(500),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  attached_file    VARCHAR2(200),
  application_id   NUMBER
)
;
alter table GLAS_UNDWT_REQ_SETUP_T
  add constraint PK_UND_REQ_SETUP primary key (ORG_ID, REQ_CODE);
alter table GLAS_UNDWT_REQ_SETUP_T
  add constraint FK_UND_REQ_SETUP_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table GLAS_UNDWT_REQ_DTL_SETUP_T
prompt =========================================
prompt
create table GLAS_UNDWT_REQ_DTL_SETUP_T
(
  org_id            NUMBER not null,
  req_code          NUMBER not null,
  req_dtl_code      NUMBER not null,
  description       VARCHAR2(1000),
  short_desc        VARCHAR2(50),
  remarks           VARCHAR2(500),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  attachment        VARCHAR2(4000),
  medical_test_code NUMBER
)
;
alter table GLAS_UNDWT_REQ_DTL_SETUP_T
  add constraint PK_UND_REQ_DTL_SETUP primary key (ORG_ID, REQ_CODE, REQ_DTL_CODE);
alter table GLAS_UNDWT_REQ_DTL_SETUP_T
  add constraint FK_UND_REQ_DTL_SETUP_REQ foreign key (ORG_ID, REQ_CODE)
  references GLAS_UNDWT_REQ_SETUP_T (ORG_ID, REQ_CODE);

prompt
prompt Creating table GL_ACCOUNT_ADVICE_MAPING_T
prompt =========================================
prompt
create table GL_ACCOUNT_ADVICE_MAPING_T
(
  org_id           NUMBER not null,
  bank_code        NUMBER not null,
  branch_code      NUMBER not null,
  account_code     VARCHAR2(30) not null,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  voucher_code     VARCHAR2(50) not null
)
;
alter table GL_ACCOUNT_ADVICE_MAPING_T
  add constraint GL_ACCOUNT_ADVICE_T_PK primary key (ORG_ID, BANK_CODE, BRANCH_CODE, ACCOUNT_CODE, VOUCHER_CODE);

prompt
prompt Creating table GL_ACCOUNT_MATRIX_HD_T
prompt =====================================
prompt
create table GL_ACCOUNT_MATRIX_HD_T
(
  org_id           NUMBER not null,
  matrix_id        VARCHAR2(50) not null,
  matrix_desc      VARCHAR2(200),
  advice_code      VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  module_code      VARCHAR2(10),
  reversal_tag     VARCHAR2(1)
)
;
alter table GL_ACCOUNT_MATRIX_HD_T
  add constraint PK_GL_ACCOUNT_MATRIX_HD_T primary key (ORG_ID, MATRIX_ID);

prompt
prompt Creating table GL_ACCOUNT_MATRIX_DTL_T
prompt ======================================
prompt
create table GL_ACCOUNT_MATRIX_DTL_T
(
  org_id               NUMBER not null,
  matrix_detail_id     NUMBER not null,
  matrix_id            VARCHAR2(50),
  matrix_detail_desc   VARCHAR2(250),
  coa_code_debit       VARCHAR2(20),
  coa_code_credit      VARCHAR2(20),
  variable_name        VARCHAR2(50),
  active               VARCHAR2(1),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  subledger_type       VARCHAR2(30),
  subledger_code       VARCHAR2(50),
  ignore_zero_variable VARCHAR2(1),
  variable_extra_keys  VARCHAR2(500),
  ignore_knockoff      VARCHAR2(1),
  display_order        NUMBER,
  ignore_kockoff       VARCHAR2(1)
)
;
alter table GL_ACCOUNT_MATRIX_DTL_T
  add constraint PK_GL_ACCOUNT_MATRIX_DTL_T primary key (ORG_ID, MATRIX_DETAIL_ID);
alter table GL_ACCOUNT_MATRIX_DTL_T
  add constraint FK_ACCOUNT_MD_COA_CODE_CREDIT foreign key (COA_CODE_CREDIT, ORG_ID)
  references CHART_OF_ACCOUNT_GL_T (COA_CODE, ORG_ID);
alter table GL_ACCOUNT_MATRIX_DTL_T
  add constraint FK_ACCOUNT_MD_COA_CODE_DEBIT foreign key (COA_CODE_DEBIT, ORG_ID)
  references CHART_OF_ACCOUNT_GL_T (COA_CODE, ORG_ID);
alter table GL_ACCOUNT_MATRIX_DTL_T
  add constraint FK_ACCOUNT_MD_MATRIX_ID foreign key (ORG_ID, MATRIX_ID)
  references GL_ACCOUNT_MATRIX_HD_T (ORG_ID, MATRIX_ID);

prompt
prompt Creating table GL_ACCOUNT_MATRIX_SL_VALUES_T
prompt ============================================
prompt
create table GL_ACCOUNT_MATRIX_SL_VALUES_T
(
  org_id           NUMBER not null,
  matrix_detail_id NUMBER not null,
  matrix_id        CHAR(50) not null,
  variable_name    VARCHAR2(50) not null,
  ref_key          VARCHAR2(200) not null,
  sl_type          VARCHAR2(50) not null,
  sl_code          VARCHAR2(50) not null,
  variable_value   VARCHAR2(200),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GL_ACCOUNT_MATRIX_SL_VALUES_T
  add constraint PK_GL_ACCOUNT_MATRIX_SL_VAL_T primary key (ORG_ID, MATRIX_ID, MATRIX_DETAIL_ID, VARIABLE_NAME, REF_KEY, SL_TYPE, SL_CODE);

prompt
prompt Creating table GL_ACCOUNT_MATRIX_VALUES_T
prompt =========================================
prompt
create table GL_ACCOUNT_MATRIX_VALUES_T
(
  org_id           NUMBER not null,
  matrix_detail_id NUMBER not null,
  matrix_id        VARCHAR2(50) not null,
  variable_name    VARCHAR2(50) not null,
  ref_key          VARCHAR2(200) not null,
  variable_value   VARCHAR2(200),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GL_ACCOUNT_MATRIX_VALUES_T
  add constraint PK_GL_ACCOUNT_MATRIX_VAL_T primary key (ORG_ID, MATRIX_ID, MATRIX_DETAIL_ID, VARIABLE_NAME, REF_KEY);

prompt
prompt Creating table GL_ADVICE_APPROVAL_HISTORY_T
prompt ===========================================
prompt
create table GL_ADVICE_APPROVAL_HISTORY_T
(
  org_id          NUMBER not null,
  branch_id       NUMBER not null,
  advice_type     VARCHAR2(10) not null,
  fiscal_year     VARCHAR2(10) not null,
  advice_no       VARCHAR2(10) not null,
  s_no            NUMBER not null,
  action_type     VARCHAR2(20),
  action          VARCHAR2(1),
  action_by       VARCHAR2(50),
  action_date     DATE,
  action_comments VARCHAR2(500)
)
;
alter table GL_ADVICE_APPROVAL_HISTORY_T
  add constraint GL_VOUCHER_ADVICE_HISTORY_PK primary key (ORG_ID, BRANCH_ID, ADVICE_TYPE, FISCAL_YEAR, ADVICE_NO, S_NO);

prompt
prompt Creating table GL_ADVICE_ATTACHMENT_T
prompt =====================================
prompt
create table GL_ADVICE_ATTACHMENT_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  advice_type      VARCHAR2(10) not null,
  fiscal_year      VARCHAR2(10) not null,
  advice_no        VARCHAR2(10) not null,
  attachment_no    NUMBER not null,
  description      VARCHAR2(200),
  attachment       VARCHAR2(250),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GL_ADVICE_ATTACHMENT_T
  add constraint GL_ADVICE_ATTACHMENT_NO_T_PK primary key (ORG_ID, BRANCH_ID, ADVICE_TYPE, FISCAL_YEAR, ADVICE_NO, ATTACHMENT_NO);

prompt
prompt Creating table GL_ADVICE_TYPE_T
prompt ===============================
prompt
create table GL_ADVICE_TYPE_T
(
  org_id              NUMBER not null,
  advice_description  VARCHAR2(100) not null,
  advice_type         VARCHAR2(10) not null,
  advice_payment_type VARCHAR2(10) not null,
  target_voucher_type VARCHAR2(10) not null,
  active              VARCHAR2(1) not null,
  created_by          VARCHAR2(50),
  creation_date       TIMESTAMP(6),
  last_updated_by     VARCHAR2(50),
  last_update_date    TIMESTAMP(6),
  auto_tag            VARCHAR2(1),
  knockoff_tag        VARCHAR2(1),
  advice_group        VARCHAR2(10)
)
;
alter table GL_ADVICE_TYPE_T
  add constraint PK_ADVICE_TYPE primary key (ORG_ID, ADVICE_TYPE);

prompt
prompt Creating table GL_ADVICE_HEADER_T
prompt =================================
prompt
create table GL_ADVICE_HEADER_T
(
  org_id                  NUMBER not null,
  branch_id               NUMBER not null,
  advice_type             VARCHAR2(10) not null,
  fiscal_year             VARCHAR2(10) not null,
  advice_no               VARCHAR2(10) not null,
  advice_date             DATE,
  advice_amount           NUMBER,
  advice_description      VARCHAR2(500),
  advice_status           VARCHAR2(1),
  verified_by             VARCHAR2(50),
  verified_date           DATE,
  approved_by             VARCHAR2(50),
  approval_date           DATE,
  voucher_ref_no          VARCHAR2(250),
  canceled_by             VARCHAR2(50),
  cancel_date             DATE,
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  adjusted_amount         NUMBER,
  doc_ref_no              VARCHAR2(250),
  matrix_id               VARCHAR2(50),
  exclude_tag             VARCHAR2(1),
  reversed_tag            VARCHAR2(1),
  commission_batch_number VARCHAR2(100)
)
;
alter table GL_ADVICE_HEADER_T
  add constraint GL_ADVICE_HEADER_T_PK primary key (ORG_ID, BRANCH_ID, ADVICE_TYPE, FISCAL_YEAR, ADVICE_NO);
alter table GL_ADVICE_HEADER_T
  add constraint FK_HEADER_ADVICE_TYPE foreign key (ORG_ID, ADVICE_TYPE)
  references GL_ADVICE_TYPE_T (ORG_ID, ADVICE_TYPE);

prompt
prompt Creating table GL_ADVICE_DETAIL_T
prompt =================================
prompt
create table GL_ADVICE_DETAIL_T
(
  org_id               NUMBER not null,
  branch_id            NUMBER not null,
  advice_type          VARCHAR2(10) not null,
  fiscal_year          VARCHAR2(10) not null,
  advice_no            VARCHAR2(10) not null,
  detail_sr_no         NUMBER not null,
  cost_center_code     VARCHAR2(10),
  row_description      VARCHAR2(500),
  coa_code             VARCHAR2(50),
  debit_base_curr      NUMBER,
  credit_base_curr     NUMBER,
  currency_code        VARCHAR2(10),
  exchange_rate        NUMBER,
  debit_foreign_curr   NUMBER,
  credit_foreign_curr  NUMBER,
  document_reference   VARCHAR2(500),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  instrument_type      VARCHAR2(10),
  instrument_date      DATE,
  instrument_number    VARCHAR2(50),
  instrument_narration VARCHAR2(500),
  drawn_on             VARCHAR2(200),
  policy_year          VARCHAR2(300),
  policy_no            VARCHAR2(300),
  endorsement_no       VARCHAR2(300),
  claim_no             VARCHAR2(300),
  bu                   VARCHAR2(300),
  lob                  VARCHAR2(300),
  location             VARCHAR2(300),
  employee             VARCHAR2(300),
  channel              NUMBER,
  agent                VARCHAR2(300),
  sl_type              VARCHAR2(10),
  sl_code              VARCHAR2(50),
  offset_sl_code       VARCHAR2(50),
  offset_sl_type       VARCHAR2(50),
  offset_coa_code      VARCHAR2(50),
  matrix_id            VARCHAR2(50)
)
;
alter table GL_ADVICE_DETAIL_T
  add constraint GL_ADVICE_DETAIL_T_PK primary key (ORG_ID, BRANCH_ID, ADVICE_TYPE, FISCAL_YEAR, ADVICE_NO, DETAIL_SR_NO);
alter table GL_ADVICE_DETAIL_T
  add constraint GL_ADVICE_DETAIL_T_COA foreign key (COA_CODE, ORG_ID)
  references CHART_OF_ACCOUNT_GL_T (COA_CODE, ORG_ID);
alter table GL_ADVICE_DETAIL_T
  add constraint GL_ADVICE_DETAIL_T_FK1 foreign key (ORG_ID, BRANCH_ID, ADVICE_TYPE, FISCAL_YEAR, ADVICE_NO)
  references GL_ADVICE_HEADER_T (ORG_ID, BRANCH_ID, ADVICE_TYPE, FISCAL_YEAR, ADVICE_NO);

prompt
prompt Creating table GL_ADVICE_SUB_LEDGER_T
prompt =====================================
prompt
create table GL_ADVICE_SUB_LEDGER_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  advice_type         VARCHAR2(10) not null,
  fiscal_year         VARCHAR2(10) not null,
  advice_no           VARCHAR2(10) not null,
  sl_sr_no            NUMBER not null,
  cost_center_code    VARCHAR2(10),
  coa_code            VARCHAR2(50),
  sl_type             VARCHAR2(10),
  sl_code             VARCHAR2(50),
  sl_description      VARCHAR2(500),
  debit_base_curr     NUMBER,
  credit_base_curr    NUMBER,
  currency_code       VARCHAR2(10),
  exchange_rate       NUMBER,
  debit_foreign_curr  NUMBER,
  credit_foreign_curr NUMBER,
  document_reference  VARCHAR2(500),
  knockoff_amount     NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  ledger_description  VARCHAR2(500),
  policy_year         VARCHAR2(300),
  policy_no           VARCHAR2(300),
  endorsement_no      VARCHAR2(300),
  claim_no            VARCHAR2(300),
  bu                  VARCHAR2(300),
  lob                 VARCHAR2(300),
  location            VARCHAR2(300),
  employee            VARCHAR2(300),
  channel             NUMBER,
  agent               VARCHAR2(300),
  adjusted_amount     NUMBER,
  matrix_id           VARCHAR2(50),
  offset_sl_code      VARCHAR2(50),
  offset_sl_type      VARCHAR2(50),
  refrence_sr_no      NUMBER,
  offset_coa_code     VARCHAR2(50)
)
;
alter table GL_ADVICE_SUB_LEDGER_T
  add constraint GL_ADVICE_SUB_LEDGER_T_PK primary key (ORG_ID, BRANCH_ID, ADVICE_TYPE, FISCAL_YEAR, ADVICE_NO, SL_SR_NO);
alter table GL_ADVICE_SUB_LEDGER_T
  add constraint FK_SL_ADV_TYPE foreign key (ORG_ID, ADVICE_TYPE)
  references GL_ADVICE_TYPE_T (ORG_ID, ADVICE_TYPE);
alter table GL_ADVICE_SUB_LEDGER_T
  add constraint FK_SL_TYPE foreign key (ORG_ID, SL_TYPE, SL_CODE)
  references GL_SUBLEDGER_ACCOUNTS (ORG_ID, SL_TYPE, SL_CODE);
alter table GL_ADVICE_SUB_LEDGER_T
  add constraint GL_ADVICE_SUB_LEDGER_FK1 foreign key (ORG_ID, BRANCH_ID, ADVICE_TYPE, FISCAL_YEAR, ADVICE_NO)
  references GL_ADVICE_HEADER_T (ORG_ID, BRANCH_ID, ADVICE_TYPE, FISCAL_YEAR, ADVICE_NO);
alter table GL_ADVICE_SUB_LEDGER_T
  add constraint GL_ADVICE_SUB_LEDGER_T_COA foreign key (COA_CODE, ORG_ID)
  references CHART_OF_ACCOUNT_GL_T (COA_CODE, ORG_ID);

prompt
prompt Creating table GL_ALT_TYPE_MATRIX_MAP_T
prompt =======================================
prompt
create table GL_ALT_TYPE_MATRIX_MAP_T
(
  org_id           NUMBER not null,
  alteration_type  VARCHAR2(20) not null,
  matrix_id        VARCHAR2(50) not null,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  execution_order  NUMBER,
  takaful_type     VARCHAR2(20),
  application_id   NUMBER not null
)
;
alter table GL_ALT_TYPE_MATRIX_MAP_T
  add constraint GL_ALT_TYPE_MATRIX_MAP_T_PK primary key (ORG_ID, APPLICATION_ID, ALTERATION_TYPE, MATRIX_ID);

prompt
prompt Creating table GL_ALT_TYPE_USER_MAPPING_T
prompt =========================================
prompt
create table GL_ALT_TYPE_USER_MAPPING_T
(
  org_id           NUMBER not null,
  alteration_type  VARCHAR2(50) not null,
  application_id   NUMBER not null,
  serial_code      NUMBER not null,
  userid           NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GL_ALT_TYPE_USER_MAPPING_T
  add constraint PK_GL_ALT_USER_MAPP_T primary key (ORG_ID, ALTERATION_TYPE, APPLICATION_ID, SERIAL_CODE);

prompt
prompt Creating table GL_BALANCES_DIMENSIONS_T
prompt =======================================
prompt
create table GL_BALANCES_DIMENSIONS_T
(
  org_id              NUMBER,
  branch_id           NUMBER,
  fiscal_year         VARCHAR2(10),
  period_no           VARCHAR2(10),
  cost_center_code    VARCHAR2(10),
  coa_code            VARCHAR2(50),
  policy_no           VARCHAR2(300),
  claim_no            VARCHAR2(300),
  bu                  VARCHAR2(300),
  lob                 VARCHAR2(300),
  location            VARCHAR2(300),
  employee            VARCHAR2(300),
  channel             NUMBER,
  agent               VARCHAR2(300),
  debit_base_curr     NUMBER,
  credit_base_curr    NUMBER,
  currency_code       VARCHAR2(10),
  exchange_rate       NUMBER,
  debit_foreign_curr  NUMBER,
  credit_foreign_curr NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  location_temp       NUMBER
)
;
alter table GL_BALANCES_DIMENSIONS_T
  add constraint GL_BALANCES_HEADER_T_UK unique (ORG_ID, BRANCH_ID, FISCAL_YEAR, PERIOD_NO, COST_CENTER_CODE, COA_CODE, CURRENCY_CODE, POLICY_NO, CLAIM_NO, BU, LOB, LOCATION, EMPLOYEE, CHANNEL, AGENT);

prompt
prompt Creating table GL_BALANCES_HEADER_T
prompt ===================================
prompt
create table GL_BALANCES_HEADER_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  fiscal_year         VARCHAR2(10) not null,
  period_no           VARCHAR2(10) not null,
  cost_center_code    VARCHAR2(10) not null,
  coa_code            VARCHAR2(50) not null,
  debit_base_curr     NUMBER,
  credit_base_curr    NUMBER,
  currency_code       VARCHAR2(10) not null,
  debit_foreign_curr  NUMBER,
  credit_foreign_curr NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  exchange_rate       NUMBER
)
;
alter table GL_BALANCES_HEADER_T
  add constraint GL_BALANCES_HEADER_T_PK primary key (ORG_ID, BRANCH_ID, FISCAL_YEAR, PERIOD_NO, COST_CENTER_CODE, COA_CODE, CURRENCY_CODE);
alter table GL_BALANCES_HEADER_T
  add constraint GL_BALANCES_HEADER_T_COA foreign key (COA_CODE, ORG_ID)
  references CHART_OF_ACCOUNT_GL_T (COA_CODE, ORG_ID);

prompt
prompt Creating table GL_BALANCES_SUBLEDGER_T
prompt ======================================
prompt
create table GL_BALANCES_SUBLEDGER_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  fiscal_year         VARCHAR2(10) not null,
  period_no           VARCHAR2(10) not null,
  cost_center_code    VARCHAR2(10) not null,
  coa_code            VARCHAR2(50) not null,
  sl_type             VARCHAR2(10) not null,
  sl_code             VARCHAR2(50) not null,
  debit_base_curr     NUMBER,
  credit_base_curr    NUMBER,
  currency_code       VARCHAR2(10) not null,
  debit_foreign_curr  NUMBER,
  credit_foreign_curr NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  exchange_rate       NUMBER
)
;
alter table GL_BALANCES_SUBLEDGER_T
  add constraint GL_BALANCES_SUBLEDGER_T_PK primary key (ORG_ID, BRANCH_ID, FISCAL_YEAR, PERIOD_NO, COST_CENTER_CODE, COA_CODE, SL_TYPE, SL_CODE, CURRENCY_CODE);
alter table GL_BALANCES_SUBLEDGER_T
  add constraint GL_BALANCES_SUBLEDGER_T_COA foreign key (COA_CODE, ORG_ID)
  references CHART_OF_ACCOUNT_GL_T (COA_CODE, ORG_ID);

prompt
prompt Creating table GL_BANK_ACCOUNT_T
prompt ================================
prompt
create table GL_BANK_ACCOUNT_T
(
  org_id            NUMBER not null,
  bank_code         NUMBER not null,
  branch_code       NUMBER not null,
  account_code      VARCHAR2(30) not null,
  account_type      VARCHAR2(1),
  coa_code          VARCHAR2(30),
  account_status    VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  account_title     VARCHAR2(250),
  iban              VARCHAR2(50),
  bank_account_code VARCHAR2(50),
  bank_account_type VARCHAR2(50)
)
;
alter table GL_BANK_ACCOUNT_T
  add constraint G_BANK_ACCOUNT_T_PK primary key (BRANCH_CODE, ORG_ID, BANK_CODE, ACCOUNT_CODE);

prompt
prompt Creating table GL_BANK_RECON_SETUP_T
prompt ====================================
prompt
create table GL_BANK_RECON_SETUP_T
(
  org_id                   NUMBER not null,
  serial_no                NUMBER not null,
  show_clear_transaction   VARCHAR2(1),
  show_void_payments       VARCHAR2(1),
  allow_editing_import     VARCHAR2(1),
  matching_order1          VARCHAR2(1),
  matching_order2          VARCHAR2(1),
  tolerance_amount_manual  NUMBER,
  tolerance_percent_manual NUMBER,
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  tolerance_amt_auto_rct   NUMBER,
  tolerance_per_auto_rct   NUMBER,
  tolerance_amt_auto_pay   NUMBER,
  tolerance_per_auto_pay   NUMBER,
  tolerance_amt_auto_cash  NUMBER,
  tolerance_per_auto_cash  NUMBER,
  bank_charges_gl_code     VARCHAR2(50)
)
;
alter table GL_BANK_RECON_SETUP_T
  add constraint PK_BANK_RECON_SETUP_T primary key (ORG_ID, SERIAL_NO);

prompt
prompt Creating table GL_BANK_TRANS_CODES_T
prompt ====================================
prompt
create table GL_BANK_TRANS_CODES_T
(
  org_id               NUMBER not null,
  bank_code            NUMBER not null,
  serial_no            NUMBER not null,
  transaction_type     VARCHAR2(1),
  transaction_code     VARCHAR2(50),
  description          VARCHAR2(500),
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table GL_BANK_TRANS_CODES_T
  add primary key (ORG_ID, BANK_CODE, SERIAL_NO);

prompt
prompt Creating table GL_CHEQUE_SERIES_T
prompt =================================
prompt
create table GL_CHEQUE_SERIES_T
(
  org_id               NUMBER not null,
  bank_code            NUMBER not null,
  branch_code          NUMBER not null,
  account_code         NUMBER not null,
  cheque_series_no     NUMBER not null,
  starting_no          VARCHAR2(20),
  ending_no            VARCHAR2(20),
  current_no           VARCHAR2(20),
  effecitve_start_date DATE,
  effecitve_end_date   DATE,
  active               VARCHAR2(1),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  voucher_code         VARCHAR2(50) not null
)
;
alter table GL_CHEQUE_SERIES_T
  add constraint GL_CHEQUE_SERIES_PK primary key (ORG_ID, BANK_CODE, BRANCH_CODE, ACCOUNT_CODE, VOUCHER_CODE, CHEQUE_SERIES_NO);

prompt
prompt Creating table GL_DOC_TYPE_ATTACHMENT_MAP_T
prompt ===========================================
prompt
create table GL_DOC_TYPE_ATTACHMENT_MAP_T
(
  org_id           NUMBER not null,
  application_id   NUMBER,
  doc_type         VARCHAR2(20) not null,
  attachment_code  VARCHAR2(50) not null,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  undwt_tag        VARCHAR2(1),
  customer_access  VARCHAR2(1)
)
;
alter table GL_DOC_TYPE_ATTACHMENT_MAP_T
  add constraint PK_GL_DOC_TYPE_ATTACH_MAP_T primary key (ORG_ID, DOC_TYPE, ATTACHMENT_CODE);

prompt
prompt Creating table GL_DOC_TYPE_MATRIX_MAP_T
prompt =======================================
prompt
create table GL_DOC_TYPE_MATRIX_MAP_T
(
  org_id           NUMBER not null,
  doc_type         VARCHAR2(20) not null,
  matrix_id        VARCHAR2(50) not null,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  execution_order  NUMBER,
  takaful_type     VARCHAR2(20) not null,
  application_id   NUMBER not null
)
;
alter table GL_DOC_TYPE_MATRIX_MAP_T
  add constraint GL_DOC_TYPE_MATRIX_MAP_T_PK primary key (ORG_ID, APPLICATION_ID, DOC_TYPE, TAKAFUL_TYPE, MATRIX_ID);

prompt
prompt Creating table GL_FISCAL_YEAR_SETUP_T
prompt =====================================
prompt
create table GL_FISCAL_YEAR_SETUP_T
(
  org_id           NUMBER not null,
  fiscal_year      NUMBER not null,
  year_end_flag    VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  default_tag      VARCHAR2(1),
  date_from        DATE,
  date_to          DATE
)
;
alter table GL_FISCAL_YEAR_SETUP_T
  add constraint PK_FISCAL_YEAR primary key (ORG_ID, FISCAL_YEAR);

prompt
prompt Creating table GL_PERIOD_SETUP_T
prompt ================================
prompt
create table GL_PERIOD_SETUP_T
(
  fiscal_year      VARCHAR2(10) not null,
  periond_number   NUMBER not null,
  from_date        DATE,
  to_date          DATE,
  status           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  org_id           NUMBER not null,
  start_period     VARCHAR2(1),
  branch_id        NUMBER not null,
  freeze_tag       VARCHAR2(1),
  freeze_date      DATE
)
;
alter table GL_PERIOD_SETUP_T
  add constraint GL_PERIOD_SETUP_T_PK primary key (FISCAL_YEAR, PERIOND_NUMBER, ORG_ID, BRANCH_ID);

prompt
prompt Creating table GL_SUBLEDGER_ACC_DETAIL_T
prompt ========================================
prompt
create table GL_SUBLEDGER_ACC_DETAIL_T
(
  org_id               NUMBER not null,
  sl_type              VARCHAR2(20) not null,
  sl_code              VARCHAR2(20) not null,
  sl_sr_no             NUMBER not null,
  entity_type          VARCHAR2(5),
  filer_type           VARCHAR2(2),
  ntn                  VARCHAR2(50),
  sstn                 VARCHAR2(50),
  gstn                 VARCHAR2(50),
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  cnic                 VARCHAR2(30),
  payment_mode         VARCHAR2(2),
  bank_name            VARCHAR2(100),
  account_title        VARCHAR2(100),
  account_number       VARCHAR2(100)
)
;
alter table GL_SUBLEDGER_ACC_DETAIL_T
  add constraint GL_SUBLEDGER_ACC_DETAIL_PK primary key (ORG_ID, SL_TYPE, SL_CODE, SL_SR_NO);

prompt
prompt Creating table GL_SUB_LEDGER_ADDRESS_T
prompt ======================================
prompt
create table GL_SUB_LEDGER_ADDRESS_T
(
  org_id           NUMBER not null,
  sl_type          VARCHAR2(20) not null,
  sl_code          VARCHAR2(20) not null,
  address1         VARCHAR2(100),
  address2         VARCHAR2(100),
  city_code        VARCHAR2(10),
  state_code       VARCHAR2(10),
  country_code     VARCHAR2(10),
  zip_code         VARCHAR2(50),
  phone1           VARCHAR2(50),
  phone2           VARCHAR2(50),
  fax1             VARCHAR2(50),
  fax2             VARCHAR2(50),
  email            VARCHAR2(100),
  website          VARCHAR2(150),
  home_phone       NUMBER,
  office_phone     NUMBER,
  house_no         VARCHAR2(50),
  unit_no          VARCHAR2(50),
  building         VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  mobile_phone     NUMBER
)
;
alter table GL_SUB_LEDGER_ADDRESS_T
  add constraint PK_GL_SUB_LED_ADDRESS_T primary key (ORG_ID, SL_TYPE, SL_CODE);

prompt
prompt Creating table GL_VOUCHER_TYPE_T
prompt ================================
prompt
create table GL_VOUCHER_TYPE_T
(
  org_id               NUMBER not null,
  voucher_description  VARCHAR2(100) not null,
  voucher_type         VARCHAR2(10) not null,
  auto_tag             VARCHAR2(1) not null,
  active               VARCHAR2(1) not null,
  created_by           VARCHAR2(50),
  creation_date        TIMESTAMP(6),
  last_updated_by      VARCHAR2(50),
  last_update_date     TIMESTAMP(6),
  voucher_payment_type VARCHAR2(1),
  target_voucher_type  VARCHAR2(5),
  print_audit_trail    VARCHAR2(1)
)
;
alter table GL_VOUCHER_TYPE_T
  add constraint GL_VOUCHER_TYPE_T_PK primary key (ORG_ID, VOUCHER_TYPE);

prompt
prompt Creating table GL_VOUCHER_HEADER_T
prompt ==================================
prompt
create table GL_VOUCHER_HEADER_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  voucher_type        VARCHAR2(10) not null,
  fiscal_year         VARCHAR2(10) not null,
  voucher_no          VARCHAR2(10) not null,
  voucher_date        DATE,
  voucher_amount      NUMBER,
  voucher_description VARCHAR2(500),
  voucher_status      VARCHAR2(1),
  verified_by         VARCHAR2(50),
  verified_date       DATE,
  approved_by         VARCHAR2(50),
  approval_date       DATE,
  canceled_by         VARCHAR2(50),
  cancel_date         DATE,
  reversed_tag        VARCHAR2(1),
  reversed_by         VARCHAR2(50),
  reveral_date        DATE,
  reversal_ref_vch_no VARCHAR2(50),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  manual_tag          VARCHAR2(1),
  matrix_id           VARCHAR2(50),
  doc_ref_no          VARCHAR2(250),
  voucher_ref_no      VARCHAR2(50),
  target_voucher_type VARCHAR2(5),
  exclude_tag         VARCHAR2(1)
)
;
alter table GL_VOUCHER_HEADER_T
  add constraint GL_VOUCHER_HEADER_T_PK primary key (ORG_ID, BRANCH_ID, VOUCHER_TYPE, VOUCHER_NO, FISCAL_YEAR);
alter table GL_VOUCHER_HEADER_T
  add constraint FK_VOUCHER_VCH_TYPE foreign key (ORG_ID, VOUCHER_TYPE)
  references GL_VOUCHER_TYPE_T (ORG_ID, VOUCHER_TYPE);

prompt
prompt Creating table GL_VOUCHER_DETAIL_T
prompt ==================================
prompt
create table GL_VOUCHER_DETAIL_T
(
  org_id               NUMBER not null,
  branch_id            NUMBER not null,
  voucher_type         VARCHAR2(10) not null,
  fiscal_year          VARCHAR2(10) not null,
  voucher_no           VARCHAR2(10) not null,
  detail_sr_no         NUMBER not null,
  cost_center_code     VARCHAR2(10),
  row_description      VARCHAR2(500),
  coa_code             VARCHAR2(50) not null,
  debit_base_curr      NUMBER,
  credit_base_curr     NUMBER,
  currency_code        VARCHAR2(10),
  exchange_rate        NUMBER,
  debit_foreign_curr   NUMBER,
  credit_foreign_curr  NUMBER,
  document_reference   VARCHAR2(500),
  knockoff_amount      NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  instrument_type      VARCHAR2(10),
  instrument_date      DATE,
  instrument_number    VARCHAR2(50),
  instrument_narration VARCHAR2(500),
  manual_tag           VARCHAR2(1),
  tax_detail_code      NUMBER,
  ref_dtl_no           NUMBER,
  drawn_on             VARCHAR2(100),
  cheque_no            VARCHAR2(50),
  knockoff_ref         VARCHAR2(100),
  policy_year          VARCHAR2(300),
  policy_no            VARCHAR2(300),
  endorsement_no       VARCHAR2(300),
  claim_no             VARCHAR2(300),
  bu                   VARCHAR2(300),
  lob                  VARCHAR2(300),
  location             VARCHAR2(300),
  employee             VARCHAR2(300),
  channel              NUMBER,
  agent                VARCHAR2(300),
  offset_coa_code      VARCHAR2(50),
  matrix_id            VARCHAR2(50),
  subledger_flag       VARCHAR2(1),
  offset_sl_type       VARCHAR2(50),
  offset_sl_code       VARCHAR2(50),
  sl_type              VARCHAR2(50),
  sl_code              VARCHAR2(50),
  refrence_sr_no       NUMBER,
  reconcilation_tag    VARCHAR2(1),
  recon_gl_tag         NUMBER
)
;
alter table GL_VOUCHER_DETAIL_T
  add constraint GL_VOUCHER_DETAIL_T_PK primary key (ORG_ID, BRANCH_ID, VOUCHER_TYPE, FISCAL_YEAR, VOUCHER_NO, DETAIL_SR_NO);
alter table GL_VOUCHER_DETAIL_T
  add constraint FK_VCH_DETAIL_CC foreign key (ORG_ID, COST_CENTER_CODE)
  references TK_COST_CENTER_SETUP_T (ORG_ID, COST_CENTER_CODE);
alter table GL_VOUCHER_DETAIL_T
  add constraint FK_VCH_DETAIL_HEADER foreign key (ORG_ID, BRANCH_ID, VOUCHER_TYPE, VOUCHER_NO, FISCAL_YEAR)
  references GL_VOUCHER_HEADER_T (ORG_ID, BRANCH_ID, VOUCHER_TYPE, VOUCHER_NO, FISCAL_YEAR);
alter table GL_VOUCHER_DETAIL_T
  add constraint GL_VOUCHER_DETAIL_T_COA foreign key (COA_CODE, ORG_ID)
  references CHART_OF_ACCOUNT_GL_T (COA_CODE, ORG_ID);

prompt
prompt Creating table GL_SUB_LEDGER_DETAIL_T
prompt =====================================
prompt
create table GL_SUB_LEDGER_DETAIL_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  voucher_type        VARCHAR2(10) not null,
  fiscal_year         VARCHAR2(10) not null,
  voucher_no          VARCHAR2(10) not null,
  detail_sr_no        NUMBER not null,
  sl_sr_no            NUMBER not null,
  cost_center_code    VARCHAR2(10),
  coa_code            VARCHAR2(50) not null,
  sl_type             VARCHAR2(10),
  sl_code             VARCHAR2(50),
  sl_description      VARCHAR2(500),
  debit_base_curr     NUMBER,
  credit_base_curr    NUMBER,
  currency_code       VARCHAR2(10),
  exchange_rate       NUMBER,
  debit_foreign_curr  NUMBER,
  credit_foreign_curr NUMBER,
  document_reference  VARCHAR2(500),
  knockoff_amount     NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  offset_coa_code     VARCHAR2(50),
  offset_sl_type      VARCHAR2(50),
  offset_sl_code      VARCHAR2(50),
  refrence_sr_no      NUMBER
)
;
alter table GL_SUB_LEDGER_DETAIL_T
  add constraint GL_SUB_LEDGER_DETAIL_T_PK primary key (ORG_ID, BRANCH_ID, VOUCHER_TYPE, FISCAL_YEAR, VOUCHER_NO, DETAIL_SR_NO, SL_SR_NO);
alter table GL_SUB_LEDGER_DETAIL_T
  add constraint FK_VCH_SL_TYPE foreign key (ORG_ID, SL_TYPE, SL_CODE)
  references GL_SUBLEDGER_ACCOUNTS (ORG_ID, SL_TYPE, SL_CODE);
alter table GL_SUB_LEDGER_DETAIL_T
  add constraint GL_SUB_LEDGER_DETAIL_T_COA foreign key (COA_CODE, ORG_ID)
  references CHART_OF_ACCOUNT_GL_T (COA_CODE, ORG_ID);
alter table GL_SUB_LEDGER_DETAIL_T
  add constraint GL_SUB_LEDGER_DETAIL_T_R01 foreign key (ORG_ID, BRANCH_ID, VOUCHER_TYPE, FISCAL_YEAR, VOUCHER_NO, DETAIL_SR_NO)
  references GL_VOUCHER_DETAIL_T (ORG_ID, BRANCH_ID, VOUCHER_TYPE, FISCAL_YEAR, VOUCHER_NO, DETAIL_SR_NO)
  novalidate;

prompt
prompt Creating table GL_TAG_T
prompt =======================
prompt
create table GL_TAG_T
(
  org_id           NUMBER not null,
  gl_tag_code      NUMBER not null,
  gl_tag_name      VARCHAR2(100) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GL_TAG_T
  add constraint PK_GL_TAG_T primary key (ORG_ID, GL_TAG_CODE);

prompt
prompt Creating table GL_TAX_APPLICAPIBILITY_T
prompt =======================================
prompt
create table GL_TAX_APPLICAPIBILITY_T
(
  regime_id        NUMBER not null,
  tax_code         NUMBER not null,
  jurisdiction_id  NUMBER not null,
  tax_detail_code  NUMBER not null,
  type             VARCHAR2(100) not null,
  serial_number    NUMBER not null,
  value            VARCHAR2(100) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  org_id           NUMBER not null,
  parent_key       VARCHAR2(500)
)
;
alter table GL_TAX_APPLICAPIBILITY_T
  add constraint GL_TAX_APPLICAPIBILITY_T_PK primary key (REGIME_ID, TAX_CODE, JURISDICTION_ID, TAX_DETAIL_CODE, SERIAL_NUMBER, ORG_ID, TYPE, VALUE);

prompt
prompt Creating table GL_TAX_JURISDICTION_SETUP_T
prompt ==========================================
prompt
create table GL_TAX_JURISDICTION_SETUP_T
(
  org_id                   NUMBER not null,
  tax_code                 NUMBER not null,
  jurisdiction_id          NUMBER not null,
  jurisdiction_description VARCHAR2(100),
  active_tag               VARCHAR2(1),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  regime_id                NUMBER not null
)
;
alter table GL_TAX_JURISDICTION_SETUP_T
  add constraint GL_TAX_JURISDICTION_SETUP__PK primary key (ORG_ID, TAX_CODE, REGIME_ID, JURISDICTION_ID);
alter table GL_TAX_JURISDICTION_SETUP_T
  add constraint GL_TAX_JURISDICTION_SETUP_UK1 unique (JURISDICTION_DESCRIPTION, TAX_CODE);

prompt
prompt Creating table GL_TAX_REGIME_SETUP_T
prompt ====================================
prompt
create table GL_TAX_REGIME_SETUP_T
(
  regime_id        NUMBER not null,
  description      VARCHAR2(100),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  org_id           NUMBER not null
)
;
alter table GL_TAX_REGIME_SETUP_T
  add constraint GL_TAX_REGIME_SETUP_T_PK primary key (REGIME_ID, ORG_ID);

prompt
prompt Creating table GL_TAX_SETUP_DETAIL_T
prompt ====================================
prompt
create table GL_TAX_SETUP_DETAIL_T
(
  org_id               NUMBER not null,
  tax_code             NUMBER not null,
  tax_detail_code      NUMBER not null,
  description          VARCHAR2(250),
  coa_code             VARCHAR2(20) not null,
  rate                 NUMBER,
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  jurisdiction_id      NUMBER not null,
  tax_recovery         NUMBER,
  exempted_amount      NUMBER,
  flat_amount          NUMBER,
  regime_id            NUMBER
)
;
alter table GL_TAX_SETUP_DETAIL_T
  add constraint GL_TAX_SETUP_DETAIL_T_PK primary key (ORG_ID, TAX_CODE, TAX_DETAIL_CODE, JURISDICTION_ID);

prompt
prompt Creating table GL_TAX_SETUP_T
prompt =============================
prompt
create table GL_TAX_SETUP_T
(
  org_id           NUMBER not null,
  tax_code         NUMBER not null,
  tax_name         VARCHAR2(250),
  type             VARCHAR2(4),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE not null,
  regime_id        NUMBER not null
)
;
alter table GL_TAX_SETUP_T
  add constraint GL_TAX_SETUP_T_PK primary key (ORG_ID, TAX_CODE, REGIME_ID);

prompt
prompt Creating table GL_VOUCHER_APPROVAL_HISTORY_T
prompt ============================================
prompt
create table GL_VOUCHER_APPROVAL_HISTORY_T
(
  org_id          NUMBER not null,
  branch_id       NUMBER not null,
  voucher_type    VARCHAR2(10) not null,
  fiscal_year     VARCHAR2(10) not null,
  voucher_no      VARCHAR2(10) not null,
  s_no            NUMBER not null,
  action_type     VARCHAR2(20),
  action          VARCHAR2(1),
  action_by       VARCHAR2(50),
  action_date     DATE,
  action_comments VARCHAR2(500)
)
;
alter table GL_VOUCHER_APPROVAL_HISTORY_T
  add constraint GL_VOUCHER_APPROVAL_HISTORY_PK primary key (ORG_ID, BRANCH_ID, VOUCHER_TYPE, FISCAL_YEAR, VOUCHER_NO, S_NO);

prompt
prompt Creating table GL_VOUCHER_ATTACHMENT_T
prompt ======================================
prompt
create table GL_VOUCHER_ATTACHMENT_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  voucher_type     VARCHAR2(10) not null,
  fiscal_year      VARCHAR2(10) not null,
  voucher_no       VARCHAR2(10) not null,
  attachment_no    NUMBER not null,
  description      VARCHAR2(250),
  attachment       VARCHAR2(250),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  manual_tag       VARCHAR2(1)
)
;
alter table GL_VOUCHER_ATTACHMENT_T
  add constraint GL_VOUCHER_ATTACHMENT_T_PK primary key (ORG_ID, BRANCH_ID, VOUCHER_TYPE, VOUCHER_NO, FISCAL_YEAR, ATTACHMENT_NO);

prompt
prompt Creating table GOAL_SEEK_LOG_T
prompt ==============================
prompt
create table GOAL_SEEK_LOG_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  document_no        VARCHAR2(10) not null,
  document_year      NUMBER not null,
  application_id     NUMBER not null,
  issue_count        NUMBER not null,
  iterator           NUMBER not null,
  basic_contribution NUMBER,
  cash_value         NUMBER,
  target_cash_value  NUMBER,
  target_year        NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE
)
;
alter table GOAL_SEEK_LOG_T
  add constraint PK_GOAL_SEEK_LOG primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, ITERATOR);

prompt
prompt Creating table GPF_PAYROLL_CALANDER
prompt ===================================
prompt
create table GPF_PAYROLL_CALANDER
(
  org_id             NUMBER not null,
  payrollcalanderid  NUMBER not null,
  payroll_name       VARCHAR2(200),
  periodtype         NUMBER,
  firstperiodenddate DATE,
  numberofyears      NUMBER,
  startdate          DATE,
  enddate            DATE,
  fiscalyear         NUMBER,
  addby              NUMBER,
  adddate            DATE,
  editby             NUMBER,
  editdate           DATE,
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table GPF_PAYROLL_CALANDER
  add constraint PK_GPF_PAYROLLCALANDER primary key (ORG_ID, PAYROLLCALANDERID);

prompt
prompt Creating table GPF_PAYROLL_USER_MAPPING_T
prompt =========================================
prompt
create table GPF_PAYROLL_USER_MAPPING_T
(
  org_id            NUMBER not null,
  payrollcalanderid NUMBER not null,
  user_id           NUMBER not null,
  user_role         VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table GPF_PAYROLL_USER_MAPPING_T
  add constraint PK_PAYROLL_USER_MAPP primary key (ORG_ID, PAYROLLCALANDERID, USER_ID);

prompt
prompt Creating table GP_LOSS_TYPE_SETUP_T
prompt ===================================
prompt
create table GP_LOSS_TYPE_SETUP_T
(
  org_id           NUMBER not null,
  loss_type_code   NUMBER not null,
  abbreviation     VARCHAR2(50),
  short_name       VARCHAR2(50),
  title            VARCHAR2(50),
  loss_nature      VARCHAR2(20),
  remarks          VARCHAR2(200),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  app_id           NUMBER,
  application_id   NUMBER not null
)
;
alter table GP_LOSS_TYPE_SETUP_T
  add constraint PK_GL_LOSS_TYPE_SETUP_T primary key (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID);

prompt
prompt Creating table GRADES_USER_MAPPING
prompt ==================================
prompt
create table GRADES_USER_MAPPING
(
  org_id           NUMBER not null,
  gradeid          NUMBER not null,
  employee_id      NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GRADES_USER_MAPPING
  add constraint PK_GRADE_USER_MAP primary key (ORG_ID, GRADEID, EMPLOYEE_ID);

prompt
prompt Creating table GT_ITEM_IPARTY_DTL_T
prompt ===================================
prompt
create table GT_ITEM_IPARTY_DTL_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  item_no          NUMBER not null,
  serial_no        NUMBER not null,
  name_of_party    VARCHAR2(200),
  building_name    VARCHAR2(200),
  street           VARCHAR2(200),
  town             VARCHAR2(200),
  country          VARCHAR2(100),
  post_code        VARCHAR2(100),
  account_no       VARCHAR2(100),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GT_ITEM_IPARTY_DTL_T
  add constraint PK_ITEM_IPARTY_DTL_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, SERIAL_NO);

prompt
prompt Creating table GT_ITEM_JOINT_HOLDER_T
prompt =====================================
prompt
create table GT_ITEM_JOINT_HOLDER_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  item_no          NUMBER not null,
  serial_no        NUMBER not null,
  title            VARCHAR2(200),
  first_name       VARCHAR2(200),
  sur_name         VARCHAR2(200),
  dob              VARCHAR2(200),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GT_ITEM_JOINT_HOLDER_T
  add constraint PK_ITEM_JOINT_HOLDER_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, SERIAL_NO);

prompt
prompt Creating table GT_POS_CLAIM_T
prompt =============================
prompt
create table GT_POS_CLAIM_T
(
  org_id           NUMBER not null,
  product_id       NUMBER not null,
  quotation_id     NUMBER not null,
  record_id        NUMBER not null,
  claim_date       DATE,
  claim_type       NUMBER,
  cover_affected   NUMBER,
  claim_cost       NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GT_POS_CLAIM_T
  add constraint PK_GT_POS_CLAIM_T primary key (ORG_ID, PRODUCT_ID, QUOTATION_ID, RECORD_ID);

prompt
prompt Creating table GT_POS_IPARTY_T
prompt ==============================
prompt
create table GT_POS_IPARTY_T
(
  org_id           NUMBER not null,
  product_id       NUMBER not null,
  quotation_id     NUMBER not null,
  record_id        NUMBER not null,
  name_of_party    VARCHAR2(200),
  building_name    VARCHAR2(200),
  street           VARCHAR2(200),
  town             VARCHAR2(200),
  country          VARCHAR2(100),
  post_code        VARCHAR2(100),
  account_no       VARCHAR2(100),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GT_POS_IPARTY_T
  add constraint PK_GT_POS_IPARTY_T primary key (ORG_ID, PRODUCT_ID, QUOTATION_ID, RECORD_ID);

prompt
prompt Creating table GT_POS_JOINT_HOLDER_T
prompt ====================================
prompt
create table GT_POS_JOINT_HOLDER_T
(
  org_id           NUMBER not null,
  product_id       NUMBER not null,
  quotation_id     NUMBER not null,
  record_id        NUMBER not null,
  title            VARCHAR2(200),
  first_name       VARCHAR2(200),
  sur_name         VARCHAR2(200),
  dob              VARCHAR2(200),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table GT_POS_JOINT_HOLDER_T
  add constraint PK_GT_POS_JOINT_HOLDER_T primary key (ORG_ID, PRODUCT_ID, QUOTATION_ID, RECORD_ID);

prompt
prompt Creating table GT_POS_MASTER_T
prompt ==============================
prompt
create table GT_POS_MASTER_T
(
  org_id                    NUMBER not null,
  product_id                NUMBER not null,
  quotation_id              NUMBER not null,
  house_number              VARCHAR2(150),
  postal_code               VARCHAR2(50),
  own_home                  VARCHAR2(1),
  cover_type                NUMBER,
  cover_start_date          DATE not null,
  property_type             NUMBER,
  no_of_bedroom             NUMBER,
  no_of_bathroom            NUMBER,
  no_of_othr_room           NUMBER,
  build_date                DATE,
  external_wall_made        NUMBER,
  roof_made                 NUMBER,
  roof_flat_percent         NUMBER,
  home_flooded              VARCHAR2(1),
  land_slipped              VARCHAR2(1),
  listed_building           VARCHAR2(1),
  no_of_person_18_and_above NUMBER,
  no_of_person_below_18     NUMBER,
  at_home_time              NUMBER,
  business_done_at_home     NUMBER,
  claim_in_last_5years      VARCHAR2(1),
  no_claim_period_building  NUMBER,
  no_claim_period_content   NUMBER,
  insured_title             NUMBER,
  insured_first_name        VARCHAR2(100),
  insured_sur_name          VARCHAR2(100),
  insured_dob               DATE,
  employment_status         NUMBER,
  is_joint_policy_holder    VARCHAR2(1),
  is_interested_party       VARCHAR2(1),
  payment_mode              NUMBER,
  email_address             VARCHAR2(150),
  mobile_number             VARCHAR2(50),
  promotional_code          VARCHAR2(150),
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_updated_by           VARCHAR2(50),
  last_update_date          DATE,
  total_amount              NUMBER,
  travel_journey_type       NUMBER,
  travel_option             NUMBER,
  trvl_health_stmnt         VARCHAR2(1),
  aviva_policy              VARCHAR2(1),
  assumption_stmnt          VARCHAR2(1)
)
;
alter table GT_POS_MASTER_T
  add constraint PK_GT_POS_MASTER_T primary key (ORG_ID, PRODUCT_ID, QUOTATION_ID);

prompt
prompt Creating table HR_APPR_EMPLOYEE_FEEDBACK_T
prompt ==========================================
prompt
create table HR_APPR_EMPLOYEE_FEEDBACK_T
(
  org_id           NUMBER not null,
  user_id          NUMBER not null,
  employee_plan_id NUMBER not null,
  feedback_status  VARCHAR2(1),
  feedback_comment VARCHAR2(300),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table HR_APPR_EMPLOYEE_FEEDBACK_T
  add constraint PK_EMPLOYEE_FINAL_FEEDBACK_T primary key (ORG_ID, USER_ID, EMPLOYEE_PLAN_ID);

prompt
prompt Creating table HR_DOB_EMAIL_TEMPLATE_DTL_T
prompt ==========================================
prompt
create table HR_DOB_EMAIL_TEMPLATE_DTL_T
(
  org_id            NUMBER not null,
  email_id          NUMBER not null,
  rec_id            NUMBER not null,
  image_description VARCHAR2(50),
  image_upload_path VARCHAR2(200)
)
;
alter table HR_DOB_EMAIL_TEMPLATE_DTL_T
  add constraint PK_HR_DOB_EMAIL_DTL_T primary key (ORG_ID, EMAIL_ID, REC_ID);

prompt
prompt Creating table HR_DOB_EMAIL_TEMPLATE_HD_T
prompt =========================================
prompt
create table HR_DOB_EMAIL_TEMPLATE_HD_T
(
  org_id            NUMBER not null,
  email_id          NUMBER not null,
  email_description VARCHAR2(100),
  email_subject     VARCHAR2(150),
  email_body        VARCHAR2(500),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  signature         VARCHAR2(200),
  signature2        VARCHAR2(200)
)
;
alter table HR_DOB_EMAIL_TEMPLATE_HD_T
  add constraint PK_HR_DOB_EMAIL_HD_T primary key (ORG_ID, EMAIL_ID);

prompt
prompt Creating table ILAS_DOCUMENT_TRACKING_T
prompt =======================================
prompt
create table ILAS_DOCUMENT_TRACKING_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  doc_ref_no       VARCHAR2(100),
  current_status   VARCHAR2(20),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table ILAS_DOCUMENT_TRACKING_T
  add constraint ILAS_DOC_TRACKING_pk primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);
alter table ILAS_DOCUMENT_TRACKING_T
  add constraint FK_DOC_TRACK_HD foreign key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references TK_DOC_HEADER_T (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table ILAS_RESPONSIBLE_DEPT_SETUP_T
prompt ============================================
prompt
create table ILAS_RESPONSIBLE_DEPT_SETUP_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  dept_code        NUMBER not null,
  dept_desc        VARCHAR2(100),
  display_order    NUMBER,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table ILAS_RESPONSIBLE_DEPT_SETUP_T
  add constraint ILAS_RESPONSIBLE_DEPT_PK primary key (ORG_ID, APPLICATION_ID, DEPT_CODE);

prompt
prompt Creating table ILAS_RESP_DEPT_USER_MAPPING_T
prompt ============================================
prompt
create table ILAS_RESP_DEPT_USER_MAPPING_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  dept_code        NUMBER not null,
  user_id          NUMBER not null,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table ILAS_RESP_DEPT_USER_MAPPING_T
  add constraint ILAS_RESP_USER_PK primary key (ORG_ID, APPLICATION_ID, DEPT_CODE, USER_ID);

prompt
prompt Creating table ILAS_SUB_PROD_COMM_SETUP_T
prompt =========================================
prompt
create table ILAS_SUB_PROD_COMM_SETUP_T
(
  org_id                      NUMBER not null,
  main_product_code           NUMBER not null,
  sub_product_code            NUMBER not null,
  comm_rate_id                NUMBER not null,
  distributin_channel         VARCHAR2(50) not null,
  channel_model               VARCHAR2(50) not null,
  designation_level           VARCHAR2(50),
  designation_model           VARCHAR2(50),
  policy_term                 NUMBER,
  rate                        NUMBER,
  effective_start_date        DATE,
  effective_end_date          DATE,
  created_by                  VARCHAR2(100),
  creation_date               DATE,
  last_updated_by             VARCHAR2(100),
  last_update_date            DATE,
  jump_tag                    VARCHAR2(1),
  rate_topup                  NUMBER,
  commission_type             VARCHAR2(1),
  commission_nature           VARCHAR2(1),
  jump_tag_adhoc              VARCHAR2(1),
  jump_tag_bus_credit_adhoc   VARCHAR2(100),
  jump_tag_bus_credit_regular VARCHAR2(100),
  bus_credit_regular          NUMBER,
  bus_credit_adhoc            NUMBER,
  pmd_term                    NUMBER,
  header_id                   NUMBER not null
)
;
alter table ILAS_SUB_PROD_COMM_SETUP_T
  add constraint ILAS_SUB_PROD_COMM_SETUP_PK primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DISTRIBUTIN_CHANNEL, CHANNEL_MODEL, HEADER_ID, COMM_RATE_ID);

prompt
prompt Creating table ILAS_SUB_PROD_COMM_SLABS_T
prompt =========================================
prompt
create table ILAS_SUB_PROD_COMM_SLABS_T
(
  org_id               NUMBER not null,
  main_product_code    NUMBER not null,
  sub_product_code     NUMBER not null,
  comm_rate_id         NUMBER not null,
  code                 NUMBER not null,
  minimum_contribution NUMBER,
  maximum_contribution NUMBER,
  regular_rate         NUMBER,
  adhoc_rate           NUMBER,
  created_by           VARCHAR2(100),
  creation_date        DATE,
  last_updated_by      VARCHAR2(100),
  last_update_date     DATE,
  doc_reference_no     VARCHAR2(30),
  bus_credit_regular   NUMBER,
  bus_credit_adhoc     NUMBER
)
;
alter table ILAS_SUB_PROD_COMM_SLABS_T
  add constraint ILAS_SUB_PROD_COMM_SLABS_PK primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, COMM_RATE_ID, CODE);

prompt
prompt Creating table ILAS_SUB_PROD_RATES_SETUP_T
prompt ==========================================
prompt
create table ILAS_SUB_PROD_RATES_SETUP_T
(
  org_id               NUMBER not null,
  main_product_code    NUMBER not null,
  sub_product_code     NUMBER not null,
  benefit_code         NUMBER not null,
  rate_type_id         NUMBER not null,
  policy_term          NUMBER not null,
  rate                 NUMBER,
  effective_start_date DATE not null,
  effective_end_date   DATE,
  created_by           VARCHAR2(100),
  creation_date        DATE,
  last_updated_by      VARCHAR2(100),
  last_update_date     DATE,
  indexation_rate_id   NUMBER
)
;
alter table ILAS_SUB_PROD_RATES_SETUP_T
  add constraint ILAS_SUB_PROD_RATES_SETUP_PK primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE, RATE_TYPE_ID, POLICY_TERM, EFFECTIVE_START_DATE);
alter table ILAS_SUB_PROD_RATES_SETUP_T
  add constraint FK_ILAS_SUB_PROD_RATES_SETUP foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE)
  references GLAS_SUB_PROD_BENEFIT_MAP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, BENEFIT_CODE);

prompt
prompt Creating table IL_ALLOC_TRANS_TYPE_T
prompt ====================================
prompt
create table IL_ALLOC_TRANS_TYPE_T
(
  org_id             NUMBER not null,
  type_code          NUMBER not null,
  type_desc          VARCHAR2(50),
  active             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  calculation_type   VARCHAR2(10),
  retakaful_tag      VARCHAR2(1),
  commission_tag     VARCHAR2(1),
  display_order      NUMBER,
  type_code_reversal NUMBER,
  reversal_tag       VARCHAR2(1),
  report_group_code  VARCHAR2(50),
  deduction_type     VARCHAR2(1),
  fund_wise_tag      VARCHAR2(1),
  term_wise_tag      VARCHAR2(1),
  surplus_tag        VARCHAR2(1)
)
;
alter table IL_ALLOC_TRANS_TYPE_T
  add constraint PK_ALLOC_TR_TYPE primary key (ORG_ID, TYPE_CODE);
alter table IL_ALLOC_TRANS_TYPE_T
  add constraint FK_ALLOC_TR_TYPE_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table IL_ALLOC_TYPE_SETUP_T
prompt ====================================
prompt
create table IL_ALLOC_TYPE_SETUP_T
(
  org_id           NUMBER not null,
  type_code        NUMBER not null,
  type_desc        VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  report_code      VARCHAR2(50)
)
;
alter table IL_ALLOC_TYPE_SETUP_T
  add constraint PK_ALLOC_TYPE primary key (ORG_ID, TYPE_CODE);
alter table IL_ALLOC_TYPE_SETUP_T
  add constraint FK_ALLOC_TYPE_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table IL_ASSIGNEE_CONTACT_T
prompt ====================================
prompt
create table IL_ASSIGNEE_CONTACT_T
(
  org_id           NUMBER not null,
  assignee_code    NUMBER not null,
  serial_no        NUMBER not null,
  person_name      VARCHAR2(500),
  designation      VARCHAR2(250),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_ASSIGNEE_CONTACT_T
  add constraint PK_ASN_CNTCT_T primary key (ORG_ID, ASSIGNEE_CODE, SERIAL_NO);

prompt
prompt Creating table IL_ASSIGNEE_SETUP_T
prompt ==================================
prompt
create table IL_ASSIGNEE_SETUP_T
(
  org_id           NUMBER not null,
  assignee_code    NUMBER not null,
  assignee_name    VARCHAR2(500),
  assignee_type    VARCHAR2(50),
  ntn_no           VARCHAR2(200),
  phone            VARCHAR2(20),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_ASSIGNEE_SETUP_T
  add constraint PK_ASN_SETUP_T primary key (ORG_ID, ASSIGNEE_CODE);

prompt
prompt Creating table IL_AUTO_RENEWAL_LOG_T
prompt ====================================
prompt
create table IL_AUTO_RENEWAL_LOG_T
(
  org_id            NUMBER not null,
  doc_reference_key VARCHAR2(100) not null,
  serial_no         NUMBER not null,
  process_date      DATE,
  process_status    VARCHAR2(15),
  process_message   VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  dayend_date       DATE,
  due_date          DATE,
  topup_eff_date    DATE
)
;
alter table IL_AUTO_RENEWAL_LOG_T
  add constraint PK_REN_LOG primary key (ORG_ID, DOC_REFERENCE_KEY, SERIAL_NO);

prompt
prompt Creating table IL_BANK_REP_LOGS_T
prompt =================================
prompt
create table IL_BANK_REP_LOGS_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  main_product_code        NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  serial_no                NUMBER not null,
  bank_representative_code VARCHAR2(150),
  bank_representative_name VARCHAR2(150),
  remarks                  VARCHAR2(550),
  creation_date            DATE,
  created_by               VARCHAR2(50),
  last_update_date         DATE,
  last_updated_by          VARCHAR2(50)
)
;
alter table IL_BANK_REP_LOGS_T
  add constraint PK_IL_BNK_REP_LOG primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);

prompt
prompt Creating table IL_BUNDLE_ATTACHEMENT_T
prompt ======================================
prompt
create table IL_BUNDLE_ATTACHEMENT_T
(
  org_id           NUMBER not null,
  app_id           NUMBER not null,
  attachment_type  VARCHAR2(10) not null,
  owner_type       VARCHAR2(10) not null,
  active_tag       VARCHAR2(1) not null,
  creation_date    DATE,
  created_by       VARCHAR2(150),
  last_update_date DATE,
  last_updated_by  VARCHAR2(150),
  bundle_id        NUMBER not null
)
;
alter table IL_BUNDLE_ATTACHEMENT_T
  add constraint IL_BUNDLE_ATTACHEMENT_T primary key (ORG_ID, APP_ID, ATTACHMENT_TYPE, OWNER_TYPE, BUNDLE_ID);
alter table IL_BUNDLE_ATTACHEMENT_T
  add constraint FK_IL_BUNDLE_ATTACHMENT_BUNDLE_SETUP foreign key (ORG_ID, APP_ID, BUNDLE_ID)
  references BUNDLE_SETUP_T (ORG_ID, APP_ID, BUNDLE_ID);

prompt
prompt Creating table IL_CBC_REASON_SETUP_T
prompt ====================================
prompt
create table IL_CBC_REASON_SETUP_T
(
  org_id           NUMBER not null,
  reason_id        NUMBER not null,
  reason_desc      VARCHAR2(100) not null,
  closure_tag      VARCHAR2(1),
  active           VARCHAR2(1) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_CBC_REASON_SETUP_T
  add constraint PK_IL_CBC_REASON primary key (ORG_ID, REASON_ID);
alter table IL_CBC_REASON_SETUP_T
  add foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table IL_CBC_STATUS_SETUP_T
prompt ====================================
prompt
create table IL_CBC_STATUS_SETUP_T
(
  org_id           NUMBER not null,
  status_id        NUMBER not null,
  status_desc      VARCHAR2(100) not null,
  closure_tag      VARCHAR2(1),
  active           VARCHAR2(1) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_CBC_STATUS_SETUP_T
  add constraint PK_IL_CBC_STATUS primary key (ORG_ID, STATUS_ID);
alter table IL_CBC_STATUS_SETUP_T
  add foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table IL_COMM_CYCLE_HEADER_T
prompt =====================================
prompt
create table IL_COMM_CYCLE_HEADER_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  batch_no         NUMBER not null,
  batch_name       VARCHAR2(100),
  batch_date       DATE,
  from_date        DATE,
  to_date          DATE,
  lock_flag        VARCHAR2(20),
  comments         VARCHAR2(100),
  description      VARCHAR2(500),
  posted_user_name VARCHAR2(50),
  post_flag        VARCHAR2(20),
  post_date        DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  allocation_type  NUMBER,
  channel_id       NUMBER,
  model_id         NUMBER,
  partner_id       NUMBER,
  multi_models     VARCHAR2(100)
)
;
alter table IL_COMM_CYCLE_HEADER_T
  add constraint PK_COMM_CYCLE_HEAD primary key (ORG_ID, BRANCH_ID, BATCH_NO);

prompt
prompt Creating table IL_COMM_CYCLE_DETAIL
prompt ===================================
prompt
create table IL_COMM_CYCLE_DETAIL
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  main_product_code   NUMBER not null,
  sub_product_code    NUMBER not null,
  takaful_type        VARCHAR2(1) not null,
  document_type       VARCHAR2(1) not null,
  document_no         VARCHAR2(10) not null,
  record_type         VARCHAR2(1) not null,
  document_year       VARCHAR2(10) not null,
  issue_count         NUMBER not null,
  endorsement_no      NUMBER not null,
  application_id      NUMBER not null,
  serial_no           NUMBER not null,
  channel_id          NUMBER not null,
  channel_model_id    NUMBER not null,
  agent_code          NUMBER not null,
  commission_cycle_id NUMBER not null,
  doc_reference_no    VARCHAR2(50),
  cycle_level         VARCHAR2(20),
  designation         VARCHAR2(20),
  cycle_type          VARCHAR2(20),
  allocation_category VARCHAR2(50),
  commission_rate     NUMBER(9,6),
  commission_flat_amt NUMBER(15,2),
  commission_amount   NUMBER(15,2),
  agency_type         VARCHAR2(20),
  gross_contribution  NUMBER,
  comm_settled        NUMBER,
  comm_payable        NUMBER,
  comm_pending        NUMBER,
  installment_no      NUMBER,
  payment_amount      NUMBER,
  received_amount     NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  batch_no            NUMBER not null,
  s_no                NUMBER,
  allocation_id       NUMBER,
  cycle_nature        VARCHAR2(10),
  allocation_type     NUMBER
)
;
alter table IL_COMM_CYCLE_DETAIL
  add constraint PK_IL_DOC_COMMISION_CYCLE_DET primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO, BATCH_NO, CHANNEL_ID, CHANNEL_MODEL_ID, AGENT_CODE, COMMISSION_CYCLE_ID);
alter table IL_COMM_CYCLE_DETAIL
  add constraint FK_COMM_CYCLE_HEAD_DETAIL foreign key (ORG_ID, BRANCH_ID, BATCH_NO)
  references IL_COMM_CYCLE_HEADER_T (ORG_ID, BRANCH_ID, BATCH_NO);

prompt
prompt Creating table IL_COMM_CYC_PR_HOLD_HISTORY_T
prompt ============================================
prompt
create table IL_COMM_CYC_PR_HOLD_HISTORY_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  s_no                NUMBER not null,
  serial_no           NUMBER not null,
  sub_product_code    NUMBER not null,
  takaful_type        VARCHAR2(1) not null,
  document_type       VARCHAR2(1) not null,
  document_no         VARCHAR2(10) not null,
  record_type         VARCHAR2(1) not null,
  document_year       VARCHAR2(10) not null,
  issue_count         NUMBER not null,
  endorsement_no      NUMBER not null,
  application_id      NUMBER not null,
  installment_no      NUMBER,
  action_type         VARCHAR2(20),
  hold_action         VARCHAR2(1),
  action_by           VARCHAR2(50),
  action_date         DATE,
  action_comments     VARCHAR2(500),
  commission_cycle_id NUMBER not null
)
;
alter table IL_COMM_CYC_PR_HOLD_HISTORY_T
  add constraint PK_IL_COMM_CYCLE_HOLD_HISTORY primary key (ORG_ID, BRANCH_ID, S_NO, SERIAL_NO, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, COMMISSION_CYCLE_ID);

prompt
prompt Creating table IL_COMM_UNIT_PROCESS_HD_T
prompt ========================================
prompt
create table IL_COMM_UNIT_PROCESS_HD_T
(
  org_id               NUMBER not null,
  branch_id            NUMBER not null,
  process_id           NUMBER not null,
  process_date         DATE,
  doc_reference_no     VARCHAR2(50),
  lock_date            DATE,
  lock_by              VARCHAR2(20),
  lock_tag             VARCHAR2(1),
  posting_tag          VARCHAR2(1),
  created_by           VARCHAR2(50),
  created_date         DATE,
  modified_by          VARCHAR2(50),
  modified_date        DATE,
  post_date            DATE,
  posted_user_name     VARCHAR2(50),
  doc_reference_no_key VARCHAR2(500)
)
;
alter table IL_COMM_UNIT_PROCESS_HD_T
  add constraint PK_IL_COMM_UNIT_PROCESS_HD_T primary key (ORG_ID, BRANCH_ID, PROCESS_ID);

prompt
prompt Creating table IL_COMM_UNIT_PROCESS_DTL_T
prompt =========================================
prompt
create table IL_COMM_UNIT_PROCESS_DTL_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  process_id        NUMBER not null,
  serial_no         NUMBER not null,
  advice_no         VARCHAR2(10),
  advice_date       DATE,
  advice_type       VARCHAR2(10),
  advice_amount     NUMBER,
  detail_sr_no      NUMBER,
  sl_sr_no          NUMBER,
  fiscal_year       NUMBER,
  commission_amount NUMBER,
  created_by        VARCHAR2(50),
  created_date      DATE,
  modified_by       VARCHAR2(50),
  modified_date     DATE
)
;
alter table IL_COMM_UNIT_PROCESS_DTL_T
  add constraint PK_IL_COMM_UNIT_PROCESS_DTL_T primary key (ORG_ID, BRANCH_ID, PROCESS_ID, SERIAL_NO);
alter table IL_COMM_UNIT_PROCESS_DTL_T
  add constraint FK_IL_COMM_UNIT_PROCESS_DTL_T foreign key (ORG_ID, BRANCH_ID, PROCESS_ID)
  references IL_COMM_UNIT_PROCESS_HD_T (ORG_ID, BRANCH_ID, PROCESS_ID);

prompt
prompt Creating table IL_CONSENT_DTL_T
prompt ===============================
prompt
create table IL_CONSENT_DTL_T
(
  org_id            NUMBER not null,
  header_rec_id     NUMBER not null,
  detail_id         NUMBER not null,
  checklist_id      NUMBER,
  checklist_status  NUMBER,
  client_ip_address VARCHAR2(100),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_CONSENT_DTL_T
  add constraint PK_IL_CONSENT_DTL_T primary key (ORG_ID, HEADER_REC_ID, DETAIL_ID);

prompt
prompt Creating table IL_CONSENT_HEADER_T
prompt ==================================
prompt
create table IL_CONSENT_HEADER_T
(
  org_id                 NUMBER,
  header_rec_id          NUMBER,
  proposal_master_ref_no VARCHAR2(100),
  url_auth_code          VARCHAR2(500),
  url_status             VARCHAR2(1),
  url_timer              NUMBER,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;

prompt
prompt Creating table IL_CONSENT_OTP
prompt =============================
prompt
create table IL_CONSENT_OTP
(
  org_id         NUMBER not null,
  rec_id         NUMBER not null,
  auth_code      VARCHAR2(150) not null,
  email_otp_code VARCHAR2(4),
  sim_otp_code   VARCHAR2(4),
  status         VARCHAR2(1)
)
;
alter table IL_CONSENT_OTP
  add constraint PK_IL_CONSENT_OTP primary key (ORG_ID, REC_ID, AUTH_CODE);

prompt
prompt Creating table IL_CUSTOM_FORMS_FIELDS_T
prompt =======================================
prompt
create table IL_CUSTOM_FORMS_FIELDS_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  form_id           NUMBER not null,
  field_id          NUMBER not null,
  field_desc        VARCHAR2(500),
  field_type        VARCHAR2(2),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  display_order     NUMBER,
  valueset_id       NUMBER,
  field_db_name     VARCHAR2(500)
)
;
alter table IL_CUSTOM_FORMS_FIELDS_T
  add constraint PK_IL_CUSTOM_FORMS_FIELDS_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, FORM_ID, FIELD_ID);

prompt
prompt Creating table IL_CUSTOM_FORMS_SETUP_T
prompt ======================================
prompt
create table IL_CUSTOM_FORMS_SETUP_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  form_id           NUMBER not null,
  form_desc         VARCHAR2(50),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_CUSTOM_FORMS_SETUP_T
  add constraint PK_IL_CUSTOM_FORMS_SETUP_T primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, FORM_ID);

prompt
prompt Creating table IL_DAY_END_BULK_LOG_T
prompt ====================================
prompt
create table IL_DAY_END_BULK_LOG_T
(
  org_id            NUMBER not null,
  proposal_no       VARCHAR2(50) not null,
  policy_no         VARCHAR2(50) not null,
  comm_date         DATE,
  issue_date        DATE,
  process_tag       VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  doc_reference_key VARCHAR2(50)
)
;
alter table IL_DAY_END_BULK_LOG_T
  add constraint PK_DAY_END_BULK primary key (ORG_ID, PROPOSAL_NO, POLICY_NO);

prompt
prompt Creating table IL_DAY_END_PROCESSHD_T
prompt =====================================
prompt
create table IL_DAY_END_PROCESSHD_T
(
  org_id             NUMBER not null,
  serial_no          NUMBER not null,
  process_status     VARCHAR2(15),
  process_message    VARCHAR2(500),
  quarterly_stmt_tag VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  dayend_date        DATE,
  process_date       DATE,
  start_date         DATE,
  end_date           DATE
)
;
alter table IL_DAY_END_PROCESSHD_T
  add constraint PK_DAY_END_HD primary key (ORG_ID, SERIAL_NO);

prompt
prompt Creating table IL_DAY_END_PROCESSDTL_T
prompt ======================================
prompt
create table IL_DAY_END_PROCESSDTL_T
(
  org_id            NUMBER not null,
  serial_no         NUMBER not null,
  detail_sr_no      NUMBER not null,
  doc_reference_key VARCHAR2(100) not null,
  process_type      NUMBER,
  process_status    VARCHAR2(15),
  process_message   VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE
)
;
alter table IL_DAY_END_PROCESSDTL_T
  add constraint PK_DAY_END_DTL primary key (ORG_ID, SERIAL_NO, DETAIL_SR_NO, DOC_REFERENCE_KEY);
alter table IL_DAY_END_PROCESSDTL_T
  add constraint FK_DAY_END_DTL foreign key (ORG_ID, SERIAL_NO)
  references IL_DAY_END_PROCESSHD_T (ORG_ID, SERIAL_NO);

prompt
prompt Creating table IL_DAY_END_PROCESS_T
prompt ===================================
prompt
create table IL_DAY_END_PROCESS_T
(
  org_id            NUMBER not null,
  doc_reference_key VARCHAR2(100) not null,
  serial_no         NUMBER not null,
  process_date      DATE,
  process_status    VARCHAR2(15),
  process_message   VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  dayend_date       DATE
)
;
alter table IL_DAY_END_PROCESS_T
  add constraint PK_DAY_END primary key (ORG_ID, DOC_REFERENCE_KEY, SERIAL_NO);

prompt
prompt Creating table IL_DECISION_REASON_SETUP_T
prompt =========================================
prompt
create table IL_DECISION_REASON_SETUP_T
(
  org_id           NUMBER not null,
  reason_code      NUMBER not null,
  reason_desc      VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_DECISION_REASON_SETUP_T
  add constraint PK_IL_DEC_REASON primary key (ORG_ID, REASON_CODE);
alter table IL_DECISION_REASON_SETUP_T
  add constraint FK_IL_DEC_REASON_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table IL_DECISION_SETUP_T
prompt ==================================
prompt
create table IL_DECISION_SETUP_T
(
  org_id                NUMBER not null,
  decision_code         NUMBER not null,
  decision_desc         VARCHAR2(50),
  active                VARCHAR2(1),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  benefit_status        VARCHAR2(1),
  manual_code           NUMBER,
  status_code           NUMBER,
  allow_deci_uw_pending VARCHAR2(1)
)
;
alter table IL_DECISION_SETUP_T
  add constraint PK_IL_DEC_SETUP primary key (ORG_ID, DECISION_CODE);
alter table IL_DECISION_SETUP_T
  add constraint FK_DOC_STATUS_DECISION foreign key (ORG_ID, STATUS_CODE)
  references IL_DOC_STATUS_SETUP_T (ORG_ID, STATUS_CODE);
alter table IL_DECISION_SETUP_T
  add constraint FK_IL_DEC_SETUP_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table IL_DECISION_REQ_MAP_T
prompt ====================================
prompt
create table IL_DECISION_REQ_MAP_T
(
  org_id           NUMBER not null,
  decision_code    NUMBER not null,
  req_type_code    NUMBER not null,
  req_code         NUMBER not null,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_DECISION_REQ_MAP_T
  add constraint PK_IL_DEC_REQ_MAP primary key (ORG_ID, DECISION_CODE, REQ_TYPE_CODE, REQ_CODE);
alter table IL_DECISION_REQ_MAP_T
  add constraint FK_IL_DEC_REQ_MAP_DEC foreign key (ORG_ID, DECISION_CODE)
  references IL_DECISION_SETUP_T (ORG_ID, DECISION_CODE);
alter table IL_DECISION_REQ_MAP_T
  add constraint FK_IL_DEC_REQ_MAP_REQ foreign key (ORG_ID, REQ_CODE)
  references GLAS_UNDWT_REQ_SETUP_T (ORG_ID, REQ_CODE);

prompt
prompt Creating table IL_DEDUCTION_TYPE_SETUP_T
prompt ========================================
prompt
create table IL_DEDUCTION_TYPE_SETUP_T
(
  org_id              NUMBER not null,
  deduction_type_code NUMBER not null,
  description         VARCHAR2(500),
  active              VARCHAR2(1),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE
)
;
alter table IL_DEDUCTION_TYPE_SETUP_T
  add constraint PK_DEDUCTION_TYPE_SETUP primary key (ORG_ID, DEDUCTION_TYPE_CODE);

prompt
prompt Creating table IL_DOC_ADDRESS_T
prompt ===============================
prompt
create table IL_DOC_ADDRESS_T
(
  org_id               NUMBER not null,
  branch_id            NUMBER not null,
  main_product_code    NUMBER not null,
  sub_product_code     NUMBER not null,
  takaful_type         VARCHAR2(1) not null,
  document_type        VARCHAR2(1) not null,
  document_no          VARCHAR2(10) not null,
  record_type          VARCHAR2(1) not null,
  document_year        VARCHAR2(10) not null,
  issue_count          NUMBER not null,
  endorsement_no       NUMBER not null,
  application_id       NUMBER not null,
  client_code          NUMBER not null,
  sr_no                NUMBER not null,
  address_type         VARCHAR2(300) not null,
  address_description  VARCHAR2(1000),
  country_code         VARCHAR2(100),
  state_code           VARCHAR2(100),
  city_code            VARCHAR2(100),
  house_no             VARCHAR2(100),
  unit_no              VARCHAR2(100),
  building             VARCHAR2(100),
  zip_code             VARCHAR2(100),
  correspondence_tag   VARCHAR2(10),
  current_address      VARCHAR2(10),
  entry_type           VARCHAR2(30),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  permanent_address    VARCHAR2(200),
  current_address_desc VARCHAR2(1000),
  current_country      VARCHAR2(200),
  current_city         VARCHAR2(200),
  current_state        VARCHAR2(200)
)
;
alter table IL_DOC_ADDRESS_T
  add constraint PK_IL_DOC_CL_ADDR primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, ADDRESS_TYPE, SR_NO);

prompt
prompt Creating table IL_DOC_HEADER_T
prompt ==============================
prompt
create table IL_DOC_HEADER_T
(
  org_id                       NUMBER not null,
  branch_id                    NUMBER not null,
  main_product_code            NUMBER not null,
  sub_product_code             NUMBER not null,
  takaful_type                 VARCHAR2(1) not null,
  document_type                VARCHAR2(1) not null,
  document_no                  VARCHAR2(10) not null,
  record_type                  VARCHAR2(1) not null,
  document_year                VARCHAR2(10) not null,
  issue_count                  NUMBER not null,
  endorsement_no               NUMBER not null,
  application_id               NUMBER not null,
  doc_reference_no             VARCHAR2(50),
  client_code                  VARCHAR2(20),
  folio_code                   VARCHAR2(20),
  sum_insured                  NUMBER(15,2),
  gross_premium                NUMBER(15,2),
  net_premium                  NUMBER(15,2),
  doc_charges                  NUMBER(15,2),
  remarks                      VARCHAR2(500),
  premium_basis                VARCHAR2(3),
  producer_code                NUMBER,
  currency_code                VARCHAR2(10),
  payment_mode                 VARCHAR2(10),
  payment_term                 NUMBER,
  policy_term                  NUMBER,
  member_id_label              VARCHAR2(10),
  wakala_fee                   NUMBER(15,2),
  loading_ovrd_rate            NUMBER(9,6),
  loading_rate                 NUMBER(9,6),
  policy_fee                   NUMBER(15,2),
  overriding_rate              NUMBER(9,6),
  exchange_rate                NUMBER(9,6),
  next_due_date                DATE,
  quotation_date               DATE,
  sub_document_no              NUMBER,
  standard_treaty              VARCHAR2(10),
  post_date                    DATE,
  posting_tag                  VARCHAR2(1),
  post_user                    VARCHAR2(50),
  name1                        VARCHAR2(50),
  name2                        VARCHAR2(50),
  dob1                         DATE,
  dob2                         DATE,
  age1                         NUMBER(3),
  age2                         NUMBER(3),
  gender1                      VARCHAR2(1),
  gender2                      VARCHAR2(1),
  sum_covered                  NUMBER(15,2),
  sum_covered_index            NUMBER(15,2),
  contribution_index           NUMBER(15,2),
  basic_contribution           NUMBER(15,2),
  gross_contribution           NUMBER(15,2),
  net_contribution             NUMBER(15,2),
  cover_multiple               NUMBER(3),
  cont_margin                  NUMBER(9,6),
  last_age_index               NUMBER(3),
  expected_claim               NUMBER(15,2),
  investment_income            NUMBER(15,2),
  second_life                  VARCHAR2(1),
  bid_offer                    NUMBER(15,2),
  issue_date                   DATE,
  comm_date                    DATE,
  expiry_date                  DATE,
  converted_doc_no             VARCHAR2(50),
  proposal_date                DATE,
  occupational_class           VARCHAR2(5),
  creation_date                DATE,
  created_by                   VARCHAR2(50),
  last_update_date             DATE,
  last_updated_by              VARCHAR2(50),
  post_by                      VARCHAR2(50),
  convert_tag                  VARCHAR2(1),
  revised_tag                  VARCHAR2(1),
  base_doc_no                  VARCHAR2(50),
  cnic_issue_date              DATE,
  cnic_expiry_date             DATE,
  cnic_no                      VARCHAR2(50),
  waqala_fee                   NUMBER,
  quotation_ref_no             VARCHAR2(50),
  alteration_type              VARCHAR2(50),
  master_ref_no                VARCHAR2(50),
  cost_center_code             VARCHAR2(50),
  alteration_date              DATE,
  advance_amount               NUMBER,
  payer_same_tag               VARCHAR2(1),
  submit_tag                   VARCHAR2(1),
  undwt_status                 NUMBER,
  sum_covered_modal            NUMBER,
  basic_contribution_modal     NUMBER,
  undwt_decision               NUMBER,
  converted_policy_no          VARCHAR2(50),
  convert_proposal             VARCHAR2(50),
  risk_profile                 VARCHAR2(50),
  contribution_type            VARCHAR2(50),
  risk_profile_comments        VARCHAR2(500),
  illustration_ref_no          VARCHAR2(50),
  customer_profile_comments    VARCHAR2(2000),
  channel_id                   NUMBER,
  model_id                     NUMBER,
  agent_id                     NUMBER,
  partner_id                   NUMBER,
  topup_amount                 NUMBER,
  rejected_tag                 VARCHAR2(50),
  total_contribution_modal     NUMBER,
  cancel_tag                   VARCHAR2(1),
  cancel_by                    VARCHAR2(50),
  cancel_date                  DATE,
  cancellation_remarks         VARCHAR2(500),
  cancellation_type            NUMBER,
  doc_dispatch_date            DATE,
  doc_receive_date             DATE,
  chargeable_from              NUMBER,
  chargeable_amount            NUMBER,
  middle_name1                 VARCHAR2(50),
  last_name1                   VARCHAR2(50),
  alteration_issue_date        DATE,
  policy_posted                VARCHAR2(1),
  non_financial_activity       VARCHAR2(20),
  non_financial_sub_activity   VARCHAR2(20),
  undwt_decision_reason        VARCHAR2(500),
  undwt_notes                  VARCHAR2(500),
  underwriting_il_create       VARCHAR2(20),
  proposal_approved_by         VARCHAR2(20),
  undwt_other_exculusions      VARCHAR2(500),
  undwt_decision_system        NUMBER,
  proposal_approved_date       DATE,
  partner_branch_id            NUMBER,
  base_doc_no_key              VARCHAR2(150),
  illustration_ref_no_key      VARCHAR2(150),
  converted_doc_no_key         VARCHAR2(150),
  agent_branch_id              VARCHAR2(20),
  lock_tag                     VARCHAR2(20),
  doc_reference_key            VARCHAR2(100),
  initial_topup                NUMBER,
  receive_ack_date             DATE,
  cancellation_date            DATE,
  medical_amount               NUMBER,
  day_end_process_tag          VARCHAR2(1),
  day_end_process_date         DATE,
  submit_date                  DATE,
  submit_by                    VARCHAR2(50),
  cover_multiple_old           NUMBER(3),
  age1_old                     NUMBER(3),
  gender1_old                  VARCHAR2(1),
  payment_mode_old             VARCHAR2(10),
  payment_term_old             NUMBER,
  policy_term_old              NUMBER,
  sum_covered_old              NUMBER(15,2),
  dob1_old                     DATE,
  sum_covered_modal_old        NUMBER,
  basic_contribution_modal_old NUMBER,
  basic_contribution_old       NUMBER,
  fund_switch_charges          NUMBER,
  fund_change_tag              VARCHAR2(1),
  consignment_no               VARCHAR2(150),
  name1_old                    VARCHAR2(50),
  middle_name1_old             VARCHAR2(50),
  last_name1_old               VARCHAR2(50),
  cnic_no_old                  VARCHAR2(30),
  return_tag                   VARCHAR2(1),
  lock_by                      VARCHAR2(50),
  lock_date                    DATE,
  il_revise_tag                VARCHAR2(1),
  auto_renewal_topup_tag       CHAR(1),
  auto_renewal_topup_tag_old   CHAR(1),
  policy_hold_flag             VARCHAR2(1),
  sum_covered_index_old        NUMBER(15,2),
  contribution_index_old       NUMBER(15,2),
  first_submission_date        DATE,
  face_value_increase_tag      VARCHAR2(1),
  approved_date                DATE,
  bank_representative_name     VARCHAR2(150),
  bank_representative_code     VARCHAR2(100),
  occupational_industry        VARCHAR2(250),
  occupation                   VARCHAR2(250),
  reject_comments              VARCHAR2(500),
  total_score                  NUMBER,
  cbc_required_tag             VARCHAR2(1),
  pr_date                      DATE,
  pr_amount                    NUMBER,
  anf_option                   VARCHAR2(25),
  niv_adjustment_amount        NUMBER,
  niv_adjustment_amount_adhoc  NUMBER,
  assignee_tag                 VARCHAR2(1),
  bank_ref_no                  VARCHAR2(50),
  valid_tag                    VARCHAR2(1),
  proposal_entry_date          DATE,
  index_change_type            VARCHAR2(1),
  cnic_no2                     VARCHAR2(50),
  cnic_issue_date2             DATE,
  cnic_expiry_date2            DATE,
  relation_code2               NUMBER,
  supr_approval_reqd           VARCHAR2(1),
  supr_forward_tag             VARCHAR2(1),
  supr_action_taken            VARCHAR2(1),
  forwarded_by                 VARCHAR2(50),
  smoker_tag                   VARCHAR2(1),
  sum_covered_orig             NUMBER,
  clone_tag                    VARCHAR2(1),
  clone_ref_no                 VARCHAR2(150),
  consent_status               VARCHAR2(1),
  consent_date                 DATE,
  decline_tag                  VARCHAR2(1),
  description_of_changes       VARCHAR2(300)
)
;
alter table IL_DOC_HEADER_T
  add constraint PK_IL_DOC_HEADER primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);
alter table IL_DOC_HEADER_T
  add constraint FK_CHANNEL_MODEL_PRP_HD foreign key (ORG_ID, CHANNEL_ID, MODEL_ID)
  references AM_CHANNEL_MODEL_T (ORG_ID, CHANNEL_ID, MODEL_ID);
alter table IL_DOC_HEADER_T
  add constraint FK_CHANNEL_PRP_HD foreign key (ORG_ID, CHANNEL_ID)
  references AM_DISTRIBUTION_CHANNEL_T (ORG_ID, CHANNEL_ID);
alter table IL_DOC_HEADER_T
  add constraint FK_DOC_AGENT foreign key (ORG_ID, AGENT_ID)
  references AM_AGENT_T (ORG_ID, AGENT_ID);
alter table IL_DOC_HEADER_T
  add constraint FK_DOC_AGENT_PARTNER foreign key (ORG_ID, AGENT_ID, PARTNER_ID)
  references AM_AGENT_PARTNER_T (ORG_ID, AGENT_ID, PARTNER_ID);
alter table IL_DOC_HEADER_T
  add constraint FK_IL_DOC_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);
alter table IL_DOC_HEADER_T
  add constraint FK_UNDWT_DECISION foreign key (ORG_ID, UNDWT_DECISION)
  references IL_DECISION_SETUP_T (ORG_ID, DECISION_CODE);
alter table IL_DOC_HEADER_T
  add constraint FK_UNDWT_STATUS foreign key (ORG_ID, UNDWT_STATUS)
  references IL_DOC_STATUS_SETUP_T (ORG_ID, STATUS_CODE);

prompt
prompt Creating table IL_DOC_AGENT_T
prompt =============================
prompt
create table IL_DOC_AGENT_T
(
  org_id                      NUMBER not null,
  branch_id                   NUMBER not null,
  main_product_code           NUMBER not null,
  sub_product_code            NUMBER not null,
  takaful_type                VARCHAR2(1) not null,
  document_type               VARCHAR2(1) not null,
  document_no                 VARCHAR2(10) not null,
  record_type                 VARCHAR2(1) not null,
  document_year               VARCHAR2(10) not null,
  issue_count                 NUMBER not null,
  endorsement_no              NUMBER not null,
  application_id              NUMBER not null,
  serial_no                   NUMBER not null,
  channel_id                  NUMBER,
  model_id                    NUMBER,
  partner_id                  NUMBER,
  designation_id              NUMBER,
  designation_level           NUMBER,
  commission_rate             NUMBER,
  created_by                  VARCHAR2(50),
  creation_date               DATE,
  last_updated_by             VARCHAR2(50),
  last_update_date            DATE,
  agency_type                 VARCHAR2(10),
  agent_name                  VARCHAR2(500),
  agent_id                    NUMBER,
  commission_rate_topup       NUMBER,
  policy_term                 NUMBER,
  commission_amount           NUMBER,
  commission_amount_topup     NUMBER,
  commission_nature           VARCHAR2(1),
  jump_tag                    VARCHAR2(1),
  commission_type             VARCHAR2(1),
  deferred_tag                VARCHAR2(1),
  start_date                  DATE,
  end_date                    DATE,
  jump_tag_adhoc              VARCHAR2(1),
  jump_tag_bus_credit_adhoc   VARCHAR2(1),
  jump_tag_bus_credit_regular VARCHAR2(1),
  bus_credit_adhoc            NUMBER,
  bus_credit_regular          NUMBER
)
;
alter table IL_DOC_AGENT_T
  add constraint PK_IL_DOC_AGENT primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);
alter table IL_DOC_AGENT_T
  add constraint FK_IL_DOC_AGENT_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_ALLOCATIONHD_T
prompt ====================================
prompt
create table IL_DOC_ALLOCATIONHD_T
(
  org_id                    NUMBER not null,
  branch_id                 NUMBER not null,
  main_product_code         NUMBER not null,
  sub_product_code          NUMBER not null,
  takaful_type              VARCHAR2(1) not null,
  document_type             VARCHAR2(1) not null,
  document_no               VARCHAR2(10) not null,
  record_type               VARCHAR2(1) not null,
  document_year             VARCHAR2(10) not null,
  issue_count               NUMBER not null,
  endorsement_no            NUMBER not null,
  application_id            NUMBER not null,
  allocation_id             NUMBER not null,
  transaction_date          DATE,
  allocation_type           NUMBER not null,
  amount                    NUMBER,
  due_date                  DATE,
  policy_year               NUMBER,
  member_age                NUMBER,
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_updated_by           VARCHAR2(50),
  last_update_date          DATE,
  previous_year_cash_value  NUMBER,
  ptf_rate                  NUMBER,
  admin_charges             NUMBER,
  month_no                  NUMBER,
  admin_indexation          NUMBER,
  imc_rate                  NUMBER,
  imc_rate_topup            NUMBER,
  installment_no            NUMBER,
  tabarru_discount_rate     NUMBER,
  tabarru_discount_net_rate NUMBER,
  year_wise_lapse_rate      NUMBER
)
;
alter table IL_DOC_ALLOCATIONHD_T
  add constraint PK_ILL_DOC_ALL_HD primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID);
alter table IL_DOC_ALLOCATIONHD_T
  add constraint FK_ALLOC_TYPE foreign key (ORG_ID, ALLOCATION_TYPE)
  references IL_ALLOC_TYPE_SETUP_T (ORG_ID, TYPE_CODE);
alter table IL_DOC_ALLOCATIONHD_T
  add constraint FK_ILL_DOC_ALL_HD_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_ALLOCATIONDTL_T
prompt =====================================
prompt
create table IL_DOC_ALLOCATIONDTL_T
(
  org_id                 NUMBER not null,
  branch_id              NUMBER not null,
  main_product_code      NUMBER not null,
  sub_product_code       NUMBER not null,
  takaful_type           VARCHAR2(1) not null,
  document_type          VARCHAR2(1) not null,
  document_no            VARCHAR2(10) not null,
  record_type            VARCHAR2(1) not null,
  document_year          VARCHAR2(10) not null,
  issue_count            NUMBER not null,
  endorsement_no         NUMBER not null,
  application_id         NUMBER not null,
  allocation_id          NUMBER not null,
  sub_serial_no          NUMBER not null,
  transaction_type       NUMBER,
  sum_covered            NUMBER,
  contribution_paid_amt  NUMBER,
  pia_rate               NUMBER,
  pia_amount             NUMBER,
  narration              VARCHAR2(500),
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE,
  month_no               NUMBER,
  reversal_tag           VARCHAR2(1),
  transaction_date       DATE,
  allocation_type        NUMBER not null,
  sub_serial_no_rev      NUMBER,
  reverse_date           DATE,
  reverse_by             VARCHAR2(50),
  prev_cash_value        NUMBER,
  current_cash_value     NUMBER,
  pia_net_rate           NUMBER,
  pia_net_amount         NUMBER,
  benefit_code           NUMBER,
  loading_code           NUMBER,
  member_age             NUMBER,
  allocation_posting_tag VARCHAR2(1),
  allocation_post_by     VARCHAR2(50),
  allocation_post_date   DATE,
  comm_posting_tag       VARCHAR2(1),
  comm_post_by           VARCHAR2(50),
  comm_post_date         DATE,
  comm_unit_process_id   NUMBER,
  comm_processed_tag     VARCHAR2(1),
  source_ref_no          VARCHAR2(50),
  requested_date         DATE,
  due_date               DATE,
  loading_type           VARCHAR2(10)
)
;
alter table IL_DOC_ALLOCATIONDTL_T
  add constraint PK_ILL_DOC_ALL_DTL primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO);
alter table IL_DOC_ALLOCATIONDTL_T
  add constraint FK_ILL_DOC_ALL_DTL_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID)
  references IL_DOC_ALLOCATIONHD_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID);
alter table IL_DOC_ALLOCATIONDTL_T
  add constraint FK_TRANS_TYPE foreign key (ORG_ID, TRANSACTION_TYPE)
  references IL_ALLOC_TRANS_TYPE_T (ORG_ID, TYPE_CODE);

prompt
prompt Creating table IL_DOC_ALLOC_DTL_BREAKUP_T
prompt =========================================
prompt
create table IL_DOC_ALLOC_DTL_BREAKUP_T
(
  org_id                 NUMBER not null,
  branch_id              NUMBER not null,
  main_product_code      NUMBER not null,
  sub_product_code       NUMBER not null,
  takaful_type           VARCHAR2(1) not null,
  document_type          VARCHAR2(1) not null,
  document_no            VARCHAR2(10) not null,
  record_type            VARCHAR2(1) not null,
  document_year          VARCHAR2(10) not null,
  issue_count            NUMBER not null,
  endorsement_no         NUMBER not null,
  application_id         NUMBER not null,
  allocation_id          NUMBER not null,
  sub_serial_no          NUMBER not null,
  fund_code              NUMBER not null,
  unit_process_date      DATE,
  fund_share             NUMBER,
  total_net_amount       NUMBER,
  unit_price             NUMBER,
  no_of_units            NUMBER,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE,
  deduction_type         VARCHAR2(10),
  allocation_type        NUMBER not null,
  transaction_type       NUMBER,
  month_no               NUMBER,
  transaction_date       DATE,
  reversal_tag           VARCHAR2(1),
  sub_serial_no_rev      NUMBER,
  reverse_date           DATE,
  reverse_by             VARCHAR2(50),
  post_date              DATE,
  posting_tag            VARCHAR2(1),
  post_user              VARCHAR2(50),
  bid_offer_rate         NUMBER,
  bid_offer_amount       NUMBER,
  ri_net_amount          NUMBER,
  allocation_posting_tag VARCHAR2(1),
  unit_posting_tag       VARCHAR2(1),
  allocation_post_by     VARCHAR2(50),
  allocation_post_date   DATE,
  unit_post_by           VARCHAR2(50),
  unit_post_date         DATE,
  requested_date         DATE,
  due_date               DATE,
  pia_amount             NUMBER
)
;
alter table IL_DOC_ALLOC_DTL_BREAKUP_T
  add constraint PK_ILL_DOC_ALL_DTL_FBR primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO, FUND_CODE);
alter table IL_DOC_ALLOC_DTL_BREAKUP_T
  add constraint FK_ILL_DOC_ALL_DTL_FBR_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO)
  references IL_DOC_ALLOCATIONDTL_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO);

prompt
prompt Creating table IL_DOC_ALLOC_DTL_CHARGES_NEW_T
prompt =============================================
prompt
create table IL_DOC_ALLOC_DTL_CHARGES_NEW_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  allocation_id     NUMBER not null,
  sub_serial_no     NUMBER not null,
  serial_no         NUMBER not null,
  charge_code       NUMBER,
  charge_rate       NUMBER,
  charge_amount     NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  allocation_type   NUMBER not null,
  sub_serial_no_rev NUMBER,
  transaction_type  NUMBER,
  month_no          NUMBER,
  reversal_tag      VARCHAR2(1),
  reverse_date      DATE,
  reverse_by        VARCHAR2(50),
  transaction_date  DATE,
  charge_nature     VARCHAR2(1),
  rider_code        NUMBER,
  charge_net_rate   NUMBER,
  charge_net_amount NUMBER
)
;
alter table IL_DOC_ALLOC_DTL_CHARGES_NEW_T
  add constraint PK_ILL_DOC_ALL_DTL_CH_N primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO, SERIAL_NO);

prompt
prompt Creating table IL_DOC_ALLOC_DTL_CHARGES_T
prompt =========================================
prompt
create table IL_DOC_ALLOC_DTL_CHARGES_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER,
  application_id    NUMBER not null,
  allocation_id     NUMBER not null,
  sub_serial_no     NUMBER not null,
  charge_type       NUMBER not null,
  charge_rate       NUMBER,
  charge_amount     NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  allocation_type   NUMBER not null,
  sub_serial_no_rev NUMBER,
  transaction_type  NUMBER,
  month_no          NUMBER,
  reversal_tag      VARCHAR2(1),
  reverse_date      DATE,
  reverse_by        VARCHAR2(50),
  transaction_date  DATE,
  charge_nature     VARCHAR2(1),
  charge_code       NUMBER,
  rider_code        NUMBER
)
;
alter table IL_DOC_ALLOC_DTL_CHARGES_T
  add constraint PK_ILL_DOC_ALL_DTL_CH primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO, CHARGE_TYPE);

prompt
prompt Creating table IL_DOC_ALLOC_DTL_COMM_T
prompt ======================================
prompt
create table IL_DOC_ALLOC_DTL_COMM_T
(
  org_id                      NUMBER not null,
  branch_id                   NUMBER not null,
  main_product_code           NUMBER not null,
  sub_product_code            NUMBER not null,
  takaful_type                VARCHAR2(1) not null,
  document_type               VARCHAR2(1) not null,
  document_no                 VARCHAR2(10) not null,
  record_type                 VARCHAR2(1) not null,
  document_year               VARCHAR2(10) not null,
  issue_count                 NUMBER not null,
  endorsement_no              NUMBER not null,
  application_id              NUMBER not null,
  allocation_id               NUMBER not null,
  sub_serial_no               NUMBER not null,
  serial_no                   NUMBER not null,
  channel_id                  NUMBER,
  model_id                    NUMBER,
  partner_id                  NUMBER,
  designation_id              NUMBER,
  designation_level           NUMBER,
  commission_rate             NUMBER,
  transaction_date            DATE,
  created_by                  VARCHAR2(50),
  creation_date               DATE,
  last_updated_by             VARCHAR2(50),
  last_update_date            DATE,
  month_no                    NUMBER,
  allocation_type             NUMBER not null,
  transaction_type            NUMBER,
  commission_amount           NUMBER,
  deduction_type              VARCHAR2(10),
  agent_id                    NUMBER,
  commission_rate_topup       NUMBER,
  agency_type                 VARCHAR2(1),
  reversal_tag                VARCHAR2(1),
  sub_serial_no_rev           NUMBER,
  reverse_date                DATE,
  reverse_by                  VARCHAR2(50),
  policy_term                 NUMBER,
  pk_serial_no                NUMBER not null,
  charge_serial_no            NUMBER,
  rider_code                  NUMBER,
  commission_nature           VARCHAR2(1),
  jump_tag                    VARCHAR2(1),
  deferred_tag                VARCHAR2(1),
  commission_type             VARCHAR2(1),
  gross_contribution          NUMBER,
  end_date                    DATE,
  installment_no              NUMBER,
  jump_tag_adhoc              VARCHAR2(1),
  jump_tag_bus_credit_adhoc   VARCHAR2(1),
  jump_tag_bus_credit_regular VARCHAR2(1),
  bus_credit_adhoc            NUMBER,
  bus_credit_regular          NUMBER
)
;
alter table IL_DOC_ALLOC_DTL_COMM_T
  add constraint PK_ILL_DOC_ALL_DTL_COMM primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO, SERIAL_NO, PK_SERIAL_NO);

prompt
prompt Creating table IL_DOC_ALLOC_DTL_REINS_T
prompt =======================================
prompt
create table IL_DOC_ALLOC_DTL_REINS_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  main_product_code        NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  allocation_id            NUMBER not null,
  sub_serial_no            NUMBER not null,
  allocation_type          NUMBER not null,
  ri_sr_no                 NUMBER not null,
  charge_serial_no         NUMBER,
  company_retention        NUMBER,
  retention_sa             NUMBER,
  retention_contribution   NUMBER,
  quota_share              NUMBER,
  quota_share_sa           NUMBER,
  quota_share_contribution NUMBER,
  quota_share_limit        NUMBER,
  treaty_limit             NUMBER,
  transaction_date         DATE,
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  transaction_type         NUMBER,
  month_no                 NUMBER,
  reversal_tag             VARCHAR2(1),
  sub_serial_no_rev        NUMBER,
  reverse_date             DATE,
  reverse_by               VARCHAR2(50),
  sum_covered              NUMBER,
  net_contribution         NUMBER,
  deduction_type           VARCHAR2(1),
  rider_code               NUMBER,
  net_rate                 NUMBER
)
;
alter table IL_DOC_ALLOC_DTL_REINS_T
  add constraint PK_ILL_DOC_ALL_DTL_REINS primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO, RI_SR_NO);
alter table IL_DOC_ALLOC_DTL_REINS_T
  add constraint FK_ILL_DOC_ALL_DTL_REINS_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO)
  references IL_DOC_ALLOCATIONDTL_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO);

prompt
prompt Creating table IL_DOC_ALT_COMMENTS_T
prompt ====================================
prompt
create table IL_DOC_ALT_COMMENTS_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  comments          VARCHAR2(2000),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_ALT_COMMENTS_T
  add constraint PK_DOC_ALT_COMMENTS primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, SERIAL_NO);

prompt
prompt Creating table IL_DOC_ASSIGNEE_T
prompt ================================
prompt
create table IL_DOC_ASSIGNEE_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  assignee_code     VARCHAR2(150),
  assignment_date   DATE,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  remarks           VARCHAR2(700),
  terms_conditions  VARCHAR2(700),
  attachment_path   VARCHAR2(250)
)
;
alter table IL_DOC_ASSIGNEE_T
  add constraint PK_DOC_ASGNE_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);
alter table IL_DOC_ASSIGNEE_T
  add constraint FK_DOC_ASGNE_T foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DUPLICATE_POLICY_HD_T
prompt =======================================
prompt
create table IL_DUPLICATE_POLICY_HD_T
(
  org_id                      NUMBER not null,
  branch_id                   NUMBER not null,
  process_id                  NUMBER not null,
  sett_no                     NUMBER,
  sett_date                   DATE,
  sett_type                   NUMBER,
  sett_amount                 NUMBER,
  sett_remarks                VARCHAR2(500),
  sett_payable_to             NUMBER,
  pmd_ref_no                  VARCHAR2(50),
  payer_code                  NUMBER,
  created_by                  VARCHAR2(50),
  creation_date               DATE,
  last_updated_by             VARCHAR2(50),
  last_update_date            DATE,
  lock_flag                   VARCHAR2(1),
  post_flag                   VARCHAR2(1),
  posted_date                 DATE,
  posted_by                   VARCHAR2(50),
  cancel_flag                 VARCHAR2(1),
  cancel_date                 DATE,
  cancel_by                   VARCHAR2(50),
  request_date                DATE,
  sett_reason                 VARCHAR2(10),
  percentage                  NUMBER,
  amount_type                 VARCHAR2(30),
  pmd_ref_no_key              VARCHAR2(150),
  surrender_processing_fee    NUMBER,
  bank_name                   VARCHAR2(50),
  bank_branch                 VARCHAR2(50),
  bank_account                VARCHAR2(50),
  zakat_excemption            VARCHAR2(1),
  settlement_category_code    VARCHAR2(1),
  attachment_zakat_excemption VARCHAR2(4000),
  settlement_attachment       VARCHAR2(4000),
  payment_type                VARCHAR2(1),
  zakat_charges               NUMBER,
  net_settlement_amount       NUMBER,
  surrender_charges           NUMBER,
  settled_amount              NUMBER,
  advice_ref                  VARCHAR2(100),
  adjusted_amount             NUMBER,
  process_tag                 VARCHAR2(1),
  process_date                DATE,
  zakat_refund_tag            VARCHAR2(1),
  zakat_refund_id             NUMBER,
  regular_amount              NUMBER,
  topup_amount                NUMBER,
  lock_flag_zakat             VARCHAR2(1),
  post_flag_zakat             VARCHAR2(1),
  advice_key                  VARCHAR2(50),
  charges_applicable_tag      VARCHAR2(1),
  charges_to                  VARCHAR2(1)
)
;
alter table IL_DUPLICATE_POLICY_HD_T
  add constraint PK_IL_DUPLICATE_POLICY_HD_T primary key (ORG_ID, BRANCH_ID, PROCESS_ID);

prompt
prompt Creating table IL_DOC_ATTACH_DUP_PMD_T
prompt ======================================
prompt
create table IL_DOC_ATTACH_DUP_PMD_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  process_id       NUMBER not null,
  attachment_code  NUMBER not null,
  document_for     VARCHAR2(50),
  file_path        VARCHAR2(500),
  attachment_type  VARCHAR2(200),
  attachment_desc  VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_DOC_ATTACH_DUP_PMD_T
  add constraint PK_IL_DOC_ATTACH_DUP_PMD_T primary key (ORG_ID, BRANCH_ID, PROCESS_ID, ATTACHMENT_CODE);
alter table IL_DOC_ATTACH_DUP_PMD_T
  add constraint FK_DOC_ATTACH_DUP_PMD foreign key (ORG_ID, BRANCH_ID, PROCESS_ID)
  references IL_DUPLICATE_POLICY_HD_T (ORG_ID, BRANCH_ID, PROCESS_ID);

prompt
prompt Creating table IL_DOC_ATTACH_POLICY_HOLD_T
prompt ==========================================
prompt
create table IL_DOC_ATTACH_POLICY_HOLD_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  process_id       NUMBER not null,
  application_id   NUMBER,
  attachment_code  NUMBER not null,
  file_path        VARCHAR2(500),
  attachment_desc  VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  document_ref_key VARCHAR2(100)
)
;
alter table IL_DOC_ATTACH_POLICY_HOLD_T
  add constraint PK_IL_DOC_ATTACH_POLICY_HOLD_T primary key (ORG_ID, BRANCH_ID, PROCESS_ID, ATTACHMENT_CODE);

prompt
prompt Creating table IL_DOC_ATTACH_SETT_T
prompt ===================================
prompt
create table IL_DOC_ATTACH_SETT_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  sett_no          NUMBER not null,
  application_id   NUMBER not null,
  attachment_code  NUMBER not null,
  file_path        VARCHAR2(500),
  attachment_type  VARCHAR2(200),
  attachment_desc  VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  document_for     VARCHAR2(50)
)
;
alter table IL_DOC_ATTACH_SETT_T
  add constraint PK_IL_DOC_ATTACH_SETT_T primary key (ORG_ID, BRANCH_ID, APPLICATION_ID, SETT_NO, ATTACHMENT_CODE);

prompt
prompt Creating table IL_DOC_ATTACH_T
prompt ==============================
prompt
create table IL_DOC_ATTACH_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  attachment_code   NUMBER not null,
  file_path         VARCHAR2(500),
  attachment_type   VARCHAR2(200),
  attachment_desc   VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  document_for      VARCHAR2(50),
  uw_tag            VARCHAR2(1),
  settlement_tag    VARCHAR2(1),
  sett_code         NUMBER,
  topup_tag         VARCHAR2(1),
  customer_access   VARCHAR2(1)
)
;
alter table IL_DOC_ATTACH_T
  add constraint PK_IL_DOC_ATTACH_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ATTACHMENT_CODE);

prompt
prompt Creating table IL_TOPUP_REQUEST_T
prompt =================================
prompt
create table IL_TOPUP_REQUEST_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  top_up_id        NUMBER not null,
  topup_doc_no     VARCHAR2(100),
  topup_amount     NUMBER(15,2),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  topup_desc       VARCHAR2(1000),
  submit_flag      VARCHAR2(20),
  transfer_date    DATE,
  request_date     DATE,
  topup_doc_no_key VARCHAR2(150),
  undwt_id         NUMBER,
  posting_tag      VARCHAR2(1),
  rejected_tag     VARCHAR2(1),
  post_by          VARCHAR2(50),
  post_date        DATE,
  rejected_by      VARCHAR2(50),
  rejected_date    DATE,
  return_tag       VARCHAR2(1),
  return_by        VARCHAR2(50),
  return_date      DATE,
  requirement_tag  VARCHAR2(1),
  approve_tag      VARCHAR2(1),
  approve_by       VARCHAR2(50),
  approve_date     DATE,
  process_by       VARCHAR2(50),
  process_tag      VARCHAR2(1),
  process_date     DATE
)
;
alter table IL_TOPUP_REQUEST_T
  add constraint PK_IL_TOPUP_REQUEST_T primary key (ORG_ID, BRANCH_ID, TOP_UP_ID);

prompt
prompt Creating table IL_DOC_ATTACH_TOP_UP_T
prompt =====================================
prompt
create table IL_DOC_ATTACH_TOP_UP_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  top_up_id        NUMBER not null,
  application_id   NUMBER,
  attachment_code  NUMBER not null,
  document_for     VARCHAR2(50),
  file_path        VARCHAR2(500),
  attachment_type  VARCHAR2(200),
  attachment_desc  VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_DOC_ATTACH_TOP_UP_T
  add constraint PK_IL_DOC_ATTACH_TOP_UP_T primary key (ORG_ID, BRANCH_ID, TOP_UP_ID, ATTACHMENT_CODE);
alter table IL_DOC_ATTACH_TOP_UP_T
  add constraint FK_DOC_ATTACH_TOP_UP foreign key (ORG_ID, BRANCH_ID, TOP_UP_ID)
  references IL_TOPUP_REQUEST_T (ORG_ID, BRANCH_ID, TOP_UP_ID);

prompt
prompt Creating table IL_DOC_ATTACH_UNDWT_T
prompt ====================================
prompt
create table IL_DOC_ATTACH_UNDWT_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  attachment_code   NUMBER not null,
  file_path         VARCHAR2(500),
  attachment_type   VARCHAR2(200),
  attachment_desc   VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  document_for      VARCHAR2(50),
  process_id        NUMBER
)
;
alter table IL_DOC_ATTACH_UNDWT_T
  add constraint PK_IL_DOC_ATTACH_UND_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ATTACHMENT_CODE);

prompt
prompt Creating table IL_MONEY_TRANSFER_HEADER_T
prompt =========================================
prompt
create table IL_MONEY_TRANSFER_HEADER_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  money_transfer_id        NUMBER not null,
  transfer_to_doc_no       VARCHAR2(100),
  transfer_to_reg_amount   NUMBER(15,2),
  transfer_to_adhoc_amount NUMBER(15,2),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  money_transfer_desc      VARCHAR2(250),
  lock_flag                VARCHAR2(20),
  post_flag                VARCHAR2(20),
  transfer_date            DATE,
  post_date                DATE,
  transfer_reason          VARCHAR2(20),
  request_date             DATE,
  posted_user_name         VARCHAR2(100),
  locked_by_user_name      VARCHAR2(100),
  transfer_to_doc_no_key   VARCHAR2(150)
)
;
alter table IL_MONEY_TRANSFER_HEADER_T
  add constraint PK_IL_MONEY_TRSFR primary key (ORG_ID, BRANCH_ID, MONEY_TRANSFER_ID);

prompt
prompt Creating table IL_DOC_ATT_MONEY_TR_T
prompt ====================================
prompt
create table IL_DOC_ATT_MONEY_TR_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  money_transfer_id NUMBER not null,
  application_id    NUMBER,
  attachment_code   NUMBER not null,
  document_for      VARCHAR2(50),
  file_path         VARCHAR2(500),
  attachment_type   VARCHAR2(200),
  attachment_desc   VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_ATT_MONEY_TR_T
  add constraint PK_IL_DOC_ATT_MONEY_TR_T primary key (ORG_ID, BRANCH_ID, MONEY_TRANSFER_ID, ATTACHMENT_CODE);
alter table IL_DOC_ATT_MONEY_TR_T
  add constraint FK_DOC_ATT_MONEY_TR_T foreign key (ORG_ID, BRANCH_ID, MONEY_TRANSFER_ID)
  references IL_MONEY_TRANSFER_HEADER_T (ORG_ID, BRANCH_ID, MONEY_TRANSFER_ID);

prompt
prompt Creating table IL_DOC_BENEFICIARY_T
prompt ===================================
prompt
create table IL_DOC_BENEFICIARY_T
(
  org_id                    NUMBER not null,
  branch_id                 NUMBER not null,
  main_product_code         NUMBER not null,
  sub_product_code          NUMBER not null,
  takaful_type              VARCHAR2(1) not null,
  document_type             VARCHAR2(1) not null,
  document_no               VARCHAR2(10) not null,
  record_type               VARCHAR2(1) not null,
  document_year             VARCHAR2(10) not null,
  issue_count               NUMBER not null,
  endorsement_no            NUMBER not null,
  application_id            NUMBER not null,
  beneficiary_code          NUMBER not null,
  relation_code             NUMBER(9,6),
  percentage                NUMBER(15,2),
  amount                    NUMBER(15,2),
  cnic_no                   VARCHAR2(50),
  dob                       DATE,
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_update_date          DATE,
  last_updated_by           VARCHAR2(50),
  cnic_issue_date           DATE,
  cnic_expiry_date          DATE,
  beneficiary_name          VARCHAR2(50),
  is_guardian               VARCHAR2(1),
  guardian_name             VARCHAR2(50),
  guardian_relation_code    VARCHAR2(10),
  guardian_dob              DATE,
  guardian_cnic_no          VARCHAR2(50),
  guardian_cnic_issue_date  DATE,
  guardian_cnic_expiry_date DATE,
  mobile_no                 VARCHAR2(30),
  beneficiary_email         VARCHAR2(50),
  age                       NUMBER(3),
  guardian_mobile_no        NUMBER
)
;
alter table IL_DOC_BENEFICIARY_T
  add constraint PK_IL_DOC_BENEF primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFICIARY_CODE);
alter table IL_DOC_BENEFICIARY_T
  add constraint FK_IL_DOC_BENEF_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_BLK_PSTNG_DTL_LOG_T
prompt =========================================
prompt
create table IL_DOC_BLK_PSTNG_DTL_LOG_T
(
  org_id              NUMBER not null,
  process_id          NUMBER not null,
  serial_no           NUMBER not null,
  doc_reference_no    VARCHAR2(50),
  product_description VARCHAR2(250),
  client_description  VARCHAR2(200),
  doc_reference_key   VARCHAR2(100),
  message             VARCHAR2(250),
  status_tag          VARCHAR2(1),
  post_tag            VARCHAR2(1),
  post_date           DATE,
  post_by             VARCHAR2(50),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE
)
;
alter table IL_DOC_BLK_PSTNG_DTL_LOG_T
  add constraint PK_DOC_BLK_PSTNG_DTL_LOG_T primary key (ORG_ID, PROCESS_ID, SERIAL_NO);

prompt
prompt Creating table IL_DOC_BULK_POSTING_HD_T
prompt =======================================
prompt
create table IL_DOC_BULK_POSTING_HD_T
(
  org_id           NUMBER not null,
  process_id       NUMBER not null,
  from_date        DATE,
  to_date          DATE,
  process_date     DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  process_tag      VARCHAR2(1),
  process_by       VARCHAR2(50)
)
;
alter table IL_DOC_BULK_POSTING_HD_T
  add constraint PK_DOC_BLK_POSTNG primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table IL_DOC_CASE_MANAGEMENT_T
prompt =======================================
prompt
create table IL_DOC_CASE_MANAGEMENT_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  log_date          DATE,
  attachment_path   VARCHAR2(200),
  comments          VARCHAR2(1500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_CASE_MANAGEMENT_T
  add constraint PK_IL_DOC_CASE_M primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);
alter table IL_DOC_CASE_MANAGEMENT_T
  add constraint FK_DOC_IL_CASE_M foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_CHARGES_T
prompt ===============================
prompt
create table IL_DOC_CHARGES_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  charge_code       NUMBER not null,
  charge_rate       NUMBER(9,6),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_update_date  DATE,
  last_updated_by   VARCHAR2(50),
  charges_amount    NUMBER,
  auto_insert       VARCHAR2(1)
)
;
alter table IL_DOC_CHARGES_T
  add constraint PK_IL_DOC_CHARGES primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CHARGE_CODE);
alter table IL_DOC_CHARGES_T
  add constraint FK_IL_DOC_CHARGES_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);
alter table IL_DOC_CHARGES_T
  add constraint FK_IL_DOC_CHARGE_CHARGE foreign key (ORG_ID, CHARGE_CODE)
  references TK_CHARGES_SETUP_T (ORG_ID, CHARGE_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_T
prompt ==============================
prompt
create table IL_DOC_CLIENT_T
(
  org_id                     NUMBER not null,
  branch_id                  NUMBER not null,
  main_product_code          NUMBER not null,
  sub_product_code           NUMBER not null,
  takaful_type               VARCHAR2(1) not null,
  document_type              VARCHAR2(1) not null,
  document_no                VARCHAR2(10) not null,
  record_type                VARCHAR2(1) not null,
  document_year              VARCHAR2(10) not null,
  issue_count                NUMBER not null,
  endorsement_no             NUMBER not null,
  application_id             NUMBER not null,
  client_code                NUMBER not null,
  client_desc                VARCHAR2(500),
  client_short_desc          VARCHAR2(50),
  address                    VARCHAR2(200),
  email                      VARCHAR2(500),
  phone                      VARCHAR2(15),
  active                     VARCHAR2(1),
  client_type                VARCHAR2(10),
  age                        NUMBER(3),
  dob                        DATE,
  height                     NUMBER,
  weight                     NUMBER,
  bmi                        NUMBER,
  occupation                 NUMBER,
  vat_reg_no                 VARCHAR2(50),
  vat_reg_date               DATE,
  nature_of_business         VARCHAR2(10),
  name_in_arabic             NVARCHAR2(500),
  contact_person_name        VARCHAR2(500),
  contact_person_no          VARCHAR2(50),
  contact_person_designation VARCHAR2(200),
  group_code                 VARCHAR2(10),
  height_scale               VARCHAR2(10),
  weight_scale               VARCHAR2(10),
  title                      VARCHAR2(10),
  client_nature              VARCHAR2(10),
  band_code                  NUMBER,
  client_category            VARCHAR2(10),
  cnic_no                    VARCHAR2(50),
  cnic_issue_date            DATE,
  cnic_expiry_date           DATE,
  father_name                VARCHAR2(50),
  maiden_name                VARCHAR2(50),
  marital_status             VARCHAR2(10),
  place_of_birth             VARCHAR2(50),
  passport_no                VARCHAR2(50),
  no_of_dependents           NUMBER,
  nationality_code           VARCHAR2(10),
  religion_code              NUMBER,
  working_tag                VARCHAR2(1),
  first_name                 VARCHAR2(50),
  middle_name                VARCHAR2(50),
  last_name                  VARCHAR2(50),
  annual_salary              NUMBER,
  total_sar                  NUMBER,
  referral_source            NUMBER,
  referral_other             VARCHAR2(10),
  gender                     VARCHAR2(10),
  nrp_tag                    VARCHAR2(1),
  communication_channel      VARCHAR2(10),
  father_cnic_no             VARCHAR2(50),
  father_cnic_issue_date     DATE,
  father_cnic_expiry_date    DATE,
  spouse_cnic_no             VARCHAR2(50),
  spouse_cnic_issue_date     DATE,
  spouse_cnic_expiry_date    DATE,
  category_code              VARCHAR2(10),
  source_of_income           NUMBER,
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_update_date           DATE,
  last_updated_by            VARCHAR2(50),
  credit_limit               NUMBER,
  credit_limit_days          NUMBER,
  credit_limit_tag           VARCHAR2(1),
  entry_type                 VARCHAR2(10),
  residencey                 VARCHAR2(20),
  us_citizen                 VARCHAR2(1),
  pep                        VARCHAR2(1),
  pep_family                 VARCHAR2(1),
  risky_borders              VARCHAR2(1),
  risky_borders_address      VARCHAR2(1000)
)
;
alter table IL_DOC_CLIENT_T
  add constraint PK_IL_DOC_CLIENT primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);
alter table IL_DOC_CLIENT_T
  add constraint FK_IL_DOC_CLIENT_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_CLIENT_ANNX_01_T
prompt ======================================
prompt
create table IL_DOC_CLIENT_ANNX_01_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  main_product_code   NUMBER not null,
  sub_product_code    NUMBER not null,
  takaful_type        VARCHAR2(1) not null,
  document_type       VARCHAR2(1) not null,
  document_no         VARCHAR2(10) not null,
  record_type         VARCHAR2(1) not null,
  document_year       VARCHAR2(10) not null,
  issue_count         NUMBER not null,
  endorsement_no      NUMBER not null,
  application_id      NUMBER not null,
  client_code         NUMBER not null,
  annexure_sno        NUMBER not null,
  fullname            VARCHAR2(50),
  birthdate           DATE,
  occupation          VARCHAR2(50),
  currentresidence    VARCHAR2(50),
  currentcountry      VARCHAR2(50),
  residencytype       VARCHAR2(20),
  stay                VARCHAR2(20),
  visithome           VARCHAR2(50),
  returndate          DATE,
  homeplan            VARCHAR2(50),
  estatedetails       VARCHAR2(50),
  bankaccounts        VARCHAR2(200),
  settle_plan         VARCHAR2(20),
  country_nationality VARCHAR2(20),
  stayduration        VARCHAR2(50),
  family_lived        VARCHAR2(50),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  died_tag            VARCHAR2(1)
)
;
alter table IL_DOC_CLIENT_ANNX_01_T
  add constraint PK_IL_DOC_CL_ANNX01 primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, ANNEXURE_SNO);
alter table IL_DOC_CLIENT_ANNX_01_T
  add constraint FK_IL_DOC_CL_ANNX01_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_ANNX_03_T
prompt ======================================
prompt
create table IL_DOC_CLIENT_ANNX_03_T
(
  org_id                NUMBER not null,
  branch_id             NUMBER not null,
  main_product_code     NUMBER not null,
  sub_product_code      NUMBER not null,
  takaful_type          VARCHAR2(1) not null,
  document_type         VARCHAR2(1) not null,
  document_no           VARCHAR2(10) not null,
  record_type           VARCHAR2(1) not null,
  document_year         VARCHAR2(10) not null,
  issue_count           NUMBER not null,
  endorsement_no        NUMBER not null,
  application_id        NUMBER not null,
  client_code           NUMBER not null,
  annexure_sno          NUMBER not null,
  member_bearer         VARCHAR2(50),
  political_leader      VARCHAR2(50),
  political_involvement VARCHAR2(50),
  political_discussion  VARCHAR2(50),
  contribution          VARCHAR2(50),
  petition              VARCHAR2(50),
  travel_frequency      VARCHAR2(50),
  court_of_law          VARCHAR2(50),
  arm_guards            VARCHAR2(50),
  attempt               VARCHAR2(50),
  detail                VARCHAR2(1000),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  orgname               VARCHAR2(200),
  titlepositionheld     VARCHAR2(50),
  termofoffice          VARCHAR2(10)
)
;
alter table IL_DOC_CLIENT_ANNX_03_T
  add constraint PK_IL_DOC_CL_ANNX03 primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, ANNEXURE_SNO);
alter table IL_DOC_CLIENT_ANNX_03_T
  add constraint FK_IL_DOC_CL_ANNX03_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_ANNX_04_T
prompt ======================================
prompt
create table IL_DOC_CLIENT_ANNX_04_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  main_product_code        NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  client_code              NUMBER not null,
  annexure_sno             NUMBER not null,
  application_no           VARCHAR2(50),
  name_of_applicant        VARCHAR2(50),
  name_of_insured          VARCHAR2(50),
  name_of_beneficiary      VARCHAR2(50),
  mailing_address          VARCHAR2(200),
  us_citizen_applicant     VARCHAR2(1),
  us_citizen_insured       VARCHAR2(1),
  us_citizen_beneficiary   VARCHAR2(1),
  us_born_applicant        VARCHAR2(1),
  us_born_insured          VARCHAR2(1),
  us_born_beneficiary      VARCHAR2(1),
  us_phone_applicant       VARCHAR2(1),
  us_phone_insured         VARCHAR2(1),
  us_phone_beneficiary     VARCHAR2(1),
  us_sign_auth_applicant   VARCHAR2(1),
  us_sign_auth_insured     VARCHAR2(1),
  us_sign_auth_beneficiary VARCHAR2(1),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  died_tag                 VARCHAR2(1),
  us_citizen               VARCHAR2(1),
  us_born                  VARCHAR2(1),
  us_phone                 VARCHAR2(1),
  us_sign_auth             VARCHAR2(1),
  name                     VARCHAR2(50)
)
;
alter table IL_DOC_CLIENT_ANNX_04_T
  add constraint PK_IL_DOC_CL_ANNX04 primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, ANNEXURE_SNO);
alter table IL_DOC_CLIENT_ANNX_04_T
  add constraint FK_IL_DOC_CL_ANNX04_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_ATTACH_T
prompt =====================================
prompt
create table IL_DOC_CLIENT_ATTACH_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  attachment_code   NUMBER not null,
  attachment_desc   VARCHAR2(50),
  file_path         VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  attachment_type   VARCHAR2(50)
)
;
alter table IL_DOC_CLIENT_ATTACH_T
  add constraint PK_IL_DOC_CL_ATTACH primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, ATTACHMENT_CODE);
alter table IL_DOC_CLIENT_ATTACH_T
  add constraint FK_IL_DOC_CL_ATTACH_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_BANK_T
prompt ===================================
prompt
create table IL_DOC_CLIENT_BANK_T
(
  org_id                  NUMBER not null,
  branch_id               NUMBER not null,
  main_product_code       NUMBER not null,
  sub_product_code        NUMBER not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  client_code             NUMBER not null,
  serial_no               NUMBER not null,
  bank_code               NUMBER not null,
  branch_code             NUMBER,
  account_no              VARCHAR2(50),
  active                  VARCHAR2(1),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  iban                    VARCHAR2(50),
  entry_type              VARCHAR2(10),
  account_title           VARCHAR2(500),
  average_account_balance NUMBER,
  branch_name             VARCHAR2(100)
)
;
alter table IL_DOC_CLIENT_BANK_T
  add constraint PK_IL_DOC_CL_BNK primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, BANK_CODE, SERIAL_NO);
alter table IL_DOC_CLIENT_BANK_T
  add constraint FK_IL_DOC_CL_BANK_BANK foreign key (ORG_ID, BANK_CODE)
  references GL_BANK_SETUP_T (ORG_ID, BANK_CODE);
alter table IL_DOC_CLIENT_BANK_T
  add constraint FK_IL_DOC_CL_BNK_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_BNF_ATT_T
prompt ======================================
prompt
create table IL_DOC_CLIENT_BNF_ATT_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  beneficiary_code  NUMBER not null,
  attachment_code   NUMBER not null,
  attachment_desc   VARCHAR2(50),
  file_path         VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_CLIENT_BNF_ATT_T
  add constraint PK_IL_DOC_BNF_ATT primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFICIARY_CODE, ATTACHMENT_CODE);
alter table IL_DOC_CLIENT_BNF_ATT_T
  add constraint FK_IL_DOC_BNF_ATT_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFICIARY_CODE)
  references IL_DOC_BENEFICIARY_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFICIARY_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_EDU_HISTORY_T
prompt ==========================================
prompt
create table IL_DOC_CLIENT_EDU_HISTORY_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  education_id      NUMBER not null,
  education_type    NUMBER,
  degree_name       VARCHAR2(200),
  institution_code  VARCHAR2(200),
  passing_year      NUMBER,
  passing_grade     VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  passing_gpa       VARCHAR2(50)
)
;
alter table IL_DOC_CLIENT_EDU_HISTORY_T
  add constraint PK_IL_DOC_CL_EDU primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, EDUCATION_ID);
alter table IL_DOC_CLIENT_EDU_HISTORY_T
  add constraint FK_IL_DOC_CL_EDU_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_EMP_HIST_T
prompt =======================================
prompt
create table IL_DOC_CLIENT_EMP_HIST_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  employment_id     NUMBER not null,
  employer_name     VARCHAR2(200),
  designation       VARCHAR2(50),
  from_date         DATE,
  to_date           DATE,
  is_current        VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  employment_status VARCHAR2(1)
)
;
alter table IL_DOC_CLIENT_EMP_HIST_T
  add constraint PK_IL_DOC_CL_EMP primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, EMPLOYMENT_ID);
alter table IL_DOC_CLIENT_EMP_HIST_T
  add constraint FK_IL_DOC_CL_EMP_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_FAM_HIST_T
prompt =======================================
prompt
create table IL_DOC_CLIENT_FAM_HIST_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  person_id         NUMBER not null,
  person_name       VARCHAR2(50),
  relation_code     NUMBER,
  age               NUMBER,
  cause_of_death    NUMBER,
  age_at_death      NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  died_tag          VARCHAR2(1),
  state_of_health   VARCHAR2(1),
  occupation        VARCHAR2(50),
  individual_income NUMBER,
  dependent_tag     VARCHAR2(1),
  independent_tag   VARCHAR2(1)
)
;
alter table IL_DOC_CLIENT_FAM_HIST_T
  add constraint PK_IL_DOC_CL_FAM primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, PERSON_ID);
alter table IL_DOC_CLIENT_FAM_HIST_T
  add constraint FK_IL_DOC_CL_FAM_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_IMMN_HIST_T
prompt ========================================
prompt
create table IL_DOC_CLIENT_IMMN_HIST_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  immunization_id   NUMBER not null,
  immunization_type NUMBER,
  immunization_date DATE,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  immunization_dose VARCHAR2(10)
)
;
alter table IL_DOC_CLIENT_IMMN_HIST_T
  add constraint PK_IL_DOC_CL_IMMN primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, IMMUNIZATION_ID);
alter table IL_DOC_CLIENT_IMMN_HIST_T
  add constraint FK_IL_DOC_CL_IMMN_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_NOMINEE_T
prompt ===============================
prompt
create table IL_DOC_NOMINEE_T
(
  org_id                    NUMBER not null,
  branch_id                 NUMBER not null,
  main_product_code         NUMBER not null,
  sub_product_code          NUMBER not null,
  takaful_type              VARCHAR2(1) not null,
  document_type             VARCHAR2(1) not null,
  document_no               VARCHAR2(10) not null,
  record_type               VARCHAR2(1) not null,
  document_year             VARCHAR2(10) not null,
  issue_count               NUMBER not null,
  endorsement_no            NUMBER not null,
  application_id            NUMBER not null,
  nominee_code              NUMBER not null,
  relation_code             NUMBER(9,6),
  percentage                NUMBER(15,2),
  amount                    NUMBER(15,2),
  cnic_no                   VARCHAR2(50),
  dob                       DATE,
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_update_date          DATE,
  last_updated_by           VARCHAR2(50),
  cnic_issue_date           DATE,
  cnic_expiry_date          DATE,
  nominee_name              VARCHAR2(50),
  is_guardian               VARCHAR2(1),
  guardian_name             VARCHAR2(50),
  guardian_relation_code    VARCHAR2(1),
  guardian_dob              DATE,
  guardian_cnic_no          VARCHAR2(50),
  guardian_cnic_issue_date  DATE,
  guardian_cnic_expiry_date DATE
)
;
alter table IL_DOC_NOMINEE_T
  add constraint PK_IL_DOC_NOM primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NOMINEE_CODE);
alter table IL_DOC_NOMINEE_T
  add constraint FK_IL_DOC_NOM_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_CLIENT_NOM_ATT_T
prompt ======================================
prompt
create table IL_DOC_CLIENT_NOM_ATT_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  nominee_code      NUMBER not null,
  attachment_code   NUMBER not null,
  attachment_desc   VARCHAR2(50),
  file_path         VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_CLIENT_NOM_ATT_T
  add constraint PK_IL_DOC_NOM_ATT primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NOMINEE_CODE, ATTACHMENT_CODE);
alter table IL_DOC_CLIENT_NOM_ATT_T
  add constraint FK_IL_DOC_NOM_ATT_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NOMINEE_CODE)
  references IL_DOC_NOMINEE_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NOMINEE_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_PERS_INFO_T
prompt ========================================
prompt
create table IL_DOC_CLIENT_PERS_INFO_T
(
  org_id                  NUMBER not null,
  branch_id               NUMBER not null,
  main_product_code       NUMBER not null,
  sub_product_code        NUMBER not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  client_code             NUMBER not null,
  info_id                 NUMBER not null,
  first_name              VARCHAR2(50),
  middle_name             VARCHAR2(50),
  last_name               VARCHAR2(50),
  title                   VARCHAR2(10),
  gender                  VARCHAR2(10),
  father_name             VARCHAR2(50),
  maiden_name             VARCHAR2(50),
  place_of_birth          VARCHAR2(50),
  marital_status          VARCHAR2(10),
  no_of_dependents        NUMBER,
  nationality_code        VARCHAR2(10),
  religion_code           VARCHAR2(10),
  height                  NUMBER,
  weight                  NUMBER,
  bmi                     NUMBER,
  height_scale            VARCHAR2(10),
  weight_scale            VARCHAR2(10),
  cnic_no                 VARCHAR2(30),
  father_cnic_no          VARCHAR2(30),
  spouse_cnic_no          VARCHAR2(30),
  cnic_issue_date         DATE,
  father_cnic_issue_date  DATE,
  spouse_cnic_issue_date  DATE,
  cnic_expiry_date        DATE,
  father_cnic_expiry_date DATE,
  spouse_cnic_expiry_date DATE,
  dob                     DATE,
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  nrp_tag                 VARCHAR2(10),
  passport_no             VARCHAR2(50),
  age                     NUMBER,
  waste                   NUMBER,
  waste_scale             VARCHAR2(10),
  mother_name             VARCHAR2(50),
  spouse_name             VARCHAR2(50),
  passing_gpa             VARCHAR2(50),
  country_of_birth        VARCHAR2(20),
  smoking_status          VARCHAR2(1),
  smoking_count           NUMBER,
  husband_name            VARCHAR2(50),
  e_height_inches         NUMBER,
  height_inches           NUMBER,
  relation_code           VARCHAR2(10),
  first_name_old          VARCHAR2(50),
  middle_name_old         VARCHAR2(50),
  last_name_old           VARCHAR2(50),
  height_old              NUMBER,
  height_inches_old       NUMBER,
  height_scale_old        VARCHAR2(10),
  weight_old              NUMBER,
  weight_scale_old        VARCHAR2(10),
  bmi_old                 NUMBER,
  cnic_no_old             VARCHAR2(30),
  dob_old                 DATE,
  age_old                 NUMBER,
  gender_old              VARCHAR2(1),
  title_old               VARCHAR2(10),
  passport_issue_date     DATE,
  passport_expiry_date    DATE,
  header_id               NUMBER
)
;
alter table IL_DOC_CLIENT_PERS_INFO_T
  add constraint PK_IL_DOC_CL_PERS primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, INFO_ID);
alter table IL_DOC_CLIENT_PERS_INFO_T
  add constraint FK_IL_DOC_CL_PERS_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_PROF_INFO_T
prompt ========================================
prompt
create table IL_DOC_CLIENT_PROF_INFO_T
(
  org_id                        NUMBER not null,
  branch_id                     NUMBER not null,
  main_product_code             NUMBER not null,
  sub_product_code              NUMBER not null,
  takaful_type                  VARCHAR2(1) not null,
  document_type                 VARCHAR2(1) not null,
  document_no                   VARCHAR2(10) not null,
  record_type                   VARCHAR2(1) not null,
  document_year                 VARCHAR2(10) not null,
  issue_count                   NUMBER not null,
  endorsement_no                NUMBER not null,
  application_id                NUMBER not null,
  client_code                   NUMBER not null,
  info_id                       NUMBER not null,
  occupation                    VARCHAR2(50),
  band_code                     VARCHAR2(50),
  annual_salary                 NUMBER,
  working_tag                   VARCHAR2(10),
  client_category               VARCHAR2(10),
  source_of_income              VARCHAR2(50),
  created_by                    VARCHAR2(50),
  creation_date                 DATE,
  last_updated_by               VARCHAR2(50),
  last_update_date              DATE,
  length_of_service             NUMBER,
  retirement_age                NUMBER,
  covered_in_pension_scheme     VARCHAR2(1),
  nature_of_business            VARCHAR2(50),
  decision_tag                  VARCHAR2(10),
  designation                   VARCHAR2(100),
  employer_detail               VARCHAR2(1000),
  comments                      VARCHAR2(2000),
  type_of_employment            VARCHAR2(50),
  average_monthly_income        NUMBER,
  employment_class              VARCHAR2(1),
  daily_duties                  VARCHAR2(500),
  occupation_old                VARCHAR2(50),
  length_of_service_old         NUMBER,
  retirement_age_old            NUMBER,
  covered_in_pension_scheme_old VARCHAR2(1),
  employment_class_old          VARCHAR2(1),
  type_of_employment_old        VARCHAR2(50),
  nature_of_business_old        VARCHAR2(50),
  annual_salary_old             NUMBER,
  average_monthly_income_old    NUMBER,
  working_tag_old               VARCHAR2(10),
  client_category_old           VARCHAR2(10),
  employer_detail_old           VARCHAR2(1000),
  comments_old                  VARCHAR2(2000),
  daily_duties_old              VARCHAR2(500)
)
;
alter table IL_DOC_CLIENT_PROF_INFO_T
  add constraint PK_IL_DOC_CL_PROF primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, INFO_ID);
alter table IL_DOC_CLIENT_PROF_INFO_T
  add constraint FK_IL_DOC_CL_PROF_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLIENT_SOCIAL_ACC_T
prompt =========================================
prompt
create table IL_DOC_CLIENT_SOCIAL_ACC_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  account_id        NUMBER not null,
  account_type      NUMBER,
  account_desc      VARCHAR2(200),
  account_url       VARCHAR2(200),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  active            VARCHAR2(1),
  effective_date    DATE
)
;
alter table IL_DOC_CLIENT_SOCIAL_ACC_T
  add constraint PK_IL_DOC_CL_SOC primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, ACCOUNT_ID);
alter table IL_DOC_CLIENT_SOCIAL_ACC_T
  add constraint FK_IL_DOC_CL_SOC_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_CLNT_FAM_MED_HIST_T
prompt =========================================
prompt
create table IL_DOC_CLNT_FAM_MED_HIST_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  person_id         NUMBER not null,
  med_serial_no     NUMBER not null,
  disease_code      VARCHAR2(50),
  notes             VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_CLNT_FAM_MED_HIST_T
  add constraint PK_IL_DOC_CL_FAM_MD primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, PERSON_ID, MED_SERIAL_NO);
alter table IL_DOC_CLNT_FAM_MED_HIST_T
  add constraint FK_IL_DOC_CL_FAM_MD_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, PERSON_ID)
  references IL_DOC_CLIENT_FAM_HIST_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, PERSON_ID);

prompt
prompt Creating table IL_DOC_CLNT_MED_HIST_T
prompt =====================================
prompt
create table IL_DOC_CLNT_MED_HIST_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  med_serial_no     NUMBER not null,
  disease_code      VARCHAR2(50),
  notes             VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_CLNT_MED_HIST_T
  add constraint PK_IL_DOC_CL_MD primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, MED_SERIAL_NO);
alter table IL_DOC_CLNT_MED_HIST_T
  add constraint FK_CL_MD_CL foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE)
  references IL_DOC_CLIENT_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE);

prompt
prompt Creating table IL_DOC_COMMISSION_CYCLE_T
prompt ========================================
prompt
create table IL_DOC_COMMISSION_CYCLE_T
(
  org_id                  NUMBER not null,
  branch_id               NUMBER not null,
  main_product_code       NUMBER not null,
  sub_product_code        NUMBER not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  serial_no               NUMBER not null,
  commission_cycle_id     NUMBER not null,
  channel_id              NUMBER not null,
  channel_model_id        NUMBER not null,
  agent_code              NUMBER not null,
  cycle_level             VARCHAR2(20),
  designation             VARCHAR2(20),
  cycle_type              VARCHAR2(20),
  allocation_category     VARCHAR2(50),
  commission_rate         NUMBER(9,6),
  commission_flat_amt     NUMBER(15,2),
  commission_amount       NUMBER(15,2),
  agency_type             VARCHAR2(20),
  shares                  NUMBER,
  gross_contribution      NUMBER,
  activity_type           VARCHAR2(100),
  activity_date           DATE,
  comm_percent_share      NUMBER,
  doc_reference_no        VARCHAR2(50),
  posting_tag             VARCHAR2(20),
  posted_by               VARCHAR2(50),
  posted_date             DATE,
  contribution_received   NUMBER,
  comm_settled            NUMBER,
  installment_no          NUMBER,
  hold_flag               VARCHAR2(20),
  hold_by                 VARCHAR2(20),
  hold_date               DATE,
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  allocation_id           NUMBER not null,
  doc_ref_no_key          VARCHAR2(150),
  hold_comment            VARCHAR2(500),
  release_comment         VARCHAR2(500),
  cycle_nature            VARCHAR2(10),
  allocation_type         NUMBER,
  transferred_comm_amount NUMBER default (0),
  transaction_date        DATE
)
;
alter table IL_DOC_COMMISSION_CYCLE_T
  add constraint PK_IL_DOC_COMMISION_CYCLE primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO, COMMISSION_CYCLE_ID, ALLOCATION_ID, CHANNEL_ID, CHANNEL_MODEL_ID, AGENT_CODE);

prompt
prompt Creating table IL_DOC_COMM_CONSO_T
prompt ==================================
prompt
create table IL_DOC_COMM_CONSO_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  allocation_id     NUMBER not null,
  serial_no         NUMBER not null,
  allocation_type   NUMBER,
  channel_id        NUMBER,
  model_id          NUMBER,
  partner_id        NUMBER,
  designation_id    NUMBER,
  designation_level NUMBER,
  commission_rate   NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  agency_type       VARCHAR2(10),
  agent_id          NUMBER,
  policy_term       NUMBER,
  commission_amount NUMBER
)
;
alter table IL_DOC_COMM_CONSO_T
  add constraint PK_IL_DOC_COMM_CONSO primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_ID, SERIAL_NO);
alter table IL_DOC_COMM_CONSO_T
  add constraint FK_IL_DOC_COMM_CONSO_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_COMM_HIERARCHY_T
prompt ======================================
prompt
create table IL_DOC_COMM_HIERARCHY_T
(
  org_id                      NUMBER not null,
  branch_id                   NUMBER not null,
  main_product_code           NUMBER not null,
  sub_product_code            NUMBER not null,
  takaful_type                VARCHAR2(1) not null,
  document_type               VARCHAR2(1) not null,
  document_no                 VARCHAR2(10) not null,
  record_type                 VARCHAR2(1) not null,
  document_year               VARCHAR2(10) not null,
  issue_count                 NUMBER not null,
  endorsement_no              NUMBER not null,
  application_id              NUMBER not null,
  allocation_id               NUMBER,
  serial_no                   NUMBER not null,
  channel_id                  NUMBER,
  model_id                    NUMBER,
  agent_id                    NUMBER,
  partner_id                  NUMBER,
  designation_id              NUMBER,
  designation_level           NUMBER,
  created_by                  VARCHAR2(50),
  creation_date               DATE,
  last_updated_by             VARCHAR2(50),
  last_update_date            DATE,
  commission_rate             NUMBER,
  jump_tag                    VARCHAR2(1),
  commission_type             VARCHAR2(1),
  deferred_tag                VARCHAR2(1),
  start_date                  DATE,
  end_date                    DATE,
  jump_tag_adhoc              VARCHAR2(1),
  jump_tag_bus_credit_adhoc   VARCHAR2(1),
  jump_tag_bus_credit_regular VARCHAR2(1),
  bus_credit_adhoc            NUMBER,
  bus_credit_regular          NUMBER
)
;
alter table IL_DOC_COMM_HIERARCHY_T
  add constraint PK_ILL_DOC_COMM_HIER primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, ENDORSEMENT_NO, SERIAL_NO);
alter table IL_DOC_COMM_HIERARCHY_T
  add constraint FK_ILL_DOC_COMM_HIER_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_CONDITIONS_MAP_T
prompt ======================================
prompt
create table IL_DOC_CONDITIONS_MAP_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  cn_code           NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  default_tag       VARCHAR2(1),
  endorsement_tag   VARCHAR2(1)
)
;
alter table IL_DOC_CONDITIONS_MAP_T
  add constraint IL_DOC_CONDITIONS_MAP_PK primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CN_CODE);

prompt
prompt Creating table IL_DOC_COND_MAP_NEW_T
prompt ====================================
prompt
create table IL_DOC_COND_MAP_NEW_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10),
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10),
  issue_count       NUMBER,
  endorsement_no    NUMBER,
  application_id    NUMBER,
  cn_code           NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  default_tag       VARCHAR2(1),
  process_id        NUMBER not null,
  endorsement_tag   VARCHAR2(1)
)
;
alter table IL_DOC_COND_MAP_NEW_T
  add constraint PK_DOC_UND_COND_NEW primary key (ORG_ID, BRANCH_ID, PROCESS_ID, CN_CODE);

prompt
prompt Creating table IL_DOC_CONTACT_T
prompt ===============================
prompt
create table IL_DOC_CONTACT_T
(
  org_id                NUMBER not null,
  branch_id             NUMBER not null,
  main_product_code     NUMBER not null,
  sub_product_code      NUMBER not null,
  takaful_type          VARCHAR2(1) not null,
  document_type         VARCHAR2(1) not null,
  document_no           VARCHAR2(10) not null,
  record_type           VARCHAR2(1) not null,
  document_year         VARCHAR2(10) not null,
  issue_count           NUMBER not null,
  endorsement_no        NUMBER not null,
  application_id        NUMBER not null,
  client_code           NUMBER not null,
  code                  NUMBER not null,
  phone1                VARCHAR2(30),
  phone2                VARCHAR2(30),
  mobile_phone          VARCHAR2(30),
  home_phone            VARCHAR2(30),
  office_phone          VARCHAR2(30),
  whatsapp_no           VARCHAR2(30),
  fax1                  VARCHAR2(50),
  fax2                  VARCHAR2(50),
  email                 VARCHAR2(50),
  website               VARCHAR2(50),
  entry_type            VARCHAR2(30),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  communication_channel VARCHAR2(1),
  country_code          VARCHAR2(10)
)
;
alter table IL_DOC_CONTACT_T
  add constraint PK_IL_DOC_CONTACT_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, CODE);

prompt
prompt Creating table IL_DOC_DEDUCTION_T
prompt =================================
prompt
create table IL_DOC_DEDUCTION_T
(
  serial_no         NUMBER not null,
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  deduction_type    NUMBER,
  deduction_amount  NUMBER,
  charges_to        NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_update_date  DATE,
  last_updated_by   VARCHAR2(50)
)
;
alter table IL_DOC_DEDUCTION_T
  add constraint PK_DOC_DEDUCTION_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);

prompt
prompt Creating table IL_DOC_DUP_PMD_COMMENTS_T
prompt ========================================
prompt
create table IL_DOC_DUP_PMD_COMMENTS_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  process_id       NUMBER not null,
  serial_no        NUMBER not null,
  attachment_code  NUMBER,
  comments         VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_DOC_DUP_PMD_COMMENTS_T
  add constraint PK_IL_DOC_DUP_PMD_COMMENTS_T primary key (ORG_ID, BRANCH_ID, PROCESS_ID, SERIAL_NO);

prompt
prompt Creating table IL_DOC_EXCL_MAP_NEW_T
prompt ====================================
prompt
create table IL_DOC_EXCL_MAP_NEW_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10),
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10),
  issue_count       NUMBER,
  endorsement_no    NUMBER,
  application_id    NUMBER,
  ex_code           NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  default_tag       VARCHAR2(1),
  notes             VARCHAR2(500),
  process_id        NUMBER not null,
  endorsement_tag   VARCHAR2(1)
)
;
alter table IL_DOC_EXCL_MAP_NEW_T
  add constraint PK_DOC_UND_EXCL_NEW primary key (ORG_ID, BRANCH_ID, PROCESS_ID, EX_CODE);

prompt
prompt Creating table IL_DOC_EXCULUSION_MAP_T
prompt ======================================
prompt
create table IL_DOC_EXCULUSION_MAP_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  ex_code           NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  default_tag       VARCHAR2(1),
  notes             VARCHAR2(500),
  endorsement_tag   VARCHAR2(1)
)
;
alter table IL_DOC_EXCULUSION_MAP_T
  add constraint IL_DOC_EXCULUSION_MAP_PK primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, EX_CODE);

prompt
prompt Creating table IL_DOC_HEADER_UNDWT_T
prompt ====================================
prompt
create table IL_DOC_HEADER_UNDWT_T
(
  org_id                     NUMBER not null,
  branch_id                  NUMBER not null,
  main_product_code          NUMBER,
  sub_product_code           NUMBER,
  takaful_type               VARCHAR2(1),
  document_type              VARCHAR2(1),
  document_no                VARCHAR2(10),
  record_type                VARCHAR2(1),
  document_year              VARCHAR2(10),
  issue_count                NUMBER,
  endorsement_no             NUMBER,
  application_id             NUMBER,
  doc_reference_no           VARCHAR2(50),
  client_code                VARCHAR2(20),
  folio_code                 VARCHAR2(20),
  sum_insured                NUMBER(15,2),
  gross_premium              NUMBER(15,2),
  net_premium                NUMBER(15,2),
  doc_charges                NUMBER(15,2),
  remarks                    VARCHAR2(500),
  premium_basis              VARCHAR2(3),
  producer_code              NUMBER,
  currency_code              VARCHAR2(10),
  payment_mode               VARCHAR2(10),
  payment_term               NUMBER,
  policy_term                NUMBER,
  member_id_label            VARCHAR2(10),
  wakala_fee                 NUMBER(15,2),
  loading_ovrd_rate          NUMBER(9,6),
  loading_rate               NUMBER(9,6),
  policy_fee                 NUMBER(15,2),
  overriding_rate            NUMBER(9,6),
  exchange_rate              NUMBER(9,6),
  next_due_date              DATE,
  quotation_date             DATE,
  sub_document_no            NUMBER,
  standard_treaty            VARCHAR2(10),
  post_date                  DATE,
  posting_tag                VARCHAR2(1),
  post_user                  VARCHAR2(50),
  name1                      VARCHAR2(50),
  name2                      VARCHAR2(50),
  dob1                       DATE,
  dob2                       DATE,
  age1                       NUMBER(3),
  age2                       NUMBER(3),
  gender1                    VARCHAR2(1),
  gender2                    VARCHAR2(1),
  sum_covered                NUMBER(15,2),
  sum_covered_index          NUMBER(15,2),
  contribution_index         NUMBER(15,2),
  basic_contribution         NUMBER(15,2),
  gross_contribution         NUMBER(15,2),
  net_contribution           NUMBER(15,2),
  cover_multiple             NUMBER(3),
  cont_margin                NUMBER(9,6),
  last_age_index             NUMBER(3),
  expected_claim             NUMBER(15,2),
  investment_income          NUMBER(15,2),
  second_life                VARCHAR2(1),
  bid_offer                  NUMBER(15,2),
  issue_date                 DATE,
  comm_date                  DATE,
  expiry_date                DATE,
  converted_doc_no           VARCHAR2(50),
  proposal_date              DATE,
  occupational_class         VARCHAR2(5),
  creation_date              DATE,
  created_by                 VARCHAR2(50),
  last_update_date           DATE,
  last_updated_by            VARCHAR2(50),
  post_by                    VARCHAR2(50),
  convert_tag                VARCHAR2(1),
  revised_tag                VARCHAR2(1),
  base_doc_no                VARCHAR2(50),
  cnic_expiry_date           DATE,
  cnic_issue_date            DATE,
  cnic_no                    VARCHAR2(50),
  waqala_fee                 NUMBER,
  quotation_ref_no           VARCHAR2(50),
  alteration_type            VARCHAR2(50),
  master_ref_no              VARCHAR2(50),
  cost_center_code           VARCHAR2(50),
  alteration_date            DATE,
  advance_amount             NUMBER,
  payer_same_tag             VARCHAR2(1),
  submit_tag                 VARCHAR2(1),
  undwt_status               NUMBER,
  sum_covered_modal          NUMBER,
  basic_contribution_modal   NUMBER,
  undwt_decision             NUMBER,
  converted_policy_no        VARCHAR2(50),
  convert_proposal           VARCHAR2(50),
  risk_profile               VARCHAR2(50),
  contribution_type          VARCHAR2(50),
  risk_profile_comments      VARCHAR2(500),
  illustration_ref_no        VARCHAR2(50),
  customer_profile_comments  VARCHAR2(500),
  channel_id                 NUMBER,
  model_id                   NUMBER,
  agent_id                   NUMBER,
  partner_id                 NUMBER,
  topup_amount               NUMBER,
  rejected_tag               VARCHAR2(50),
  total_contribution_modal   NUMBER,
  alteration_issue_date      DATE,
  cancellation_type          NUMBER,
  doc_dispatch_date          DATE,
  doc_receive_date           DATE,
  chargeable_from            NUMBER,
  chargeable_amount          NUMBER,
  cancel_tag                 VARCHAR2(1),
  cancel_by                  VARCHAR2(50),
  cancel_date                DATE,
  cancellation_remarks       VARCHAR2(500),
  middle_name1               VARCHAR2(50),
  last_name1                 VARCHAR2(50),
  policy_posted              VARCHAR2(1),
  non_financial_activity     VARCHAR2(20),
  non_financial_sub_activity VARCHAR2(20),
  undwt_decision_reason      VARCHAR2(500),
  undwt_notes                VARCHAR2(500),
  underwriting_il_create     VARCHAR2(20),
  proposal_approved_by       VARCHAR2(20),
  undwt_other_exculusions    VARCHAR2(500),
  undwt_decision_system      NUMBER,
  proposal_approved_date     DATE,
  partner_branch_id          NUMBER,
  base_doc_no_key            VARCHAR2(150),
  illustration_ref_no_key    VARCHAR2(150),
  converted_doc_no_key       VARCHAR2(150),
  agent_branch_id            VARCHAR2(20),
  lock_tag                   VARCHAR2(20),
  doc_reference_key          VARCHAR2(100),
  initial_topup              NUMBER,
  process_id                 NUMBER not null,
  process_type_id            NUMBER,
  process_id_ref             NUMBER,
  return_tag                 VARCHAR2(1)
)
;
alter table IL_DOC_HEADER_UNDWT_T
  add constraint PK_DOC_UNDWT_HEADER primary key (ORG_ID, BRANCH_ID, PROCESS_ID);

prompt
prompt Creating table IL_DOC_HISTORY_TYPE_T
prompt ====================================
prompt
create table IL_DOC_HISTORY_TYPE_T
(
  org_id            NUMBER not null,
  history_type_id   NUMBER not null,
  history_type_desc VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_HISTORY_TYPE_T
  add constraint PK_DOC_HIS_TYPE primary key (ORG_ID, HISTORY_TYPE_ID);
alter table IL_DOC_HISTORY_TYPE_T
  add constraint FK_HIST_TYPE_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table IL_DOC_HISTORY_T
prompt ===============================
prompt
create table IL_DOC_HISTORY_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  main_product_code   NUMBER not null,
  sub_product_code    NUMBER not null,
  takaful_type        VARCHAR2(1) not null,
  document_type       VARCHAR2(1) not null,
  document_no         VARCHAR2(10) not null,
  record_type         VARCHAR2(1) not null,
  document_year       VARCHAR2(10) not null,
  issue_count         NUMBER not null,
  endorsement_no      NUMBER not null,
  application_id      NUMBER not null,
  serial_no           NUMBER not null,
  hist_type           NUMBER,
  history_description VARCHAR2(500),
  decision_code       NUMBER,
  status_code         NUMBER,
  loading_value       NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  status_date         DATE,
  process_id          NUMBER
)
;
alter table IL_DOC_HISTORY_T
  add constraint PK_ILL_DOC_HIST primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);
alter table IL_DOC_HISTORY_T
  add constraint FK_DOC_HIST_UND_PROCESS foreign key (ORG_ID, BRANCH_ID, PROCESS_ID)
  references IL_DOC_HEADER_UNDWT_T (ORG_ID, BRANCH_ID, PROCESS_ID);
alter table IL_DOC_HISTORY_T
  add constraint FK_HIST_HIST_TYPE foreign key (ORG_ID, HIST_TYPE)
  references IL_DOC_HISTORY_TYPE_T (ORG_ID, HISTORY_TYPE_ID);
alter table IL_DOC_HISTORY_T
  add constraint FK_ILL_DOC_HIST_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_ILLUSTRATION_DTL_T
prompt ========================================
prompt
create table IL_DOC_ILLUSTRATION_DTL_T
(
  org_id                  NUMBER not null,
  branch_id               NUMBER not null,
  main_product_code       NUMBER not null,
  sub_product_code        NUMBER not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  illustration_id         NUMBER not null,
  effective_age           NUMBER,
  policy_year             NUMBER not null,
  basic_contribution      NUMBER,
  invested_contribution   NUMBER,
  allocation_percentage   NUMBER,
  allocation_contribution NUMBER,
  mortality_rate1         NUMBER,
  mortality_rate2         NUMBER,
  sum_assured             NUMBER,
  sum_assured_at_risk     NUMBER,
  mortality_charges       NUMBER,
  ptf_surplus             NUMBER,
  waqala_charges          NUMBER,
  contingency_margin      NUMBER,
  reins_amount            NUMBER,
  admin_charges           NUMBER,
  cash_value1             NUMBER,
  cash_value2             NUMBER,
  cash_value3             NUMBER,
  created_by              VARCHAR2(50),
  creation_date           DATE
)
;
alter table IL_DOC_ILLUSTRATION_DTL_T
  add constraint PK_IL_DOC_ILL_DTL primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ILLUSTRATION_ID, POLICY_YEAR);
alter table IL_DOC_ILLUSTRATION_DTL_T
  add constraint FK_IL_DOC_ILL_DTL_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_INSTALLMENTS_ALLOC_T
prompt ==========================================
prompt
create table IL_DOC_INSTALLMENTS_ALLOC_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  main_product_code        NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  installment_no           NUMBER not null,
  due_date                 DATE,
  basic_contribution_modal VARCHAR2(50),
  wakala_amount            VARCHAR2(50),
  installment_days         NUMBER,
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  installment_type         VARCHAR2(10),
  period_end_date          DATE,
  posting_tag              VARCHAR2(1),
  post_user                VARCHAR2(50),
  post_date                DATE,
  sum_covered              NUMBER,
  waived_tag               VARCHAR2(1),
  waived_by                VARCHAR2(50),
  waived_date              DATE,
  rider_contribution_modal NUMBER,
  total_contribution_modal NUMBER,
  installment_year         NUMBER
)
;
alter table IL_DOC_INSTALLMENTS_ALLOC_T
  add constraint PK_IL_DOC_INST_ALL primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, INSTALLMENT_NO);

prompt
prompt Creating table IL_DOC_INSTALLMENTS_T
prompt ====================================
prompt
create table IL_DOC_INSTALLMENTS_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  main_product_code        NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  installment_no           NUMBER not null,
  due_date                 DATE,
  basic_contribution_modal VARCHAR2(50),
  wakala_amount            VARCHAR2(50),
  installment_days         NUMBER,
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  installment_type         VARCHAR2(10),
  period_end_date          DATE,
  posting_tag              VARCHAR2(1),
  post_user                VARCHAR2(50),
  post_date                DATE,
  sum_covered              NUMBER,
  waived_tag               VARCHAR2(1),
  waived_by                VARCHAR2(50),
  waived_date              DATE,
  rider_contribution_modal NUMBER,
  total_contribution_modal NUMBER,
  installment_year         NUMBER
)
;
alter table IL_DOC_INSTALLMENTS_T
  add constraint PK_IL_DOC_INST primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, INSTALLMENT_NO);
alter table IL_DOC_INSTALLMENTS_T
  add constraint FK_IL_DOC_INST_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_INST_RIDERS_ALLOC_T
prompt =========================================
prompt
create table IL_DOC_INST_RIDERS_ALLOC_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  main_product_code        NUMBER not null,
  sub_product_code         NUMBER not null,
  takaful_type             VARCHAR2(1) not null,
  document_type            VARCHAR2(1) not null,
  document_no              VARCHAR2(10) not null,
  record_type              VARCHAR2(1) not null,
  document_year            VARCHAR2(10) not null,
  issue_count              NUMBER not null,
  endorsement_no           NUMBER not null,
  application_id           NUMBER not null,
  installment_no           NUMBER not null,
  benefit_code             NUMBER not null,
  basic_contribution_modal NUMBER,
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE
)
;
alter table IL_DOC_INST_RIDERS_ALLOC_T
  add constraint PK_IL_DOC_INST_ALL_RID primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, INSTALLMENT_NO, BENEFIT_CODE);
alter table IL_DOC_INST_RIDERS_ALLOC_T
  add constraint FK_DOC_INST_RID_ALL foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, INSTALLMENT_NO)
  references IL_DOC_INSTALLMENTS_ALLOC_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, INSTALLMENT_NO);

prompt
prompt Creating table IL_DOC_INST_RIDERS_T
prompt ===================================
prompt
create table IL_DOC_INST_RIDERS_T
(
  org_id                     NUMBER not null,
  branch_id                  NUMBER not null,
  main_product_code          NUMBER not null,
  sub_product_code           NUMBER not null,
  takaful_type               VARCHAR2(1) not null,
  document_type              VARCHAR2(1) not null,
  document_no                VARCHAR2(10) not null,
  record_type                VARCHAR2(1) not null,
  document_year              VARCHAR2(10) not null,
  issue_count                NUMBER not null,
  endorsement_no             NUMBER not null,
  application_id             NUMBER not null,
  installment_no             NUMBER not null,
  benefit_code               NUMBER not null,
  basic_contribution_modal   NUMBER,
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE,
  loading_contribution_modal NUMBER,
  total_contribution_modal   NUMBER
)
;
alter table IL_DOC_INST_RIDERS_T
  add constraint PK_IL_DOC_INST_RID primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, INSTALLMENT_NO, BENEFIT_CODE);
alter table IL_DOC_INST_RIDERS_T
  add constraint FK_DOC_INST_RID foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, INSTALLMENT_NO)
  references IL_DOC_INSTALLMENTS_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, INSTALLMENT_NO);

prompt
prompt Creating table IL_DOC_MED_DTL_T
prompt ===============================
prompt
create table IL_DOC_MED_DTL_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  item_no           NUMBER not null,
  uw_code           NUMBER not null,
  uw_status         VARCHAR2(5),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  file_attached     VARCHAR2(200),
  remarks           VARCHAR2(500),
  completion_date   DATE,
  display_order     NUMBER,
  service_provider  VARCHAR2(10),
  requirement_notes VARCHAR2(500),
  serial_no         NUMBER not null,
  req_type_code     VARCHAR2(10),
  posting_flag      VARCHAR2(1),
  post_by           VARCHAR2(50),
  post_date         DATE
)
;
alter table IL_DOC_MED_DTL_T
  add constraint PK_IL_DOC_MED_DTL primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, UW_CODE, SERIAL_NO);
alter table IL_DOC_MED_DTL_T
  add constraint FK_IL_DOC_MED_DT_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);
alter table IL_DOC_MED_DTL_T
  add constraint FK_IL_DOC_MED_REQ foreign key (ORG_ID, UW_CODE)
  references GLAS_UNDWT_REQ_SETUP_T (ORG_ID, REQ_CODE);

prompt
prompt Creating table IL_DOC_MED_DTL_CHLD_T
prompt ====================================
prompt
create table IL_DOC_MED_DTL_CHLD_T
(
  org_id                  NUMBER not null,
  branch_id               NUMBER not null,
  main_product_code       NUMBER not null,
  sub_product_code        NUMBER not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  item_no                 NUMBER not null,
  uw_code                 NUMBER not null,
  uw_dtl_code             NUMBER not null,
  uw_status               VARCHAR2(5),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  file_attached           VARCHAR2(200),
  remarks                 VARCHAR2(500),
  test_date               DATE,
  recieved_date           DATE,
  complete_date           DATE,
  serial_no               NUMBER not null,
  requirement_number      NUMBER not null,
  is_last_update_by_agent VARCHAR2(10)
)
;
alter table IL_DOC_MED_DTL_CHLD_T
  add constraint PK_IL_DOC_MED_DTL_CH primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, UW_CODE, UW_DTL_CODE, REQUIREMENT_NUMBER, SERIAL_NO);
alter table IL_DOC_MED_DTL_CHLD_T
  add constraint FK_IL_DOC_MED_DT_CH_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, UW_CODE, REQUIREMENT_NUMBER)
  references IL_DOC_MED_DTL_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, UW_CODE, SERIAL_NO);

prompt
prompt Creating table IL_DOC_MED_DTL_CHLD_UND_T
prompt ========================================
prompt
create table IL_DOC_MED_DTL_CHLD_UND_T
(
  org_id                  NUMBER not null,
  branch_id               NUMBER not null,
  main_product_code       NUMBER,
  sub_product_code        NUMBER,
  takaful_type            VARCHAR2(1),
  document_type           VARCHAR2(1),
  document_no             VARCHAR2(10),
  record_type             VARCHAR2(1),
  document_year           VARCHAR2(10),
  issue_count             NUMBER,
  endorsement_no          NUMBER,
  application_id          NUMBER,
  item_no                 NUMBER not null,
  uw_code                 NUMBER not null,
  uw_dtl_code             NUMBER not null,
  uw_status               VARCHAR2(5),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  file_attached           VARCHAR2(200),
  remarks                 VARCHAR2(500),
  test_date               DATE,
  recieved_date           DATE,
  complete_date           DATE,
  serial_no               NUMBER not null,
  requirement_number      NUMBER not null,
  is_last_update_by_agent VARCHAR2(10),
  process_id              NUMBER not null
)
;
alter table IL_DOC_MED_DTL_CHLD_UND_T
  add constraint PK_DOC_MED_UNDWT_DET primary key (ORG_ID, BRANCH_ID, PROCESS_ID, ITEM_NO, UW_CODE, UW_DTL_CODE, SERIAL_NO, REQUIREMENT_NUMBER);

prompt
prompt Creating table IL_DOC_MED_DTL_HIST_T
prompt ====================================
prompt
create table IL_DOC_MED_DTL_HIST_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  issue_count        NUMBER not null,
  endorsement_no     NUMBER not null,
  application_id     NUMBER not null,
  item_no            NUMBER not null,
  uw_code            VARCHAR2(5) not null,
  uw_dtl_code        NUMBER not null,
  uw_status          VARCHAR2(5),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  file_attached      VARCHAR2(200),
  remarks            VARCHAR2(500),
  serial_no          NUMBER not null,
  history_remarks    VARCHAR2(50),
  test_date          DATE,
  recieved_date      DATE,
  complete_date      DATE,
  requirement_number NUMBER,
  uw_detail_srno     NUMBER
)
;
alter table IL_DOC_MED_DTL_HIST_T
  add constraint PK_IL_DOC_MED_DTL_HIST primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ITEM_NO, UW_CODE, UW_DTL_CODE, SERIAL_NO);
alter table IL_DOC_MED_DTL_HIST_T
  add constraint FK_IL_DOC_MED_DT_HIST_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_MED_DTL_HIST_UND_T
prompt ========================================
prompt
create table IL_DOC_MED_DTL_HIST_UND_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  main_product_code  NUMBER,
  sub_product_code   NUMBER,
  takaful_type       VARCHAR2(1),
  document_type      VARCHAR2(1),
  document_no        VARCHAR2(10),
  record_type        VARCHAR2(1),
  document_year      VARCHAR2(10),
  issue_count        NUMBER,
  endorsement_no     NUMBER,
  application_id     NUMBER,
  item_no            NUMBER not null,
  uw_code            VARCHAR2(5) not null,
  uw_dtl_code        NUMBER not null,
  uw_status          VARCHAR2(5),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  file_attached      VARCHAR2(200),
  remarks            VARCHAR2(500),
  serial_no          NUMBER not null,
  history_remarks    VARCHAR2(50),
  test_date          DATE,
  recieved_date      DATE,
  complete_date      DATE,
  requirement_number NUMBER,
  uw_detail_srno     NUMBER,
  process_id         NUMBER not null
)
;
alter table IL_DOC_MED_DTL_HIST_UND_T
  add constraint PK_DOC_MED_UND_DET_HIST primary key (ORG_ID, BRANCH_ID, PROCESS_ID, ITEM_NO, UW_CODE, UW_DTL_CODE, SERIAL_NO);

prompt
prompt Creating table IL_DOC_MED_DTL_UNDWT_T
prompt =====================================
prompt
create table IL_DOC_MED_DTL_UNDWT_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10),
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10),
  issue_count       NUMBER,
  endorsement_no    NUMBER,
  application_id    NUMBER,
  item_no           NUMBER not null,
  uw_code           NUMBER not null,
  uw_status         VARCHAR2(5),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  file_attached     VARCHAR2(200),
  remarks           VARCHAR2(500),
  completion_date   DATE,
  display_order     NUMBER,
  service_provider  VARCHAR2(10),
  req_type_code     VARCHAR2(10),
  requirement_notes VARCHAR2(500),
  serial_no         NUMBER not null,
  posting_flag      VARCHAR2(1),
  process_id        NUMBER not null,
  post_by           VARCHAR2(50),
  post_date         DATE
)
;
alter table IL_DOC_MED_DTL_UNDWT_T
  add constraint PK_DOC_MED_UNDWT primary key (ORG_ID, BRANCH_ID, PROCESS_ID, ITEM_NO, UW_CODE, SERIAL_NO);

prompt
prompt Creating table IL_DOC_MONEY_TR_COMMENTS_T
prompt =========================================
prompt
create table IL_DOC_MONEY_TR_COMMENTS_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  money_transfer_id NUMBER not null,
  serial_no         NUMBER not null,
  comments          VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_MONEY_TR_COMMENTS_T
  add constraint PK_IL_MONEY_TR_COMMENTS_T primary key (ORG_ID, BRANCH_ID, MONEY_TRANSFER_ID, SERIAL_NO);
alter table IL_DOC_MONEY_TR_COMMENTS_T
  add constraint FK_DOC_MONEY_TR_COMMENTS foreign key (ORG_ID, BRANCH_ID, MONEY_TRANSFER_ID)
  references IL_MONEY_TRANSFER_HEADER_T (ORG_ID, BRANCH_ID, MONEY_TRANSFER_ID);

prompt
prompt Creating table IL_DOC_POSTING_HISTORY_T
prompt =======================================
prompt
create table IL_DOC_POSTING_HISTORY_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  post_by           VARCHAR2(50),
  post_date         VARCHAR2(50),
  matrix_id         VARCHAR2(50),
  voucher_no        VARCHAR2(50),
  advice_no         VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_POSTING_HISTORY_T
  add constraint PK_IL_DOC_POSTING_HIST primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);
alter table IL_DOC_POSTING_HISTORY_T
  add constraint FK_IL_DOC_POST_HIST_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_SETTLEMENT_TYPE_SETUP_T
prompt =========================================
prompt
create table IL_SETTLEMENT_TYPE_SETUP_T
(
  org_id                   NUMBER not null,
  type_code                NUMBER not null,
  type_description         VARCHAR2(500),
  active                   VARCHAR2(1),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  zakat_allowed            VARCHAR2(1),
  surrender_allowed        VARCHAR2(1),
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  no_of_months             NUMBER,
  contribution_type        VARCHAR2(1),
  surrender_fee_applicable VARCHAR2(1)
)
;
alter table IL_SETTLEMENT_TYPE_SETUP_T
  add constraint IL_SETTLEMENT_TYPE_SETUP_T primary key (ORG_ID, TYPE_CODE);

prompt
prompt Creating table IL_DOC_SETTLEMENT_HD_T
prompt =====================================
prompt
create table IL_DOC_SETTLEMENT_HD_T
(
  org_id                        NUMBER not null,
  branch_id                     NUMBER not null,
  sett_no                       NUMBER not null,
  sett_date                     DATE,
  sett_type                     NUMBER,
  sett_amount                   NUMBER,
  sett_remarks                  VARCHAR2(500),
  sett_payable_to               NUMBER,
  pmd_ref_no                    VARCHAR2(50),
  payer_code                    NUMBER,
  created_by                    VARCHAR2(50),
  creation_date                 DATE,
  last_updated_by               VARCHAR2(50),
  last_update_date              DATE,
  lock_flag                     VARCHAR2(1),
  post_flag                     VARCHAR2(1),
  posted_date                   DATE,
  posted_by                     VARCHAR2(50),
  cancel_flag                   VARCHAR2(1),
  cancel_date                   DATE,
  cancel_by                     VARCHAR2(50),
  request_date                  DATE,
  sett_reason                   VARCHAR2(10),
  percentage                    NUMBER,
  amount_type                   VARCHAR2(30),
  pmd_ref_no_key                VARCHAR2(150),
  surrender_processing_fee      NUMBER,
  bank_name                     VARCHAR2(50),
  bank_branch                   VARCHAR2(50),
  bank_account                  VARCHAR2(50),
  zakat_excemption              VARCHAR2(1),
  settlement_category_code      VARCHAR2(1),
  attachment_zakat_excemption   VARCHAR2(4000),
  settlement_attachment         VARCHAR2(4000),
  payment_type                  VARCHAR2(1),
  zakat_charges                 NUMBER,
  net_settlement_amount         NUMBER,
  surrender_charges             NUMBER,
  settled_amount                NUMBER,
  advice_ref                    VARCHAR2(100),
  adjusted_amount               NUMBER,
  process_tag                   VARCHAR2(1),
  process_date                  DATE,
  zakat_refund_tag              VARCHAR2(1),
  zakat_refund_id               NUMBER,
  regular_amount                NUMBER,
  topup_amount                  NUMBER,
  lock_flag_zakat               VARCHAR2(1),
  post_flag_zakat               VARCHAR2(1),
  advice_key                    VARCHAR2(50),
  post_zakat_refund_date        DATE,
  post_zakat_refund_by          VARCHAR2(50),
  surrender_charges_rate        NUMBER,
  surrender_fees                NUMBER,
  sett_payable_to_zakat         NUMBER,
  payer_code_zakat              NUMBER,
  sett_category_code_zakat      VARCHAR2(1),
  payment_type_zakat            VARCHAR2(1),
  bank_name_zakat               VARCHAR2(50),
  bank_branch_zakat             VARCHAR2(50),
  bank_account_zakat            VARCHAR2(50),
  regular_amount_zakat          NUMBER,
  topup_amount_zakat            NUMBER,
  zakat_excemption_zakat        VARCHAR2(1),
  attachment_zakat_exempt_zakat VARCHAR2(1000),
  process_tag_zakat             VARCHAR2(1),
  advice_key_zakat_refund       VARCHAR2(50),
  sett_date_zakat               DATE,
  request_date_zakat            DATE,
  sett_amount_regular           NUMBER,
  sett_amount_adhoc             NUMBER,
  lapse_charges                 NUMBER,
  lapse_charges_rate            NUMBER,
  auto_tag                      VARCHAR2(1)
)
;
alter table IL_DOC_SETTLEMENT_HD_T
  add constraint PK_IL_DOC_SETTLEMENT_HD_T primary key (ORG_ID, BRANCH_ID, SETT_NO);
alter table IL_DOC_SETTLEMENT_HD_T
  add constraint FK_SETT_TYPE_SETT foreign key (ORG_ID, SETT_TYPE)
  references IL_SETTLEMENT_TYPE_SETUP_T (ORG_ID, TYPE_CODE);

prompt
prompt Creating table IL_DOC_STATUS_TRANS_TYPE_MAP_T
prompt =============================================
prompt
create table IL_DOC_STATUS_TRANS_TYPE_MAP_T
(
  org_id           NUMBER not null,
  status_code      NUMBER not null,
  transaction_type NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  active           VARCHAR2(1)
)
;
alter table IL_DOC_STATUS_TRANS_TYPE_MAP_T
  add constraint PK_IL_STATUS_TRANS_TYPE_MAP_T primary key (ORG_ID, STATUS_CODE, TRANSACTION_TYPE);
alter table IL_DOC_STATUS_TRANS_TYPE_MAP_T
  add constraint FK_STATUS_TRANS_TYP foreign key (ORG_ID, TRANSACTION_TYPE)
  references IL_ALLOC_TRANS_TYPE_T (ORG_ID, TYPE_CODE);
alter table IL_DOC_STATUS_TRANS_TYPE_MAP_T
  add constraint FK_STATUS_TT_STATUS foreign key (ORG_ID, STATUS_CODE)
  references IL_DOC_STATUS_SETUP_T (ORG_ID, STATUS_CODE);

prompt
prompt Creating table IL_DOC_SUM_COVERED_HISTORY_T
prompt ===========================================
prompt
create table IL_DOC_SUM_COVERED_HISTORY_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  issue_count        NUMBER not null,
  endorsement_no     NUMBER not null,
  application_id     NUMBER not null,
  serial_no          NUMBER not null,
  sum_covered        NUMBER,
  total_contribution NUMBER,
  sum_covered_ratio  NUMBER,
  reversal_tag       VARCHAR2(1),
  reverse_by         VARCHAR2(1),
  reverse_date       DATE,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  remarks            VARCHAR2(500)
)
;
alter table IL_DOC_SUM_COVERED_HISTORY_T
  add constraint PK_IL_DOC_SC_HIST primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);
alter table IL_DOC_SUM_COVERED_HISTORY_T
  add constraint FK_IL_DOC_SC_HIST_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_SUPR_APPROVAL_HIST_T
prompt ==========================================
prompt
create table IL_DOC_SUPR_APPROVAL_HIST_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  supervisor_id     NUMBER,
  supr_action_taken VARCHAR2(10),
  remarks           VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_DOC_SUPR_APPROVAL_HIST_T
  add constraint PK_IL_DOC_SUP_APPR primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, SERIAL_NO);
alter table IL_DOC_SUPR_APPROVAL_HIST_T
  add constraint FL_IL_DOC_SUP_ADDR foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_SURPLUS_PROCESS_HD_T
prompt ==========================================
prompt
create table IL_DOC_SURPLUS_PROCESS_HD_T
(
  org_id           NUMBER not null,
  process_id       NUMBER not null,
  as_at_date       DATE,
  payment_mode     VARCHAR2(1),
  total_amount     NUMBER,
  process_by       VARCHAR2(50),
  process_tag      VARCHAR2(1),
  process_date     DATE,
  lock_flag        VARCHAR2(5),
  locked_date      DATE,
  locked_by        VARCHAR2(150),
  post_flag        VARCHAR2(5),
  posted_date      DATE,
  posted_by        VARCHAR2(150),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_DOC_SURPLUS_PROCESS_HD_T
  add constraint PK_DOC_SURPLUS primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table IL_DOC_SURPLUS_PROCESS_DTL_T
prompt ===========================================
prompt
create table IL_DOC_SURPLUS_PROCESS_DTL_T
(
  org_id               NUMBER not null,
  process_id           NUMBER not null,
  serial_no            NUMBER not null,
  doc_reference_no     VARCHAR2(50),
  doc_reference_key    VARCHAR2(50),
  allocation_id        NUMBER,
  sub_serial_no        NUMBER,
  month_no             NUMBER,
  allocation_type      NUMBER,
  transaction_date     DATE,
  requested_date       DATE,
  pia_amount           NUMBER,
  ptf_amount           NUMBER,
  surplus_ratio        NUMBER,
  surplus_amount       NUMBER,
  surplus_amount_total NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  transaction_type     NUMBER
)
;
alter table IL_DOC_SURPLUS_PROCESS_DTL_T
  add constraint PK_DOC_SURPLUS_DTL primary key (ORG_ID, PROCESS_ID, SERIAL_NO);
alter table IL_DOC_SURPLUS_PROCESS_DTL_T
  add constraint FK_SURPLUS_KD_DTL foreign key (ORG_ID, PROCESS_ID)
  references IL_DOC_SURPLUS_PROCESS_HD_T (ORG_ID, PROCESS_ID);

prompt
prompt Creating table IL_DOC_TOP_UP_COMMENTS_T
prompt =======================================
prompt
create table IL_DOC_TOP_UP_COMMENTS_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  top_up_id        NUMBER not null,
  serial_no        NUMBER not null,
  attachment_code  NUMBER,
  comments         VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_DOC_TOP_UP_COMMENTS_T
  add constraint PK_IL_TOP_UP_COMMENTS_T primary key (ORG_ID, BRANCH_ID, TOP_UP_ID, SERIAL_NO);
alter table IL_DOC_TOP_UP_COMMENTS_T
  add constraint FK_DOC_TOP_UP_COMMENTS foreign key (ORG_ID, BRANCH_ID, TOP_UP_ID)
  references IL_TOPUP_REQUEST_T (ORG_ID, BRANCH_ID, TOP_UP_ID);

prompt
prompt Creating table IL_DOC_UW_COMMENTS_T
prompt ===================================
prompt
create table IL_DOC_UW_COMMENTS_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  comments          VARCHAR2(3000),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  topup_id          NUMBER
)
;
alter table IL_DOC_UW_COMMENTS_T
  add constraint PK_DOC_UW_COMMENTS primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, SERIAL_NO);
alter table IL_DOC_UW_COMMENTS_T
  add constraint FK_DOC_UW_COMMENTS_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table IL_DOC_UW_COMMENTS_UND_T
prompt =======================================
prompt
create table IL_DOC_UW_COMMENTS_UND_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10),
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10),
  issue_count       NUMBER,
  endorsement_no    NUMBER,
  application_id    NUMBER,
  serial_no         NUMBER not null,
  comments          VARCHAR2(3000),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  process_id        NUMBER not null
)
;
alter table IL_DOC_UW_COMMENTS_UND_T
  add constraint PK_DOC_COMMENTS_UND primary key (ORG_ID, BRANCH_ID, PROCESS_ID, SERIAL_NO);

prompt
prompt Creating table IL_EVENT_GROUP_SETUP_T
prompt =====================================
prompt
create table IL_EVENT_GROUP_SETUP_T
(
  org_id           NUMBER not null,
  group_code       NUMBER not null,
  description      VARCHAR2(300),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_EVENT_GROUP_SETUP_T
  add constraint PK_EVENT_GROUP_SETUP primary key (ORG_ID, GROUP_CODE);

prompt
prompt Creating table IL_EVENT_CATEGORY_SETUP_T
prompt ========================================
prompt
create table IL_EVENT_CATEGORY_SETUP_T
(
  org_id           NUMBER not null,
  group_code       NUMBER not null,
  category_code    NUMBER not null,
  description      VARCHAR2(300),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_EVENT_CATEGORY_SETUP_T
  add constraint PK_IL_EVENT_CAT_SETUP primary key (ORG_ID, GROUP_CODE, CATEGORY_CODE);
alter table IL_EVENT_CATEGORY_SETUP_T
  add constraint FK_EVENT_CATEGORY_GROUP foreign key (ORG_ID, GROUP_CODE)
  references IL_EVENT_GROUP_SETUP_T (ORG_ID, GROUP_CODE);

prompt
prompt Creating table IL_EVENT_SETUP_T
prompt ===============================
prompt
create table IL_EVENT_SETUP_T
(
  org_id           NUMBER not null,
  event_code       NUMBER not null,
  description      VARCHAR2(300),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  group_code       NUMBER not null,
  category_code    NUMBER not null,
  active           VARCHAR2(1),
  release_tag      VARCHAR2(1)
)
;
alter table IL_EVENT_SETUP_T
  add constraint PK_IL_EVENT_SETUP primary key (ORG_ID, GROUP_CODE, CATEGORY_CODE, EVENT_CODE);
alter table IL_EVENT_SETUP_T
  add constraint FK_EVENT_CATEGORY foreign key (ORG_ID, GROUP_CODE, CATEGORY_CODE)
  references IL_EVENT_CATEGORY_SETUP_T (ORG_ID, GROUP_CODE, CATEGORY_CODE);

prompt
prompt Creating table IL_EVENT_TEMPLATE_MAP_T
prompt ======================================
prompt
create table IL_EVENT_TEMPLATE_MAP_T
(
  org_id               NUMBER not null,
  event_code           NUMBER not null,
  template_code        NUMBER not null,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  group_code           NUMBER not null,
  category_code        NUMBER not null,
  description          VARCHAR2(300),
  active               VARCHAR2(1),
  template_code_sms    NUMBER,
  template_code_email  NUMBER,
  effective_days_after NUMBER
)
;
alter table IL_EVENT_TEMPLATE_MAP_T
  add constraint PK_EVENT_TEMPLATE_MAP primary key (ORG_ID, GROUP_CODE, CATEGORY_CODE, EVENT_CODE, TEMPLATE_CODE);
alter table IL_EVENT_TEMPLATE_MAP_T
  add constraint FK_EVENT_TEMPLATE_MAP_EVENT foreign key (ORG_ID, GROUP_CODE, CATEGORY_CODE, EVENT_CODE)
  references IL_EVENT_SETUP_T (ORG_ID, GROUP_CODE, CATEGORY_CODE, EVENT_CODE);
alter table IL_EVENT_TEMPLATE_MAP_T
  add constraint FK_EVENT_TMP_MAP_TEMPLATE_EM foreign key (TEMPLATE_CODE_EMAIL)
  references EMAIL_TEMPLATES_T (TEMPLATE_ID);
alter table IL_EVENT_TEMPLATE_MAP_T
  add constraint FK_EVENT_TMP_MAP_TEMPLATE_SMS foreign key (TEMPLATE_CODE_SMS)
  references EMAIL_TEMPLATES_T (TEMPLATE_ID);

prompt
prompt Creating table IL_FUND_PRICE_HISTORY_T
prompt ======================================
prompt
create table IL_FUND_PRICE_HISTORY_T
(
  org_id           NUMBER not null,
  fund_code        NUMBER not null,
  serial_no        NUMBER not null,
  transaction_date DATE,
  bid_price        NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_FUND_PRICE_HISTORY_T
  add constraint PK_FUND_PRICE_HIST primary key (ORG_ID, FUND_CODE, SERIAL_NO);
alter table IL_FUND_PRICE_HISTORY_T
  add constraint FK_FUND_PRICE_FUND foreign key (ORG_ID, FUND_CODE)
  references FUND_SETUP_T (ORG_ID, FUND_CODE);

prompt
prompt Creating table IL_IFRS17_GROUP_SETUP_T
prompt ======================================
prompt
create table IL_IFRS17_GROUP_SETUP_T
(
  org_id           NUMBER not null,
  code             NUMBER not null,
  description      VARCHAR2(150),
  active_flag      VARCHAR2(5),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_IFRS17_GROUP_SETUP_T
  add constraint PK_IL_IFRS17_GROUP_SETUP_T primary key (ORG_ID, CODE);

prompt
prompt Creating table IL_IFRS_PORTFOLIO_TAGGING_T
prompt ==========================================
prompt
create table IL_IFRS_PORTFOLIO_TAGGING_T
(
  org_id           NUMBER not null,
  sr_no            NUMBER not null,
  policy_no        VARCHAR2(100),
  ifrs17_group     VARCHAR2(100),
  fiscal_year      NUMBER,
  uw_year          NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_IFRS_PORTFOLIO_TAGGING_T
  add constraint PK_IL_IFRS_PORTFOLIO_TAGGING_T primary key (ORG_ID, SR_NO);

prompt
prompt Creating table IL_MEDICAL_TEST_SETUP_T
prompt ======================================
prompt
create table IL_MEDICAL_TEST_SETUP_T
(
  org_id            NUMBER not null,
  medical_test_code NUMBER not null,
  description       VARCHAR2(300),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  medical_type      VARCHAR2(20),
  display_order     NUMBER
)
;
alter table IL_MEDICAL_TEST_SETUP_T
  add constraint PK_MEDICAL_TEST_SETUP primary key (ORG_ID, MEDICAL_TEST_CODE);

prompt
prompt Creating table IL_MONEY_TRANSFER_DETAIL_T
prompt =========================================
prompt
create table IL_MONEY_TRANSFER_DETAIL_T
(
  org_id                     NUMBER not null,
  branch_id                  NUMBER not null,
  money_transfer_id          NUMBER not null,
  money_transfer_detail_id   NUMBER not null,
  transfer_from_doc_no       VARCHAR2(100),
  transfer_from_reg_amount   NUMBER(15,2),
  transfer_from_adhoc_amount NUMBER(15,2),
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE,
  source                     VARCHAR2(20),
  transfer_from_doc_no_key   VARCHAR2(150),
  transfer_to_doc_no_key     VARCHAR2(150),
  sett_no                    NUMBER,
  sett_type                  NUMBER
)
;
alter table IL_MONEY_TRANSFER_DETAIL_T
  add constraint PK_IL_MONEY_TRSFR_DET primary key (ORG_ID, BRANCH_ID, MONEY_TRANSFER_ID, MONEY_TRANSFER_DETAIL_ID);

prompt
prompt Creating table IL_MONTHLY_PROC_BULK_T
prompt =====================================
prompt
create table IL_MONTHLY_PROC_BULK_T
(
  org_id            NUMBER not null,
  proposal_no       VARCHAR2(50) not null,
  policy_no         VARCHAR2(50) not null,
  comm_date         DATE,
  issue_date        DATE,
  process_tag       VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  doc_reference_key VARCHAR2(50)
)
;
alter table IL_MONTHLY_PROC_BULK_T
  add constraint PK_M_PROC_BULK primary key (ORG_ID, PROPOSAL_NO, POLICY_NO);

prompt
prompt Creating table IL_MONT_FILE_HEADER_T
prompt ====================================
prompt
create table IL_MONT_FILE_HEADER_T
(
  org_id             NUMBER not null,
  file_name          VARCHAR2(150),
  serial_no          NUMBER not null,
  from_date          DATE,
  to_date            DATE,
  no_of_policies     NUMBER,
  total_contribution NUMBER,
  created_by         VARCHAR2(150),
  created_date       DATE,
  partner_id         NUMBER not null
)
;
alter table IL_MONT_FILE_HEADER_T
  add constraint IL_MONT_FILE_HEADER_T_PK primary key (ORG_ID, SERIAL_NO, PARTNER_ID);

prompt
prompt Creating table IL_NA_FINANCIAL_PRIORITY_T
prompt =========================================
prompt
create table IL_NA_FINANCIAL_PRIORITY_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  na_code           NUMBER not null,
  priority_id       NUMBER not null,
  value             VARCHAR2(150),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_NA_FINANCIAL_PRIORITY_T
  add constraint PK_NA_FP_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NA_CODE, PRIORITY_ID);

prompt
prompt Creating table IL_NA_FINANCIAL_T
prompt ================================
prompt
create table IL_NA_FINANCIAL_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  issue_count        NUMBER not null,
  endorsement_no     NUMBER not null,
  application_id     NUMBER not null,
  na_code            NUMBER not null,
  financial_id       NUMBER not null,
  sr_code            NUMBER not null,
  last_year_value    VARCHAR2(150),
  current_year_value VARCHAR2(150),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table IL_NA_FINANCIAL_T
  add constraint PK_NA_FINANCIAL_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NA_CODE, FINANCIAL_ID, SR_CODE);

prompt
prompt Creating table IL_NA_INSURANCE_NEED_T
prompt =====================================
prompt
create table IL_NA_INSURANCE_NEED_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  na_code           NUMBER not null,
  serial_code       NUMBER not null,
  insurance_need_id VARCHAR2(50),
  insurance_option  VARCHAR2(50),
  insurance_value   VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_NA_INSURANCE_NEED_T
  add constraint PK_IL_NA_INSURANCE primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NA_CODE, SERIAL_CODE);

prompt
prompt Creating table IL_NEED_ANALYSIS_HD_T
prompt ====================================
prompt
create table IL_NEED_ANALYSIS_HD_T
(
  org_id                  NUMBER not null,
  branch_id               NUMBER not null,
  main_product_code       NUMBER not null,
  sub_product_code        NUMBER not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  na_code                 NUMBER not null,
  saving_need             VARCHAR2(100),
  life_stage_recom        VARCHAR2(200),
  protection_need_recom   VARCHAR2(200),
  appetite_for_risk_recom VARCHAR2(200),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  policy_recommendation   VARCHAR2(200),
  year_commitment         VARCHAR2(200),
  risk_elements           VARCHAR2(200),
  membership_recom        VARCHAR2(200),
  consultant_name         VARCHAR2(500),
  consultant_code         VARCHAR2(500),
  cold_contact            VARCHAR2(500),
  known_duration          VARCHAR2(50),
  is_relative             VARCHAR2(10),
  relation_state          VARCHAR2(500),
  takaful_purpose         VARCHAR2(50),
  application_pending     VARCHAR2(10),
  covered_income          NUMBER,
  unfavorable_info        VARCHAR2(10),
  unfavorable_detail      VARCHAR2(500)
)
;
alter table IL_NEED_ANALYSIS_HD_T
  add constraint PK_IL_NA_HD primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, NA_CODE);

prompt
prompt Creating table IL_NIV_ADJUSTMENT_DTL_T
prompt ======================================
prompt
create table IL_NIV_ADJUSTMENT_DTL_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  process_id       NUMBER not null,
  fund_code        NUMBER not null,
  allocation_type  NUMBER not null,
  niv_amount       NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  niv_units        NUMBER
)
;
alter table IL_NIV_ADJUSTMENT_DTL_T
  add constraint PK_IL_NIV_ADJUSTMENT_DTL_T primary key (ORG_ID, BRANCH_ID, PROCESS_ID, FUND_CODE, ALLOCATION_TYPE);

prompt
prompt Creating table IL_NIV_ADJUSTMENT_HD_T
prompt =====================================
prompt
create table IL_NIV_ADJUSTMENT_HD_T
(
  org_id                        NUMBER not null,
  branch_id                     NUMBER not null,
  process_id                    NUMBER not null,
  process_date                  DATE,
  request_date                  DATE,
  niv_adjustment_amount_regular NUMBER,
  niv_adjustment_amount_adhoc   NUMBER,
  pmd_ref_no                    VARCHAR2(50),
  pmd_ref_no_key                VARCHAR2(150),
  created_by                    VARCHAR2(50),
  creation_date                 DATE,
  last_updated_by               VARCHAR2(50),
  last_update_date              DATE,
  lock_flag                     VARCHAR2(1),
  post_flag                     VARCHAR2(1),
  posted_date                   DATE,
  posted_by                     VARCHAR2(50),
  cancel_flag                   VARCHAR2(1),
  cancel_date                   DATE,
  cancel_by                     VARCHAR2(50),
  adjustment_type               VARCHAR2(1),
  niv_adjustment_units_regular  NUMBER,
  niv_adjustment_units_adhoc    NUMBER,
  process_tag                   VARCHAR2(1),
  process_by                    VARCHAR2(50),
  process_comments              VARCHAR2(500)
)
;
alter table IL_NIV_ADJUSTMENT_HD_T
  add constraint PK_IL_NIV_ADJUSTMENT_HD_T primary key (ORG_ID, BRANCH_ID, PROCESS_ID);

prompt
prompt Creating table IL_NON_FINANCIAL_CHANGES_LOGS
prompt ============================================
prompt
create table IL_NON_FINANCIAL_CHANGES_LOGS
(
  org_id             NUMBER not null,
  log_id             NUMBER not null,
  change_description VARCHAR2(500),
  new_value          VARCHAR2(1000),
  target_table       VARCHAR2(100),
  target_document_no VARCHAR2(50),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  old_value          VARCHAR2(1000),
  doc_reference_key  VARCHAR2(100),
  activity           VARCHAR2(150),
  sub_activity       VARCHAR2(150)
)
;
alter table IL_NON_FINANCIAL_CHANGES_LOGS
  add constraint PK_NON_FINANCIAL_CHANGES primary key (ORG_ID, LOG_ID);

prompt
prompt Creating table IL_OC_BENEFIT_MAPPING_T
prompt ======================================
prompt
create table IL_OC_BENEFIT_MAPPING_T
(
  org_id               NUMBER not null,
  occupation_code      NUMBER not null,
  application_id       NUMBER not null,
  benefit_code         NUMBER not null,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  loading_rate         NUMBER,
  effective_start_date DATE,
  effective_end_date   DATE,
  serial_no            NUMBER not null,
  underwriting_type    VARCHAR2(1),
  calculation_basis    NUMBER
)
;
alter table IL_OC_BENEFIT_MAPPING_T
  add constraint PK_OC_BEN_MAP primary key (ORG_ID, OCCUPATION_CODE, APPLICATION_ID, BENEFIT_CODE, SERIAL_NO);

prompt
prompt Creating table IL_POLICYWISE_DAILY_GAINLOSS_T
prompt =============================================
prompt
create table IL_POLICYWISE_DAILY_GAINLOSS_T
(
  org_id             NUMBER,
  process_date       DATE,
  master_ref_no      VARCHAR2(50),
  pmd_year           NUMBER,
  allocation_type    NUMBER,
  fund_code          NUMBER,
  no_of_unts         NUMBER,
  last_day_price     NUMBER,
  current_day_price  NUMBER,
  last_day_amount    NUMBER,
  current_day_amount NUMBER,
  gainloss_amount    NUMBER,
  post_tag           VARCHAR2(1),
  post_date          DATE,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  cost_center_code   VARCHAR2(10),
  currency_code      VARCHAR2(10),
  bu                 VARCHAR2(300),
  lob                VARCHAR2(300),
  location           VARCHAR2(300),
  channel            NUMBER,
  agent              NUMBER,
  branch_id          NUMBER
)
;

prompt
prompt Creating table IL_POLICY_HOLD_T
prompt ===============================
prompt
create table IL_POLICY_HOLD_T
(
  org_id           NUMBER not null,
  process_id       NUMBER not null,
  process_type     CHAR(1),
  document_ref_no  VARCHAR2(150),
  document_ref_key VARCHAR2(150),
  process_date     DATE,
  request_date     DATE,
  process_comments VARCHAR2(1000),
  lock_flag        VARCHAR2(5),
  locked_date      DATE,
  locked_by        VARCHAR2(150),
  post_flag        VARCHAR2(5),
  posted_date      DATE,
  posted_by        VARCHAR2(150),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  reject_tag       CHAR(1),
  return_tag       CHAR(1),
  return_date      DATE,
  reject_date      DATE,
  attachment_path  VARCHAR2(250),
  process_by       VARCHAR2(50),
  process_tag      VARCHAR2(1)
)
;
alter table IL_POLICY_HOLD_T
  add constraint PK_IL_POLICY_HOLD_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table TK_ILLUSTRATIONHD_POS
prompt ====================================
prompt
create table TK_ILLUSTRATIONHD_POS
(
  org_id                      NUMBER not null,
  branch_id                   NUMBER not null,
  main_product_code           NUMBER not null,
  sub_product_code            NUMBER not null,
  document_no                 VARCHAR2(10) not null,
  document_year               NUMBER not null,
  application_id              NUMBER not null,
  issue_count                 NUMBER not null,
  issue_date                  DATE,
  comm_date                   DATE,
  expiry_date                 DATE,
  doc_reference_no            VARCHAR2(50),
  name1                       VARCHAR2(50),
  name2                       VARCHAR2(50),
  dob1                        DATE,
  dob2                        DATE,
  age1                        NUMBER(3),
  age2                        NUMBER(3),
  gender1                     VARCHAR2(1),
  gender2                     VARCHAR2(1),
  policy_term                 NUMBER(3),
  sum_covered                 NUMBER(15,2),
  sum_covered_index           NUMBER(15,2),
  contribution_index          NUMBER(15,2),
  basic_contribution          NUMBER(15,2),
  gross_contribution          NUMBER(15,2),
  net_contribution            NUMBER(15,2),
  cover_multiple              NUMBER,
  cont_margin                 NUMBER(9,6),
  last_age_index              NUMBER(3),
  waqala_fee                  NUMBER(15,2),
  expected_claim              NUMBER(15,2),
  investment_income           NUMBER(15,2),
  created_by                  VARCHAR2(50),
  creation_date               DATE,
  last_updated_by             VARCHAR2(50),
  last_update_date            DATE,
  second_life                 VARCHAR2(1),
  payment_mode                VARCHAR2(1),
  bid_offer                   NUMBER(15,2),
  cnic_no                     VARCHAR2(50),
  cnic_issue_date             DATE,
  cnic_expiry_date            DATE,
  cnic_no2                    VARCHAR2(50),
  cnic_issue_date2            DATE,
  cnic_expiry_date2           DATE,
  relation_code               NUMBER,
  posting_tag                 VARCHAR2(1),
  send_to_quotation           VARCHAR2(1),
  payment_term                NUMBER,
  post_by                     VARCHAR2(50),
  post_date                   DATE,
  convert_tag                 VARCHAR2(1),
  revised_tag                 VARCHAR2(1),
  converted_doc_no            VARCHAR2(50),
  base_doc_no                 VARCHAR2(50),
  proposal_draft_tag          VARCHAR2(1),
  basic_contribution_modal    NUMBER,
  sum_covered_modal           NUMBER,
  middle_name1                VARCHAR2(50),
  last_name1                  VARCHAR2(50),
  channel_id                  NUMBER,
  model_id                    NUMBER,
  agent_id                    NUMBER,
  partner_id                  NUMBER,
  total_contribution_modal    NUMBER,
  calculation_type            VARCHAR2(20),
  target_value                NUMBER,
  title                       VARCHAR2(50),
  taxstatus                   VARCHAR2(5),
  mobile_no                   VARCHAR2(20),
  currency_code               VARCHAR2(10),
  partner_branch_id           NUMBER,
  topup_allocation            NUMBER,
  agent_branch_id             VARCHAR2(20),
  projection_tag              VARCHAR2(1),
  no_of_persons               NUMBER,
  mode_loading_contribution   NUMBER,
  annual_loading_contribution NUMBER,
  decision_code               VARCHAR2(50),
  revised_from_proposal       VARCHAR2(1),
  cancel_tag                  VARCHAR2(1),
  contribution_rate           NUMBER,
  occupational_industry       VARCHAR2(100),
  occupation                  VARCHAR2(100),
  proposal_entry_date         DATE,
  basic_cont_ann_before_fee   NUMBER,
  basic_cont_mod_before_fee   NUMBER,
  policy_fee                  NUMBER,
  smoker_tag                  VARCHAR2(1),
  daily_amount                NUMBER,
  email_address               VARCHAR2(100),
  clone_tag                   VARCHAR2(1)
)
;
alter table TK_ILLUSTRATIONHD_POS
  add constraint PK_ILLHD_POS primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT);
alter table TK_ILLUSTRATIONHD_POS
  add constraint FK_CHANNEL_ILLHD foreign key (ORG_ID, CHANNEL_ID)
  references AM_DISTRIBUTION_CHANNEL_T (ORG_ID, CHANNEL_ID);
alter table TK_ILLUSTRATIONHD_POS
  add constraint FK_CHANNEL_MODEL_ILLHD foreign key (ORG_ID, CHANNEL_ID, MODEL_ID)
  references AM_CHANNEL_MODEL_T (ORG_ID, CHANNEL_ID, MODEL_ID);
alter table TK_ILLUSTRATIONHD_POS
  add constraint FK_ILL_AGENT foreign key (ORG_ID, AGENT_ID)
  references AM_AGENT_T (ORG_ID, AGENT_ID);
alter table TK_ILLUSTRATIONHD_POS
  add constraint FK_ILL_AGENT_PARTNER foreign key (ORG_ID, AGENT_ID, PARTNER_ID)
  references AM_AGENT_PARTNER_T (ORG_ID, AGENT_ID, PARTNER_ID);
alter table TK_ILLUSTRATIONHD_POS
  add constraint PK_ILLHD_PRODUCT foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table IL_POS_MED_DTL_T
prompt ===============================
prompt
create table IL_POS_MED_DTL_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  document_no       VARCHAR2(10) not null,
  document_year     NUMBER not null,
  application_id    NUMBER not null,
  issue_count       NUMBER not null,
  item_no           NUMBER not null,
  uw_code           NUMBER not null,
  uw_status         VARCHAR2(5),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  file_attached     VARCHAR2(200),
  remarks           VARCHAR2(500),
  completion_date   DATE,
  display_order     NUMBER,
  service_provider  VARCHAR2(10),
  requirement_notes VARCHAR2(500),
  serial_no         NUMBER not null,
  req_type_code     VARCHAR2(10)
)
;
alter table IL_POS_MED_DTL_T
  add constraint PK_IL_POS_MED_DTL primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, ITEM_NO, UW_CODE, SERIAL_NO);
alter table IL_POS_MED_DTL_T
  add constraint FK_ILL_POS_DOC_MED_HEADER foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT)
  references TK_ILLUSTRATIONHD_POS (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT);
alter table IL_POS_MED_DTL_T
  add constraint FK_IL_POS_MED_REQ foreign key (ORG_ID, UW_CODE)
  references GLAS_UNDWT_REQ_SETUP_T (ORG_ID, REQ_CODE);

prompt
prompt Creating table IL_PRC_DATA
prompt ==========================
prompt
create table IL_PRC_DATA
(
  master_ref_no      VARCHAR2(150),
  basic_contribution NUMBER,
  currency_code      VARCHAR2(120),
  customer_acc_no    VARCHAR2(120),
  partner_acc_no     VARCHAR2(120),
  issue_date         VARCHAR2(100),
  created_by         VARCHAR2(150),
  creation_date      DATE,
  status             VARCHAR2(80),
  org_id             NUMBER,
  serial_no          NUMBER,
  partner_id         NUMBER
)
;

prompt
prompt Creating table IL_PROCESS_REASON_SETUP_T
prompt ========================================
prompt
create table IL_PROCESS_REASON_SETUP_T
(
  org_id           NUMBER not null,
  reason_code      NUMBER not null,
  description      VARCHAR2(300),
  long_description VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_PROCESS_REASON_SETUP_T
  add constraint PK_PROCESS_REASON_SETUP primary key (ORG_ID, REASON_CODE);

prompt
prompt Creating table IL_PROCESS_REQUEST_SETUP_T
prompt =========================================
prompt
create table IL_PROCESS_REQUEST_SETUP_T
(
  org_id           NUMBER not null,
  request_code     NUMBER not null,
  description      VARCHAR2(300),
  long_description VARCHAR2(1000),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  include_subject  VARCHAR2(1)
)
;
alter table IL_PROCESS_REQUEST_SETUP_T
  add constraint PK_PROCESS_REQUEST_SETUP primary key (ORG_ID, REQUEST_CODE);

prompt
prompt Creating table IL_PRODUCTION_COMM_PROCESS_T
prompt ===========================================
prompt
create table IL_PRODUCTION_COMM_PROCESS_T
(
  org_id             NUMBER not null,
  process_id         NUMBER not null,
  process_date_from  DATE,
  process_date_to    DATE,
  partner_id         NUMBER,
  channel_id         NUMBER,
  model_id           NUMBER,
  level_id           NUMBER,
  agent_id           NUMBER,
  master_ref_no      VARCHAR2(50),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  lock_flag          VARCHAR2(5),
  locked_date        DATE,
  locked_by          VARCHAR2(150),
  post_flag          VARCHAR2(5),
  posted_date        DATE,
  posted_by          VARCHAR2(150),
  sub_product_code   NUMBER,
  persistency_type   VARCHAR2(1),
  production_type    VARCHAR2(2),
  production_partner VARCHAR2(500),
  multi_sub_product  VARCHAR2(200),
  multi_channels     VARCHAR2(200),
  multi_models       VARCHAR2(200)
)
;
alter table IL_PRODUCTION_COMM_PROCESS_T
  add constraint PK_IL_PRODUC_COMM_PROCESS_T primary key (ORG_ID, PROCESS_ID);

prompt
prompt Creating table IL_PRODUCT_CATEGORIES_MAP_T
prompt ==========================================
prompt
create table IL_PRODUCT_CATEGORIES_MAP_T
(
  org_id            NUMBER,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  category_code     NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  product_id        NUMBER
)
;

prompt
prompt Creating table IL_PROD_COMM_PROCESS_DTL_T
prompt =========================================
prompt
create table IL_PROD_COMM_PROCESS_DTL_T
(
  org_id                NUMBER not null,
  branch_id             NUMBER not null,
  main_product_code     NUMBER not null,
  sub_product_code      NUMBER not null,
  takaful_type          VARCHAR2(1) not null,
  document_type         VARCHAR2(1) not null,
  document_no           VARCHAR2(10) not null,
  record_type           VARCHAR2(1) not null,
  document_year         VARCHAR2(10) not null,
  issue_count           NUMBER not null,
  endorsement_no        NUMBER not null,
  application_id        NUMBER not null,
  allocation_id         NUMBER not null,
  sub_serial_no         NUMBER not null,
  serial_no             NUMBER not null,
  channel_id            NUMBER,
  model_id              NUMBER,
  partner_id            NUMBER,
  designation_id        NUMBER,
  designation_level     NUMBER,
  commission_rate       NUMBER,
  transaction_date      DATE,
  created_by            VARCHAR2(50),
  creation_date         DATE,
  month_no              NUMBER,
  allocation_type       NUMBER not null,
  transaction_type      NUMBER,
  commission_amount     NUMBER,
  agent_id              NUMBER,
  commission_rate_topup NUMBER,
  agency_type           VARCHAR2(1),
  reversal_tag          VARCHAR2(1),
  sub_serial_no_rev     NUMBER,
  policy_term           NUMBER,
  pk_serial_no          NUMBER not null,
  charge_serial_no      NUMBER,
  rider_code            NUMBER,
  commission_nature     VARCHAR2(1),
  jump_tag              VARCHAR2(1),
  deferred_tag          VARCHAR2(1),
  master_ref_no         VARCHAR2(100),
  contribution_paid_amt NUMBER,
  process_id            NUMBER not null,
  installment_no        NUMBER,
  bus_credit            NUMBER,
  doc_reference_no      VARCHAR2(100)
)
;
alter table IL_PROD_COMM_PROCESS_DTL_T
  add constraint PK_IL_PROD_COMM_PROCESS_DTL_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALLOCATION_TYPE, ALLOCATION_ID, SUB_SERIAL_NO, SERIAL_NO, PK_SERIAL_NO, PROCESS_ID);

prompt
prompt Creating table IL_PROF_INCOME_SOURCE_T
prompt ======================================
prompt
create table IL_PROF_INCOME_SOURCE_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  client_code       NUMBER not null,
  info_id           NUMBER not null,
  serial_no         NUMBER not null,
  income_source_id  NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_PROF_INCOME_SOURCE_T
  add constraint PK_IL_PROF_INC_SRC_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, INFO_ID, SERIAL_NO);

prompt
prompt Creating table IL_PR_HEADER_T
prompt =============================
prompt
create table IL_PR_HEADER_T
(
  receipt_no        NUMBER not null,
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  sl_type           VARCHAR2(50),
  sl_code           VARCHAR2(50),
  knockoff_date     DATE,
  from_date         DATE,
  to_date           DATE,
  filter            VARCHAR2(20),
  bank_code         VARCHAR2(50),
  branch_code       VARCHAR2(50),
  bank_account      VARCHAR2(50),
  instrument_type   VARCHAR2(50),
  instrument_number VARCHAR2(50),
  instrument_date   DATE,
  lock_check        NVARCHAR2(20),
  instrument_amount NUMBER,
  clearence_check   VARCHAR2(20),
  clearence_date    DATE,
  voucher_type      VARCHAR2(50),
  status            VARCHAR2(20),
  reason            VARCHAR2(50),
  comments          VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  drawn_on          VARCHAR2(200),
  clear_by          NVARCHAR2(20),
  lock_date         DATE,
  lock_by           VARCHAR2(20),
  policy            VARCHAR2(50),
  drawn_on_bank     VARCHAR2(50),
  original_tag      VARCHAR2(10),
  pr_original_tag   VARCHAR2(10),
  remarks           VARCHAR2(500),
  pr_year           VARCHAR2(10) not null,
  pr_month          VARCHAR2(2) not null,
  pr_ref_no         VARCHAR2(30),
  partner_id        NUMBER,
  partner_branch_id NUMBER,
  pr_type           VARCHAR2(1),
  bank_account_code VARCHAR2(50),
  application_id    NUMBER not null
)
;
alter table IL_PR_HEADER_T
  add constraint IL_PR_HEADER_T_PK primary key (ORG_ID, BRANCH_ID, APPLICATION_ID, PR_YEAR, PR_MONTH, RECEIPT_NO);

prompt
prompt Creating table IL_PR_DETAIL_T
prompt =============================
prompt
create table IL_PR_DETAIL_T
(
  s_no                  NUMBER not null,
  org_id                NUMBER not null,
  branch_id             NUMBER not null,
  receipt_no            NUMBER not null,
  document_no           VARCHAR2(50),
  document_type         VARCHAR2(10),
  issue_count           NUMBER,
  endorsement_no        NUMBER,
  gdh_doc_reference_no  VARCHAR2(50),
  gdh_gross_premium     NUMBER,
  master_ref_no         VARCHAR2(50),
  advance_amount        NUMBER,
  received_amount       NUMBER,
  received_amount_adhoc NUMBER,
  advance_amount_adhoc  NUMBER,
  due_date              DATE,
  pr_year               VARCHAR2(10) not null,
  pr_month              VARCHAR2(2) not null,
  gdh_doc_ref_no_key    VARCHAR2(150),
  application_id        NUMBER not null
)
;
alter table IL_PR_DETAIL_T
  add constraint IL_PR_DETAIL_T_PK primary key (ORG_ID, BRANCH_ID, APPLICATION_ID, PR_YEAR, PR_MONTH, RECEIPT_NO, S_NO);
alter table IL_PR_DETAIL_T
  add constraint IL_PR_DETAIL_T_FK foreign key (ORG_ID, BRANCH_ID, APPLICATION_ID, PR_YEAR, PR_MONTH, RECEIPT_NO)
  references IL_PR_HEADER_T (ORG_ID, BRANCH_ID, APPLICATION_ID, PR_YEAR, PR_MONTH, RECEIPT_NO);

prompt
prompt Creating table IL_PR_UPLOAD_LOG_T
prompt =================================
prompt
create table IL_PR_UPLOAD_LOG_T
(
  org_id            NUMBER not null,
  record_id         NUMBER not null,
  pr_date           DATE,
  policy_no         VARCHAR2(200),
  drawn_bank        VARCHAR2(200),
  drawn_branch      VARCHAR2(200),
  instrument_date   DATE,
  instrument_number VARCHAR2(50),
  instrument_type   VARCHAR2(10),
  bank_account      VARCHAR2(100),
  regular_amount    NUMBER,
  topup_amount      NUMBER,
  remarks           VARCHAR2(500),
  clear_tag         VARCHAR2(1),
  clear_comments    VARCHAR2(500),
  error_message     VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_PR_UPLOAD_LOG_T
  add constraint PK_IL_PR_UPLOAD_LOG_T primary key (ORG_ID, RECORD_ID);

prompt
prompt Creating table IL_PR_UPLOAD_T
prompt =============================
prompt
create table IL_PR_UPLOAD_T
(
  org_id            NUMBER not null,
  record_id         NUMBER not null,
  pr_date           DATE,
  policy_no         VARCHAR2(200),
  drawn_bank        VARCHAR2(200),
  drawn_branch      VARCHAR2(200),
  instrument_date   DATE,
  instrument_number VARCHAR2(50),
  instrument_type   VARCHAR2(10),
  bank_account      VARCHAR2(100),
  regular_amount    NUMBER,
  topup_amount      NUMBER,
  remarks           VARCHAR2(500),
  clear_tag         VARCHAR2(1),
  clear_comments    VARCHAR2(500),
  error_message     VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_PR_UPLOAD_T
  add constraint PK_IL_PR_UPLOAD_T primary key (ORG_ID, RECORD_ID);

prompt
prompt Creating table IL_RATING_CLASS_SETUP_T
prompt ======================================
prompt
create table IL_RATING_CLASS_SETUP_T
(
  org_id            NUMBER not null,
  rating_class_code NUMBER not null,
  rating_class_desc VARCHAR2(50),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  em_type           VARCHAR2(2)
)
;
alter table IL_RATING_CLASS_SETUP_T
  add constraint PK_RATING_CLASS primary key (ORG_ID, RATING_CLASS_CODE);
alter table IL_RATING_CLASS_SETUP_T
  add constraint FK_RT_CLASS_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table IL_RATING_TABLE_HD_T
prompt ===================================
prompt
create table IL_RATING_TABLE_HD_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  hd_rate_id        NUMBER not null,
  rate_description  VARCHAR2(250),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  is_term           VARCHAR2(1),
  is_age            VARCHAR2(1),
  is_year           VARCHAR2(1),
  slab_basis        VARCHAR2(10),
  is_gender         VARCHAR2(1),
  is_smoker         VARCHAR2(1),
  is_payment_term   VARCHAR2(1),
  benefit_code      NUMBER
)
;
alter table IL_RATING_TABLE_HD_T
  add constraint IL_RATING_TABLE_HD_T_PK primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_RATE_ID);

prompt
prompt Creating table IL_RATING_TABLE_BANDS_T
prompt ======================================
prompt
create table IL_RATING_TABLE_BANDS_T
(
  org_id            NUMBER,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  hd_rate_id        NUMBER,
  hd_rate_band_id   NUMBER,
  val_from          NUMBER,
  val_to            NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  bands_description VARCHAR2(500),
  benefit_code      NUMBER not null,
  effective_from    DATE,
  effective_to      DATE
)
;
alter table IL_RATING_TABLE_BANDS_T
  add constraint IL_RATING_TABLE_BANDS_T_FK01 foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_RATE_ID)
  references IL_RATING_TABLE_HD_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_RATE_ID);

prompt
prompt Creating table IL_RATING_TABLE_DETAIL_T
prompt =======================================
prompt
create table IL_RATING_TABLE_DETAIL_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  hd_rate_id        NUMBER not null,
  hd_rate_band_id   NUMBER not null,
  dtl_rate_id       NUMBER not null,
  age               NUMBER,
  term              NUMBER,
  rate              NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  policy_year       NUMBER,
  benefit_code      NUMBER,
  em_rate           NUMBER,
  ri_rate           NUMBER,
  ri_em_rate        NUMBER,
  payment_term      NUMBER,
  gender            VARCHAR2(1),
  smoker            VARCHAR2(1)
)
;
alter table IL_RATING_TABLE_DETAIL_T
  add constraint IL_RATING_TABLE_DETAIL_T_PK primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_RATE_ID, HD_RATE_BAND_ID, DTL_RATE_ID);

prompt
prompt Creating table IL_RATING_TABLE_TYPES_SETUP_T
prompt ============================================
prompt
create table IL_RATING_TABLE_TYPES_SETUP_T
(
  org_id                NUMBER not null,
  rate_type_id          NUMBER not null,
  rate_type_description VARCHAR2(250),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE
)
;
alter table IL_RATING_TABLE_TYPES_SETUP_T
  add primary key (ORG_ID, RATE_TYPE_ID);

prompt
prompt Creating table IL_RPT_BUNDLE_T
prompt ==============================
prompt
create table IL_RPT_BUNDLE_T
(
  org_id           NUMBER not null,
  app_id           NUMBER not null,
  report_id        NUMBER not null,
  active_tag       VARCHAR2(1),
  creation_date    DATE,
  created_by       VARCHAR2(150),
  last_update_date DATE,
  last_updated_by  VARCHAR2(150),
  bundle_id        NUMBER not null
)
;
alter table IL_RPT_BUNDLE_T
  add constraint PK_IL_RPT_BUNDLE primary key (ORG_ID, APP_ID, REPORT_ID, BUNDLE_ID);
alter table IL_RPT_BUNDLE_T
  add constraint FK_IL_RPT_BUNDLE_BUNDLE_SETUP foreign key (ORG_ID, APP_ID, BUNDLE_ID)
  references BUNDLE_SETUP_T (ORG_ID, APP_ID, BUNDLE_ID);

prompt
prompt Creating table IL_SETTLEMENT_USER_MAPPING_T
prompt ===========================================
prompt
create table IL_SETTLEMENT_USER_MAPPING_T
(
  org_id           NUMBER not null,
  type_code        NUMBER not null,
  serial_code      NUMBER not null,
  userid           NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_SETTLEMENT_USER_MAPPING_T
  add constraint PK_IL_SETT_USER_MAPP_T primary key (ORG_ID, TYPE_CODE, USERID, SERIAL_CODE);

prompt
prompt Creating table IL_SUB_PRODUCT_CONTR_INDEX_T
prompt ===========================================
prompt
create table IL_SUB_PRODUCT_CONTR_INDEX_T
(
  org_id               NUMBER not null,
  main_product_code    NUMBER not null,
  sub_product_code     NUMBER not null,
  contribution_rate_id NUMBER not null,
  index_rate_desc      VARCHAR2(50),
  index_rate           NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table IL_SUB_PRODUCT_CONTR_INDEX_T
  add constraint PK_SUB_PR_CONTR_IND primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, CONTRIBUTION_RATE_ID);
alter table IL_SUB_PRODUCT_CONTR_INDEX_T
  add constraint FK_SUB_PR_SUB_PR_CONTR_IND foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table IL_SUB_PRODUCT_CTRY_LOADING_T
prompt ============================================
prompt
create table IL_SUB_PRODUCT_CTRY_LOADING_T
(
  org_id             NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  serial_no          NUMBER not null,
  loading_percent    NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  loading_ri_percent NUMBER
)
;
alter table IL_SUB_PRODUCT_CTRY_LOADING_T
  add constraint PK_SUB_PR_CTRY_LOAD primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, SERIAL_NO);
alter table IL_SUB_PRODUCT_CTRY_LOADING_T
  add constraint FK_SUB_PR_SUB_PR_CTRY_LOAD foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table IL_SUB_PRODUCT_OCL_LOADING_T
prompt ===========================================
prompt
create table IL_SUB_PRODUCT_OCL_LOADING_T
(
  org_id             NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  serial_no          NUMBER not null,
  loading_percent    NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  loading_ri_percent NUMBER
)
;
alter table IL_SUB_PRODUCT_OCL_LOADING_T
  add constraint PK_SUB_PR_OCL_LOAD primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, SERIAL_NO);
alter table IL_SUB_PRODUCT_OCL_LOADING_T
  add constraint FK_SUB_PR_SUB_PR_OCL_LOAD foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table IL_SUB_PRODUCT_RTC_LOADING_T
prompt ===========================================
prompt
create table IL_SUB_PRODUCT_RTC_LOADING_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  rating_class_code NUMBER not null,
  loading_percent   NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_SUB_PRODUCT_RTC_LOADING_T
  add constraint PK_SUB_PR_RTC_LOAD primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, RATING_CLASS_CODE);
alter table IL_SUB_PRODUCT_RTC_LOADING_T
  add constraint FK_SUB_PR_SUB_PR_RTC_LOAD foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);
alter table IL_SUB_PRODUCT_RTC_LOADING_T
  add constraint FK_SUB_PR_SUB_PR_RTC_RTC foreign key (ORG_ID, RATING_CLASS_CODE)
  references IL_RATING_CLASS_SETUP_T (ORG_ID, RATING_CLASS_CODE);

prompt
prompt Creating table IL_SUB_PRODUCT_SAT_INDEX_T
prompt =========================================
prompt
create table IL_SUB_PRODUCT_SAT_INDEX_T
(
  org_id             NUMBER not null,
  main_product_code  NUMBER not null,
  sub_product_code   NUMBER not null,
  sumassured_rate_id NUMBER not null,
  index_rate_desc    VARCHAR2(50),
  index_rate         NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table IL_SUB_PRODUCT_SAT_INDEX_T
  add constraint PK_SUB_PR_SAT_IND primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, SUMASSURED_RATE_ID);
alter table IL_SUB_PRODUCT_SAT_INDEX_T
  add constraint FK_SUB_PR_SUB_PR_SAT_IND foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table IL_SUB_PROD_COMM_SETUPHD_T
prompt =========================================
prompt
create table IL_SUB_PROD_COMM_SETUPHD_T
(
  org_id               NUMBER not null,
  main_product_code    NUMBER not null,
  sub_product_code     NUMBER not null,
  serial_no            NUMBER not null,
  channel_id           VARCHAR2(50) not null,
  model_id             VARCHAR2(50) not null,
  term_wise_tag        VARCHAR2(1),
  created_by           VARCHAR2(100),
  creation_date        DATE,
  last_updated_by      VARCHAR2(100),
  last_update_date     DATE,
  persistency_basis    VARCHAR2(1),
  header_id            NUMBER not null,
  effective_start_date DATE,
  effective_end_date   DATE
)
;
alter table IL_SUB_PROD_COMM_SETUPHD_T
  add constraint IL_SUB_PROD_COMM_SETUPHD_PK primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, CHANNEL_ID, MODEL_ID, HEADER_ID);

prompt
prompt Creating table IL_SUB_PROD_PTF_RATE_SETUP_T
prompt ===========================================
prompt
create table IL_SUB_PROD_PTF_RATE_SETUP_T
(
  org_id               NUMBER not null,
  main_product_code    NUMBER not null,
  sub_product_code     NUMBER not null,
  rate_id              NUMBER not null,
  rate                 NUMBER,
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(100),
  creation_date        DATE,
  last_updated_by      VARCHAR2(100),
  last_update_date     DATE
)
;
alter table IL_SUB_PROD_PTF_RATE_SETUP_T
  add constraint IL_SUB_PROD_PTF_PK primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, RATE_ID);

prompt
prompt Creating table IL_SUB_PROD_REQ_MAP_T
prompt ====================================
prompt
create table IL_SUB_PROD_REQ_MAP_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  hd_code           NUMBER not null,
  days_from         NUMBER,
  days_to           NUMBER not null,
  active            VARCHAR2(1),
  application_id    NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  display_order     NUMBER
)
;
alter table IL_SUB_PROD_REQ_MAP_T
  add constraint PK_IL_SUB_PROD_REQ primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE);
alter table IL_SUB_PROD_REQ_MAP_T
  add constraint FK_IL_SB_PROD_REQ_PROD foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE)
  references GLAS_SUB_PRODUCT_SETUP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE);

prompt
prompt Creating table IL_SUB_PROD_REQ_DTL_MAP_T
prompt ========================================
prompt
create table IL_SUB_PROD_REQ_DTL_MAP_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  hd_code           NUMBER not null,
  dtl_code          NUMBER not null,
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  uw_code           VARCHAR2(5),
  display_order     NUMBER
)
;
alter table IL_SUB_PROD_REQ_DTL_MAP_T
  add constraint PK_IL_SUB_PROD_REQ_DTL primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE, DTL_CODE);
alter table IL_SUB_PROD_REQ_DTL_MAP_T
  add constraint FK_IL_SUB_PROD_REQ_DTL_REQ foreign key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE)
  references IL_SUB_PROD_REQ_MAP_T (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, HD_CODE);

prompt
prompt Creating table IL_SV_TABLE_T
prompt ============================
prompt
create table IL_SV_TABLE_T
(
  org_id            NUMBER,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  rate_code         NUMBER,
  lx                NUMBER,
  dx                NUMBER,
  nx                NUMBER,
  cx                NUMBER,
  mx                NUMBER,
  sx                NUMBER,
  rx                NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;

prompt
prompt Creating table IL_TOPUP_SUSPENSE_T
prompt ==================================
prompt
create table IL_TOPUP_SUSPENSE_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  topup_amount      VARCHAR2(150),
  topup_date        DATE,
  allocation_tag    VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_TOPUP_SUSPENSE_T
  add constraint PK_IL_TOPUP_SUS_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);

prompt
prompt Creating table IL_TRANS_TYPE_MATRIX_MAP_T
prompt =========================================
prompt
create table IL_TRANS_TYPE_MATRIX_MAP_T
(
  org_id           NUMBER not null,
  transaction_type NUMBER not null,
  matrix_id        VARCHAR2(50) not null,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  execution_order  NUMBER,
  takaful_type     VARCHAR2(20),
  application_id   NUMBER,
  fund_wise_tag    VARCHAR2(1)
)
;
alter table IL_TRANS_TYPE_MATRIX_MAP_T
  add constraint PK_TRANS_TYPE_MATRIX primary key (ORG_ID, TRANSACTION_TYPE, MATRIX_ID);

prompt
prompt Creating table IL_TRANS_TYPE_STATUS_MAP_T
prompt =========================================
prompt
create table IL_TRANS_TYPE_STATUS_MAP_T
(
  org_id           NUMBER not null,
  status_code      NUMBER not null,
  type_code        NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table IL_TRANS_TYPE_STATUS_MAP_T
  add constraint PK_STATUS_CODE primary key (ORG_ID, STATUS_CODE, TYPE_CODE);
alter table IL_TRANS_TYPE_STATUS_MAP_T
  add constraint FK_IL_ALLOC_TRANS_TABLE foreign key (ORG_ID, TYPE_CODE)
  references IL_ALLOC_TRANS_TYPE_T (ORG_ID, TYPE_CODE);
alter table IL_TRANS_TYPE_STATUS_MAP_T
  add constraint FK_IL_DOC_STATUS_TABLE foreign key (ORG_ID, STATUS_CODE)
  references IL_DOC_STATUS_SETUP_T (ORG_ID, STATUS_CODE);

prompt
prompt Creating table IL_UNDWT_AUTH_MATRIXHD_T
prompt =======================================
prompt
create table IL_UNDWT_AUTH_MATRIXHD_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  username         VARCHAR2(50) not null,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  authority_type   VARCHAR2(1) not null,
  record_type      VARCHAR2(1)
)
;
alter table IL_UNDWT_AUTH_MATRIXHD_T
  add constraint PK_IL_UND_MTXHD1 primary key (ORG_ID, APPLICATION_ID, USERNAME, AUTHORITY_TYPE);
alter table IL_UNDWT_AUTH_MATRIXHD_T
  add constraint FK_IL_UND_MTXHD_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table IL_UNDWT_AUTH_MATRIXDTL_T
prompt ========================================
prompt
create table IL_UNDWT_AUTH_MATRIXDTL_T
(
  org_id               NUMBER not null,
  username             VARCHAR2(50) not null,
  serial_no            NUMBER not null,
  application_id       NUMBER not null,
  loading_type         VARCHAR2(10) not null,
  authority_limit      NUMBER,
  tsar                 NUMBER,
  active               VARCHAR2(1),
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  authority_type       VARCHAR2(1),
  score_from           NUMBER,
  score_to             NUMBER
)
;
alter table IL_UNDWT_AUTH_MATRIXDTL_T
  add constraint PK_IL_UND_MTX_DTL primary key (ORG_ID, APPLICATION_ID, USERNAME, SERIAL_NO, LOADING_TYPE);
alter table IL_UNDWT_AUTH_MATRIXDTL_T
  add constraint FK_IL_UND_MTX_DTL_MTX foreign key (ORG_ID, APPLICATION_ID, USERNAME, AUTHORITY_TYPE)
  references IL_UNDWT_AUTH_MATRIXHD_T (ORG_ID, APPLICATION_ID, USERNAME, AUTHORITY_TYPE);

prompt
prompt Creating table IL_UNDWT_AUTH_MATRIX_HIST_T
prompt ==========================================
prompt
create table IL_UNDWT_AUTH_MATRIX_HIST_T
(
  org_id               NUMBER not null,
  username             VARCHAR2(50) not null,
  serial_no            NUMBER not null,
  serial_no_hist       NUMBER not null,
  application_id       NUMBER not null,
  loading_type         VARCHAR2(10) not null,
  authority_limit      NUMBER,
  tsar                 NUMBER,
  active               VARCHAR2(1),
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table IL_UNDWT_AUTH_MATRIX_HIST_T
  add constraint PK_IL_UND_MATX_HIST primary key (ORG_ID, APPLICATION_ID, USERNAME, SERIAL_NO, LOADING_TYPE, SERIAL_NO_HIST);
alter table IL_UNDWT_AUTH_MATRIX_HIST_T
  add constraint FK_IL_UND_MATX_HIST_MATX foreign key (ORG_ID, APPLICATION_ID, USERNAME, SERIAL_NO, LOADING_TYPE)
  references IL_UNDWT_AUTH_MATRIXDTL_T (ORG_ID, APPLICATION_ID, USERNAME, SERIAL_NO, LOADING_TYPE);

prompt
prompt Creating table IL_UNDWT_PROCESS_TYPE_SETUP_T
prompt ============================================
prompt
create table IL_UNDWT_PROCESS_TYPE_SETUP_T
(
  org_id            NUMBER not null,
  process_type_id   NUMBER not null,
  process_type_desc VARCHAR2(50),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  cbc_tag           VARCHAR2(1)
)
;
alter table IL_UNDWT_PROCESS_TYPE_SETUP_T
  add constraint PK_UNDWT_PRROCESS_TYPE primary key (ORG_ID, PROCESS_TYPE_ID);

prompt
prompt Creating table IL_UNDWT_PROC_DECISION_MAP_T
prompt ===========================================
prompt
create table IL_UNDWT_PROC_DECISION_MAP_T
(
  org_id           NUMBER not null,
  process_type_id  NUMBER not null,
  decision_code    NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  active           VARCHAR2(1)
)
;
alter table IL_UNDWT_PROC_DECISION_MAP_T
  add constraint PK_UND_PROCS_DEC_MAP_T primary key (ORG_ID, PROCESS_TYPE_ID, DECISION_CODE);
alter table IL_UNDWT_PROC_DECISION_MAP_T
  add constraint FK_PROCS_DEC foreign key (ORG_ID, DECISION_CODE)
  references IL_DECISION_SETUP_T (ORG_ID, DECISION_CODE);
alter table IL_UNDWT_PROC_DECISION_MAP_T
  add constraint FK_PROCS_PROC foreign key (ORG_ID, PROCESS_TYPE_ID)
  references IL_UNDWT_PROCESS_TYPE_SETUP_T (ORG_ID, PROCESS_TYPE_ID);

prompt
prompt Creating table IL_UND_PROCESS_TYPE_QUESTION_T
prompt =============================================
prompt
create table IL_UND_PROCESS_TYPE_QUESTION_T
(
  org_id           NUMBER not null,
  process_type_id  NUMBER not null,
  question_id      NUMBER not null,
  question_type    VARCHAR2(20),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  display_order    NUMBER,
  active           VARCHAR2(1)
)
;
alter table IL_UND_PROCESS_TYPE_QUESTION_T
  add constraint PK_PROCESS_TYPE_QUE primary key (ORG_ID, PROCESS_TYPE_ID, QUESTION_ID);
alter table IL_UND_PROCESS_TYPE_QUESTION_T
  add constraint FK_PROCESS_TYPE_QUE_PT foreign key (ORG_ID, PROCESS_TYPE_ID)
  references IL_UNDWT_PROCESS_TYPE_SETUP_T (ORG_ID, PROCESS_TYPE_ID);

prompt
prompt Creating table IL_UWAUTHORITY_APPROVAL_HIST_T
prompt =============================================
prompt
create table IL_UWAUTHORITY_APPROVAL_HIST_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  supervisor_id     NUMBER,
  supr_action_taken VARCHAR2(10),
  remarks           VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table IL_UWAUTHORITY_APPROVAL_HIST_T
  add primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, SERIAL_NO);

prompt
prompt Creating table INDUSTRY_GROUP_T
prompt ===============================
prompt
create table INDUSTRY_GROUP_T
(
  org_id           NUMBER not null,
  group_code       VARCHAR2(50) not null,
  description      VARCHAR2(50),
  active           VARCHAR2(20),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table INDUSTRY_GROUP_T
  add constraint PK_INDUSTRY_TYPE_GROUP primary key (ORG_ID, GROUP_CODE);

prompt
prompt Creating table INDUSTRY_DETAIL_T
prompt ================================
prompt
create table INDUSTRY_DETAIL_T
(
  org_id             NUMBER not null,
  group_code         VARCHAR2(50) not null,
  detail_code        NUMBER not null,
  description        VARCHAR2(100),
  active             VARCHAR2(20),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  occupational_class VARCHAR2(100)
)
;
alter table INDUSTRY_DETAIL_T
  add constraint PK_INDUSTRY_DETAIL primary key (ORG_ID, GROUP_CODE, DETAIL_CODE);
alter table INDUSTRY_DETAIL_T
  add constraint FK_INDUSTRY_GROUP foreign key (ORG_ID, GROUP_CODE)
  references INDUSTRY_GROUP_T (ORG_ID, GROUP_CODE);

prompt
prompt Creating table INSURANCE_HISTORY_DETAIL_T
prompt =========================================
prompt
create table INSURANCE_HISTORY_DETAIL_T
(
  org_id                  NUMBER not null,
  branch_id               NUMBER not null,
  main_product_code       NUMBER not null,
  sub_product_code        NUMBER not null,
  takaful_type            VARCHAR2(1) not null,
  document_type           VARCHAR2(1) not null,
  document_no             VARCHAR2(10) not null,
  record_type             VARCHAR2(1) not null,
  document_year           VARCHAR2(10) not null,
  issue_count             NUMBER not null,
  endorsement_no          NUMBER not null,
  application_id          NUMBER not null,
  client_code             NUMBER not null,
  code                    NUMBER not null,
  ih_code                 NUMBER not null,
  company                 VARCHAR2(50),
  policy_or_proposal_no   VARCHAR2(50),
  issue_date              DATE,
  sum_assured             NUMBER,
  condition_of_acceptance VARCHAR2(200),
  status                  VARCHAR2(1),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  contribution            NUMBER,
  need_analysis_purpose   VARCHAR2(20)
)
;
alter table INSURANCE_HISTORY_DETAIL_T
  add constraint PK_INSURANCE_HISTORY_DETAIL_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, CODE, IH_CODE);

prompt
prompt Creating table INSURANCE_HISTORY_T
prompt ==================================
prompt
create table INSURANCE_HISTORY_T
(
  org_id                     NUMBER not null,
  branch_id                  NUMBER not null,
  main_product_code          NUMBER not null,
  sub_product_code           NUMBER not null,
  takaful_type               VARCHAR2(1) not null,
  document_type              VARCHAR2(1) not null,
  document_no                VARCHAR2(10) not null,
  record_type                VARCHAR2(1) not null,
  document_year              VARCHAR2(10) not null,
  issue_count                NUMBER not null,
  endorsement_no             NUMBER not null,
  application_id             NUMBER not null,
  client_code                NUMBER not null,
  code                       NUMBER not null,
  question_1_status          VARCHAR2(1),
  question_medical_undergo   VARCHAR2(1),
  question_statndard         VARCHAR2(1),
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE,
  question_insurance_renewal VARCHAR2(1)
)
;
alter table INSURANCE_HISTORY_T
  add constraint PK_INSURANCE_HISTORY_T primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, CLIENT_CODE, CODE);

prompt
prompt Creating table INSURANCE_NEEDS_T
prompt ================================
prompt
create table INSURANCE_NEEDS_T
(
  org_id            NUMBER not null,
  insurance_need_id NUMBER not null,
  description       VARCHAR2(200),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  other_lang_desc   NVARCHAR2(500)
)
;
alter table INSURANCE_NEEDS_T
  add constraint PK_INSURANCE_NEEDS_T primary key (ORG_ID, INSURANCE_NEED_ID);

prompt
prompt Creating table INSURED_BENEFICARY_INFO_T
prompt ========================================
prompt
create table INSURED_BENEFICARY_INFO_T
(
  org_id                  NUMBER not null,
  policy_number           VARCHAR2(30) not null,
  insured_beneficary_code NUMBER not null,
  name                    VARCHAR2(250),
  relation                VARCHAR2(3),
  percentage              NUMBER,
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  branch_id               NUMBER not null
)
;
alter table INSURED_BENEFICARY_INFO_T
  add constraint PK_INSURED_BENEFICARY_T primary key (ORG_ID, BRANCH_ID, POLICY_NUMBER, INSURED_BENEFICARY_CODE);

prompt
prompt Creating table INV_BONUSRIGHT_CERTIFICATE_T
prompt ===========================================
prompt
create table INV_BONUSRIGHT_CERTIFICATE_T
(
  org_id                 NUMBER not null,
  application_id         NUMBER not null,
  company_code           NUMBER,
  document_no            NUMBER not null,
  bonus_right_year       DATE,
  certificate_type       VARCHAR2(1),
  certificate_received   VARCHAR2(1),
  issue_no               VARCHAR2(1),
  book_closing_date_from DATE,
  total_holding          NUMBER,
  face_value             NUMBER,
  received_date          DATE,
  document_ref_no        VARCHAR2(100),
  rate_in                NUMBER,
  certificate_quantity   NUMBER,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table INV_BONUSRIGHT_CERTIFICATE_T
  add primary key (DOCUMENT_NO, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_SHAREISSUING_SETUP_T
prompt =======================================
prompt
create table INV_SHAREISSUING_SETUP_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  company_code     NUMBER not null,
  company_name     VARCHAR2(500),
  symbol           VARCHAR2(50),
  country_code     VARCHAR2(100),
  state_code       VARCHAR2(100),
  city_code        VARCHAR2(100),
  groups           NUMBER,
  listed_unlisted  VARCHAR2(1),
  sector           NUMBER,
  marketable_lot   NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  isin             VARCHAR2(50)
)
;
alter table INV_SHAREISSUING_SETUP_T
  add primary key (COMPANY_CODE, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_BONUS_DECLARATION_T
prompt ======================================
prompt
create table INV_BONUS_DECLARATION_T
(
  org_id                 NUMBER not null,
  application_id         NUMBER not null,
  company_code           NUMBER,
  serial_no              NUMBER not null,
  declaration_date       DATE,
  book_closing_date_from DATE,
  book_closing_date_to   DATE,
  certificate_type       VARCHAR2(1),
  final_interim          VARCHAR2(1),
  issue_basis_percentage NUMBER,
  value_per_share        NUMBER,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table INV_BONUS_DECLARATION_T
  add primary key (SERIAL_NO, ORG_ID, APPLICATION_ID);
alter table INV_BONUS_DECLARATION_T
  add foreign key (COMPANY_CODE, ORG_ID, APPLICATION_ID)
  references INV_SHAREISSUING_SETUP_T (COMPANY_CODE, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_DISTINCTIVE_CER_NUM_T
prompt ========================================
prompt
create table INV_DISTINCTIVE_CER_NUM_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  serial_no        NUMBER not null,
  company_code     NUMBER,
  custodian        VARCHAR2(50),
  certificate_type VARCHAR2(50),
  issue_no         VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table INV_DISTINCTIVE_CER_NUM_T
  add primary key (SERIAL_NO, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_DIVIDED_DECLARATION_T
prompt ========================================
prompt
create table INV_DIVIDED_DECLARATION_T
(
  org_id                 NUMBER not null,
  application_id         NUMBER not null,
  company_code           NUMBER,
  serial_no              NUMBER not null,
  declaration_date       DATE,
  book_closing_date_from DATE,
  book_closing_date_to   DATE,
  final_interim          VARCHAR2(1),
  issue_basis_percentage NUMBER,
  amount_per_share       NUMBER,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table INV_DIVIDED_DECLARATION_T
  add primary key (SERIAL_NO, ORG_ID, APPLICATION_ID);
alter table INV_DIVIDED_DECLARATION_T
  add foreign key (COMPANY_CODE, ORG_ID, APPLICATION_ID)
  references INV_SHAREISSUING_SETUP_T (COMPANY_CODE, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_DIVIDEND_RECEIPT_T
prompt =====================================
prompt
create table INV_DIVIDEND_RECEIPT_T
(
  org_id                     NUMBER not null,
  application_id             NUMBER not null,
  company_code               NUMBER,
  document_no                NUMBER not null,
  certificate_type           VARCHAR2(1),
  issue_no                   VARCHAR2(1),
  book_closing_date_from     DATE,
  total_holding              NUMBER,
  face_value                 NUMBER,
  dividend_date              DATE,
  document_ref_no            VARCHAR2(100),
  rate_in                    NUMBER,
  rate_per_share_certificate NUMBER,
  gross_divident             NUMBER,
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE
)
;
alter table INV_DIVIDEND_RECEIPT_T
  add primary key (DOCUMENT_NO, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_INV_OPENING_BALANCES_T
prompt =========================================
prompt
create table INV_INV_OPENING_BALANCES_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  serial_no        NUMBER not null,
  custodian_code   NUMBER,
  certificate_type VARCHAR2(50),
  issue_no         VARCHAR2(50),
  quantity         NUMBER,
  amount           NUMBER,
  closing_quantity NUMBER,
  closing_amount   NUMBER,
  closing_rate     NUMBER,
  pledge_quantity  NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table INV_INV_OPENING_BALANCES_T
  add primary key (SERIAL_NO, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_ORDERENTRY_SETUP_T
prompt =====================================
prompt
create table INV_ORDERENTRY_SETUP_T
(
  org_id            NUMBER not null,
  application_id    NUMBER not null,
  order_no          NUMBER not null,
  order_date        DATE,
  transaction_type  VARCHAR2(1),
  order_for_the_day VARCHAR2(1),
  trade_type        VARCHAR2(50),
  company_name      VARCHAR2(100),
  investment_type   VARCHAR2(50),
  broker            VARCHAR2(100),
  certificate_type  VARCHAR2(50),
  issue_no          VARCHAR2(50),
  face_value        NUMBER,
  marketable_lot    VARCHAR2(1),
  rate_limit        NUMBER,
  order_cancel      VARCHAR2(1),
  quantity          NUMBER,
  remarks           VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  price             NUMBER
)
;
alter table INV_ORDERENTRY_SETUP_T
  add primary key (ORDER_NO, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_ORDEREXECUTION_SETUP_T
prompt =========================================
prompt
create table INV_ORDEREXECUTION_SETUP_T
(
  org_id            NUMBER not null,
  application_id    NUMBER not null,
  order_no          NUMBER not null,
  order_date        DATE,
  transaction_type  VARCHAR2(50),
  company_code      NUMBER,
  broker            VARCHAR2(100),
  investment_type   VARCHAR2(50),
  face_value        NUMBER,
  issue_price       NUMBER,
  certificate_type  VARCHAR2(50),
  quantity_ordered  NUMBER,
  issue_no          NUMBER,
  rate_limit        NUMBER,
  issue_value       NUMBER,
  quantity_executed NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table INV_ORDEREXECUTION_SETUP_T
  add primary key (ORDER_NO, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_PLEDGEENTRY_HEADER_T
prompt =======================================
prompt
create table INV_PLEDGEENTRY_HEADER_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  pledge_no        NUMBER not null,
  transaction_date DATE,
  revision         VARCHAR2(1),
  loan_agreed      NUMBER,
  loan_drawn       NUMBER,
  institution_name VARCHAR2(100),
  nature           VARCHAR2(10),
  markup_rate      NUMBER,
  markup_amount    NUMBER,
  effective_date   DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table INV_PLEDGEENTRY_HEADER_T
  add primary key (PLEDGE_NO, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_PLEDGEENTRY_DETAIL_T
prompt =======================================
prompt
create table INV_PLEDGEENTRY_DETAIL_T
(
  org_id               NUMBER not null,
  application_id       NUMBER not null,
  pledge_no            NUMBER not null,
  serial_no            NUMBER not null,
  company_code         NUMBER,
  custodian            NUMBER,
  certificate_type     VARCHAR2(50),
  issue_no             VARCHAR2(50),
  certificate_quantity NUMBER,
  pledge_quantity      NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table INV_PLEDGEENTRY_DETAIL_T
  add primary key (SERIAL_NO, PLEDGE_NO, ORG_ID, APPLICATION_ID);
alter table INV_PLEDGEENTRY_DETAIL_T
  add foreign key (COMPANY_CODE, ORG_ID, APPLICATION_ID)
  references INV_PLEDGEENTRY_HEADER_T (PLEDGE_NO, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_SHAREISSUINGADDRESS_T
prompt ========================================
prompt
create table INV_SHAREISSUINGADDRESS_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  company_code     NUMBER,
  serial_no        NUMBER not null,
  address          VARCHAR2(500),
  address_type     VARCHAR2(1),
  country_code     VARCHAR2(100),
  state_code       VARCHAR2(100),
  city_code        VARCHAR2(100),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table INV_SHAREISSUINGADDRESS_T
  add primary key (SERIAL_NO, ORG_ID, APPLICATION_ID);
alter table INV_SHAREISSUINGADDRESS_T
  add foreign key (COMPANY_CODE, ORG_ID, APPLICATION_ID)
  references INV_SHAREISSUING_SETUP_T (COMPANY_CODE, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_SHAREISSUINGYEARLYINFO_T
prompt ===========================================
prompt
create table INV_SHAREISSUINGYEARLYINFO_T
(
  org_id               NUMBER not null,
  application_id       NUMBER not null,
  company_code         NUMBER,
  serial_no            NUMBER not null,
  financial_year_from  DATE,
  financial_year_to    DATE,
  authorized_capital   NUMBER,
  no_of_share          NUMBER,
  issuing_price        NUMBER,
  face_value           NUMBER,
  paid_up_capital      NUMBER,
  share_issued         NUMBER,
  reserves             NUMBER,
  break_up_value_share NUMBER,
  assets               NUMBER,
  liabilities          NUMBER,
  net_profit           NUMBER,
  earning_per_share    NUMBER,
  no_of_directors      NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table INV_SHAREISSUINGYEARLYINFO_T
  add primary key (SERIAL_NO, ORG_ID, APPLICATION_ID);
alter table INV_SHAREISSUINGYEARLYINFO_T
  add foreign key (COMPANY_CODE, ORG_ID, APPLICATION_ID)
  references INV_SHAREISSUING_SETUP_T (COMPANY_CODE, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_TFCENTRY_T
prompt =============================
prompt
create table INV_TFCENTRY_T
(
  org_id                  NUMBER not null,
  application_id          NUMBER not null,
  transaction_no          NUMBER not null,
  company_code            NUMBER,
  issue_date              DATE,
  face_value              NUMBER,
  quantity                NUMBER,
  total_amount            NUMBER,
  purchase_date           DATE,
  carrying_purchase_price NUMBER,
  tenure                  NUMBER,
  maturity_date           DATE,
  interest_type           VARCHAR2(10),
  floating_rate_type      VARCHAR2(10),
  interest_rate           NUMBER,
  flat_rate               NUMBER,
  interest_frequency      VARCHAR2(10),
  principal_redemption    VARCHAR2(1),
  redemption_frequency    VARCHAR2(1),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE
)
;
alter table INV_TFCENTRY_T
  add primary key (TRANSACTION_NO, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table INV_TFCPAYMENT_SCHEDULE_T
prompt ========================================
prompt
create table INV_TFCPAYMENT_SCHEDULE_T
(
  org_id               NUMBER not null,
  application_id       NUMBER not null,
  transaction_no       NUMBER not null,
  install_no           NUMBER not null,
  from_date            DATE,
  due_date             DATE,
  total_amount         NUMBER,
  principal_redemption NUMBER,
  rate                 NUMBER,
  interest_markup      NUMBER,
  withholding_tax      NUMBER,
  gross_premium        NUMBER,
  zakat                NUMBER,
  posted               VARCHAR2(1),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table INV_TFCPAYMENT_SCHEDULE_T
  add primary key (INSTALL_NO, ORG_ID, APPLICATION_ID, TRANSACTION_NO);
alter table INV_TFCPAYMENT_SCHEDULE_T
  add foreign key (TRANSACTION_NO, ORG_ID, APPLICATION_ID)
  references INV_TFCENTRY_T (TRANSACTION_NO, ORG_ID, APPLICATION_ID);

prompt
prompt Creating table KNOCKOFF_ADJUSTMENT
prompt ==================================
prompt
create table KNOCKOFF_ADJUSTMENT
(
  org_id               NUMBER not null,
  sr_no                NUMBER not null,
  branch_id            NUMBER not null,
  cost_center_code     VARCHAR2(20),
  coa_code             VARCHAR2(50),
  debit_base_curr      NUMBER,
  credit_base_curr     NUMBER,
  currency_code        VARCHAR2(50),
  exchange_rate        NUMBER,
  debit_foreign_curr   NUMBER,
  credit_foreign_curr  NUMBER,
  instrument_narration VARCHAR2(1000),
  knockoff_id          NUMBER,
  policy_year          VARCHAR2(300),
  policy_no            VARCHAR2(300),
  endorsement_no       VARCHAR2(300),
  claim_no             VARCHAR2(300),
  bu                   VARCHAR2(300),
  lob                  VARCHAR2(300),
  location             VARCHAR2(300),
  employee             VARCHAR2(300),
  channel              VARCHAR2(300),
  agent                VARCHAR2(300),
  ref_sr_no            NUMBER
)
;
alter table KNOCKOFF_ADJUSTMENT
  add constraint KNOCKOFF_ADJUSTMENT_PK primary key (ORG_ID, SR_NO, BRANCH_ID);

prompt
prompt Creating table KNOCKOFF_BANK_DETAILS
prompt ====================================
prompt
create table KNOCKOFF_BANK_DETAILS
(
  org_id               NUMBER not null,
  branch_id            NUMBER not null,
  ko_sr_no             NUMBER not null,
  bank_code            VARCHAR2(50),
  branch_code          VARCHAR2(50),
  bank_account         VARCHAR2(50),
  instrument_type      VARCHAR2(50),
  instrument_number    NUMBER,
  instrument_date      DATE,
  instrument_amount    NUMBER,
  debit_base_curr      NUMBER,
  credit_base_curr     NUMBER,
  instrument_narration VARCHAR2(1000),
  currency_code        VARCHAR2(50),
  exchange_rate        NUMBER,
  cost_center_code     VARCHAR2(20),
  debit_foreign_curr   NUMBER,
  credit_foreign_curr  NUMBER,
  drawn_on             VARCHAR2(50),
  coa_code             NVARCHAR2(50),
  knockoff_id          NUMBER,
  policy_year          VARCHAR2(300),
  policy_no            VARCHAR2(300),
  endorsement_no       VARCHAR2(300),
  claim_no             VARCHAR2(300),
  bu                   VARCHAR2(300),
  lob                  VARCHAR2(300),
  location             VARCHAR2(300),
  employee             VARCHAR2(300),
  channel              VARCHAR2(300),
  agent                VARCHAR2(300),
  ref_sr_no            NUMBER,
  drawn_on_bank        VARCHAR2(50),
  bank_account_code    VARCHAR2(50)
)
;
alter table KNOCKOFF_BANK_DETAILS
  add constraint KNOCKOFF_BANK_DETAILS_PK primary key (BRANCH_ID, ORG_ID, KO_SR_NO);

prompt
prompt Creating table KNOCKOFF_PAYMENTS_HEADER_T
prompt =========================================
prompt
create table KNOCKOFF_PAYMENTS_HEADER_T
(
  knockoff_id       NUMBER not null,
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  sl_type           VARCHAR2(50),
  sl_code           VARCHAR2(50),
  knockoff_date     DATE,
  from_date         DATE,
  to_date           DATE,
  filter            VARCHAR2(20),
  multi_bank        VARCHAR2(1),
  bank_code         VARCHAR2(50),
  branch_code       VARCHAR2(50),
  bank_account      VARCHAR2(50),
  instrument_type   VARCHAR2(50),
  instrument_number VARCHAR2(50),
  instrument_date   DATE,
  instrument_amount NUMBER,
  voucher_type      VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  post_flag         VARCHAR2(1),
  posted_date       DATE,
  posted_by         VARCHAR2(50),
  drawn_on          VARCHAR2(50),
  endorsement_no    VARCHAR2(300),
  claim_no          VARCHAR2(300),
  channel           VARCHAR2(300),
  agent             VARCHAR2(300),
  employee          VARCHAR2(300),
  location          VARCHAR2(300),
  lob               VARCHAR2(300),
  bu                VARCHAR2(300),
  policy_year       VARCHAR2(300),
  policy_no         VARCHAR2(50),
  cost_center_code  VARCHAR2(50),
  lock_flag         VARCHAR2(1),
  drawn_on_bank     VARCHAR2(50),
  verified_flag     NVARCHAR2(5),
  verified_by       NVARCHAR2(50),
  verified_date     DATE,
  cancel_flag       VARCHAR2(1),
  cancel_by         VARCHAR2(50),
  cancel_date       DATE,
  reverse_flag      VARCHAR2(2),
  bank_account_code VARCHAR2(50),
  voucher_ref_no    VARCHAR2(150)
)
;
alter table KNOCKOFF_PAYMENTS_HEADER_T
  add constraint KNOCKOFF_PAYMENT_PK primary key (KNOCKOFF_ID, ORG_ID, BRANCH_ID);

prompt
prompt Creating table KNOCKOFF_PAYMENTS_DETAIL_T
prompt =========================================
prompt
create table KNOCKOFF_PAYMENTS_DETAIL_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  knockoff_id         NUMBER not null,
  ko_sr_no            NUMBER not null,
  advice_type         VARCHAR2(10),
  fiscal_year         VARCHAR2(10),
  advice_no           VARCHAR2(10),
  sl_sr_no            NUMBER,
  cost_center_code    VARCHAR2(10),
  coa_code            VARCHAR2(50),
  sl_type             VARCHAR2(10),
  sl_code             VARCHAR2(50),
  sl_description      VARCHAR2(500),
  debit_base_curr     NUMBER,
  credit_base_curr    NUMBER,
  currency_code       VARCHAR2(10),
  exchange_rate       NUMBER,
  debit_foreign_curr  NUMBER,
  credit_foreign_curr NUMBER,
  document_reference  VARCHAR2(500),
  knockoff_amount     NUMBER,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  ledger_description  VARCHAR2(500),
  policy_year         VARCHAR2(300),
  policy_no           VARCHAR2(300),
  endorsement_no      VARCHAR2(300),
  claim_no            VARCHAR2(300),
  bu                  VARCHAR2(300),
  lob                 VARCHAR2(300),
  location            VARCHAR2(300),
  employee            VARCHAR2(300),
  channel             VARCHAR2(300),
  agent               VARCHAR2(300),
  row_description     VARCHAR2(300),
  tax_flag            VARCHAR2(1),
  tax_code            VARCHAR2(10),
  advice_amount       NUMBER,
  adjusted_amount     NUMBER,
  detail_sr_no        NUMBER
)
;
alter table KNOCKOFF_PAYMENTS_DETAIL_T
  add constraint PK_KO_PAYM_DETAIL primary key (ORG_ID, BRANCH_ID, KNOCKOFF_ID, KO_SR_NO);
alter table KNOCKOFF_PAYMENTS_DETAIL_T
  add constraint FK_KO_PAYM_HEADER foreign key (KNOCKOFF_ID, ORG_ID, BRANCH_ID)
  references KNOCKOFF_PAYMENTS_HEADER_T (KNOCKOFF_ID, ORG_ID, BRANCH_ID);
alter table KNOCKOFF_PAYMENTS_DETAIL_T
  add constraint KNOCKOFF_PAYMENTS_DETAIL_T_R01 foreign key (ORG_ID, SL_TYPE, SL_CODE)
  references GL_SUBLEDGER_ACCOUNTS (ORG_ID, SL_TYPE, SL_CODE);

prompt
prompt Creating table KO_PAYMENTS_PREVIEW_VOUCHER_T
prompt ============================================
prompt
create table KO_PAYMENTS_PREVIEW_VOUCHER_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  knockoff_id         NUMBER not null,
  cost_center_code    VARCHAR2(10),
  coa_code            VARCHAR2(50),
  debit_base_curr     NUMBER,
  credit_base_curr    NUMBER,
  currency_code       VARCHAR2(10),
  exchange_rate       NUMBER,
  debit_foreign_curr  NUMBER,
  credit_foreign_curr NUMBER,
  document_reference  VARCHAR2(500),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  policy_year         VARCHAR2(300),
  policy_no           VARCHAR2(300),
  endorsement_no      VARCHAR2(300),
  claim_no            VARCHAR2(300),
  bu                  VARCHAR2(300),
  lob                 VARCHAR2(300),
  location            VARCHAR2(300),
  employee            VARCHAR2(300),
  channel             VARCHAR2(300),
  agent               VARCHAR2(300)
)
;

prompt
prompt Creating table LEAVE_TYPE_T
prompt ===========================
prompt
create table LEAVE_TYPE_T
(
  leave_type       NUMBER not null,
  leave_type_desc  VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table LEAVE_TYPE_T
  add constraint PK_LEAVE_TYPE_T primary key (LEAVE_TYPE);

prompt
prompt Creating table LETTER_SETUP_T
prompt =============================
prompt
create table LETTER_SETUP_T
(
  org_id           NUMBER not null,
  employeeid       NUMBER not null,
  type_id          NUMBER not null,
  serial_no        NUMBER not null,
  letter_date      DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table LETTER_SETUP_T
  add constraint PK_LETTER_SETUP primary key (ORG_ID, EMPLOYEEID, TYPE_ID, SERIAL_NO);

prompt
prompt Creating table LINE_OF_BUSINESS_T
prompt =================================
prompt
create table LINE_OF_BUSINESS_T
(
  org_id           NUMBER not null,
  lob_ref          VARCHAR2(30) not null,
  lob_name         VARCHAR2(500),
  active           VARCHAR2(2),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table LINE_OF_BUSINESS_T
  add constraint PK_LOB_T primary key (ORG_ID, LOB_REF);

prompt
prompt Creating table LOSS_TYPE_BENEFIT_TYPE_MAP_T
prompt ===========================================
prompt
create table LOSS_TYPE_BENEFIT_TYPE_MAP_T
(
  org_id            NUMBER not null,
  loss_type_code    NUMBER not null,
  benefit_type_code NUMBER not null,
  benefit_name      VARCHAR2(50),
  estimated_reserve NUMBER,
  remarks           VARCHAR2(200),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  application_id    NUMBER not null
)
;
alter table LOSS_TYPE_BENEFIT_TYPE_MAP_T
  add constraint LOSS_TYPE_BENEFIT_TYPE_MAP_PK primary key (ORG_ID, LOSS_TYPE_CODE, BENEFIT_TYPE_CODE, APPLICATION_ID);
alter table LOSS_TYPE_BENEFIT_TYPE_MAP_T
  add constraint FK_BENEFIT_LOSS foreign key (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID)
  references GP_LOSS_TYPE_SETUP_T (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID);

prompt
prompt Creating table LT_CAUSES_OF_LOSS_MAPPING_T
prompt ==========================================
prompt
create table LT_CAUSES_OF_LOSS_MAPPING_T
(
  org_id             NUMBER not null,
  loss_type_code     NUMBER not null,
  cause_of_loss_code NUMBER not null,
  short_name         VARCHAR2(50),
  description        VARCHAR2(200),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  application_id     NUMBER not null
)
;
alter table LT_CAUSES_OF_LOSS_MAPPING_T
  add constraint PK_LT_CAUSES_OF_LOSS_MAP_T primary key (ORG_ID, LOSS_TYPE_CODE, CAUSE_OF_LOSS_CODE, APPLICATION_ID);
alter table LT_CAUSES_OF_LOSS_MAPPING_T
  add constraint FK_CL_LOSS foreign key (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID)
  references GP_LOSS_TYPE_SETUP_T (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID);

prompt
prompt Creating table LT_CHKLST_FOR_VALID_MAPPING_T
prompt ============================================
prompt
create table LT_CHKLST_FOR_VALID_MAPPING_T
(
  org_id           NUMBER not null,
  loss_type_code   NUMBER not null,
  checklist_code   NUMBER not null,
  checklist_title  VARCHAR2(50),
  is_mandatory     VARCHAR2(1),
  is_default       VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  application_id   NUMBER not null
)
;
alter table LT_CHKLST_FOR_VALID_MAPPING_T
  add constraint PK_LT_CHKLST_FOR_VALID_T primary key (ORG_ID, LOSS_TYPE_CODE, CHECKLIST_CODE, APPLICATION_ID);
alter table LT_CHKLST_FOR_VALID_MAPPING_T
  add constraint FK_CLIST_LOSS foreign key (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID)
  references GP_LOSS_TYPE_SETUP_T (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID);

prompt
prompt Creating table LT_DOCUMENT_REQUIREMENT_MAP_T
prompt ============================================
prompt
create table LT_DOCUMENT_REQUIREMENT_MAP_T
(
  org_id               NUMBER not null,
  loss_type_code       NUMBER not null,
  doc_requirement_code NUMBER not null,
  required_document    VARCHAR2(200),
  is_mandatory         VARCHAR2(1),
  is_default           VARCHAR2(1),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  cause_of_loss_code   NUMBER,
  application_id       NUMBER not null
)
;
alter table LT_DOCUMENT_REQUIREMENT_MAP_T
  add constraint PK_LT_DOCUMENT_REQUIREMENT_T primary key (ORG_ID, LOSS_TYPE_CODE, DOC_REQUIREMENT_CODE, APPLICATION_ID);
alter table LT_DOCUMENT_REQUIREMENT_MAP_T
  add constraint FK_DR_LOSS foreign key (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID)
  references GP_LOSS_TYPE_SETUP_T (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID);

prompt
prompt Creating table LT_REJECTION_CLAUSE_MAPPING_T
prompt ============================================
prompt
create table LT_REJECTION_CLAUSE_MAPPING_T
(
  org_id                NUMBER not null,
  loss_type_code        NUMBER not null,
  rejection_clause_code NUMBER not null,
  rejection_clause      VARCHAR2(50),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  application_id        NUMBER not null
)
;
alter table LT_REJECTION_CLAUSE_MAPPING_T
  add constraint PK_LT_REJEC_CLAUSE_MAP_T primary key (ORG_ID, LOSS_TYPE_CODE, REJECTION_CLAUSE_CODE, APPLICATION_ID);
alter table LT_REJECTION_CLAUSE_MAPPING_T
  add constraint FK_RC_LOSS foreign key (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID)
  references GP_LOSS_TYPE_SETUP_T (ORG_ID, LOSS_TYPE_CODE, APPLICATION_ID);

prompt
prompt Creating table MEDICAL_ENTITY_CATEGORY_T
prompt ========================================
prompt
create table MEDICAL_ENTITY_CATEGORY_T
(
  org_id                  NUMBER not null,
  serial_code             NUMBER not null,
  medical_entity_type     VARCHAR2(50),
  medical_entity_name     VARCHAR2(500),
  medical_entity_category VARCHAR2(100),
  is_icd                  VARCHAR2(5),
  icd                     VARCHAR2(100),
  rate                    NUMBER,
  active                  VARCHAR2(5),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  state                   VARCHAR2(100),
  city                    VARCHAR2(100),
  country                 VARCHAR2(100)
)
;
alter table MEDICAL_ENTITY_CATEGORY_T
  add constraint PK_MED_ENT_CAT primary key (ORG_ID, SERIAL_CODE);

prompt
prompt Creating table TARIFF_SETUP_T
prompt =============================
prompt
create table TARIFF_SETUP_T
(
  tariff_code          NUMBER not null,
  org_id               NUMBER not null,
  short_name           VARCHAR2(20),
  title                VARCHAR2(100),
  address              VARCHAR2(100),
  telephone            VARCHAR2(50),
  contact_person       VARCHAR2(100),
  email                VARCHAR2(100),
  remarks              VARCHAR2(300),
  active               VARCHAR2(1),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  sp_code              NUMBER,
  designation          VARCHAR2(50),
  tariff_name          VARCHAR2(70),
  contact_person_title VARCHAR2(5)
)
;
alter table TARIFF_SETUP_T
  add constraint PK_TARIFF_SETUP_T primary key (TARIFF_CODE, ORG_ID);

prompt
prompt Creating table TARIFF_EFFECTIVE_DATE_T
prompt ======================================
prompt
create table TARIFF_EFFECTIVE_DATE_T
(
  effective_date_code NUMBER not null,
  tariff_code         NUMBER,
  org_id              NUMBER not null,
  effective_date      DATE,
  remarks             VARCHAR2(300),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  sp_code             NUMBER,
  effective_end_date  DATE,
  file_path           VARCHAR2(500)
)
;
alter table TARIFF_EFFECTIVE_DATE_T
  add constraint PK_TARIFF_EFFECTIVE_DATE_T primary key (EFFECTIVE_DATE_CODE, ORG_ID);
alter table TARIFF_EFFECTIVE_DATE_T
  add constraint FK_ED_TARIFF_CODE foreign key (TARIFF_CODE, ORG_ID)
  references TARIFF_SETUP_T (TARIFF_CODE, ORG_ID);

prompt
prompt Creating table MEDICAL_TEST_TARIFF_T
prompt ====================================
prompt
create table MEDICAL_TEST_TARIFF_T
(
  medical_test_code     NUMBER not null,
  effective_date_code   NUMBER not null,
  org_id                NUMBER not null,
  medical_test_name     VARCHAR2(100) not null,
  test_rate             VARCHAR2(100),
  remarks               VARCHAR2(300),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  medical_serivice_type VARCHAR2(70)
)
;
alter table MEDICAL_TEST_TARIFF_T
  add constraint PK_MEDICAL_TEST_TARIFF_T primary key (MEDICAL_TEST_CODE, ORG_ID, EFFECTIVE_DATE_CODE, MEDICAL_TEST_NAME);
alter table MEDICAL_TEST_TARIFF_T
  add constraint FK_MTT_ED_CODE foreign key (EFFECTIVE_DATE_CODE, ORG_ID)
  references TARIFF_EFFECTIVE_DATE_T (EFFECTIVE_DATE_CODE, ORG_ID);

prompt
prompt Creating table MED_EXPENSE_CODE_SETUP_T
prompt =======================================
prompt
create table MED_EXPENSE_CODE_SETUP_T
(
  med_expense_code NUMBER not null,
  org_id           NUMBER not null,
  short_name       VARCHAR2(20),
  title            VARCHAR2(100),
  description      VARCHAR2(300),
  display_order    VARCHAR2(10),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table MED_EXPENSE_CODE_SETUP_T
  add constraint PK_MED_EXPENSE_CODE_SETUP_T primary key (MED_EXPENSE_CODE, ORG_ID);

prompt
prompt Creating table MF_AMC_SETUP_T
prompt =============================
prompt
create table MF_AMC_SETUP_T
(
  company_code            NUMBER not null,
  company_name            VARCHAR2(250),
  company_symbol          VARCHAR2(20),
  registration_number     VARCHAR2(100),
  ntn                     VARCHAR2(50),
  industry_code           VARCHAR2(10),
  sector_code             VARCHAR2(10),
  country_of_registration VARCHAR2(20),
  fiscal_year_end_date    VARCHAR2(10),
  state_location          VARCHAR2(100),
  state_inc               VARCHAR2(100),
  last_update_login       NUMBER,
  lock_flag               VARCHAR2(1),
  annual_reporting_code   VARCHAR2(20),
  mc                      NUMBER,
  oclause                 VARCHAR2(20),
  country_code            VARCHAR2(20),
  stock_exchange_code     VARCHAR2(20),
  reporting_currency      VARCHAR2(10),
  naics_code              NVARCHAR2(50),
  non_profitable          VARCHAR2(1),
  ticker_for_download     VARCHAR2(20),
  last_updated_by         VARCHAR2(100),
  last_update_date        TIMESTAMP(6),
  creation_date           TIMESTAMP(6),
  created_by              VARCHAR2(100),
  isin                    VARCHAR2(50),
  cusip                   VARCHAR2(50),
  isindex                 INTEGER,
  asset_type_id           NUMBER(20),
  url_finanical           VARCHAR2(500),
  business_description    VARCHAR2(4000),
  cuin                    VARCHAR2(20)
)
;
alter table MF_AMC_SETUP_T
  add constraint PK_AMC_SETUP primary key (COMPANY_CODE);

prompt
prompt Creating table MF_ENTITY_HEADER_T
prompt =================================
prompt
create table MF_ENTITY_HEADER_T
(
  header_id NUMBER not null,
  fund_key  NVARCHAR2(30),
  fund_name NVARCHAR2(250),
  added_on  DATE default (SYSDATE) not null
)
;
alter table MF_ENTITY_HEADER_T
  add constraint PK_MF_ENTITY_HEADER primary key (HEADER_ID);

prompt
prompt Creating table MF_PORTFOLIO_HD_T
prompt ================================
prompt
create table MF_PORTFOLIO_HD_T
(
  org_id           NUMBER not null,
  mutual_fund_id   NUMBER not null,
  company_code     NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table MF_PORTFOLIO_HD_T
  add primary key (ORG_ID, MUTUAL_FUND_ID, COMPANY_CODE);

prompt
prompt Creating table MF_SERIES_SETUP_T
prompt ================================
prompt
create table MF_SERIES_SETUP_T
(
  code                 NUMBER not null,
  description          VARCHAR2(200),
  active               VARCHAR2(1),
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  asset_type_id        INTEGER,
  asset_type           VARCHAR2(50),
  create_user          VARCHAR2(50),
  create_date          VARCHAR2(50),
  modified_user        VARCHAR2(50),
  modified_date        VARCHAR2(50),
  parent_asset_type_id INTEGER,
  asset_type_level     VARCHAR2(50)
)
;
alter table MF_SERIES_SETUP_T
  add constraint PK_MF_SERIES_SETUP_T primary key (CODE);

prompt
prompt Creating table MF_SHARIAH_TYPE_SETUP_T
prompt ======================================
prompt
create table MF_SHARIAH_TYPE_SETUP_T
(
  code                 NUMBER not null,
  description          VARCHAR2(200),
  active               VARCHAR2(1),
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table MF_SHARIAH_TYPE_SETUP_T
  add constraint PK_MF_SHARIAH_TYPE_SETUP_T primary key (CODE);

prompt
prompt Creating table MF_TOLERANCE_LEVEL_SETUP_T
prompt =========================================
prompt
create table MF_TOLERANCE_LEVEL_SETUP_T
(
  code                 NUMBER not null,
  description          VARCHAR2(200),
  active               VARCHAR2(1),
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table MF_TOLERANCE_LEVEL_SETUP_T
  add constraint PK_MF_TOLERANCE_LEVEL_SETUP_T primary key (CODE);

prompt
prompt Creating table MONEY_TRANSFER_HEADER_T
prompt ======================================
prompt
create table MONEY_TRANSFER_HEADER_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  process_id       NUMBER not null,
  policy           VARCHAR2(150),
  client_code      NUMBER,
  process_date     DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table MONEY_TRANSFER_HEADER_T
  add constraint PK_MONEY_TRNSFR_HDR primary key (ORG_ID, BRANCH_ID, PROCESS_ID);

prompt
prompt Creating table MUTUAL_FUND_SETUP_T
prompt ==================================
prompt
create table MUTUAL_FUND_SETUP_T
(
  fund_id                 NUMBER not null,
  fund_name               VARCHAR2(200),
  fund_symbol             VARCHAR2(200),
  fund_type               VARCHAR2(10),
  total_value_of_units    NUMBER,
  fund_size               NUMBER,
  distribution_frequencey NUMBER,
  minimum_investment      NUMBER,
  repeated_purchase       NUMBER,
  fund_rating             NUMBER,
  shariah_type            NUMBER,
  asset_class             NUMBER,
  risk_tolerance          NUMBER,
  series_type             NUMBER,
  country_code            VARCHAR2(10),
  distribution_date       DATE,
  launch_date             DATE,
  date_started            DATE,
  amc_code                NUMBER,
  market_classification   NUMBER,
  type_of_market          NUMBER,
  investment_style        NUMBER,
  fund_objectives         VARCHAR2(500),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  fund_category           NUMBER,
  cusip                   VARCHAR2(50),
  cuin                    VARCHAR2(20),
  sedol                   VARCHAR2(50),
  isin                    VARCHAR2(50),
  fund_key                VARCHAR2(50)
)
;
alter table MUTUAL_FUND_SETUP_T
  add constraint PK_MUTUAL_FUND_SETUP_T primary key (FUND_ID);

prompt
prompt Creating table NON_FINANCIAL_ACTIVITY_T
prompt =======================================
prompt
create table NON_FINANCIAL_ACTIVITY_T
(
  org_id               NUMBER not null,
  activity_code        NUMBER not null,
  activity_description VARCHAR2(200),
  active               VARCHAR2(5),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  tab_html_id          VARCHAR2(100),
  table_name           VARCHAR2(50)
)
;
alter table NON_FINANCIAL_ACTIVITY_T
  add constraint PK_NON_FINANCIAL_ACTIVITY primary key (ORG_ID, ACTIVITY_CODE);

prompt
prompt Creating table NON_FINANCIAL_SUB_ACTIVITY_T
prompt ===========================================
prompt
create table NON_FINANCIAL_SUB_ACTIVITY_T
(
  org_id                   NUMBER not null,
  activity_code            NUMBER not null,
  sub_activity_code        NUMBER not null,
  sub_activity_description VARCHAR2(200),
  tab_html_id              VARCHAR2(100),
  active                   VARCHAR2(5),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  financial_tag            VARCHAR2(1),
  group_code               NUMBER,
  category_code            NUMBER,
  event_code               NUMBER,
  report_path              VARCHAR2(300),
  table_name               VARCHAR2(500),
  undwt_required_tag       VARCHAR2(1),
  revise_il_tag            VARCHAR2(1)
)
;
alter table NON_FINANCIAL_SUB_ACTIVITY_T
  add constraint PK_NON_FINANCIAL_SUB_ACTIVITY primary key (ORG_ID, ACTIVITY_CODE, SUB_ACTIVITY_CODE);
alter table NON_FINANCIAL_SUB_ACTIVITY_T
  add constraint FK_NON_FIN_SUB_ACT foreign key (ORG_ID, ACTIVITY_CODE)
  references NON_FINANCIAL_ACTIVITY_T (ORG_ID, ACTIVITY_CODE);

prompt
prompt Creating table NUM_GEN_SETUP_HD_T
prompt =================================
prompt
create table NUM_GEN_SETUP_HD_T
(
  numgen_id        VARCHAR2(50) not null,
  org_id           NUMBER not null,
  numgen_desc      VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  number_length    NUMBER,
  tablename        VARCHAR2(50)
)
;
alter table NUM_GEN_SETUP_HD_T
  add constraint PK_NUM_GEN_SETUP_HD_T primary key (NUMGEN_ID, ORG_ID);

prompt
prompt Creating table NUM_GEN_SETUP_DTL_T
prompt ==================================
prompt
create table NUM_GEN_SETUP_DTL_T
(
  numgen_id         VARCHAR2(50),
  numgen_dtl_id     NUMBER not null,
  org_id            NUMBER not null,
  numgen_desc       VARCHAR2(50),
  column_id         VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  column_type       VARCHAR2(1),
  column_expression VARCHAR2(100)
)
;
alter table NUM_GEN_SETUP_DTL_T
  add constraint PK_NUM_GEN_SETUP_DTL_T primary key (NUMGEN_DTL_ID, ORG_ID);
alter table NUM_GEN_SETUP_DTL_T
  add constraint FK_NGD_NUMGEN foreign key (NUMGEN_ID, ORG_ID)
  references NUM_GEN_SETUP_HD_T (NUMGEN_ID, ORG_ID);

prompt
prompt Creating table OCCUPTION_GROUP_T
prompt ================================
prompt
create table OCCUPTION_GROUP_T
(
  org_id           NUMBER not null,
  code             VARCHAR2(50) not null,
  description      VARCHAR2(50),
  active           VARCHAR2(20),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table OCCUPTION_GROUP_T
  add constraint PK_OCCUPTION_GROUP primary key (ORG_ID, CODE);

prompt
prompt Creating table PARTNER_APPROVAL_SETUP_T
prompt =======================================
prompt
create table PARTNER_APPROVAL_SETUP_T
(
  org_id               NUMBER not null,
  partner_id           NUMBER not null,
  serial_no            NUMBER not null,
  score_from           NUMBER,
  score_to             NUMBER,
  sup_approval_tag     VARCHAR2(10),
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table PARTNER_APPROVAL_SETUP_T
  add constraint PK_PRTNR_APPR_SET primary key (ORG_ID, PARTNER_ID, SERIAL_NO);
alter table PARTNER_APPROVAL_SETUP_T
  add constraint FK_PART_PART_APPR foreign key (ORG_ID, PARTNER_ID)
  references AM_PARTNER_T (ORG_ID, PARTNER_ID);

prompt
prompt Creating table PARTNER_BALANCE_UNITS_T
prompt ======================================
prompt
create table PARTNER_BALANCE_UNITS_T
(
  org_id           NUMBER not null,
  partner_id       NUMBER not null,
  serial_no        NUMBER not null,
  balance_to       NUMBER,
  balance_from     NUMBER,
  no_of_units      NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table PARTNER_BALANCE_UNITS_T
  add constraint PK_PRTNR_BL_UNITS primary key (ORG_ID, PARTNER_ID, SERIAL_NO);

prompt
prompt Creating table PAYMENT_VENDOR_SETUP_T
prompt =====================================
prompt
create table PAYMENT_VENDOR_SETUP_T
(
  vendor_id           NUMBER not null,
  vendor_desc         VARCHAR2(200),
  active              VARCHAR2(1),
  security_key_live   VARCHAR2(4000),
  security_key_test   VARCHAR2(4000),
  creation_date       DATE,
  created_by          VARCHAR2(50),
  last_update_date    DATE,
  last_updated_by     VARCHAR2(50),
  base_url            VARCHAR2(500),
  return_url          VARCHAR2(500),
  merchant_id         VARCHAR2(500),
  sub_merchant_id     VARCHAR2(500),
  integrity_salt      VARCHAR2(500),
  auth_password       VARCHAR2(500),
  trans_post_url_live VARCHAR2(500),
  trans_post_url_test VARCHAR2(500),
  payment_status_url  VARCHAR2(500),
  running_mode        VARCHAR2(500)
)
;
alter table PAYMENT_VENDOR_SETUP_T
  add constraint PK_PAYMENT_VENDOR primary key (VENDOR_ID);

prompt
prompt Creating table PAYMENT_VENDOR_CTRY_MAP_T
prompt ========================================
prompt
create table PAYMENT_VENDOR_CTRY_MAP_T
(
  vendor_id        NUMBER not null,
  country_code     VARCHAR2(20) not null,
  creation_date    DATE,
  created_by       VARCHAR2(50),
  last_update_date DATE,
  last_updated_by  VARCHAR2(50)
)
;
alter table PAYMENT_VENDOR_CTRY_MAP_T
  add constraint PK_PAYM_VENDOR_CTRY primary key (VENDOR_ID, COUNTRY_CODE);
alter table PAYMENT_VENDOR_CTRY_MAP_T
  add constraint FK_PAYM_VENDOR_CTRY foreign key (VENDOR_ID)
  references PAYMENT_VENDOR_SETUP_T (VENDOR_ID);
alter table PAYMENT_VENDOR_CTRY_MAP_T
  add constraint FK_PAYM_VEND_CTRY_CTRY foreign key (COUNTRY_CODE)
  references COUNTRY (COUNTRY_CODE);

prompt
prompt Creating table PF_ASSET_TYPE_T
prompt ==============================
prompt
create table PF_ASSET_TYPE_T
(
  asset_type_id        NUMBER not null,
  asset_type           VARCHAR2(100) not null,
  active               VARCHAR2(1) not null,
  create_user          VARCHAR2(50),
  create_date          TIMESTAMP(6),
  modified_user        VARCHAR2(50),
  modified_date        TIMESTAMP(6),
  parent_asset_type_id NUMBER,
  asset_type_level     VARCHAR2(1)
)
;
alter table PF_ASSET_TYPE_T
  add constraint PF_ASSET_TYPE_T_PK primary key (ASSET_TYPE_ID);

prompt
prompt Creating table PF_CLIENT_SETUP_T
prompt ================================
prompt
create table PF_CLIENT_SETUP_T
(
  client_id       NUMBER not null,
  client_name     VARCHAR2(100) not null,
  ssn_sin_cnic    VARCHAR2(50),
  ntn             VARCHAR2(50),
  phone           VARCHAR2(50),
  email           VARCHAR2(100),
  active          VARCHAR2(1),
  create_user     VARCHAR2(50),
  create_date     TIMESTAMP(6),
  modified_user   VARCHAR2(50),
  modified_date   TIMESTAMP(6),
  userid          VARCHAR2(20),
  currency_code   VARCHAR2(50),
  country_code    VARCHAR2(20),
  ref_from        VARCHAR2(200),
  payment_ref_no  VARCHAR2(200),
  cookie_accept   VARCHAR2(3),
  ref_source_code NUMBER,
  ref_source_desc VARCHAR2(100),
  promo_code      VARCHAR2(50)
)
;
alter table PF_CLIENT_SETUP_T
  add constraint PF_CLIENT_SETUP_T_PK primary key (CLIENT_ID);
alter table PF_CLIENT_SETUP_T
  add foreign key (CURRENCY_CODE)
  references CURRENCY_SETUP_T (CURRENCY_CODE);

prompt
prompt Creating table PF_VALUESETS_T
prompt =============================
prompt
create table PF_VALUESETS_T
(
  org_id             NUMBER not null,
  valueset_id        NUMBER not null,
  valueset_desc      VARCHAR2(100) not null,
  active             VARCHAR2(1) not null,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_modified_by   VARCHAR2(50),
  last_modified_date DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  application_id     NUMBER,
  value_type         VARCHAR2(1)
)
;
alter table PF_VALUESETS_T
  add constraint PF_VALUESETS_T_PK primary key (ORG_ID, VALUESET_ID);
alter table PF_VALUESETS_T
  add foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table PF_VALUESET_VALUES_T
prompt ===================================
prompt
create table PF_VALUESET_VALUES_T
(
  value_id         NUMBER not null,
  value_desc       VARCHAR2(100) not null,
  value_score      NUMBER,
  valueset_id      NUMBER not null,
  active           VARCHAR2(1) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  value_to         NUMBER,
  value_from       NUMBER,
  value_code       VARCHAR2(50)
)
;

prompt
prompt Creating table PLAN_BENEFICIARIES_T
prompt ===================================
prompt
create table PLAN_BENEFICIARIES_T
(
  org_id           NUMBER not null,
  tp_id            NUMBER not null,
  pb_id            NUMBER not null,
  beneficiary_name VARCHAR2(200),
  relation         VARCHAR2(150),
  percentage       NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table PLAN_BENEFICIARIES_T
  add constraint PK_PLAN_BENEFICIARY primary key (ORG_ID, TP_ID, PB_ID);

prompt
prompt Creating table PLAN_BENEFIT_MAPPING_T
prompt =====================================
prompt
create table PLAN_BENEFIT_MAPPING_T
(
  org_id            NUMBER not null,
  pb_map_id         NUMBER not null,
  tp_id             NUMBER,
  travel_benefit_id NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  display_order     NUMBER,
  benefit_limit     VARCHAR2(30),
  benefit_type      VARCHAR2(1),
  branch_id         NUMBER not null
)
;
alter table PLAN_BENEFIT_MAPPING_T
  add constraint PK_PB_MAPPING_T primary key (ORG_ID, PB_MAP_ID, BRANCH_ID);

prompt
prompt Creating table PLAN_TERMS_CONDITIONS_T
prompt ======================================
prompt
create table PLAN_TERMS_CONDITIONS_T
(
  org_id           NUMBER not null,
  tp_id            NUMBER not null,
  tc_id            NUMBER not null,
  terms_conditions VARCHAR2(2000),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  branch_id        NUMBER not null
)
;
alter table PLAN_TERMS_CONDITIONS_T
  add constraint PK_PLAN_TC primary key (ORG_ID, TP_ID, TC_ID, BRANCH_ID);

prompt
prompt Creating table POLICY_ATTACHMENT_T
prompt ==================================
prompt
create table POLICY_ATTACHMENT_T
(
  org_id               NUMBER not null,
  application_id       NUMBER not null,
  policy_attachment_id NUMBER not null,
  file_path            VARCHAR2(300),
  policy_name          VARCHAR2(50),
  description          VARCHAR2(300),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  date_from            DATE,
  date_to              DATE
)
;
alter table POLICY_ATTACHMENT_T
  add constraint PK_POLICY_ATTACHMENT_T primary key (ORG_ID, APPLICATION_ID, POLICY_ATTACHMENT_ID);

prompt
prompt Creating table POLICY_DATA_DUMP_FOR_BI_T
prompt ========================================
prompt
create table POLICY_DATA_DUMP_FOR_BI_T
(
  record_id                NUMBER not null,
  policy_no                VARCHAR2(150),
  channel                  VARCHAR2(150),
  customer_id              VARCHAR2(50),
  policy_start_date        DATE,
  policy_end_date          DATE,
  policy_type              VARCHAR2(50),
  renewal_status           VARCHAR2(150),
  policy_premium_amount    NUMBER,
  premium_earned           NUMBER,
  premium_collected        NUMBER,
  renewal_date             DATE,
  claim_submitted          NUMBER,
  claims_paid              NUMBER,
  claim_process_time       NUMBER,
  incurred_losses          NUMBER,
  loss_adjustment_expenses NUMBER,
  underwriting_expense     NUMBER,
  other_expense            NUMBER,
  claim_amount             NUMBER,
  assured_amount           NUMBER,
  uw_profit                NUMBER,
  commission_paid          NUMBER,
  score                    NUMBER,
  policy_duration          NUMBER,
  profit                   FLOAT,
  ape                      FLOAT,
  region                   VARCHAR2(150),
  customer_demographic     VARCHAR2(150),
  policy_renewed           NUMBER,
  up_for_renewal           NUMBER,
  renewal_rate             NUMBER,
  avg_premium              NUMBER,
  claim_ratio              FLOAT,
  loss_ratio               FLOAT,
  expense_ratio            FLOAT,
  combined_ratio           FLOAT,
  promotors                NUMBER,
  passive                  NUMBER,
  detractor                NUMBER,
  passive_percentage       NUMBER,
  detractor_percentage     NUMBER,
  promotor_percentage      NUMBER,
  nps                      NUMBER,
  cancelled_policies       NUMBER,
  retention_ratios         NUMBER,
  clm_settlement_ratio     FLOAT,
  policy_lapse_rate        NUMBER,
  loss_severity            FLOAT,
  uw_loss_ratio            FLOAT,
  total_expenses           NUMBER
)
;
alter table POLICY_DATA_DUMP_FOR_BI_T
  add constraint PK_IL_CLAIM_DUMP_DATA_T primary key (RECORD_ID);

prompt
prompt Creating table POLICY_KNOCKOFF_HEADER_T
prompt =======================================
prompt
create table POLICY_KNOCKOFF_HEADER_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  knockoff_no      NUMBER not null,
  knockoff_date    DATE,
  from_date        DATE,
  to_date          DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  lock_flag        VARCHAR2(20),
  policy           VARCHAR2(50),
  post_flag        VARCHAR2(20),
  posted_date      DATE,
  posted_by        NVARCHAR2(20)
)
;
alter table POLICY_KNOCKOFF_HEADER_T
  add constraint POLICY_KNOCKOFF_HEADER_PK primary key (ORG_ID, BRANCH_ID, KNOCKOFF_NO);

prompt
prompt Creating table POLICY_KNOCKOFF_DETAIL_T
prompt =======================================
prompt
create table POLICY_KNOCKOFF_DETAIL_T
(
  s_no                 NUMBER not null,
  org_id               NUMBER not null,
  branch_id            NUMBER not null,
  knockoff_no          NUMBER not null,
  document_no          VARCHAR2(50),
  document_type        VARCHAR2(10),
  endorsement_no       NUMBER,
  gdh_doc_reference_no VARCHAR2(50),
  gdh_gross_premium    VARCHAR2(20),
  advance_amount       NUMBER,
  received_amount      NUMBER,
  issue_count          NUMBER,
  due_date             DATE,
  installment_no       NUMBER,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  knockoff_amount      NUMBER,
  item_branch_id       NUMBER,
  client_code          NUMBER
)
;
alter table POLICY_KNOCKOFF_DETAIL_T
  add constraint POLICY_KNOCKOFF_DETAIL_PK primary key (ORG_ID, BRANCH_ID, KNOCKOFF_NO, S_NO);
alter table POLICY_KNOCKOFF_DETAIL_T
  add constraint FK_KNOCKOFFVDTL_HEADER foreign key (ORG_ID, BRANCH_ID, KNOCKOFF_NO)
  references POLICY_KNOCKOFF_HEADER_T (ORG_ID, BRANCH_ID, KNOCKOFF_NO);

prompt
prompt Creating table POLICY_MAPPING_T
prompt ===============================
prompt
create table POLICY_MAPPING_T
(
  org_id               NUMBER not null,
  policy_attachment_id NUMBER not null,
  grades               VARCHAR2(150),
  positions            VARCHAR2(50),
  locations            VARCHAR2(50),
  payrollids           VARCHAR2(50),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  organizations        VARCHAR2(200)
)
;
alter table POLICY_MAPPING_T
  add constraint PK_POLICY_MAPPING_T primary key (ORG_ID, POLICY_ATTACHMENT_ID);

prompt
prompt Creating table PQD_QUESTION_DETAIL
prompt ==================================
prompt
create table PQD_QUESTION_DETAIL
(
  question_code NVARCHAR2(50),
  answer        NVARCHAR2(200),
  points        NVARCHAR2(50),
  idx           NUMBER not null
)
;

prompt
prompt Creating table PQM_QUESTION_MASTER
prompt ==================================
prompt
create table PQM_QUESTION_MASTER
(
  question_code      NUMBER not null,
  questions          NVARCHAR2(100),
  question_type_code NUMBER
)
;

prompt
prompt Creating table PROVIDER_TAX_EXEMPTION_T
prompt =======================================
prompt
create table PROVIDER_TAX_EXEMPTION_T
(
  org_id           NUMBER not null,
  sp_code          NUMBER not null,
  serial_no        NUMBER not null,
  date_from        DATE,
  date_to          DATE,
  attachment       VARCHAR2(150),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table PROVIDER_TAX_EXEMPTION_T
  add constraint PK_TAX_EXEMPTION primary key (ORG_ID, SP_CODE, SERIAL_NO);

prompt
prompt Creating table PROVISIONAL_RECEIPT_DETAIL_T
prompt ===========================================
prompt
create table PROVISIONAL_RECEIPT_DETAIL_T
(
  s_no                 NUMBER not null,
  org_id               NUMBER not null,
  branch_id            NUMBER not null,
  receipt_no           NUMBER not null,
  document_no          VARCHAR2(50),
  document_type        VARCHAR2(10),
  endorsement_no       NUMBER,
  gdh_doc_reference_no VARCHAR2(50),
  gdh_gross_premium    VARCHAR2(20),
  advance_amount       NUMBER,
  received_amount      NUMBER,
  issue_count          NUMBER,
  master_ref_no        VARCHAR2(50),
  pr_year              VARCHAR2(10) not null,
  pr_month             VARCHAR2(2) not null
)
;
alter table PROVISIONAL_RECEIPT_DETAIL_T
  add constraint PROVISIONAL_RECEIPT_DETAIL_PK primary key (ORG_ID, BRANCH_ID, PR_YEAR, PR_MONTH, RECEIPT_NO, S_NO);

prompt
prompt Creating table PROVISIONAL_RECEIPT_HEADER_T
prompt ===========================================
prompt
create table PROVISIONAL_RECEIPT_HEADER_T
(
  receipt_no         NUMBER not null,
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  sl_type            VARCHAR2(50),
  sl_code            VARCHAR2(50),
  knockoff_date      DATE,
  from_date          DATE,
  to_date            DATE,
  filter             VARCHAR2(20),
  bank_code          VARCHAR2(50),
  branch_code        VARCHAR2(50),
  bank_account       VARCHAR2(50),
  instrument_type    VARCHAR2(50),
  instrument_number  VARCHAR2(50),
  instrument_date    DATE,
  lock_check         NVARCHAR2(20),
  instrument_amount  NUMBER,
  clearence_check    VARCHAR2(20),
  clearence_date     DATE,
  voucher_type       VARCHAR2(50),
  status             VARCHAR2(20),
  reason             VARCHAR2(50),
  comments           VARCHAR2(50),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  drawn_on           VARCHAR2(200),
  clear_by           NVARCHAR2(20),
  lock_date          DATE,
  lock_by            VARCHAR2(20),
  policy             VARCHAR2(50),
  client_branch_code NUMBER,
  drawn_on_bank      VARCHAR2(50),
  original_tag       VARCHAR2(1),
  pr_original_tag    VARCHAR2(10),
  pr_year            VARCHAR2(10) not null,
  pr_month           VARCHAR2(2) not null,
  pr_ref_no          VARCHAR2(30),
  pr_type            VARCHAR2(1),
  bank_account_code  VARCHAR2(50)
)
;
alter table PROVISIONAL_RECEIPT_HEADER_T
  add constraint PROVISIONAL_RECEIPT_HEADER_PK primary key (ORG_ID, BRANCH_ID, PR_YEAR, PR_MONTH, RECEIPT_NO);

prompt
prompt Creating table RATE_TYPES_T
prompt ===========================
prompt
create table RATE_TYPES_T
(
  org_id           NUMBER not null,
  rate_code        NUMBER not null,
  rate_type        VARCHAR2(100),
  type_version     VARCHAR2(100),
  effective_from   DATE,
  effective_to     DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table RATE_TYPES_T
  add constraint PK_RATE_TYPES primary key (ORG_ID, RATE_CODE);

prompt
prompt Creating table RECON_PROCESS_DTL_T
prompt ==================================
prompt
create table RECON_PROCESS_DTL_T
(
  org_id            NUMBER not null,
  header_id         NUMBER not null,
  detail_id         NUMBER not null,
  recon_process_id  NUMBER not null,
  transaction_date  DATE,
  row_description   VARCHAR2(250),
  no_of_rows        NUMBER,
  cr_amount         NUMBER,
  dr_amount         NUMBER,
  closing_amount    NUMBER,
  reconcilation_tag VARCHAR2(1),
  voucher_type      VARCHAR2(50),
  voucher_no        NUMBER,
  voucher_date      DATE,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  bank_gl_tag       NUMBER
)
;
alter table RECON_PROCESS_DTL_T
  add constraint PK_RECON_PROCESS_DTL_T primary key (ORG_ID, HEADER_ID, DETAIL_ID, RECON_PROCESS_ID);

prompt
prompt Creating table RECON_PROCESS_HD_T
prompt =================================
prompt
create table RECON_PROCESS_HD_T
(
  org_id            NUMBER not null,
  header_id         NUMBER not null,
  bank_code         NUMBER,
  matching_type     VARCHAR2(2),
  payment_type      VARCHAR2(1),
  recon_type        VARCHAR2(1),
  recon_hd_id       NUMBER,
  from_date         DATE,
  to_date           DATE,
  opening_balance   NUMBER,
  creation_date     DATE,
  created_by        VARCHAR2(50),
  last_updated_by   VARCHAR2(50),
  last_updated_date DATE,
  branch_code       NUMBER,
  bank_account      VARCHAR2(100),
  coa_code          VARCHAR2(100),
  bank_account_code VARCHAR2(100),
  recon_as_at_date  DATE,
  verified_status   VARCHAR2(1),
  verified_by       VARCHAR2(50),
  verified_remarks  VARCHAR2(250),
  verified_at       DATE,
  approved_status   VARCHAR2(1),
  approved_by       VARCHAR2(50),
  approved_remarks  VARCHAR2(250),
  approved_at       DATE,
  closing_balance   NUMBER
)
;
alter table RECON_PROCESS_HD_T
  add constraint RECON_PROCESS_HD_T_PK primary key (ORG_ID, HEADER_ID);

prompt
prompt Creating table RECON_PROCESS_LOG_T
prompt ==================================
prompt
create table RECON_PROCESS_LOG_T
(
  org_id            NUMBER,
  header_id         NUMBER,
  bank_code         NUMBER,
  matching_type     VARCHAR2(2),
  payment_type      VARCHAR2(1),
  recon_type        VARCHAR2(1),
  recon_hd_id       NUMBER,
  from_date         DATE,
  to_date           DATE,
  opening_balance   NUMBER,
  creation_date     DATE,
  created_by        VARCHAR2(50),
  last_updated_by   VARCHAR2(50),
  last_updated_date DATE,
  recon_as_at_date  DATE,
  branch_code       NUMBER,
  bank_account      VARCHAR2(100),
  coa_code          VARCHAR2(100),
  bank_account_code VARCHAR2(100),
  closing_balance   NUMBER
)
;

prompt
prompt Creating table REGION_SETUP_T
prompt =============================
prompt
create table REGION_SETUP_T
(
  code                 NUMBER not null,
  description          VARCHAR2(255),
  effective_start_date DATE,
  effective_end_date   DATE
)
;
alter table REGION_SETUP_T
  add constraint PK_REGION_SETUP_T_CODE primary key (CODE);

prompt
prompt Creating table REPORTS_EXCEL_FORMATHD_T
prompt =======================================
prompt
create table REPORTS_EXCEL_FORMATHD_T
(
  org_id           NUMBER not null,
  report_id        NUMBER not null,
  report_name      VARCHAR2(50),
  rdlc_address     VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table REPORTS_EXCEL_FORMATHD_T
  add constraint PK_REPORT_EXCEL_FORMATHD primary key (ORG_ID, REPORT_ID);

prompt
prompt Creating table REPORTS_EXCEL_FORMATDTL_T
prompt ========================================
prompt
create table REPORTS_EXCEL_FORMATDTL_T
(
  org_id           NUMBER not null,
  report_id        NUMBER not null,
  serial_no        NUMBER not null,
  old_name         VARCHAR2(50),
  new_name         VARCHAR2(50),
  column_type      VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table REPORTS_EXCEL_FORMATDTL_T
  add constraint PK_REPORT_EXCEL_FORMATDTL primary key (ORG_ID, REPORT_ID, SERIAL_NO);
alter table REPORTS_EXCEL_FORMATDTL_T
  add constraint REPORT_EX_HD_DTL foreign key (ORG_ID, REPORT_ID)
  references REPORTS_EXCEL_FORMATHD_T (ORG_ID, REPORT_ID);

prompt
prompt Creating table REPORTS_RDLC_PATH_T
prompt ==================================
prompt
create table REPORTS_RDLC_PATH_T
(
  org_id           NUMBER not null,
  report_path      VARCHAR2(500) not null,
  rdlc_path        VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  child_class      VARCHAR2(500)
)
;
alter table REPORTS_RDLC_PATH_T
  add constraint PK_REP_RDLC_PATH primary key (ORG_ID, REPORT_PATH);

prompt
prompt Creating table RESTRICTED_ENTITY_SETUP_T
prompt ========================================
prompt
create table RESTRICTED_ENTITY_SETUP_T
(
  org_id               NUMBER not null,
  restricted_entity_id NUMBER not null,
  entity_type          VARCHAR2(50),
  entity_code          VARCHAR2(50),
  active               VARCHAR2(1),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table RESTRICTED_ENTITY_SETUP_T
  add constraint PK_RESTRICTED_ENTITY_SETUP_T primary key (ORG_ID, RESTRICTED_ENTITY_ID);

prompt
prompt Creating table RIDERS_RATES_T
prompt =============================
prompt
create table RIDERS_RATES_T
(
  org_id             NUMBER,
  main_product_code  NUMBER,
  sub_product_code   NUMBER,
  benefit_code       NUMBER,
  rate_code          NUMBER,
  m_age              NUMBER,
  m_year             NUMBER,
  m_rate             NUMBER,
  gender             VARCHAR2(1),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  em_rate            NUMBER,
  ri_rate            NUMBER,
  ri_em_rate         NUMBER,
  indexation_rate_id NUMBER
)
;

prompt
prompt Creating table RIDER_VALIDATION_LOGS_T
prompt ======================================
prompt
create table RIDER_VALIDATION_LOGS_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  ref_no            VARCHAR2(50),
  benefit_code      NUMBER,
  occupation_code   NUMBER,
  serial_no         NUMBER not null,
  description       VARCHAR2(1000),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table RIDER_VALIDATION_LOGS_T
  add primary key (ORG_ID, SERIAL_NO);

prompt
prompt Creating table RPT_DBR_DATA
prompt ===========================
prompt
create table RPT_DBR_DATA
(
  branchrmcode               VARCHAR2(4000),
  branchrmname               VARCHAR2(4000),
  policy_no                  VARCHAR2(4000),
  pillarregion               VARCHAR2(4000),
  installmentamount          NUMBER,
  gender                     VARCHAR2(4000),
  age                        NUMBER,
  secondmanagercode          VARCHAR2(4000),
  secondmanagername          VARCHAR2(4000),
  desigantion                VARCHAR2(4000),
  refundreceivedtopup        VARCHAR2(4000),
  refundcontribution         VARCHAR2(4000),
  rmnote                     VARCHAR2(4000),
  pendingduescontribution    NUMBER,
  org_id                     NUMBER,
  agent_id                   NUMBER,
  model_id                   NUMBER,
  channel_id                 NUMBER,
  partner_id                 NUMBER,
  submit_date                DATE,
  lock_date                  DATE,
  post_date                  DATE,
  nextdue                    DATE,
  nextdueinstallment         NUMBER,
  installment_no             NUMBER,
  period_end_date            DATE,
  proposalno                 VARCHAR2(4000),
  partnername                VARCHAR2(4000),
  beneficiary_name           VARCHAR2(4000),
  guardian_name              VARCHAR2(4000),
  fundname                   VARCHAR2(4000),
  account_title              VARCHAR2(4000),
  accontno                   VARCHAR2(4000),
  requirements               VARCHAR2(4000),
  pendingdues_contribution   NUMBER,
  certificateyear            NUMBER,
  receivedtopupamount        NUMBER,
  creditbalance              NUMBER,
  cashvalue                  NUMBER,
  topupcashvalue             NUMBER,
  dispatchdate               DATE,
  cnno                       VARCHAR2(4000),
  covermultiple              NUMBER,
  documentdeliverydate       DATE,
  receiveacknowledgementdate DATE,
  creditbalanceregular       NUMBER,
  policycancellationdate     DATE,
  commencementdate           DATE,
  membercnic                 VARCHAR2(4000),
  contributionterm           NUMBER,
  benefitterm                NUMBER,
  topupcontribution          NUMBER,
  premiummode                VARCHAR2(4000),
  totcontribution            NUMBER,
  issueddate                 DATE,
  dateofbirth                DATE,
  submissiondate             DATE,
  sumcovered                 NUMBER,
  nextduedate                DATE,
  approved_by_und_date       DATE,
  maturitydate               DATE,
  telephone                  VARCHAR2(4000),
  phone                      VARCHAR2(4000),
  mobile                     VARCHAR2(4000),
  mailingaddress             VARCHAR2(4000),
  product_type               VARCHAR2(4000),
  certificateownername       VARCHAR2(4000),
  lifeassuredname            VARCHAR2(4000),
  cnicno                     VARCHAR2(4000),
  fathername                 VARCHAR2(4000),
  branchname                 VARCHAR2(4000),
  groups                     VARCHAR2(4000),
  regionname                 VARCHAR2(4000),
  area                       VARCHAR2(4000),
  notissuereason             VARCHAR2(4000),
  decision_desc              VARCHAR2(4000),
  policystatus               VARCHAR2(4000),
  consignment_no             VARCHAR2(4000),
  rider_contribution         NUMBER,
  rider_benefit              NUMBER,
  rider                      VARCHAR2(4000),
  basic_contribution         NUMBER,
  receivedcontribution       NUMBER,
  contribution_indexation    NUMBER,
  sum_assured                NUMBER,
  basic_contribution_modal   NUMBER,
  initial_agent              VARCHAR2(4000),
  initial_agent_code         VARCHAR2(4000),
  agent_name                 VARCHAR2(4000),
  agent_code                 VARCHAR2(4000),
  branch_manual_code         VARCHAR2(4000),
  annualizedcontribution     NUMBER
)
;

prompt
prompt Creating table SMS_MESSAGES_T
prompt =============================
prompt
create table SMS_MESSAGES_T
(
  message_id       NUMBER not null,
  message_text     VARCHAR2(4000),
  mobile_no        VARCHAR2(50),
  status_id        NUMBER,
  retry_count      NUMBER,
  reason           VARCHAR2(2000),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  ref_no           VARCHAR2(100),
  hold_tag         VARCHAR2(1),
  group_code       NUMBER,
  category_code    NUMBER,
  event_code       NUMBER,
  template_id      NUMBER,
  other_lang_tag   VARCHAR2(1),
  org_id           NUMBER,
  effective_date   DATE,
  attachment_path  VARCHAR2(500),
  reject_tag       VARCHAR2(1),
  rejected_by      VARCHAR2(50),
  reject_date      DATE
)
;
alter table SMS_MESSAGES_T
  add constraint PK_SMS_MESSAGES primary key (MESSAGE_ID);
alter table SMS_MESSAGES_T
  add constraint FK_MSG_STATUS_MSG foreign key (STATUS_ID)
  references MESSAGE_STATUS_SETUP_T (STATUS_ID);

prompt
prompt Creating table SM_API_IP_WHITELIST_T
prompt ====================================
prompt
create table SM_API_IP_WHITELIST_T
(
  serial_no        NUMBER not null,
  api_url          VARCHAR2(150),
  ip_address       VARCHAR2(50),
  rate_limit       NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table SM_API_IP_WHITELIST_T
  add constraint PK_API_IP_HIST primary key (SERIAL_NO);

prompt
prompt Creating table SM_API_USAGE_HIST_T
prompt ==================================
prompt
create table SM_API_USAGE_HIST_T
(
  serial_no        NUMBER not null,
  api_url          VARCHAR2(150),
  ip_address       VARCHAR2(50),
  other_info       VARCHAR2(4000),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  input_parameters VARCHAR2(4000),
  active           VARCHAR2(1),
  call_type        VARCHAR2(10)
)
;
alter table SM_API_USAGE_HIST_T
  add constraint PK_API_HIST primary key (SERIAL_NO);

prompt
prompt Creating table SM_APPLICATION_CONFIG_T
prompt ======================================
prompt
create table SM_APPLICATION_CONFIG_T
(
  config_name      VARCHAR2(50) not null,
  config_value     VARCHAR2(500),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table SM_APPLICATION_CONFIG_T
  add constraint PK_APP_CONFIG primary key (CONFIG_NAME);

prompt
prompt Creating table SM_APPLICATION_LOB_MAP_T
prompt =======================================
prompt
create table SM_APPLICATION_LOB_MAP_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  lob_map_id       NUMBER not null,
  lob              VARCHAR2(4),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table SM_APPLICATION_LOB_MAP_T
  add constraint PK_SM_LOB_MAP_T primary key (ORG_ID, APPLICATION_ID, LOB_MAP_ID);

prompt
prompt Creating table SM_APPLICATION_MENU_T
prompt ====================================
prompt
create table SM_APPLICATION_MENU_T
(
  application_id       NUMBER(3) not null,
  menu_id              NUMBER not null,
  menu_desc            VARCHAR2(200),
  menu_url             VARCHAR2(200),
  menu_controller_name VARCHAR2(200),
  menu_action_name     VARCHAR2(200),
  menu_icon            VARCHAR2(200),
  menu_type            VARCHAR2(1),
  active               VARCHAR2(1),
  parent_menu_id       NUMBER,
  display_order        NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  menu_desc_detail     VARCHAR2(200),
  default_menu         VARCHAR2(1)
)
;
alter table SM_APPLICATION_MENU_T
  add constraint PK_APPMENU primary key (APPLICATION_ID, MENU_ID);

prompt
prompt Creating table SM_APPLICATION_MENU_TABS_T
prompt =========================================
prompt
create table SM_APPLICATION_MENU_TABS_T
(
  application_id   NUMBER not null,
  menu_id          NUMBER not null,
  tab_id           NUMBER not null,
  tab_desc         VARCHAR2(50),
  tab_html_id      VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  active           VARCHAR2(1)
)
;
alter table SM_APPLICATION_MENU_TABS_T
  add constraint PK_MENU_TABS_T primary key (APPLICATION_ID, MENU_ID, TAB_ID);
alter table SM_APPLICATION_MENU_TABS_T
  add constraint FK_MENU_TABS_APP_MENU foreign key (APPLICATION_ID, MENU_ID)
  references SM_APPLICATION_MENU_T (APPLICATION_ID, MENU_ID);

prompt
prompt Creating table SM_APPLICATION_SETUP_T
prompt =====================================
prompt
create table SM_APPLICATION_SETUP_T
(
  serial_no                NUMBER not null,
  file_extensions_allowed  VARCHAR2(200),
  file_size_limit          NUMBER(18),
  text_input_maxlength     NUMBER(18),
  company_logo             VARCHAR2(500),
  admin_open_form          VARCHAR2(1),
  admin_upload_path        VARCHAR2(200),
  user_upload_path         VARCHAR2(200),
  employee_form_type_id    NUMBER,
  smtp_server              VARCHAR2(100),
  smtp_email               VARCHAR2(100),
  smtp_password            VARCHAR2(100),
  smtp_port                NUMBER,
  company_name             VARCHAR2(200),
  password_expiry_days     NUMBER,
  password_min_length      NUMBER,
  max_login_attempts       NUMBER,
  pass_incl_alph_uc        VARCHAR2(1),
  pass_incl_alph_lc        VARCHAR2(1),
  pass_incl_num            VARCHAR2(1),
  pass_incl_sc             VARCHAR2(1),
  pass_sc_list             VARCHAR2(50),
  pass_expiry_days_warning NUMBER,
  user_activation_url      VARCHAR2(200),
  password_reset_url       VARCHAR2(200),
  new_user_video_link      VARCHAR2(200),
  email_secure             VARCHAR2(1),
  send_email_on_submit     VARCHAR2(1),
  send_email_on_return     VARCHAR2(1),
  login_video_background   VARCHAR2(200),
  default_theme            VARCHAR2(50),
  creation_date            DATE,
  created_by               VARCHAR2(50)
)
;
alter table SM_APPLICATION_SETUP_T
  add primary key (SERIAL_NO);

prompt
prompt Creating table SM_USERS_T
prompt =========================
prompt
create table SM_USERS_T
(
  userid                       INTEGER not null,
  first_name                   VARCHAR2(50),
  last_name                    VARCHAR2(50),
  picture                      VARCHAR2(1000),
  email                        VARCHAR2(500),
  phone                        VARCHAR2(15),
  password                     VARCHAR2(200),
  user_supervisor              VARCHAR2(50),
  user_hrbp                    VARCHAR2(50),
  created_by                   VARCHAR2(50),
  creation_date                DATE,
  last_updated_by              VARCHAR2(50),
  last_update_date             DATE,
  active                       VARCHAR2(1),
  user_role                    VARCHAR2(50),
  password_last_change_date    DATE,
  username                     VARCHAR2(50),
  login_attempts               INTEGER,
  force_password_change        VARCHAR2(1),
  force_password_change_reason VARCHAR2(200),
  pass_change_warning          VARCHAR2(1),
  pass_change_days_left        INTEGER,
  security_token               VARCHAR2(200),
  last_login                   DATE,
  client_id                    NUMBER,
  allow_menu                   VARCHAR2(1),
  country_code                 VARCHAR2(20),
  terms_accepted               VARCHAR2(1),
  security_key                 VARCHAR2(500),
  cancel_reason                VARCHAR2(500),
  trial_start_date             DATE,
  trial_extended_days          NUMBER,
  attendance_tag               VARCHAR2(1),
  entity_id                    NUMBER,
  debug_mode                   VARCHAR2(1),
  impersonate_allow            VARCHAR2(1),
  lock_tag                     VARCHAR2(1),
  last_lock_date               DATE,
  active_temp                  VARCHAR2(1)
)
;
alter table SM_USERS_T
  add constraint PK_USERS_T primary key (USERID);
alter table SM_USERS_T
  add constraint PK_USERNAME unique (USERNAME);

prompt
prompt Creating table SM_APPLICATION_USER_MAPPING_T
prompt ============================================
prompt
create table SM_APPLICATION_USER_MAPPING_T
(
  application_id   NUMBER(3) not null,
  userid           NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table SM_APPLICATION_USER_MAPPING_T
  add constraint PK_APPUSER primary key (APPLICATION_ID, USERID);
alter table SM_APPLICATION_USER_MAPPING_T
  add foreign key (USERID)
  references SM_USERS_T (USERID);

prompt
prompt Creating table SM_APP_MENU_ROLE_MAPPING_T
prompt =========================================
prompt
create table SM_APP_MENU_ROLE_MAPPING_T
(
  application_id   NUMBER(3) not null,
  role_id          NUMBER not null,
  menu_id          NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  control_view     VARCHAR2(1),
  control_add      VARCHAR2(1),
  control_update   VARCHAR2(1),
  control_delete   VARCHAR2(1),
  control_verify   VARCHAR2(1),
  control_approve  VARCHAR2(1)
)
;
alter table SM_APP_MENU_ROLE_MAPPING_T
  add constraint PK_APPMENU_ROLE primary key (APPLICATION_ID, ROLE_ID, MENU_ID);

prompt
prompt Creating table SM_APP_MENU_ROLE_TABS_T
prompt ======================================
prompt
create table SM_APP_MENU_ROLE_TABS_T
(
  application_id   NUMBER(3) not null,
  role_id          NUMBER not null,
  menu_id          NUMBER not null,
  tab_id           NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  control_view     VARCHAR2(1),
  control_add      VARCHAR2(1),
  control_update   VARCHAR2(1),
  control_delete   VARCHAR2(1),
  control_verify   VARCHAR2(1),
  control_approve  VARCHAR2(1)
)
;
alter table SM_APP_MENU_ROLE_TABS_T
  add constraint PK_APPMENU_ROLE_TAB primary key (APPLICATION_ID, ROLE_ID, MENU_ID, TAB_ID);
alter table SM_APP_MENU_ROLE_TABS_T
  add constraint FK_APPMENU_ROLE_TAB foreign key (APPLICATION_ID, ROLE_ID, MENU_ID)
  references SM_APP_MENU_ROLE_MAPPING_T (APPLICATION_ID, ROLE_ID, MENU_ID);

prompt
prompt Creating table SM_APP_USER_MENU_EXCEPTIONS_T
prompt ============================================
prompt
create table SM_APP_USER_MENU_EXCEPTIONS_T
(
  application_id   NUMBER(3) not null,
  userid           VARCHAR2(50) not null,
  menu_id          NUMBER not null,
  exception_type   VARCHAR2(7),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table SM_APP_USER_MENU_EXCEPTIONS_T
  add constraint PK_APPMENU_EXC primary key (APPLICATION_ID, USERID, MENU_ID);

prompt
prompt Creating table SM_EMAIL_LOGS_T
prompt ==============================
prompt
create table SM_EMAIL_LOGS_T
(
  email_log_id   NUMBER not null,
  email_log_date DATE,
  email_status   VARCHAR2(10),
  email_event    VARCHAR2(20),
  error_details  VARCHAR2(4000)
)
;
alter table SM_EMAIL_LOGS_T
  add constraint PK_EMAIL_LOGS primary key (EMAIL_LOG_ID);

prompt
prompt Creating table SM_EMAIL_TOKENS_T
prompt ================================
prompt
create table SM_EMAIL_TOKENS_T
(
  token_id         NUMBER not null,
  token            VARCHAR2(1000),
  userid           INTEGER,
  token_used       VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  token_reason     VARCHAR2(500)
)
;
alter table SM_EMAIL_TOKENS_T
  add constraint PK_EMAIL_TOKENS_T primary key (TOKEN_ID);

prompt
prompt Creating table SM_MANDATORY_FIELDS_T
prompt ====================================
prompt
create table SM_MANDATORY_FIELDS_T
(
  org_id                 NUMBER not null,
  container_id           VARCHAR2(50) not null,
  field_id               VARCHAR2(50) not null,
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE,
  field_label            VARCHAR2(500),
  table_name             VARCHAR2(50),
  display_order          NUMBER,
  visible                VARCHAR2(1),
  field_type             VARCHAR2(1),
  is_mandatory           VARCHAR2(1),
  field_limit            NUMBER,
  description_other_lang NVARCHAR2(500)
)
;
alter table SM_MANDATORY_FIELDS_T
  add constraint PK_MANDATORY_FIELDS primary key (ORG_ID, CONTAINER_ID, FIELD_ID);

prompt
prompt Creating table SM_RELEASE_INFO_T
prompt ================================
prompt
create table SM_RELEASE_INFO_T
(
  serial_no       NUMBER not null,
  release_version NUMBER,
  release_date    DATE,
  creation_date   DATE
)
;
alter table SM_RELEASE_INFO_T
  add constraint PK_RELEASE_INFO primary key (SERIAL_NO);

prompt
prompt Creating table SM_RESTRICTIONS_T
prompt ================================
prompt
create table SM_RESTRICTIONS_T
(
  restriction_id   NUMBER not null,
  restriction_desc VARCHAR2(100),
  active           VARCHAR2(1),
  restriction_type VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  application_id   NUMBER(3) not null
)
;
alter table SM_RESTRICTIONS_T
  add constraint SM_RESTRICTIONS_T_PK primary key (APPLICATION_ID, RESTRICTION_ID);

prompt
prompt Creating table SM_RESTRICTIONS_ROLE_MAPPING_T
prompt =============================================
prompt
create table SM_RESTRICTIONS_ROLE_MAPPING_T
(
  role_id           NUMBER not null,
  application_id    NUMBER(3) not null,
  restriction_id    NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  restriction_value NUMBER(5)
)
;
alter table SM_RESTRICTIONS_ROLE_MAPPING_T
  add primary key (ROLE_ID, APPLICATION_ID, RESTRICTION_ID);
alter table SM_RESTRICTIONS_ROLE_MAPPING_T
  add constraint SM_RESTRICTIONS_ROLE_MAPPI_FK foreign key (APPLICATION_ID, RESTRICTION_ID)
  references SM_RESTRICTIONS_T (APPLICATION_ID, RESTRICTION_ID);

prompt
prompt Creating table SM_ROLE_SETUP_T
prompt ==============================
prompt
create table SM_ROLE_SETUP_T
(
  role_id          NUMBER not null,
  role_desc        VARCHAR2(200),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  active           VARCHAR2(1),
  application_id   NUMBER(3),
  role_start_date  DATE,
  role_end_date    DATE
)
;
alter table SM_ROLE_SETUP_T
  add constraint PK_ROLE_SETUP_T primary key (ROLE_ID);

prompt
prompt Creating table SM_SCREEN_HEADER_T
prompt =================================
prompt
create table SM_SCREEN_HEADER_T
(
  org_id           NUMBER not null,
  screen_id        NUMBER not null,
  active_tag       CHAR(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  description      VARCHAR2(200)
)
;
alter table SM_SCREEN_HEADER_T
  add constraint PK_SM_SCREEN_HEADER_T primary key (ORG_ID, SCREEN_ID);

prompt
prompt Creating table SM_SCREEN_ROLE_MAP_T
prompt ===================================
prompt
create table SM_SCREEN_ROLE_MAP_T
(
  org_id           NUMBER not null,
  screen_id        NUMBER not null,
  role_id          NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table SM_SCREEN_ROLE_MAP_T
  add constraint PK_SM_SCREEN_ROLE_MAP_T primary key (ORG_ID, SCREEN_ID, ROLE_ID);

prompt
prompt Creating table SM_SCREEN_SUB_VIEW_FIELDS_T
prompt ==========================================
prompt
create table SM_SCREEN_SUB_VIEW_FIELDS_T
(
  org_id           NUMBER not null,
  screen_id        NUMBER not null,
  view_id          NUMBER not null,
  sub_view_id      NUMBER not null,
  field_id         VARCHAR2(150) not null,
  view_description VARCHAR2(150),
  active_tag       CHAR(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  display_order    NUMBER
)
;
alter table SM_SCREEN_SUB_VIEW_FIELDS_T
  add constraint PK_SM_SCREEN_SUB_VIEW_FIELDS_T primary key (ORG_ID, SCREEN_ID, VIEW_ID, SUB_VIEW_ID, FIELD_ID);

prompt
prompt Creating table SM_SCREEN_VIEW_T
prompt ===============================
prompt
create table SM_SCREEN_VIEW_T
(
  org_id           NUMBER not null,
  screen_id        NUMBER not null,
  view_id          NUMBER not null,
  view_description VARCHAR2(150),
  active_tag       CHAR(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table SM_SCREEN_VIEW_T
  add constraint PK_SM_SCREEN_VIEW_T primary key (ORG_ID, SCREEN_ID, VIEW_ID);
alter table SM_SCREEN_VIEW_T
  add foreign key (ORG_ID, SCREEN_ID)
  references SM_SCREEN_HEADER_T (ORG_ID, SCREEN_ID);

prompt
prompt Creating table SM_SCREEN_SUB_VIEW_T
prompt ===================================
prompt
create table SM_SCREEN_SUB_VIEW_T
(
  org_id           NUMBER not null,
  screen_id        NUMBER not null,
  view_id          NUMBER not null,
  sub_view_id      NUMBER not null,
  view_description VARCHAR2(150),
  active_tag       CHAR(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  container_id     VARCHAR2(150),
  table_name       VARCHAR2(150)
)
;
alter table SM_SCREEN_SUB_VIEW_T
  add constraint PK_SM_SM_SCREEN_SUB_VIEW_T primary key (ORG_ID, SCREEN_ID, VIEW_ID, SUB_VIEW_ID);
alter table SM_SCREEN_SUB_VIEW_T
  add foreign key (ORG_ID, SCREEN_ID, VIEW_ID)
  references SM_SCREEN_VIEW_T (ORG_ID, SCREEN_ID, VIEW_ID);

prompt
prompt Creating table SM_USER_BRANCH_MAPPING_T
prompt =======================================
prompt
create table SM_USER_BRANCH_MAPPING_T
(
  userid           VARCHAR2(50) not null,
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  user_type        VARCHAR2(1)
)
;
alter table SM_USER_BRANCH_MAPPING_T
  add constraint PK_USER_BRANCH_MAP primary key (USERID, ORG_ID, BRANCH_ID);
alter table SM_USER_BRANCH_MAPPING_T
  add constraint FK_USERMAP_BRANCH foreign key (ORG_ID, BRANCH_ID)
  references TK_BRANCH_SETUP_T (ORG_ID, BRANCH_ID);

prompt
prompt Creating table SM_USER_LOGIN_HIST_T
prompt ===================================
prompt
create table SM_USER_LOGIN_HIST_T
(
  serial_no      NUMBER not null,
  username       VARCHAR2(50),
  ip_address     VARCHAR2(50),
  other_info     VARCHAR2(4000),
  creation_date  DATE,
  status_tag     VARCHAR2(1),
  status_message VARCHAR2(500),
  password       VARCHAR2(500)
)
;
alter table SM_USER_LOGIN_HIST_T
  add constraint PK_USER_LOGIN_HIST primary key (SERIAL_NO);

prompt
prompt Creating table SM_USER_MENU_ACCESS_HIST_T
prompt =========================================
prompt
create table SM_USER_MENU_ACCESS_HIST_T
(
  sequence_no    NUMBER not null,
  application_id NUMBER(3),
  menu_id        NUMBER,
  userid         NUMBER(38),
  access_date    DATE
)
;
alter table SM_USER_MENU_ACCESS_HIST_T
  add constraint PK_USER_MENU_ACC primary key (SEQUENCE_NO);

prompt
prompt Creating table SM_USER_ORG_MAPPING_T
prompt ====================================
prompt
create table SM_USER_ORG_MAPPING_T
(
  userid           VARCHAR2(50) not null,
  org_id           NUMBER not null,
  creation_date    DATE,
  created_by       VARCHAR2(50),
  last_update_date DATE,
  last_updated_by  VARCHAR2(50),
  user_type        VARCHAR2(1)
)
;
alter table SM_USER_ORG_MAPPING_T
  add constraint PK_USER_ORG primary key (USERID, ORG_ID);
alter table SM_USER_ORG_MAPPING_T
  add constraint FK_USER_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table SM_USER_OTHER_INFO_T
prompt ===================================
prompt
create table SM_USER_OTHER_INFO_T
(
  userid       NUMBER not null,
  billing_info VARCHAR2(2000)
)
;
alter table SM_USER_OTHER_INFO_T
  add primary key (USERID);

prompt
prompt Creating table SM_USER_PASS_CHANGE_HIST_T
prompt =========================================
prompt
create table SM_USER_PASS_CHANGE_HIST_T
(
  serial_no     NUMBER not null,
  username      VARCHAR2(50),
  password      VARCHAR2(50),
  created_by    VARCHAR2(50),
  creation_date DATE
)
;
alter table SM_USER_PASS_CHANGE_HIST_T
  add constraint PK_USER_PASS_CHANGE_HIST primary key (SERIAL_NO);

prompt
prompt Creating table SM_USER_PRIMARY_ROLE_MAPPING_T
prompt =============================================
prompt
create table SM_USER_PRIMARY_ROLE_MAPPING_T
(
  userid           NUMBER not null,
  application_id   NUMBER(3) not null,
  role_id          NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table SM_USER_PRIMARY_ROLE_MAPPING_T
  add constraint PK_USER_PR_ROLE_MAP primary key (USERID, APPLICATION_ID, ROLE_ID);
alter table SM_USER_PRIMARY_ROLE_MAPPING_T
  add constraint FK_PR_ROLEMAP_ROLE foreign key (ROLE_ID)
  references SM_ROLE_SETUP_T (ROLE_ID);
alter table SM_USER_PRIMARY_ROLE_MAPPING_T
  add constraint FK_PR_ROLE_USER foreign key (USERID)
  references SM_USERS_T (USERID);

prompt
prompt Creating table SM_USER_ROLE_MAPPING_T
prompt =====================================
prompt
create table SM_USER_ROLE_MAPPING_T
(
  userid           NUMBER not null,
  role_id          NUMBER not null,
  application_id   NUMBER(3),
  role_start_date  DATE,
  role_end_date    DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table SM_USER_ROLE_MAPPING_T
  add constraint PK_USER_ROLE_MAP primary key (USERID, ROLE_ID);
alter table SM_USER_ROLE_MAPPING_T
  add constraint FK_ROLEMAP_ROLE foreign key (ROLE_ID)
  references SM_ROLE_SETUP_T (ROLE_ID);
alter table SM_USER_ROLE_MAPPING_T
  add constraint FK_ROLE_USER foreign key (USERID)
  references SM_USERS_T (USERID);

prompt
prompt Creating table SUB_PROD_BEN_AGE_LIMIT_T
prompt =======================================
prompt
create table SUB_PROD_BEN_AGE_LIMIT_T
(
  org_id            NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  application_id    NUMBER not null,
  benefit_code      NUMBER not null,
  relation          VARCHAR2(20) not null,
  gender            VARCHAR2(10),
  min_age           NUMBER,
  max_age           NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table SUB_PROD_BEN_AGE_LIMIT_T
  add constraint PK_PROD_BEN_AGE primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, APPLICATION_ID, BENEFIT_CODE, RELATION);

prompt
prompt Creating table SUITABILITY_SCORE_LABELING_T
prompt ===========================================
prompt
create table SUITABILITY_SCORE_LABELING_T
(
  org_id           NUMBER not null,
  score_id         NUMBER not null,
  score_from       NUMBER,
  score_to         NUMBER,
  decision_label   VARCHAR2(250),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table SUITABILITY_SCORE_LABELING_T
  add constraint SUITABILITY_SCORE_LABELING_T primary key (ORG_ID, SCORE_ID);

prompt
prompt Creating table SYS_EXPORT_SCHEMA_01
prompt ===================================
prompt
create table SYS_EXPORT_SCHEMA_01
(
  abort_step              NUMBER,
  ancestor_process_order  NUMBER,
  base_object_name        VARCHAR2(30),
  base_object_schema      VARCHAR2(30),
  base_object_type        VARCHAR2(30),
  base_process_order      NUMBER,
  block_size              NUMBER,
  cluster_ok              NUMBER,
  completed_bytes         NUMBER,
  completed_rows          NUMBER,
  completion_time         DATE,
  control_queue           VARCHAR2(30),
  creation_level          NUMBER,
  cumulative_time         NUMBER,
  data_buffer_size        NUMBER,
  data_io                 NUMBER,
  dataobj_num             NUMBER,
  db_version              VARCHAR2(60),
  degree                  NUMBER,
  domain_process_order    NUMBER,
  dump_allocation         NUMBER,
  dump_fileid             NUMBER,
  dump_length             NUMBER,
  dump_orig_length        NUMBER,
  dump_position           NUMBER,
  duplicate               NUMBER,
  elapsed_time            NUMBER,
  error_count             NUMBER,
  extend_size             NUMBER,
  file_max_size           NUMBER,
  file_name               VARCHAR2(4000),
  file_type               NUMBER,
  flags                   NUMBER,
  grantor                 VARCHAR2(30),
  granules                NUMBER,
  guid                    RAW(16),
  in_progress             CHAR(1),
  instance                VARCHAR2(60),
  instance_id             NUMBER,
  is_default              NUMBER,
  job_mode                VARCHAR2(21),
  job_version             VARCHAR2(60),
  last_file               NUMBER,
  last_update             DATE,
  load_method             NUMBER,
  metadata_buffer_size    NUMBER,
  metadata_io             NUMBER,
  name                    VARCHAR2(30),
  object_int_oid          VARCHAR2(32),
  object_long_name        VARCHAR2(4000),
  object_name             VARCHAR2(200),
  object_number           NUMBER,
  object_path_seqno       NUMBER,
  object_row              NUMBER,
  object_schema           VARCHAR2(30),
  object_tablespace       VARCHAR2(30),
  object_type             VARCHAR2(30),
  object_type_path        VARCHAR2(200),
  old_value               VARCHAR2(4000),
  operation               VARCHAR2(8),
  option_tag              VARCHAR2(30),
  orig_base_object_schema VARCHAR2(30),
  original_object_name    VARCHAR2(128),
  original_object_schema  VARCHAR2(30),
  packet_number           NUMBER,
  parallelization         NUMBER,
  parent_process_order    NUMBER,
  partition_name          VARCHAR2(30),
  phase                   NUMBER,
  platform                VARCHAR2(101),
  process_name            VARCHAR2(30),
  process_order           NUMBER,
  processing_state        CHAR(1),
  processing_status       CHAR(1),
  property                NUMBER,
  queue_tabnum            NUMBER,
  remote_link             VARCHAR2(128),
  scn                     NUMBER,
  seed                    NUMBER,
  service_name            VARCHAR2(64),
  size_estimate           NUMBER,
  start_time              DATE,
  state                   VARCHAR2(12),
  status_queue            VARCHAR2(30),
  subpartition_name       VARCHAR2(30),
  target_xml_clob         CLOB,
  tde_rewrapped_key       RAW(2000),
  template_table          VARCHAR2(30),
  timezone                VARCHAR2(64),
  total_bytes             NUMBER,
  trigflag                NUMBER,
  unload_method           NUMBER,
  user_directory          VARCHAR2(4000),
  user_file_name          VARCHAR2(4000),
  user_name               VARCHAR2(30),
  value_n                 NUMBER,
  value_t                 VARCHAR2(4000),
  version                 NUMBER,
  work_item               VARCHAR2(21),
  xml_clob                CLOB
)
;
comment on table SYS_EXPORT_SCHEMA_01
  is 'Data Pump Master Table EXPORT                         SCHEMA                        ';
create index SYS_MTABLE_000034FCD_IND_1 on SYS_EXPORT_SCHEMA_01 (OBJECT_SCHEMA, OBJECT_NAME, OBJECT_TYPE);
create index SYS_MTABLE_000034FCD_IND_2 on SYS_EXPORT_SCHEMA_01 (BASE_PROCESS_ORDER);
alter table SYS_EXPORT_SCHEMA_01
  add unique (PROCESS_ORDER, DUPLICATE);

prompt
prompt Creating table SYS_EXPORT_SCHEMA_02
prompt ===================================
prompt
create table SYS_EXPORT_SCHEMA_02
(
  abort_step              NUMBER,
  ancestor_process_order  NUMBER,
  base_object_name        VARCHAR2(30),
  base_object_schema      VARCHAR2(30),
  base_object_type        VARCHAR2(30),
  base_process_order      NUMBER,
  block_size              NUMBER,
  cluster_ok              NUMBER,
  completed_bytes         NUMBER,
  completed_rows          NUMBER,
  completion_time         DATE,
  control_queue           VARCHAR2(30),
  creation_level          NUMBER,
  cumulative_time         NUMBER,
  data_buffer_size        NUMBER,
  data_io                 NUMBER,
  dataobj_num             NUMBER,
  db_version              VARCHAR2(60),
  degree                  NUMBER,
  domain_process_order    NUMBER,
  dump_allocation         NUMBER,
  dump_fileid             NUMBER,
  dump_length             NUMBER,
  dump_orig_length        NUMBER,
  dump_position           NUMBER,
  duplicate               NUMBER,
  elapsed_time            NUMBER,
  error_count             NUMBER,
  extend_size             NUMBER,
  file_max_size           NUMBER,
  file_name               VARCHAR2(4000),
  file_type               NUMBER,
  flags                   NUMBER,
  grantor                 VARCHAR2(30),
  granules                NUMBER,
  guid                    RAW(16),
  in_progress             CHAR(1),
  instance                VARCHAR2(60),
  instance_id             NUMBER,
  is_default              NUMBER,
  job_mode                VARCHAR2(21),
  job_version             VARCHAR2(60),
  last_file               NUMBER,
  last_update             DATE,
  load_method             NUMBER,
  metadata_buffer_size    NUMBER,
  metadata_io             NUMBER,
  name                    VARCHAR2(30),
  object_int_oid          VARCHAR2(32),
  object_long_name        VARCHAR2(4000),
  object_name             VARCHAR2(200),
  object_number           NUMBER,
  object_path_seqno       NUMBER,
  object_row              NUMBER,
  object_schema           VARCHAR2(30),
  object_tablespace       VARCHAR2(30),
  object_type             VARCHAR2(30),
  object_type_path        VARCHAR2(200),
  old_value               VARCHAR2(4000),
  operation               VARCHAR2(8),
  option_tag              VARCHAR2(30),
  orig_base_object_schema VARCHAR2(30),
  original_object_name    VARCHAR2(128),
  original_object_schema  VARCHAR2(30),
  packet_number           NUMBER,
  parallelization         NUMBER,
  parent_process_order    NUMBER,
  partition_name          VARCHAR2(30),
  phase                   NUMBER,
  platform                VARCHAR2(101),
  process_name            VARCHAR2(30),
  process_order           NUMBER,
  processing_state        CHAR(1),
  processing_status       CHAR(1),
  property                NUMBER,
  queue_tabnum            NUMBER,
  remote_link             VARCHAR2(128),
  scn                     NUMBER,
  seed                    NUMBER,
  service_name            VARCHAR2(64),
  size_estimate           NUMBER,
  start_time              DATE,
  state                   VARCHAR2(12),
  status_queue            VARCHAR2(30),
  subpartition_name       VARCHAR2(30),
  target_xml_clob         CLOB,
  tde_rewrapped_key       RAW(2000),
  template_table          VARCHAR2(30),
  timezone                VARCHAR2(64),
  total_bytes             NUMBER,
  trigflag                NUMBER,
  unload_method           NUMBER,
  user_directory          VARCHAR2(4000),
  user_file_name          VARCHAR2(4000),
  user_name               VARCHAR2(30),
  value_n                 NUMBER,
  value_t                 VARCHAR2(4000),
  version                 NUMBER,
  work_item               VARCHAR2(21),
  xml_clob                CLOB
)
;
comment on table SYS_EXPORT_SCHEMA_02
  is 'Data Pump Master Table EXPORT                         SCHEMA                        ';
create index SYS_MTABLE_000034FE3_IND_1 on SYS_EXPORT_SCHEMA_02 (OBJECT_SCHEMA, OBJECT_NAME, OBJECT_TYPE);
create index SYS_MTABLE_000034FE3_IND_2 on SYS_EXPORT_SCHEMA_02 (BASE_PROCESS_ORDER);
alter table SYS_EXPORT_SCHEMA_02
  add unique (PROCESS_ORDER, DUPLICATE);

prompt
prompt Creating table TAKAFUL_TYPE_SETUP_T
prompt ===================================
prompt
create table TAKAFUL_TYPE_SETUP_T
(
  org_id           NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  description      VARCHAR2(50),
  active           VARCHAR2(1),
  creation_date    DATE,
  created_by       VARCHAR2(50),
  last_update_date DATE,
  last_updated_by  VARCHAR2(50)
)
;
alter table TAKAFUL_TYPE_SETUP_T
  add constraint PK_TK_TYPE primary key (ORG_ID, TAKAFUL_TYPE);
alter table TAKAFUL_TYPE_SETUP_T
  add constraint FK_TK_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TARIFF_APPLICATION_MAP_T
prompt =======================================
prompt
create table TARIFF_APPLICATION_MAP_T
(
  org_id           NUMBER not null,
  tariff_code      NUMBER not null,
  application_id   NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TARIFF_APPLICATION_MAP_T
  add constraint PK_TAR_APP_MAP_T primary key (ORG_ID, TARIFF_CODE, APPLICATION_ID);

prompt
prompt Creating table TASK_MANAGER_T
prompt =============================
prompt
create table TASK_MANAGER_T
(
  org_id               NUMBER not null,
  project_id           NUMBER not null,
  task_id              NUMBER not null,
  task_name            VARCHAR2(200),
  task_desc            VARCHAR2(1000),
  task_priority        VARCHAR2(10),
  task_start_date      DATE,
  task_target_date     DATE,
  task_actual_end_date DATE,
  task_category        VARCHAR2(50),
  task_status          VARCHAR2(10),
  task_assignee        NUMBER,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  file_path            VARCHAR2(200),
  task_stage_id        NUMBER,
  parent_task_id       NUMBER,
  task_closed_by       VARCHAR2(50),
  task_group_id        NUMBER
)
;
alter table TASK_MANAGER_T
  add constraint PK_TASK_MANAGER_T primary key (ORG_ID, PROJECT_ID, TASK_ID);

prompt
prompt Creating table TASK_REGISTER_MAIN_T
prompt ===================================
prompt
create table TASK_REGISTER_MAIN_T
(
  org_id           NUMBER not null,
  register_id      NUMBER not null,
  t_date           DATE,
  time_in          DATE,
  time_out         DATE,
  task_summary     VARCHAR2(1000),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TASK_REGISTER_MAIN_T
  add constraint PK_TASK_REGISTER_MAIN_T primary key (ORG_ID, REGISTER_ID);

prompt
prompt Creating table TASK_REGISTER_SUMMARY_T
prompt ======================================
prompt
create table TASK_REGISTER_SUMMARY_T
(
  org_id           NUMBER not null,
  register_id      NUMBER not null,
  detail_id        NUMBER not null,
  task_summary     VARCHAR2(1000),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TASK_REGISTER_SUMMARY_T
  add constraint PK_TASK_REGISTER_SUMMARY_T primary key (ORG_ID, REGISTER_ID, DETAIL_ID);

prompt
prompt Creating table TASK_STAGE_T
prompt ===========================
prompt
create table TASK_STAGE_T
(
  org_id                 NUMBER not null,
  task_stage_id          NUMBER not null,
  task_stage_description VARCHAR2(200),
  active                 VARCHAR2(5),
  created_by             VARCHAR2(50),
  creation_date          DATE,
  last_updated_by        VARCHAR2(50),
  last_update_date       DATE
)
;
alter table TASK_STAGE_T
  add constraint PK_TASK_STAGE_T primary key (ORG_ID, TASK_STAGE_ID);

prompt
prompt Creating table TASK_TYPE_SETUP_T
prompt ================================
prompt
create table TASK_TYPE_SETUP_T
(
  task_type_id     NUMBER not null,
  task_type_desc   VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  org_id           NUMBER not null
)
;
alter table TASK_TYPE_SETUP_T
  add constraint PK_TASK_TYPE_SETUP_T primary key (ORG_ID, TASK_TYPE_ID);

prompt
prompt Creating table TEST_SETUP_T
prompt ===========================
prompt
create table TEST_SETUP_T
(
  code        NUMBER not null,
  description VARCHAR2(255),
  test_date   DATE,
  test_abbr   VARCHAR2(4)
)
;
alter table TEST_SETUP_T
  add constraint PK_TEST_SETUP_T_CODE primary key (CODE);

prompt
prompt Creating table THIRDPARTYKEY
prompt ============================
prompt
create table THIRDPARTYKEY
(
  username   VARCHAR2(100),
  key        VARCHAR2(100),
  isactive   NUMBER default 0,
  monthlimit NUMBER default 60000,
  daylimit   NUMBER default 600
)
;

prompt
prompt Creating table THIRDPARTYUSERS
prompt ==============================
prompt
create table THIRDPARTYUSERS
(
  username        VARCHAR2(100) not null,
  firstname       VARCHAR2(100),
  lastname        VARCHAR2(100),
  password        VARCHAR2(50),
  email           VARCHAR2(100),
  referralfrom    VARCHAR2(100),
  howdidyou       VARCHAR2(100),
  howdidyousource VARCHAR2(250),
  countrycode     VARCHAR2(100),
  contactnumber   VARCHAR2(20)
)
;
alter table THIRDPARTYUSERS
  add constraint THIRDPARTYUSERS_PK primary key (USERNAME);

prompt
prompt Creating table THIRPARTYCALLS
prompt =============================
prompt
create table THIRPARTYCALLS
(
  username          VARCHAR2(100),
  apikey            VARCHAR2(100),
  totallydailycalls NUMBER not null,
  calldate          DATE,
  isactive          VARCHAR2(1)
)
;

prompt
prompt Creating table TICKET_DOC_CHECKLIST_MAP_T
prompt =========================================
prompt
create table TICKET_DOC_CHECKLIST_MAP_T
(
  org_id             NUMBER not null,
  application_id     NUMBER not null,
  ticket_id          NUMBER not null,
  document_no        VARCHAR2(200),
  ticket_type        NUMBER not null,
  ticket_sub_type    NUMBER not null,
  document_type      VARCHAR2(1),
  doc_checklist_code NUMBER not null,
  required_document  VARCHAR2(200),
  file_path          VARCHAR2(500),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table TICKET_DOC_CHECKLIST_MAP_T
  add primary key (ORG_ID, APPLICATION_ID, TICKET_ID, TICKET_TYPE, TICKET_SUB_TYPE, DOC_CHECKLIST_CODE);

prompt
prompt Creating table TICKET_REASSIGN_ISM_MAPP_T
prompt =========================================
prompt
create table TICKET_REASSIGN_ISM_MAPP_T
(
  org_id             NUMBER not null,
  ticket_type_id     NUMBER not null,
  ticket_sub_type_id NUMBER not null,
  reassign_map_id    NUMBER not null,
  ism                NUMBER,
  ism_code           VARCHAR2(20),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table TICKET_REASSIGN_ISM_MAPP_T
  add constraint PK_TKT_REASSIGN_T primary key (ORG_ID, TICKET_TYPE_ID, TICKET_SUB_TYPE_ID, REASSIGN_MAP_ID);

prompt
prompt Creating table TKT_RESP_DEPT_ISM_T
prompt ==================================
prompt
create table TKT_RESP_DEPT_ISM_T
(
  org_id           NUMBER not null,
  dept_id          NUMBER not null,
  ism_code         VARCHAR2(100) not null,
  ism_desc         VARCHAR2(50),
  tat              VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TKT_RESP_DEPT_ISM_T
  add constraint PK_TKT_RESP_DEPT_ISM primary key (ORG_ID, DEPT_ID, ISM_CODE);

prompt
prompt Creating table TK_API_MAPPING_T
prompt ===============================
prompt
create table TK_API_MAPPING_T
(
  mapping_type     VARCHAR2(10) not null,
  api_value        VARCHAR2(100) not null,
  takaful_value    VARCHAR2(100),
  creation_date    DATE,
  created_by       VARCHAR2(50),
  last_update_date DATE,
  last_updated_by  VARCHAR2(50)
)
;
alter table TK_API_MAPPING_T
  add constraint PK_TK_MAPPING primary key (MAPPING_TYPE, API_VALUE);

prompt
prompt Creating table TK_BID_OFFER_SETUP_T
prompt ===================================
prompt
create table TK_BID_OFFER_SETUP_T
(
  org_id               NUMBER not null,
  rate_id              NUMBER not null,
  rate                 NUMBER,
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(100),
  creation_date        DATE,
  last_updated_by      VARCHAR2(100),
  last_update_date     DATE
)
;
alter table TK_BID_OFFER_SETUP_T
  add constraint TK_BID_OFFER_SETUP_PK primary key (ORG_ID, RATE_ID);

prompt
prompt Creating table TK_BUSINESS_CLASS_T
prompt ==================================
prompt
create table TK_BUSINESS_CLASS_T
(
  b_class_code     NUMBER not null,
  b_class_name     VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_BUSINESS_CLASS_T
  add constraint PK_TK_BUSINESS_CLASS_T primary key (B_CLASS_CODE);

prompt
prompt Creating table TK_BUS_CLASS_SETUP_T
prompt ===================================
prompt
create table TK_BUS_CLASS_SETUP_T
(
  org_id               NUMBER not null,
  b_class_code         VARCHAR2(10) not null,
  b_class_desc         VARCHAR2(500),
  active               VARCHAR2(1),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  document_description VARCHAR2(4000),
  life_tag             VARCHAR2(1),
  show_expiry          VARCHAR2(1)
)
;
alter table TK_BUS_CLASS_SETUP_T
  add constraint PK_TK_BUS_CLASS_SETUP_T primary key (ORG_ID, B_CLASS_CODE);
alter table TK_BUS_CLASS_SETUP_T
  add constraint FK_ORG_BCLASS foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_BUS_CLASS_AGENTS_T
prompt ====================================
prompt
create table TK_BUS_CLASS_AGENTS_T
(
  org_id           NUMBER not null,
  b_class_code     VARCHAR2(10) not null,
  agent_code       NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_BUS_CLASS_AGENTS_T
  add constraint PK_TK_BUS_CLASS_AGENTS_T primary key (ORG_ID, B_CLASS_CODE, AGENT_CODE);
alter table TK_BUS_CLASS_AGENTS_T
  add constraint FK_AGENT_MAP_AGENT foreign key (ORG_ID, AGENT_CODE)
  references TK_AGENT_SETUP_T (ORG_ID, AGENT_CODE);
alter table TK_BUS_CLASS_AGENTS_T
  add constraint FK_AGENT_MAP_BCLASS foreign key (ORG_ID, B_CLASS_CODE)
  references TK_BUS_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE);
alter table TK_BUS_CLASS_AGENTS_T
  add constraint FK_ORG_AGENT_MAP foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_BUS_CLASS_CNTRY_MAP_T
prompt =======================================
prompt
create table TK_BUS_CLASS_CNTRY_MAP_T
(
  org_id           NUMBER not null,
  b_class_code     VARCHAR2(10) not null,
  country_code     VARCHAR2(20) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_BUS_CLASS_CNTRY_MAP_T
  add constraint PK_TK_BCLASS_CNTRY_MAP_T primary key (ORG_ID, B_CLASS_CODE, COUNTRY_CODE);
alter table TK_BUS_CLASS_CNTRY_MAP_T
  add constraint FK_BCLASS_BCLASS_CNT_MAP foreign key (ORG_ID, B_CLASS_CODE)
  references TK_BUS_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE);
alter table TK_BUS_CLASS_CNTRY_MAP_T
  add constraint FK_CNT_BCLASS_CNT_MAP foreign key (COUNTRY_CODE)
  references COUNTRY (COUNTRY_CODE);
alter table TK_BUS_CLASS_CNTRY_MAP_T
  add constraint FK_ORG_BCLASS_CNT_MAP foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_INSURANCE_COMPANY_T
prompt =====================================
prompt
create table TK_INSURANCE_COMPANY_T
(
  company_code     NUMBER not null,
  company_name     VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_INSURANCE_COMPANY_T
  add constraint PK_TK_INSURANCE_COMPANY_T primary key (COMPANY_CODE);

prompt
prompt Creating table TK_B_CLASS_PRODUCTS_T
prompt ====================================
prompt
create table TK_B_CLASS_PRODUCTS_T
(
  company_code      NUMBER not null,
  b_class_code      NUMBER not null,
  product_code      NUMBER not null,
  product_desc      VARCHAR2(200),
  active            VARCHAR2(1),
  contribution_rate NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table TK_B_CLASS_PRODUCTS_T
  add constraint PK_TK_INSU_COMP_PRODUCTS_T primary key (COMPANY_CODE, B_CLASS_CODE, PRODUCT_CODE);
alter table TK_B_CLASS_PRODUCTS_T
  add foreign key (COMPANY_CODE)
  references TK_INSURANCE_COMPANY_T (COMPANY_CODE);
alter table TK_B_CLASS_PRODUCTS_T
  add foreign key (B_CLASS_CODE)
  references TK_BUSINESS_CLASS_T (B_CLASS_CODE);

prompt
prompt Creating table TK_B_CLASS_PROD_FEATURE_T
prompt ========================================
prompt
create table TK_B_CLASS_PROD_FEATURE_T
(
  b_class_code     NUMBER not null,
  feature_code     NUMBER not null,
  feature_desc     VARCHAR2(200),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_B_CLASS_PROD_FEATURE_T
  add constraint PK_TK_B_CLASS_PROD_FEATURE_T primary key (B_CLASS_CODE, FEATURE_CODE);
alter table TK_B_CLASS_PROD_FEATURE_T
  add foreign key (B_CLASS_CODE)
  references TK_BUSINESS_CLASS_T (B_CLASS_CODE);

prompt
prompt Creating table TK_B_CLASS_PROD_FEAT_MAP_T
prompt =========================================
prompt
create table TK_B_CLASS_PROD_FEAT_MAP_T
(
  company_code     NUMBER not null,
  b_class_code     NUMBER not null,
  product_code     NUMBER not null,
  feature_code     NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_B_CLASS_PROD_FEAT_MAP_T
  add constraint PK_TK_PROD_FEAT_MAP primary key (COMPANY_CODE, B_CLASS_CODE, PRODUCT_CODE, FEATURE_CODE);
alter table TK_B_CLASS_PROD_FEAT_MAP_T
  add foreign key (COMPANY_CODE)
  references TK_INSURANCE_COMPANY_T (COMPANY_CODE);
alter table TK_B_CLASS_PROD_FEAT_MAP_T
  add foreign key (B_CLASS_CODE)
  references TK_BUSINESS_CLASS_T (B_CLASS_CODE);

prompt
prompt Creating table TK_B_CLASS_PROD_OTH_T
prompt ====================================
prompt
create table TK_B_CLASS_PROD_OTH_T
(
  b_class_code     NUMBER not null,
  field_code       NUMBER not null,
  field_desc       VARCHAR2(200),
  field_type       NUMBER,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  rate_tag         VARCHAR2(1),
  value_set_id     NUMBER,
  valueset_id      NUMBER,
  sql_query        VARCHAR2(1000),
  field_db_name    VARCHAR2(50)
)
;
alter table TK_B_CLASS_PROD_OTH_T
  add constraint PK_TK_B_CLASS_PROD_OTH_T primary key (B_CLASS_CODE, FIELD_CODE);
alter table TK_B_CLASS_PROD_OTH_T
  add foreign key (B_CLASS_CODE)
  references TK_BUSINESS_CLASS_T (B_CLASS_CODE);

prompt
prompt Creating table TK_B_CLASS_PROD_RATE_T
prompt =====================================
prompt
create table TK_B_CLASS_PROD_RATE_T
(
  serial_no        NUMBER not null,
  company_code     NUMBER,
  b_class_code     NUMBER,
  product_code     NUMBER,
  make_code        NUMBER,
  model_code       NUMBER,
  vehicle_year     NUMBER,
  engine_power     NUMBER,
  rate_actual      NUMBER,
  rate_discounted  NUMBER,
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  vehicle_value    NUMBER,
  plan_type        VARCHAR2(10),
  destination      VARCHAR2(10),
  country_code     VARCHAR2(10)
)
;
alter table TK_B_CLASS_PROD_RATE_T
  add constraint PK_TK_B_CLASS_PROD_RATE_T primary key (SERIAL_NO);
alter table TK_B_CLASS_PROD_RATE_T
  add foreign key (COMPANY_CODE, B_CLASS_CODE, PRODUCT_CODE)
  references TK_B_CLASS_PRODUCTS_T (COMPANY_CODE, B_CLASS_CODE, PRODUCT_CODE);

prompt
prompt Creating table TK_CLAIM_ASSESSMENT_DOCUMENT_T
prompt =============================================
prompt
create table TK_CLAIM_ASSESSMENT_DOCUMENT_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  benefit_code     VARCHAR2(2) not null,
  claim_year       VARCHAR2(4) not null,
  assessment_id    NUMBER not null,
  requirement_code NUMBER not null,
  file_name        VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  application_id   NUMBER not null,
  status           VARCHAR2(1)
)
;
alter table TK_CLAIM_ASSESSMENT_DOCUMENT_T
  add constraint PK_CLAIM_ASSESSMENT_DOCUMENT primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, BENEFIT_CODE, ASSESSMENT_ID, CLAIM_YEAR, REQUIREMENT_CODE);

prompt
prompt Creating table TK_CLAIM_ASSESSMENT_HISTORY_T
prompt ============================================
prompt
create table TK_CLAIM_ASSESSMENT_HISTORY_T
(
  org_id            NUMBER not null,
  branch_id         VARCHAR2(10) not null,
  sub_product_code  VARCHAR2(10) not null,
  claim_no          VARCHAR2(10) not null,
  benefit_code      VARCHAR2(2) not null,
  assessment_id     NUMBER not null,
  application_id    NUMBER not null,
  code              NUMBER not null,
  assessment_status VARCHAR2(2),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  description       VARCHAR2(400),
  claim_year        VARCHAR2(4) not null
)
;
alter table TK_CLAIM_ASSESSMENT_HISTORY_T
  add constraint PK_TKASSESSMENT_HISTORY_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, BENEFIT_CODE, ASSESSMENT_ID, CODE, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_ASSESSMENT_T
prompt ====================================
prompt
create table TK_CLAIM_ASSESSMENT_T
(
  org_id                    NUMBER not null,
  branch_id                 VARCHAR2(10) not null,
  sub_product_code          VARCHAR2(10) not null,
  claim_no                  VARCHAR2(10) not null,
  benefit_code              VARCHAR2(2) not null,
  assessment_id             NUMBER not null,
  notes                     VARCHAR2(1000),
  assessment_date           DATE,
  file_name                 VARCHAR2(60),
  assessment_status         VARCHAR2(2),
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_updated_by           VARCHAR2(50),
  last_update_date          DATE,
  application_id            NUMBER not null,
  assessment_amount         NUMBER,
  claim_cancellation_reason NUMBER,
  paycon_no                 NUMBER,
  installment_type          VARCHAR2(10),
  excess_amount             NUMBER,
  retention_claim_amount    NUMBER,
  quota_share_amount        NUMBER,
  claim_year                VARCHAR2(4) not null,
  cancel_by                 VARCHAR2(50),
  cancel_date               DATE,
  additional_payment        VARCHAR2(1),
  claim_decline_reason      NUMBER
)
;
alter table TK_CLAIM_ASSESSMENT_T
  add constraint PK_TK_CLAIM_ASSESSMENT_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, BENEFIT_CODE, ASSESSMENT_ID, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_ASS_REQUIRED_DOCS_T
prompt ===========================================
prompt
create table TK_CLAIM_ASS_REQUIRED_DOCS_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  benefit_code     VARCHAR2(2) not null,
  claim_year       VARCHAR2(4) not null,
  assessment_id    NUMBER not null,
  requirement_code NUMBER not null,
  requirement_name VARCHAR2(50),
  requirement_desc VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  application_id   NUMBER not null
)
;
alter table TK_CLAIM_ASS_REQUIRED_DOCS_T
  add constraint PK_CLAIM_ASS_REQUIRED_DOCS primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, BENEFIT_CODE, ASSESSMENT_ID, CLAIM_YEAR, REQUIREMENT_CODE);

prompt
prompt Creating table TK_CLAIM_ATTACHMENT_T
prompt ====================================
prompt
create table TK_CLAIM_ATTACHMENT_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  application_id   NUMBER not null,
  claim_year       VARCHAR2(5) not null,
  attachment_code  NUMBER not null,
  file_path        VARCHAR2(300),
  attachment_desc  VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_CLAIM_ATTACHMENT_T
  add constraint PK_TK_CLAIM_ATTACH primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, CLAIM_YEAR, ATTACHMENT_CODE);

prompt
prompt Creating table TK_CLAIM_BENEFITS_T
prompt ==================================
prompt
create table TK_CLAIM_BENEFITS_T
(
  org_id                      NUMBER not null,
  branch_id                   VARCHAR2(10) not null,
  sub_product_code            VARCHAR2(10) not null,
  claim_no                    VARCHAR2(10) not null,
  benefit_code                NUMBER not null,
  sum_insured                 NUMBER,
  claim_amount                NUMBER,
  created_by                  VARCHAR2(50),
  creation_date               DATE,
  last_updated_by             VARCHAR2(50),
  last_update_date            DATE,
  claim_benefit_status        VARCHAR2(50),
  application_id              NUMBER not null,
  retakaful_id                NUMBER,
  reinsurer_code              NUMBER,
  treaty_code                 NUMBER,
  claim_year                  VARCHAR2(4) not null,
  intimation_amount           NUMBER,
  retention_claim_amount      NUMBER,
  quota_share_amount          NUMBER,
  excess_amount               NUMBER,
  retention_intimation_amount NUMBER,
  quota_intimation_amount     NUMBER,
  additional_payment          VARCHAR2(1),
  manual_tag                  VARCHAR2(1),
  advice_reference_no         VARCHAR2(20),
  rev_advice_reference_no     VARCHAR2(20),
  claim_amount_orig           NUMBER,
  outstanding_amount          NUMBER,
  ptf_amount                  NUMBER,
  total_cash_value            NUMBER
)
;
alter table TK_CLAIM_BENEFITS_T
  add constraint PK_CL_TK_BENEFIT_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, BENEFIT_CODE, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_CASE_MANAGEMENT_T
prompt =========================================
prompt
create table TK_CLAIM_CASE_MANAGEMENT_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(30) not null,
  application_id   NUMBER not null,
  claim_year       VARCHAR2(4) not null,
  serial_code      NUMBER not null,
  log_date         DATE,
  attachment_path  VARCHAR2(200),
  comments         VARCHAR2(1500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  running_bill     NUMBER
)
;
alter table TK_CLAIM_CASE_MANAGEMENT_T
  add constraint PK_CL_CASE_MNG primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, CLAIM_YEAR, SERIAL_CODE);

prompt
prompt Creating table TK_CLAIM_COMMITTE_DECISION_T
prompt ===========================================
prompt
create table TK_CLAIM_COMMITTE_DECISION_T
(
  org_id             NUMBER not null,
  branch_id          VARCHAR2(10) not null,
  sub_product_code   VARCHAR2(10) not null,
  claim_no           VARCHAR2(10) not null,
  benefit_code       NUMBER not null,
  assessment_id      NUMBER not null,
  c_decision_id      NUMBER not null,
  decision_date      DATE,
  decision_value     VARCHAR2(500),
  decision_status    VARCHAR2(2),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  application_id     NUMBER not null,
  submission_date    DATE,
  claim_year         VARCHAR2(4) not null,
  cd_attachment_file VARCHAR2(50)
)
;
alter table TK_CLAIM_COMMITTE_DECISION_T
  add constraint PK_TK_CLAIM_COMMITTE_DEC_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, BENEFIT_CODE, ASSESSMENT_ID, C_DECISION_ID, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_INTERNAL_AUDIT_T
prompt ========================================
prompt
create table TK_CLAIM_INTERNAL_AUDIT_T
(
  org_id                NUMBER not null,
  appication_id         NUMBER,
  branch_id             VARCHAR2(10) not null,
  sub_product_code      VARCHAR2(10) not null,
  application_id        NUMBER not null,
  claim_no              VARCHAR2(10) not null,
  claim_year            VARCHAR2(4) not null,
  benefit_code          NUMBER not null,
  assessment_id         NUMBER not null,
  audit_id              NUMBER not null,
  decision_status       VARCHAR2(2),
  decision_date         DATE,
  remarks               VARCHAR2(1000),
  submission_date       DATE,
  audit_attachment_file VARCHAR2(100),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE
)
;
alter table TK_CLAIM_INTERNAL_AUDIT_T
  add constraint PK_CLAIM_INTERNAL_AUDIT_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, CLAIM_YEAR, AUDIT_ID, BENEFIT_CODE, ASSESSMENT_ID);

prompt
prompt Creating table TK_CLAIM_INTIMATION_ATTACH_T
prompt ===========================================
prompt
create table TK_CLAIM_INTIMATION_ATTACH_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  application_id   NUMBER not null,
  claim_year       VARCHAR2(5) not null,
  attachment_code  NUMBER not null,
  file_path        VARCHAR2(300),
  attachment_desc  VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_CLAIM_INTIMATION_ATTACH_T
  add constraint PK_TK_CLAIM_INT_ATTACH primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, CLAIM_YEAR, ATTACHMENT_CODE);

prompt
prompt Creating table TK_CLAIM_INTIMATION_T
prompt ====================================
prompt
create table TK_CLAIM_INTIMATION_T
(
  org_id                   NUMBER not null,
  branch_id                VARCHAR2(10) not null,
  sub_product_code         NUMBER not null,
  claim_no                 VARCHAR2(10) not null,
  claim_reference_no       VARCHAR2(50),
  reported_by              VARCHAR2(50),
  policy_holder            VARCHAR2(50),
  issue_date               DATE,
  reporting_date           DATE,
  event_date               DATE,
  admission_date           DATE,
  discharge_date           DATE,
  event_place              VARCHAR2(200),
  policy_no                VARCHAR2(50),
  insured_id               NUMBER,
  loss_type                NUMBER,
  loss_nature              VARCHAR2(20),
  cause_of_loss            NUMBER,
  cause_detail             VARCHAR2(200),
  remarks                  VARCHAR2(4000),
  insured_address          VARCHAR2(200),
  claim_status             VARCHAR2(10),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  post_tag                 VARCHAR2(1),
  post_by                  VARCHAR2(100),
  post_date                DATE,
  application_id           NUMBER not null,
  reported_email           VARCHAR2(70),
  reported_relation        VARCHAR2(200),
  reported_cnic            VARCHAR2(20),
  reported_mob_nm          VARCHAR2(20),
  endorsement_no           NUMBER,
  claim_request_no         VARCHAR2(100),
  reopen_reason            NUMBER,
  last_active_at_work_date DATE,
  last_salary_paid_date    DATE,
  intimation_source        VARCHAR2(20),
  re_open_date             DATE,
  total_days               NUMBER,
  event_country            VARCHAR2(5),
  event_state              VARCHAR2(7),
  proximate_cause          VARCHAR2(150),
  district                 VARCHAR2(150),
  fax_no                   VARCHAR2(100),
  item_cnic_no             VARCHAR2(13),
  reopened_benefit         VARCHAR2(100),
  claim_year               VARCHAR2(4) not null,
  employee_id              NUMBER,
  claim_type               VARCHAR2(20),
  claim_pool               VARCHAR2(20),
  hospital_type            VARCHAR2(10),
  panel_hospital           VARCHAR2(50),
  non_panel_hospital       VARCHAR2(200),
  reporting_time           VARCHAR2(15),
  claim_payment_type       VARCHAR2(20),
  issue_count              NUMBER,
  insured_name_reported    VARCHAR2(50)
)
;
alter table TK_CLAIM_INTIMATION_T
  add constraint PK_CL_TK_CLAIM_INTEMATION_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_INVESTIGATOR_SETT_T
prompt ===========================================
prompt
create table TK_CLAIM_INVESTIGATOR_SETT_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  inverigator_code VARCHAR2(10) not null,
  settlement_id    NUMBER not null,
  amount           NUMBER,
  settl_date       DATE,
  payee_name       VARCHAR2(60),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  application_id   NUMBER not null
)
;
alter table TK_CLAIM_INVESTIGATOR_SETT_T
  add constraint PK_TK_INVST_SETT_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, INVERIGATOR_CODE, SETTLEMENT_ID);

prompt
prompt Creating table TK_CLAIM_INVESTIGATOR_T
prompt ======================================
prompt
create table TK_CLAIM_INVESTIGATOR_T
(
  org_id            NUMBER not null,
  branch_id         VARCHAR2(10) not null,
  sub_product_code  VARCHAR2(10) not null,
  claim_no          VARCHAR2(10) not null,
  serial_code       NUMBER not null,
  investigator_code VARCHAR2(10) not null,
  appointment_date  DATE,
  file_name         VARCHAR2(60),
  submission_status VARCHAR2(2),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  application_id    NUMBER not null,
  benefit_code      NUMBER not null,
  assessment_id     NUMBER not null,
  submission_date   DATE,
  claim_year        VARCHAR2(4) not null
)
;
alter table TK_CLAIM_INVESTIGATOR_T
  add constraint PK_CLAIM_INVESTIGATOR_ID primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, SERIAL_CODE, INVESTIGATOR_CODE, APPLICATION_ID, BENEFIT_CODE, ASSESSMENT_ID, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_LITIGATION_T
prompt ====================================
prompt
create table TK_CLAIM_LITIGATION_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  application_id   NUMBER not null,
  litigation_code  NUMBER not null,
  notice_date      DATE,
  forum_name       VARCHAR2(100),
  country          VARCHAR2(10),
  state            VARCHAR2(10),
  city             VARCHAR2(10),
  assigned_to      VARCHAR2(30),
  assigned_date    DATE,
  status           VARCHAR2(30),
  remarks          VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  claim_year       VARCHAR2(4) not null
)
;
alter table TK_CLAIM_LITIGATION_T
  add constraint PK_TK_CLAIM_LIT primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, LITIGATION_CODE, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_LITI_REIMBURS_T
prompt =======================================
prompt
create table TK_CLAIM_LITI_REIMBURS_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  application_id   NUMBER not null,
  litigation_code  NUMBER not null,
  serial_code      NUMBER not null,
  claim_amount     NUMBER,
  status           VARCHAR2(3),
  approve_amount   NUMBER,
  settlement_date  DATE,
  remarks          VARCHAR2(150),
  payee_name       VARCHAR2(50),
  voucher_no       VARCHAR2(10),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  payment_source   VARCHAR2(5),
  claim_year       VARCHAR2(4) not null
)
;
alter table TK_CLAIM_LITI_REIMBURS_T
  add constraint PK_TK_LIT_REIMBR_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, LITIGATION_CODE, SERIAL_CODE, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_REGIS_DOCUMENTS_T
prompt =========================================
prompt
create table TK_CLAIM_REGIS_DOCUMENTS_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  application_id   NUMBER not null,
  attachment_code  NUMBER not null,
  file_path        VARCHAR2(100),
  attachment_desc  VARCHAR2(100),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  status           VARCHAR2(2),
  remarks          VARCHAR2(100),
  receive_date     DATE,
  claim_year       VARCHAR2(4) not null
)
;
alter table TK_CLAIM_REGIS_DOCUMENTS_T
  add constraint PK_TK_CLAIM_REGIS_DOC primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, ATTACHMENT_CODE, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_REQUEST_BENEFITS_T
prompt ==========================================
prompt
create table TK_CLAIM_REQUEST_BENEFITS_T
(
  org_id               NUMBER not null,
  branch_id            VARCHAR2(10) not null,
  sub_product_code     VARCHAR2(10) not null,
  claim_no             VARCHAR2(30) not null,
  application_id       NUMBER not null,
  benefit_code         NUMBER not null,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  scheme_list          VARCHAR2(50),
  percentage           NUMBER,
  claim_year           VARCHAR2(4) not null,
  initial_claim_amount NUMBER,
  manual_tag           VARCHAR2(1),
  claim_amount_orig    NUMBER,
  outstanding_amount   NUMBER,
  ptf_amount           NUMBER,
  file_name            VARCHAR2(50),
  total_cash_value     NUMBER
)
;
alter table TK_CLAIM_REQUEST_BENEFITS_T
  add constraint PK_CL_REQ_BENEFIT_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, BENEFIT_CODE, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_REQ_DOCUMENTS_T
prompt =======================================
prompt
create table TK_CLAIM_REQ_DOCUMENTS_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  application_id   NUMBER not null,
  attachment_code  NUMBER not null,
  file_path        VARCHAR2(100),
  attachment_desc  VARCHAR2(100),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  status           VARCHAR2(2),
  remarks          VARCHAR2(100),
  receive_date     DATE,
  claim_year       VARCHAR2(4) not null
)
;
alter table TK_CLAIM_REQ_DOCUMENTS_T
  add constraint PK_TK_CLAIM_DOC primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, ATTACHMENT_CODE, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_RESERVE_BEN_DIST_T
prompt ==========================================
prompt
create table TK_CLAIM_RESERVE_BEN_DIST_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  reserve_id       NUMBER not null,
  benefit_code     NUMBER not null,
  reserve_dist_id  NUMBER not null,
  benefit_amount   NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  application_id   NUMBER not null
)
;
alter table TK_CLAIM_RESERVE_BEN_DIST_T
  add constraint PK_TK_RESERVE_DIST_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, RESERVE_ID, BENEFIT_CODE, RESERVE_DIST_ID);

prompt
prompt Creating table TK_CLAIM_RESERVE_T
prompt =================================
prompt
create table TK_CLAIM_RESERVE_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  reserve_id       NUMBER not null,
  reserve_amount   NUMBER,
  reserve_date     DATE,
  reserve_type     VARCHAR2(20),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  post_tag         VARCHAR2(1),
  post_by          VARCHAR2(100),
  post_date        DATE,
  application_id   NUMBER not null,
  benefit_code     NUMBER not null,
  assessment_id    NUMBER
)
;
alter table TK_CLAIM_RESERVE_T
  add constraint PK_TK_CLAIM_RESERVE_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, RESERVE_ID, APPLICATION_ID, BENEFIT_CODE);

prompt
prompt Creating table TK_CLAIM_SETTLEMENT_T
prompt ====================================
prompt
create table TK_CLAIM_SETTLEMENT_T
(
  org_id                     NUMBER not null,
  branch_id                  VARCHAR2(10) not null,
  sub_product_code           VARCHAR2(10) not null,
  claim_no                   VARCHAR2(10) not null,
  settlement_id              NUMBER not null,
  settlement_amount          NUMBER,
  settlement_date            DATE,
  payee_name                 VARCHAR2(60),
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE,
  post_tag                   VARCHAR2(1),
  post_by                    VARCHAR2(100),
  post_date                  DATE,
  application_id             NUMBER not null,
  benefit_code               NUMBER not null,
  payee_type                 VARCHAR2(2),
  system_generated           VARCHAR2(1),
  voucher_no                 VARCHAR2(50),
  exgratia_tag               VARCHAR2(30),
  payment_source             VARCHAR2(5),
  branch_type                VARCHAR2(1),
  policy_holder_payee        VARCHAR2(5),
  assessment_id              NUMBER,
  excess_amount              NUMBER,
  retention_claim_amount     NUMBER,
  quota_share_amount         NUMBER,
  remarks                    VARCHAR2(150),
  claim_year                 VARCHAR2(4) not null,
  full_and_final_tag         VARCHAR2(1),
  reverse_tag                VARCHAR2(1),
  reverse_by                 VARCHAR2(50),
  reverse_date               DATE,
  employee_id                NUMBER,
  beneficiary_code           NUMBER,
  settlement_attachment_file VARCHAR2(50),
  advice_reference_no        VARCHAR2(20),
  rev_advice_reference_no    VARCHAR2(20)
)
;
alter table TK_CLAIM_SETTLEMENT_T
  add constraint PK_TK_CLAIM_SETTLEMENT_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, SETTLEMENT_ID, APPLICATION_ID, BENEFIT_CODE, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAIM_SETT_BNF_DIST_T
prompt =======================================
prompt
create table TK_CLAIM_SETT_BNF_DIST_T
(
  org_id             NUMBER not null,
  branch_id          VARCHAR2(10) not null,
  sub_product_code   VARCHAR2(10) not null,
  claim_no           VARCHAR2(10) not null,
  settlement_id      NUMBER not null,
  benefit_code       NUMBER not null,
  settlement_dist_id NUMBER not null,
  benefit_amount     NUMBER,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  application_id     NUMBER not null
)
;
alter table TK_CLAIM_SETT_BNF_DIST_T
  add constraint PK_TK_SETTL_DIST_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, SETTLEMENT_ID, BENEFIT_CODE, SETTLEMENT_DIST_ID);

prompt
prompt Creating table TK_CLAIM_VALID_CHECKLIST_T
prompt =========================================
prompt
create table TK_CLAIM_VALID_CHECKLIST_T
(
  org_id           NUMBER not null,
  branch_id        VARCHAR2(10) not null,
  sub_product_code VARCHAR2(10) not null,
  claim_no         VARCHAR2(10) not null,
  application_id   NUMBER not null,
  checklist_code   VARCHAR2(3) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  claim_year       VARCHAR2(4) not null
)
;
alter table TK_CLAIM_VALID_CHECKLIST_T
  add constraint PK_CLAIM_CHECKLIST primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, APPLICATION_ID, CHECKLIST_CODE, CLAIM_YEAR);

prompt
prompt Creating table TK_CLAUSES_SETUP_T
prompt =================================
prompt
create table TK_CLAUSES_SETUP_T
(
  org_id           NUMBER not null,
  b_class_code     VARCHAR2(10) not null,
  clause_code      VARCHAR2(10) not null,
  clause_desc      VARCHAR2(500),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  clause_text      VARCHAR2(4000)
)
;
alter table TK_CLAUSES_SETUP_T
  add constraint PK_TK_CLAUSES_SETUP_T primary key (ORG_ID, B_CLASS_CODE, CLAUSE_CODE);
alter table TK_CLAUSES_SETUP_T
  add constraint FK_CLAUSE_BCLASS foreign key (ORG_ID, B_CLASS_CODE)
  references TK_BUS_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE);
alter table TK_CLAUSES_SETUP_T
  add constraint FK_ORG_CLAUSE foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_COMMISSION_SLAB_T
prompt ===================================
prompt
create table TK_COMMISSION_SLAB_T
(
  org_id            NUMBER not null,
  application_id    NUMBER not null,
  slab_id           NUMBER not null,
  from_size         NUMBER,
  to_size           NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null
)
;
alter table TK_COMMISSION_SLAB_T
  add constraint TK_COMMISION_SLAB_T_PK primary key (ORG_ID, APPLICATION_ID, SLAB_ID, SUB_PRODUCT_CODE, MAIN_PRODUCT_CODE);

prompt
prompt Creating table TK_COMM_SLAB_DTL_T
prompt =================================
prompt
create table TK_COMM_SLAB_DTL_T
(
  org_id            NUMBER not null,
  application_id    NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  slab_id           NUMBER not null,
  level_id          NUMBER not null,
  agency_type       VARCHAR2(2) not null,
  comm_percentage   NUMBER,
  comm_type         VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table TK_COMM_SLAB_DTL_T
  add constraint TK_COMM_SLAB_DTL_T_PK primary key (LEVEL_ID, SLAB_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, APPLICATION_ID, ORG_ID);

prompt
prompt Creating table TK_CONDITION_SETUP_T
prompt ===================================
prompt
create table TK_CONDITION_SETUP_T
(
  cn_code           NUMBER not null,
  cn_desc           VARCHAR2(50),
  active            VARCHAR2(1),
  cn_text_quotation VARCHAR2(4000),
  cn_text_policy    VARCHAR2(4000),
  print_order       NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  org_id            NUMBER not null
)
;
alter table TK_CONDITION_SETUP_T
  add constraint TK_CONDITION_SETUP_T_PK primary key (CN_CODE, ORG_ID);

prompt
prompt Creating table TK_SUB_CLASS_SETUP_T
prompt ===================================
prompt
create table TK_SUB_CLASS_SETUP_T
(
  org_id            NUMBER not null,
  b_class_code      VARCHAR2(10) not null,
  sub_class_code    VARCHAR2(10) not null,
  sub_class_desc    VARCHAR2(500),
  premium_rate      NUMBER(9,6),
  active            VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  short_description VARCHAR2(500),
  admin_charges     NUMBER,
  flat_amount       NUMBER
)
;
alter table TK_SUB_CLASS_SETUP_T
  add constraint PK_TK_SUB_CLASS_SETUP_T primary key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE);
alter table TK_SUB_CLASS_SETUP_T
  add constraint FK_ORG_SUBCLASS foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);
alter table TK_SUB_CLASS_SETUP_T
  add constraint FK_SUBCLASS_BCLASS foreign key (ORG_ID, B_CLASS_CODE)
  references TK_BUS_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE);

prompt
prompt Creating table TK_CUSTOM_FORMS_SETUP_T
prompt ======================================
prompt
create table TK_CUSTOM_FORMS_SETUP_T
(
  org_id           NUMBER not null,
  b_class_code     VARCHAR2(10) not null,
  sub_class_code   VARCHAR2(10) not null,
  form_id          NUMBER not null,
  form_desc        VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_CUSTOM_FORMS_SETUP_T
  add constraint PK_TK_CUSTOM_FORMS_SETUP_T primary key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, FORM_ID);
alter table TK_CUSTOM_FORMS_SETUP_T
  add constraint FK_CUST_FORM_SUBCLASS foreign key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE)
  references TK_SUB_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE);
alter table TK_CUSTOM_FORMS_SETUP_T
  add constraint FK_ORG_CFORMS foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_CUSTOM_FORMS_FIELDS_T
prompt =======================================
prompt
create table TK_CUSTOM_FORMS_FIELDS_T
(
  org_id           NUMBER not null,
  b_class_code     VARCHAR2(10) not null,
  sub_class_code   VARCHAR2(10) not null,
  form_id          NUMBER not null,
  field_id         NUMBER not null,
  field_desc       VARCHAR2(500),
  field_type       VARCHAR2(2),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  display_order    NUMBER,
  valueset_id      NUMBER
)
;
alter table TK_CUSTOM_FORMS_FIELDS_T
  add constraint PK_TK_CUSTOM_FORMS_FIELDS_T primary key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, FORM_ID, FIELD_ID);
alter table TK_CUSTOM_FORMS_FIELDS_T
  add constraint FK_CUST_FORM_FIELDS foreign key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, FORM_ID)
  references TK_CUSTOM_FORMS_SETUP_T (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, FORM_ID);
alter table TK_CUSTOM_FORMS_FIELDS_T
  add constraint FK_ORG_CFORMS_FIRLDS foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_DEPARTMENT_SETUP_T
prompt ====================================
prompt
create table TK_DEPARTMENT_SETUP_T
(
  org_id           NUMBER not null,
  dept_id          NUMBER not null,
  dept_desc        VARCHAR2(100),
  dept_short_code  VARCHAR2(50),
  creation_date    DATE,
  created_by       VARCHAR2(50),
  last_update_date DATE,
  last_updated_by  VARCHAR2(50)
)
;
alter table TK_DEPARTMENT_SETUP_T
  add constraint PK_DEPT_SETUP_T primary key (ORG_ID, DEPT_ID);
alter table TK_DEPARTMENT_SETUP_T
  add constraint FK_DEPT_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_DOC_TYPE_SETUP_T
prompt ==================================
prompt
create table TK_DOC_TYPE_SETUP_T
(
  org_id           NUMBER not null,
  doc_type_code    VARCHAR2(10) not null,
  doc_type_desc    VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_DOC_TYPE_SETUP_T
  add constraint PK_TK_DOC_TYPE_SETUP_T primary key (ORG_ID, DOC_TYPE_CODE);
alter table TK_DOC_TYPE_SETUP_T
  add constraint FK_ORG_DOCTYPE foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_DOCUMENT_HEADER_T
prompt ===================================
prompt
create table TK_DOCUMENT_HEADER_T
(
  org_id             NUMBER not null,
  b_class_code       VARCHAR2(10) not null,
  sub_class_code     VARCHAR2(10) not null,
  doc_type_code      VARCHAR2(10) not null,
  client_id          NUMBER not null,
  doc_no             NUMBER not null,
  issue_date         DATE,
  comm_date          DATE,
  expiry_date        DATE,
  sum_covered        NUMBER(15,2),
  gross_contribution NUMBER(15,2),
  net_contribution   NUMBER(15,2),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table TK_DOCUMENT_HEADER_T
  add constraint PK_TK_DOCUMENT_HEADER primary key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, DOC_TYPE_CODE, CLIENT_ID, DOC_NO);
alter table TK_DOCUMENT_HEADER_T
  add constraint FK_HEADER_BCLASS foreign key (ORG_ID, B_CLASS_CODE)
  references TK_BUS_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE);
alter table TK_DOCUMENT_HEADER_T
  add constraint FK_HEADER_DOCTYPE foreign key (ORG_ID, DOC_TYPE_CODE)
  references TK_DOC_TYPE_SETUP_T (ORG_ID, DOC_TYPE_CODE);
alter table TK_DOCUMENT_HEADER_T
  add constraint FK_HEADER_SUBCLASS_FACTOR foreign key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE)
  references TK_SUB_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE);
alter table TK_DOCUMENT_HEADER_T
  add constraint FK_ORG_HEADER foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_DOCUMENT_OTHER_DETAILS_T
prompt ==========================================
prompt
create table TK_DOCUMENT_OTHER_DETAILS_T
(
  org_id           NUMBER not null,
  b_class_code     VARCHAR2(10) not null,
  sub_class_code   VARCHAR2(10) not null,
  doc_type_code    VARCHAR2(10) not null,
  client_id        NUMBER not null,
  doc_no           NUMBER not null,
  form_id          NUMBER not null,
  field_id         NUMBER not null,
  field_value      VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_DOCUMENT_OTHER_DETAILS_T
  add constraint PK_TK_DOCUMENT_OTHER_DETAILS primary key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, DOC_TYPE_CODE, CLIENT_ID, DOC_NO, FORM_ID, FIELD_ID);
alter table TK_DOCUMENT_OTHER_DETAILS_T
  add constraint FK_DETAIL_CF_FIELDS foreign key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, FORM_ID, FIELD_ID)
  references TK_CUSTOM_FORMS_FIELDS_T (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, FORM_ID, FIELD_ID);
alter table TK_DOCUMENT_OTHER_DETAILS_T
  add constraint FK_ORG_DOC_DETAIL foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);
alter table TK_DOCUMENT_OTHER_DETAILS_T
  add constraint PK_HEADER_OTH_DETAIL foreign key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, DOC_TYPE_CODE, CLIENT_ID, DOC_NO)
  references TK_DOCUMENT_HEADER_T (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, DOC_TYPE_CODE, CLIENT_ID, DOC_NO);

prompt
prompt Creating table TK_DOC_CLIENT_REQ_ALT_T
prompt ======================================
prompt
create table TK_DOC_CLIENT_REQ_ALT_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  alt_req_code     NUMBER not null,
  alteration_type  VARCHAR2(10),
  file_name        VARCHAR2(50),
  remarks          VARCHAR2(1000),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_DOC_CLIENT_REQ_ALT_T
  add constraint PK_DOC_CLIENT_REQ_ALT_T primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, ALT_REQ_CODE);

prompt
prompt Creating table TK_DOC_HEADER_MONTH_T
prompt ====================================
prompt
create table TK_DOC_HEADER_MONTH_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  product_code     NUMBER not null,
  sub_product_code NUMBER not null,
  takaful_type     VARCHAR2(1) not null,
  document_type    VARCHAR2(1) not null,
  document_no      VARCHAR2(10) not null,
  record_type      VARCHAR2(1) not null,
  document_year    VARCHAR2(10) not null,
  issue_count      NUMBER not null,
  endorsement_no   NUMBER not null,
  application_id   NUMBER not null,
  month_id         NUMBER not null,
  month_start      DATE,
  month_end        DATE,
  status           VARCHAR2(20),
  creation_date    DATE,
  created_by       VARCHAR2(50),
  last_update_date DATE,
  last_updated_by  VARCHAR2(50)
)
;
alter table TK_DOC_HEADER_MONTH_T
  add constraint PK_DOC_HEADER_MONTH primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, MONTH_ID);

prompt
prompt Creating table TK_DOC_SETTLEMENT_HD_T
prompt =====================================
prompt
create table TK_DOC_SETTLEMENT_HD_T
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  sett_no          NUMBER not null,
  sett_date        DATE,
  request_date     DATE,
  sett_type        NUMBER,
  sett_amount      NUMBER,
  sett_remarks     VARCHAR2(500),
  pmd_ref_no       VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  lock_flag        VARCHAR2(1),
  post_flag        VARCHAR2(1),
  posted_date      DATE,
  cancel_flag      VARCHAR2(1),
  cancel_by        VARCHAR2(50),
  cancel_date      DATE,
  posted_by        VARCHAR2(50),
  sett_reason      VARCHAR2(10),
  pmd_ref_no_key   VARCHAR2(150),
  advice_key       VARCHAR2(50)
)
;
alter table TK_DOC_SETTLEMENT_HD_T
  add constraint PK_TK_DOC_SETTLEMENT_HD_T primary key (ORG_ID, BRANCH_ID, SETT_NO);

prompt
prompt Creating table TK_EFFECTIVE_AGE_CHART_T
prompt =======================================
prompt
create table TK_EFFECTIVE_AGE_CHART_T
(
  org_id           NUMBER not null,
  age_difference   NUMBER not null,
  value            NUMBER,
  created_by       VARCHAR2(100),
  creation_date    DATE,
  last_updated_by  VARCHAR2(100),
  last_update_date DATE
)
;
alter table TK_EFFECTIVE_AGE_CHART_T
  add constraint TK_EFFECTIVE_AGE_CHART_PK primary key (ORG_ID, AGE_DIFFERENCE);

prompt
prompt Creating table TK_EXCLUSION_SETUP_T
prompt ===================================
prompt
create table TK_EXCLUSION_SETUP_T
(
  ex_code           NUMBER not null,
  ex_desc           VARCHAR2(150),
  active            VARCHAR2(1),
  ex_text_quotation VARCHAR2(4000),
  ex_text_policy    VARCHAR2(4000),
  print_order       NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  updated_by        VARCHAR2(50),
  last_updated_by   NVARCHAR2(50),
  org_id            NUMBER not null,
  last_update_date  DATE
)
;
alter table TK_EXCLUSION_SETUP_T
  add constraint TK_EXCLUSION_SETUP_T_PK primary key (EX_CODE, ORG_ID);

prompt
prompt Creating table TK_FACTOR_SETUP_T
prompt ================================
prompt
create table TK_FACTOR_SETUP_T
(
  org_id           NUMBER not null,
  b_class_code     VARCHAR2(10) not null,
  factor_code      VARCHAR2(10) not null,
  factor_desc      VARCHAR2(50),
  active           VARCHAR2(1),
  premium_impact   NUMBER(9,6),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  flat_amount      NUMBER
)
;
alter table TK_FACTOR_SETUP_T
  add constraint PK_TK_FACTOR_SETUP_T primary key (ORG_ID, B_CLASS_CODE, FACTOR_CODE);
alter table TK_FACTOR_SETUP_T
  add constraint FK_FACTOR_BCLASS foreign key (ORG_ID, B_CLASS_CODE)
  references TK_BUS_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE);
alter table TK_FACTOR_SETUP_T
  add constraint FK_ORG_FACTOR foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_FORM_FIELDS_TYPE_T
prompt ====================================
prompt
create table TK_FORM_FIELDS_TYPE_T
(
  field_type_id    VARCHAR2(10) not null,
  field_type_desc  VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_FORM_FIELDS_TYPE_T
  add constraint PK_TK_FORM_FIELDS_TYPE_T primary key (FIELD_TYPE_ID);

prompt
prompt Creating table TK_GH_ASSESSMENT_SUB_BENEFIT
prompt ===========================================
prompt
create table TK_GH_ASSESSMENT_SUB_BENEFIT
(
  org_id           NUMBER not null,
  branch_id        NUMBER not null,
  sub_product_code NUMBER not null,
  claim_year       NUMBER not null,
  claim_no         VARCHAR2(8) not null,
  benefit_code     NUMBER not null,
  assessment_id    NUMBER not null,
  application_id   NUMBER not null,
  sub_benefit_code NUMBER not null,
  total_days       NUMBER,
  claim_amount     NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  approved_amount  NUMBER
)
;
alter table TK_GH_ASSESSMENT_SUB_BENEFIT
  add constraint PK_ASS_SUB_BENEFITS primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, BENEFIT_CODE, ASSESSMENT_ID, APPLICATION_ID, SUB_BENEFIT_CODE, CLAIM_YEAR);

prompt
prompt Creating table TK_ILLUSTRATIONDTL_MONTHLY_T
prompt ===========================================
prompt
create table TK_ILLUSTRATIONDTL_MONTHLY_T
(
  org_id                        NUMBER not null,
  branch_id                     NUMBER,
  main_product_code             NUMBER not null,
  sub_product_code              NUMBER not null,
  document_no                   VARCHAR2(10) not null,
  document_year                 NUMBER not null,
  application_id                NUMBER not null,
  issue_count                   NUMBER not null,
  illustration_id               NUMBER not null,
  effective_age                 NUMBER,
  policy_year                   NUMBER not null,
  policy_month                  NUMBER not null,
  basic_contribution            NUMBER,
  invested_contribution         NUMBER,
  allocation_percentage         NUMBER,
  allocation_contribution       NUMBER,
  mortality_rate1               NUMBER,
  mortality_rate2               NUMBER,
  sum_assured                   NUMBER,
  sum_assured_at_risk           NUMBER,
  mortality_charges             NUMBER,
  ptf_surplus                   NUMBER,
  waqala_charges                NUMBER,
  contingency_margin            NUMBER,
  reins_amount                  NUMBER,
  admin_charges                 NUMBER,
  cash_value1                   NUMBER,
  cash_value2                   NUMBER,
  cash_value3                   NUMBER,
  created_by                    VARCHAR2(50),
  creation_date                 DATE,
  bid_offer                     NUMBER,
  sum_assured_at_risk1          NUMBER,
  mortality_charges1            NUMBER,
  investment_income1            NUMBER,
  im_charges1                   NUMBER,
  sum_assured_at_risk2          NUMBER,
  mortality_charges2            NUMBER,
  investment_income2            NUMBER,
  im_charges2                   NUMBER,
  sum_assured_at_risk3          NUMBER,
  mortality_charges3            NUMBER,
  investment_income3            NUMBER,
  im_charges3                   NUMBER,
  topup_contributon             NUMBER,
  topup_cumulative              NUMBER,
  topup_bid_offer               NUMBER,
  topup_net_investment1         NUMBER,
  topup_investment_income1      NUMBER,
  topup_im_charges1             NUMBER,
  topup_cash_value1             NUMBER,
  topup_net_investment2         NUMBER,
  topup_investment_income2      NUMBER,
  topup_im_charges2             NUMBER,
  topup_cash_value2             NUMBER,
  topup_net_investment3         NUMBER,
  topup_investment_income3      NUMBER,
  topup_im_charges3             NUMBER,
  topup_cash_value3             NUMBER,
  inflation_adj_contribution    NUMBER,
  inflation_accumulated_contri  NUMBER,
  topup_allocation_contribution NUMBER,
  topup_inflation_adj_contri    NUMBER,
  topup_inflation_accumu_contri NUMBER,
  surrender_charge_rate         NUMBER
)
;
alter table TK_ILLUSTRATIONDTL_MONTHLY_T
  add constraint PK_ILLDTL_MONTHLY primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, ISSUE_COUNT, APPLICATION_ID, ILLUSTRATION_ID, POLICY_YEAR, POLICY_MONTH);
alter table TK_ILLUSTRATIONDTL_MONTHLY_T
  add constraint FK_ILLDTL_MONTHLY foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT)
  references TK_ILLUSTRATIONHD_POS (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT);

prompt
prompt Creating table TK_ILLUSTRATIONDTL_POS
prompt =====================================
prompt
create table TK_ILLUSTRATIONDTL_POS
(
  org_id                       NUMBER not null,
  branch_id                    NUMBER,
  main_product_code            NUMBER not null,
  sub_product_code             NUMBER not null,
  document_no                  VARCHAR2(10) not null,
  document_year                NUMBER not null,
  application_id               NUMBER not null,
  issue_count                  NUMBER not null,
  illustration_id              NUMBER not null,
  effective_age                NUMBER,
  policy_year                  NUMBER not null,
  basic_contribution           NUMBER,
  invested_contribution        NUMBER,
  allocation_percentage        NUMBER,
  allocation_contribution      NUMBER,
  mortality_rate1              NUMBER,
  mortality_rate2              NUMBER,
  sum_assured                  NUMBER,
  sum_assured_at_risk          NUMBER,
  mortality_charges            NUMBER,
  ptf_surplus                  NUMBER,
  waqala_charges               NUMBER,
  contingency_margin           NUMBER,
  reins_amount                 NUMBER,
  admin_charges                NUMBER,
  cash_value1                  NUMBER,
  cash_value2                  NUMBER,
  cash_value3                  NUMBER,
  created_by                   VARCHAR2(50),
  creation_date                DATE,
  bid_offer                    NUMBER,
  sum_assured_at_risk1         NUMBER,
  mortality_charges1           NUMBER,
  investment_income1           NUMBER,
  im_charges1                  NUMBER,
  sum_assured_at_risk2         NUMBER,
  mortality_charges2           NUMBER,
  investment_income2           NUMBER,
  im_charges2                  NUMBER,
  sum_assured_at_risk3         NUMBER,
  mortality_charges3           NUMBER,
  investment_income3           NUMBER,
  im_charges3                  NUMBER,
  topup_contributon            NUMBER,
  topup_cumulative             NUMBER,
  topup_bid_offer              NUMBER,
  topup_net_investment1        NUMBER,
  topup_investment_income1     NUMBER,
  topup_im_charges1            NUMBER,
  topup_cash_value1            NUMBER,
  topup_net_investment2        NUMBER,
  topup_investment_income2     NUMBER,
  topup_im_charges2            NUMBER,
  topup_cash_value2            NUMBER,
  topup_net_investment3        NUMBER,
  topup_investment_income3     NUMBER,
  topup_im_charges3            NUMBER,
  topup_cash_value3            NUMBER,
  paidup_value                 NUMBER,
  sv_rate_of_sa                NUMBER,
  surrender_value              NUMBER,
  sv_rate_of_bonus             NUMBER,
  bonus_rate1                  NUMBER,
  bonus_sv1                    NUMBER,
  bonus_amount1                NUMBER,
  bonus_rate2                  NUMBER,
  bonus_sv2                    NUMBER,
  bonus_amount2                NUMBER,
  bonus_rate3                  NUMBER,
  bonus_sv3                    NUMBER,
  bonus_amount3                NUMBER,
  sv_payable1                  NUMBER,
  death_benefit1               NUMBER,
  sv_payable2                  NUMBER,
  death_benefit2               NUMBER,
  sv_payable3                  NUMBER,
  death_benefit3               NUMBER,
  surrender_charge_rate        NUMBER,
  inflation_adj_contribution   NUMBER,
  inflation_accumulated_contri NUMBER,
  mortality_running_total      NUMBER
)
;
alter table TK_ILLUSTRATIONDTL_POS
  add constraint PK_ILLDTL_POSL primary key (ORG_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, ISSUE_COUNT, APPLICATION_ID, ILLUSTRATION_ID, POLICY_YEAR);
alter table TK_ILLUSTRATIONDTL_POS
  add constraint FK_ILLDTL_HEADER foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT)
  references TK_ILLUSTRATIONHD_POS (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT);

prompt
prompt Creating table TK_ILLUSTRATION_DETAIL
prompt =====================================
prompt
create table TK_ILLUSTRATION_DETAIL
(
  org_id                  NUMBER not null,
  b_class_code            VARCHAR2(10) not null,
  sub_class_code          VARCHAR2(10) not null,
  illustration_id         NUMBER not null,
  effective_age           NUMBER,
  policy_year             NUMBER not null,
  basic_contribution      NUMBER,
  invested_contribution   NUMBER,
  allocation_percentage   NUMBER,
  allocation_contribution NUMBER,
  mortality_rate1         NUMBER,
  mortality_rate2         NUMBER,
  sum_assured             NUMBER,
  sum_assured_at_risk     NUMBER,
  mortality_charges       NUMBER,
  ptf_surplus             NUMBER,
  waqala_charges          NUMBER,
  contingency_margin      NUMBER,
  reins_amount            NUMBER,
  admin_charges           NUMBER,
  cash_value1             NUMBER,
  cash_value2             NUMBER,
  cash_value3             NUMBER
)
;
alter table TK_ILLUSTRATION_DETAIL
  add constraint PK_ILLUST_DETAIL primary key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, ILLUSTRATION_ID, POLICY_YEAR);

prompt
prompt Creating table TK_ILLUSTRATION_HEADER
prompt =====================================
prompt
create table TK_ILLUSTRATION_HEADER
(
  org_id             NUMBER not null,
  b_class_code       VARCHAR2(10) not null,
  sub_class_code     VARCHAR2(10) not null,
  seq_no             NUMBER not null,
  issue_date         DATE,
  comm_date          DATE,
  expiry_date        DATE,
  name1              VARCHAR2(50),
  name2              VARCHAR2(50),
  dob1               DATE,
  dob2               DATE,
  age1               NUMBER(3),
  age2               NUMBER(3),
  gender1            VARCHAR2(1),
  gender2            VARCHAR2(1),
  policy_term        NUMBER(3),
  sum_covered        NUMBER(15,2),
  sum_covered_index  NUMBER(15,2),
  contribution_index NUMBER(15,2),
  basic_contribution NUMBER(15,2),
  gross_contribution NUMBER(15,2),
  net_contribution   NUMBER(15,2),
  cover_multiple     NUMBER(3),
  cont_margin        NUMBER(9,6),
  last_age_index     NUMBER(3),
  waqala_fee         NUMBER(15,2),
  expected_claim     NUMBER(15,2),
  investment_income  NUMBER(15,2),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  second_life        VARCHAR2(1),
  payment_mode       VARCHAR2(1),
  bid_offer          NUMBER(15,2)
)
;
alter table TK_ILLUSTRATION_HEADER
  add constraint PK_ILL_HEADER primary key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, SEQ_NO);

prompt
prompt Creating table TK_ILLUST_CASHBACK_POS_T
prompt =======================================
prompt
create table TK_ILLUST_CASHBACK_POS_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  document_no       VARCHAR2(10) not null,
  document_year     NUMBER not null,
  application_id    NUMBER not null,
  issue_count       NUMBER not null,
  policy_year       NUMBER not null,
  cashback_percent  NUMBER,
  cashback_amount   NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table TK_ILLUST_CASHBACK_POS_T
  add constraint PK_ILLHD_CASHBACK_POS primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, POLICY_YEAR);

prompt
prompt Creating table TK_ILL_ADHOC_CLIENT_T
prompt ====================================
prompt
create table TK_ILL_ADHOC_CLIENT_T
(
  org_id           NUMBER not null,
  client_code      NUMBER not null,
  cnic_no          VARCHAR2(50),
  cnic_issue_date  DATE,
  cnic_expiry_date DATE,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  name             VARCHAR2(50),
  dob              DATE,
  middle_name      VARCHAR2(50),
  last_name        VARCHAR2(50),
  gender           VARCHAR2(1),
  title            VARCHAR2(1),
  mobile_no        VARCHAR2(20)
)
;
alter table TK_ILL_ADHOC_CLIENT_T
  add constraint PK_ILLADHOC_CLIENT primary key (ORG_ID, CLIENT_CODE);

prompt
prompt Creating table TK_ILL_DOC_CBC_NEW_T
prompt ===================================
prompt
create table TK_ILL_DOC_CBC_NEW_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10),
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10),
  issue_count       NUMBER,
  endorsement_no    NUMBER,
  application_id    NUMBER,
  serial_no         NUMBER not null,
  cbc_status_code   NUMBER,
  cbc_reason_code   NUMBER,
  reminder_date     DATE,
  file_path         VARCHAR2(500),
  remarks           VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  process_id        NUMBER not null
)
;
alter table TK_ILL_DOC_CBC_NEW_T
  add constraint PK_DOC_UND_CBC_NEW primary key (ORG_ID, BRANCH_ID, PROCESS_ID, SERIAL_NO);

prompt
prompt Creating table TK_ILL_DOC_CBC_T
prompt ===============================
prompt
create table TK_ILL_DOC_CBC_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  cbc_status_code   NUMBER,
  cbc_reason_code   NUMBER,
  reminder_date     DATE,
  file_path         VARCHAR2(500),
  remarks           VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table TK_ILL_DOC_CBC_T
  add constraint PK_IL_DOC_CBC_ primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);
alter table TK_ILL_DOC_CBC_T
  add constraint FK_IL_DOC_CBC_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table TK_ILL_DOC_FAP
prompt =============================
prompt
create table TK_ILL_DOC_FAP
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  fap_year          NUMBER,
  fap_amount        NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table TK_ILL_DOC_FAP
  add constraint PK_ILL_DOC_FAP primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, SERIAL_NO);
alter table TK_ILL_DOC_FAP
  add constraint FK_ILL_FAP_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table TK_ILL_DOC_FUNDS
prompt ===============================
prompt
create table TK_ILL_DOC_FUNDS
(
  org_id                NUMBER not null,
  branch_id             NUMBER not null,
  main_product_code     NUMBER not null,
  sub_product_code      NUMBER not null,
  takaful_type          VARCHAR2(1) not null,
  document_type         VARCHAR2(1) not null,
  document_no           VARCHAR2(10) not null,
  record_type           VARCHAR2(1) not null,
  document_year         VARCHAR2(10) not null,
  issue_count           NUMBER not null,
  endorsement_no        NUMBER not null,
  application_id        NUMBER not null,
  fund_code             NUMBER not null,
  fund_share            NUMBER,
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  rider_term            NUMBER,
  payment_term          NUMBER,
  sa_percent            NUMBER,
  monthly_amount        NUMBER,
  rider_rate            NUMBER,
  funds_amount          NUMBER,
  allocation_tag        VARCHAR2(1),
  cash_value_diff_final NUMBER,
  fund_share_diff       NUMBER,
  fund_share_new        NUMBER,
  fund_share_old        NUMBER,
  no_of_units           NUMBER,
  no_of_units_old       NUMBER,
  no_of_units_new       NUMBER,
  no_of_units_diff      NUMBER,
  cash_value            NUMBER,
  cash_value_old        NUMBER,
  cash_value_new        NUMBER,
  cash_value_diff       NUMBER,
  bid_price             NUMBER,
  serial_no             NUMBER
)
;
alter table TK_ILL_DOC_FUNDS
  add constraint PK_ILL_DOC_FUND primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, FUND_CODE);
alter table TK_ILL_DOC_FUNDS
  add constraint FK_ILL_DOC_FUND_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table TK_ILL_DOC_RIDERS
prompt ================================
prompt
create table TK_ILL_DOC_RIDERS
(
  org_id                     NUMBER not null,
  branch_id                  NUMBER not null,
  main_product_code          NUMBER not null,
  sub_product_code           NUMBER not null,
  takaful_type               VARCHAR2(1) not null,
  document_type              VARCHAR2(1) not null,
  document_no                VARCHAR2(10) not null,
  record_type                VARCHAR2(1) not null,
  document_year              VARCHAR2(10) not null,
  issue_count                NUMBER not null,
  endorsement_no             NUMBER not null,
  application_id             NUMBER not null,
  benefit_code               NUMBER not null,
  sum_assured                NUMBER,
  contribution               NUMBER,
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE,
  rider_term                 NUMBER,
  payment_term               NUMBER,
  sa_percent                 NUMBER,
  monthly_amount             NUMBER,
  rider_rate                 NUMBER,
  remarks                    VARCHAR2(500),
  decision_code              VARCHAR2(50),
  loading_contribution       NUMBER,
  loading_contribution_modal NUMBER,
  contribution_modal         NUMBER,
  total_contribution         NUMBER,
  total_contribution_modal   NUMBER,
  rider_net_rate             NUMBER,
  net_contribution_modal     NUMBER,
  net_contribution           NUMBER,
  endorsement_tag            VARCHAR2(1),
  effective_date             DATE
)
;
alter table TK_ILL_DOC_RIDERS
  add constraint ILL_RIDER_PK primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE);
alter table TK_ILL_DOC_RIDERS
  add constraint FK_ILL_RIDER_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table TK_ILL_DOC_LOADING
prompt =================================
prompt
create table TK_ILL_DOC_LOADING
(
  org_id                     NUMBER not null,
  branch_id                  NUMBER not null,
  main_product_code          NUMBER not null,
  sub_product_code           NUMBER not null,
  takaful_type               VARCHAR2(1) not null,
  document_type              VARCHAR2(1) not null,
  document_no                VARCHAR2(10) not null,
  record_type                VARCHAR2(1) not null,
  document_year              VARCHAR2(10) not null,
  issue_count                NUMBER not null,
  endorsement_no             NUMBER not null,
  application_id             NUMBER not null,
  benefit_code               NUMBER not null,
  loading_type               VARCHAR2(10) not null,
  loading_code               NUMBER,
  loading_value              NUMBER,
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE,
  rider_term                 NUMBER,
  payment_term               NUMBER,
  sa_percent                 NUMBER,
  monthly_amount             NUMBER,
  rider_rate                 NUMBER,
  loading_contribution       NUMBER,
  loading_contribution_modal NUMBER,
  loading_net_rate           NUMBER,
  loading_net_contribution   NUMBER,
  net_contribution_modal     NUMBER
)
;
alter table TK_ILL_DOC_LOADING
  add constraint PK_ILL_DOC_LOAD primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE, LOADING_TYPE);
alter table TK_ILL_DOC_LOADING
  add constraint FK_ILL_DOC_LOAD_HD foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);
alter table TK_ILL_DOC_LOADING
  add constraint FK_ILL_DOC_LOAD_RIDER foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE)
  references TK_ILL_DOC_RIDERS (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, BENEFIT_CODE);

prompt
prompt Creating table TK_ILL_DOC_UNDWT_REASONS
prompt =======================================
prompt
create table TK_ILL_DOC_UNDWT_REASONS
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  serial_no         NUMBER not null,
  reason_code       NUMBER,
  reason_desc       VARCHAR2(1000),
  decision_code     NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  rider_term        NUMBER,
  payment_term      NUMBER,
  sa_percent        NUMBER,
  monthly_amount    NUMBER,
  rider_rate        NUMBER,
  process_id        NUMBER
)
;
alter table TK_ILL_DOC_UNDWT_REASONS
  add constraint PK_IL_DOC_UNDWT_REASONS primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, SERIAL_NO);
alter table TK_ILL_DOC_UNDWT_REASONS
  add constraint FK_IL_UNDWT_REAS_DOC foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID)
  references IL_DOC_HEADER_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID);

prompt
prompt Creating table TK_ILL_DOC_UND_REASONS_NEW
prompt =========================================
prompt
create table TK_ILL_DOC_UND_REASONS_NEW
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER,
  sub_product_code  NUMBER,
  takaful_type      VARCHAR2(1),
  document_type     VARCHAR2(1),
  document_no       VARCHAR2(10),
  record_type       VARCHAR2(1),
  document_year     VARCHAR2(10),
  issue_count       NUMBER,
  endorsement_no    NUMBER,
  application_id    NUMBER,
  serial_no         NUMBER not null,
  reason_code       NUMBER,
  reason_desc       VARCHAR2(1000),
  decision_code     NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  rider_term        NUMBER,
  payment_term      NUMBER,
  sa_percent        NUMBER,
  monthly_amount    NUMBER,
  rider_rate        NUMBER,
  process_id        NUMBER not null
)
;
alter table TK_ILL_DOC_UND_REASONS_NEW
  add constraint PK_DOC_UND_REASON_NEW primary key (ORG_ID, BRANCH_ID, PROCESS_ID, SERIAL_NO);

prompt
prompt Creating table TK_ILL_POS_BENEFICIARY_T
prompt =======================================
prompt
create table TK_ILL_POS_BENEFICIARY_T
(
  org_id                    NUMBER not null,
  branch_id                 NUMBER not null,
  main_product_code         NUMBER not null,
  sub_product_code          NUMBER not null,
  document_no               VARCHAR2(10) not null,
  document_year             NUMBER not null,
  application_id            NUMBER not null,
  issue_count               NUMBER not null,
  beneficiary_code          NUMBER not null,
  relation_code             NUMBER(9,6),
  percentage                NUMBER(15,2),
  amount                    NUMBER(15,2),
  cnic_no                   VARCHAR2(50),
  dob                       DATE,
  created_by                VARCHAR2(50),
  creation_date             DATE,
  last_update_date          DATE,
  last_updated_by           VARCHAR2(50),
  cnic_issue_date           DATE,
  cnic_expiry_date          DATE,
  beneficiary_name          VARCHAR2(50),
  is_guardian               VARCHAR2(1),
  guardian_name             VARCHAR2(50),
  guardian_relation_code    VARCHAR2(1),
  guardian_dob              DATE,
  guardian_cnic_no          VARCHAR2(50),
  guardian_cnic_issue_date  DATE,
  guardian_cnic_expiry_date DATE
)
;
alter table TK_ILL_POS_BENEFICIARY_T
  add constraint PK_ILL_BENEFICIARY primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, BENEFICIARY_CODE);
alter table TK_ILL_POS_BENEFICIARY_T
  add constraint FK_ILL_BENEFICIARY_HEADER foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT)
  references TK_ILLUSTRATIONHD_POS (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT);

prompt
prompt Creating table TK_ILL_POS_BNF_ATT_T
prompt ===================================
prompt
create table TK_ILL_POS_BNF_ATT_T
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  document_no       VARCHAR2(10) not null,
  document_year     NUMBER not null,
  application_id    NUMBER not null,
  issue_count       NUMBER not null,
  beneficiary_code  NUMBER not null,
  attachment_code   NUMBER not null,
  attachment_desc   VARCHAR2(50),
  file_path         VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table TK_ILL_POS_BNF_ATT_T
  add constraint PK_ILL_POS_BNF_ATT primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, BENEFICIARY_CODE, ATTACHMENT_CODE);
alter table TK_ILL_POS_BNF_ATT_T
  add constraint FK_ILL_POS_BF_ATT foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, BENEFICIARY_CODE)
  references TK_ILL_POS_BENEFICIARY_T (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, BENEFICIARY_CODE);

prompt
prompt Creating table TK_ILL_POS_FAP
prompt =============================
prompt
create table TK_ILL_POS_FAP
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  document_no       VARCHAR2(10) not null,
  document_year     NUMBER not null,
  application_id    NUMBER not null,
  issue_count       NUMBER not null,
  serial_no         NUMBER not null,
  fap_year          NUMBER,
  fap_amount        NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table TK_ILL_POS_FAP
  add constraint PK_ILL_POS_FAP primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, SERIAL_NO);
alter table TK_ILL_POS_FAP
  add constraint FK_ILL_POS_FAP_HEADER foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT)
  references TK_ILLUSTRATIONHD_POS (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT);

prompt
prompt Creating table TK_ILL_POS_FUNDS
prompt ===============================
prompt
create table TK_ILL_POS_FUNDS
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  document_no       VARCHAR2(10) not null,
  document_year     NUMBER not null,
  application_id    NUMBER not null,
  issue_count       NUMBER not null,
  fund_code         NUMBER not null,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  fund_share        NUMBER,
  serial_no         NUMBER
)
;
alter table TK_ILL_POS_FUNDS
  add constraint PK_ILL_POS_FUNDS primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, FUND_CODE);
alter table TK_ILL_POS_FUNDS
  add constraint FK_FUNDS_HEADER foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT)
  references TK_ILLUSTRATIONHD_POS (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT);
alter table TK_ILL_POS_FUNDS
  add constraint FK_ILL_POS_FUND_FUND foreign key (ORG_ID, FUND_CODE)
  references FUND_SETUP_T (ORG_ID, FUND_CODE);

prompt
prompt Creating table TK_ILL_POS_LOADING
prompt =================================
prompt
create table TK_ILL_POS_LOADING
(
  org_id                     NUMBER not null,
  branch_id                  NUMBER not null,
  main_product_code          NUMBER not null,
  sub_product_code           NUMBER not null,
  document_no                VARCHAR2(10) not null,
  document_year              NUMBER not null,
  application_id             NUMBER not null,
  issue_count                NUMBER not null,
  loading_type               VARCHAR2(10) not null,
  loading_code               VARCHAR2(10),
  loading_value              NUMBER,
  created_by                 VARCHAR2(50),
  creation_date              DATE,
  last_updated_by            VARCHAR2(50),
  last_update_date           DATE,
  rider_term                 NUMBER,
  loading_contribution       NUMBER,
  payment_term               NUMBER,
  sa_percent                 NUMBER,
  monthly_amount             NUMBER,
  rider_rate                 NUMBER,
  loading_contribution_modal NUMBER,
  loading_net_rate           NUMBER,
  loading_net_contribution   NUMBER,
  net_contribution_modal     NUMBER,
  benefit_code               NUMBER not null
)
;
alter table TK_ILL_POS_LOADING
  add constraint PK_ILL_POS_LOADING primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, LOADING_TYPE, BENEFIT_CODE);
alter table TK_ILL_POS_LOADING
  add constraint FK_LOADING_HEADER foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT)
  references TK_ILLUSTRATIONHD_POS (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT);

prompt
prompt Creating table TK_ILL_POS_RIDERS
prompt ================================
prompt
create table TK_ILL_POS_RIDERS
(
  org_id                      NUMBER not null,
  branch_id                   NUMBER not null,
  main_product_code           NUMBER not null,
  sub_product_code            NUMBER not null,
  document_no                 VARCHAR2(10) not null,
  document_year               NUMBER not null,
  application_id              NUMBER not null,
  issue_count                 NUMBER not null,
  benefit_code                NUMBER not null,
  sum_assured                 NUMBER,
  contribution                NUMBER,
  created_by                  VARCHAR2(50),
  creation_date               DATE,
  last_updated_by             VARCHAR2(50),
  last_update_date            DATE,
  rider_term                  NUMBER,
  payment_term                NUMBER,
  sa_percent                  NUMBER,
  monthly_amount              NUMBER,
  rider_rate                  NUMBER,
  mode_contribution           NUMBER,
  rider_net_rate              NUMBER,
  mode_net_contribution       NUMBER,
  mode_loading_contribution   NUMBER,
  annual_loading_contribution NUMBER,
  decision_code               VARCHAR2(50),
  net_contribution            NUMBER
)
;
alter table TK_ILL_POS_RIDERS
  add constraint PK_ILL_POS_RIDER primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT, BENEFIT_CODE);
alter table TK_ILL_POS_RIDERS
  add constraint FK_RIDER_HEADER foreign key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT)
  references TK_ILLUSTRATIONHD_POS (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, DOCUMENT_NO, DOCUMENT_YEAR, APPLICATION_ID, ISSUE_COUNT);

prompt
prompt Creating table TK_ILL_UNIT_MOVING
prompt =================================
prompt
create table TK_ILL_UNIT_MOVING
(
  org_id            NUMBER not null,
  branch_id         NUMBER not null,
  main_product_code NUMBER not null,
  sub_product_code  NUMBER not null,
  takaful_type      VARCHAR2(1) not null,
  document_type     VARCHAR2(1) not null,
  document_no       VARCHAR2(10) not null,
  record_type       VARCHAR2(1) not null,
  document_year     VARCHAR2(10) not null,
  issue_count       NUMBER not null,
  endorsement_no    NUMBER not null,
  application_id    NUMBER not null,
  fund_code         NUMBER not null,
  niv               NUMBER,
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  allocation_type   NUMBER not null
)
;
alter table TK_ILL_UNIT_MOVING
  add constraint PK_ILL_UNIT_MOVING primary key (ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, FUND_CODE, ALLOCATION_TYPE);

prompt
prompt Creating table TK_INFLATION_RATE_SETUP_T
prompt ========================================
prompt
create table TK_INFLATION_RATE_SETUP_T
(
  org_id               NUMBER not null,
  rate_id              NUMBER not null,
  rate                 NUMBER,
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(100),
  creation_date        DATE,
  last_updated_by      VARCHAR2(100),
  last_update_date     DATE
)
;
alter table TK_INFLATION_RATE_SETUP_T
  add constraint TK_INFLATION_RATES_SETUP_PK primary key (ORG_ID, RATE_ID);

prompt
prompt Creating table TK_INVEST_REIMBURSEMENT_T
prompt ========================================
prompt
create table TK_INVEST_REIMBURSEMENT_T
(
  org_id                  NUMBER not null,
  branch_id               VARCHAR2(10) not null,
  sub_product_code        VARCHAR2(10) not null,
  claim_no                VARCHAR2(10) not null,
  benefit_code            VARCHAR2(10) not null,
  assessment_id           NUMBER not null,
  serial_code             NUMBER not null,
  investigator_code       VARCHAR2(10) not null,
  code                    NUMBER not null,
  claim_amount            NUMBER,
  status                  VARCHAR2(3),
  approve_amount          NUMBER,
  request_date            DATE,
  receive_date            DATE,
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  settlement_date         DATE,
  payee_name              VARCHAR2(20),
  remarks                 VARCHAR2(150),
  voucher_no              VARCHAR2(10),
  payment_source          VARCHAR2(5),
  application_id          NUMBER not null,
  post_tag                VARCHAR2(1),
  post_by                 VARCHAR2(50),
  post_date               DATE,
  claim_year              VARCHAR2(4) not null,
  advice_reference_no     VARCHAR2(20),
  rev_advice_reference_no VARCHAR2(20),
  reverse_tag             VARCHAR2(1),
  reverse_by              VARCHAR2(50),
  reverse_date            DATE
)
;
alter table TK_INVEST_REIMBURSEMENT_T
  add constraint PK_TK_INVEST_REIMBRUSEMENT_T primary key (ORG_ID, BRANCH_ID, SUB_PRODUCT_CODE, CLAIM_NO, INVESTIGATOR_CODE, SERIAL_CODE, CODE, BENEFIT_CODE, ASSESSMENT_ID, APPLICATION_ID, CLAIM_YEAR);

prompt
prompt Creating table TK_MONEY_TRANSFER_DETAIL_T
prompt =========================================
prompt
create table TK_MONEY_TRANSFER_DETAIL_T
(
  org_id                   NUMBER not null,
  branch_id                NUMBER not null,
  money_transfer_id        NUMBER not null,
  money_transfer_detail_id NUMBER not null,
  transfer_from_doc_no     VARCHAR2(100),
  transfer_from_amount     NUMBER(15,2),
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  source                   VARCHAR2(20)
)
;
alter table TK_MONEY_TRANSFER_DETAIL_T
  add constraint PK_TK_MONEY_TRSFR_DET primary key (ORG_ID, BRANCH_ID, MONEY_TRANSFER_ID, MONEY_TRANSFER_DETAIL_ID);

prompt
prompt Creating table TK_MONEY_TRANSFER_HEADER_T
prompt =========================================
prompt
create table TK_MONEY_TRANSFER_HEADER_T
(
  org_id              NUMBER not null,
  branch_id           NUMBER not null,
  money_transfer_id   NUMBER not null,
  transfer_to_doc_no  VARCHAR2(100),
  transfer_to_amount  NUMBER(15,2),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  money_transfer_desc VARCHAR2(250),
  lock_flag           VARCHAR2(20),
  post_flag           VARCHAR2(20),
  transfer_date       DATE,
  post_date           DATE,
  transfer_reason     VARCHAR2(20),
  request_date        DATE,
  sett_reason         VARCHAR2(10),
  posted_user_name    VARCHAR2(100),
  locked_by_user_name VARCHAR2(100)
)
;
alter table TK_MONEY_TRANSFER_HEADER_T
  add constraint PK_TK_MONEY_TRSFR primary key (ORG_ID, BRANCH_ID, MONEY_TRANSFER_ID);

prompt
prompt Creating table TK_MORTALITY_RATE_HD_T
prompt =====================================
prompt
create table TK_MORTALITY_RATE_HD_T
(
  org_id               NUMBER not null,
  rate_code            NUMBER not null,
  rate_name            VARCHAR2(50),
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table TK_MORTALITY_RATE_HD_T
  add constraint PK_MORT_RATE_HEAD primary key (ORG_ID, RATE_CODE);
alter table TK_MORTALITY_RATE_HD_T
  add constraint FK_ORG_MORT_RATE foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TK_MORTALITY_RATE_DETAIL_T
prompt =========================================
prompt
create table TK_MORTALITY_RATE_DETAIL_T
(
  org_id           NUMBER not null,
  rate_code        NUMBER not null,
  rate_detail_code NUMBER not null,
  m_age            NUMBER,
  m_year           NUMBER,
  m_rate           NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  gender           VARCHAR2(50)
)
;
alter table TK_MORTALITY_RATE_DETAIL_T
  add constraint PK_MORT_RATE_DTL primary key (ORG_ID, RATE_CODE, RATE_DETAIL_CODE);
alter table TK_MORTALITY_RATE_DETAIL_T
  add constraint FK_MORT_RATE_DTL foreign key (ORG_ID, RATE_CODE)
  references TK_MORTALITY_RATE_HD_T (ORG_ID, RATE_CODE);

prompt
prompt Creating table TK_MORTALITY_RATE_REINSURER_T
prompt ============================================
prompt
create table TK_MORTALITY_RATE_REINSURER_T
(
  org_id           NUMBER not null,
  m_id             NUMBER not null,
  m_age            NUMBER,
  m_year           NUMBER,
  m_rate           NUMBER,
  created_by       VARCHAR2(100),
  creation_date    DATE,
  last_updated_by  VARCHAR2(100),
  last_update_date DATE
)
;
alter table TK_MORTALITY_RATE_REINSURER_T
  add constraint TK_MORTALITY_RATE_REINSURER_PK primary key (ORG_ID, M_ID);

prompt
prompt Creating table TK_MORTALITY_RATE_T
prompt ==================================
prompt
create table TK_MORTALITY_RATE_T
(
  org_id           NUMBER not null,
  m_id             NUMBER not null,
  m_age            NUMBER,
  m_year           NUMBER,
  m_rate           NUMBER,
  created_by       VARCHAR2(100),
  creation_date    DATE,
  last_updated_by  VARCHAR2(100),
  last_update_date DATE
)
;
alter table TK_MORTALITY_RATE_T
  add constraint TK_MORTALITY_RATE_PK primary key (ORG_ID, M_ID);

prompt
prompt Creating table TK_NOMINAL_RATE_SETUP_T
prompt ======================================
prompt
create table TK_NOMINAL_RATE_SETUP_T
(
  org_id               NUMBER not null,
  rate_id              NUMBER not null,
  rate                 NUMBER,
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(100),
  creation_date        DATE,
  last_updated_by      VARCHAR2(100),
  last_update_date     DATE
)
;
alter table TK_NOMINAL_RATE_SETUP_T
  add constraint TK_NOM_RATES_SETUP_PK primary key (ORG_ID, RATE_ID);

prompt
prompt Creating table TK_ORGANIZATION_API_SETUP_T
prompt ==========================================
prompt
create table TK_ORGANIZATION_API_SETUP_T
(
  org_id           NUMBER not null,
  record_id        NUMBER not null,
  api_key          VARCHAR2(200),
  api_url          VARCHAR2(200),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_ORGANIZATION_API_SETUP_T
  add constraint PK_TK_ORGANIZATION_API_SETUP_T primary key (ORG_ID, RECORD_ID);

prompt
prompt Creating table TK_ORG_API_CR_SETUP_T
prompt ====================================
prompt
create table TK_ORG_API_CR_SETUP_T
(
  org_id           NUMBER not null,
  record_id        NUMBER not null,
  user_name        VARCHAR2(100),
  user_password    VARCHAR2(100),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_ORG_API_CR_SETUP_T
  add constraint PK_TK_ORG_API_CR_SETUP_T primary key (ORG_ID, RECORD_ID);

prompt
prompt Creating table TK_PERIOD_SETUP_T
prompt ================================
prompt
create table TK_PERIOD_SETUP_T
(
  org_id            NUMBER not null,
  fiscal_year       VARCHAR2(4) not null,
  periond_number    NUMBER not null,
  from_date         DATE,
  to_date           DATE,
  start_period      VARCHAR2(1),
  claim_status      VARCHAR2(1),
  undwt_status      VARCHAR2(1),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  application_id    NUMBER not null,
  branch_id         NUMBER not null,
  undwt_freeze_tag  VARCHAR2(1),
  claim_freeze_tag  VARCHAR2(1),
  undwd_freeze_date DATE,
  claim_freeze_date DATE,
  undwt_freeze_date DATE
)
;
create unique index TK_PERIOD_SETUP_T_PK1 on TK_PERIOD_SETUP_T (ORG_ID, APPLICATION_ID, BRANCH_ID, FISCAL_YEAR, PERIOND_NUMBER);
alter table TK_PERIOD_SETUP_T
  add constraint TK_PERIOD_SETUP_T_PK2 primary key (ORG_ID, APPLICATION_ID, BRANCH_ID, FISCAL_YEAR, PERIOND_NUMBER);

prompt
prompt Creating table TK_RATES_SETUP_T
prompt ===============================
prompt
create table TK_RATES_SETUP_T
(
  org_id           NUMBER not null,
  type_id          NUMBER not null,
  no_of_years      NUMBER not null,
  rate             NUMBER,
  created_by       VARCHAR2(100),
  creation_date    DATE,
  last_updated_by  VARCHAR2(100),
  last_update_date DATE
)
;
alter table TK_RATES_SETUP_T
  add constraint TK_RATES_SETUP_PK primary key (ORG_ID, TYPE_ID, NO_OF_YEARS);

prompt
prompt Creating table TK_RATE_TYPE_SETUP_T
prompt ===================================
prompt
create table TK_RATE_TYPE_SETUP_T
(
  org_id           NUMBER not null,
  type_id          NUMBER not null,
  type_desc        VARCHAR2(250),
  active           VARCHAR2(1),
  created_by       VARCHAR2(100),
  creation_date    DATE,
  last_updated_by  VARCHAR2(100),
  last_update_date DATE
)
;
alter table TK_RATE_TYPE_SETUP_T
  add constraint TK_RATE_TYPE_SETUP_PK primary key (ORG_ID, TYPE_ID);

prompt
prompt Creating table TK_RIDER_SETUP_T
prompt ===============================
prompt
create table TK_RIDER_SETUP_T
(
  org_id           NUMBER not null,
  code             NUMBER not null,
  description      VARCHAR2(200) not null,
  active           VARCHAR2(1),
  rate             NUMBER,
  rate_type        VARCHAR2(2),
  created_by       VARCHAR2(100),
  creation_date    DATE,
  last_updated_by  VARCHAR2(100),
  last_update_date DATE
)
;
alter table TK_RIDER_SETUP_T
  add constraint pk_TK_RIDER_SETUP_T primary key (ORG_ID, CODE);

prompt
prompt Creating table TK_RUN_CALCULATION_LOGS_T
prompt ========================================
prompt
create table TK_RUN_CALCULATION_LOGS_T
(
  org_id             NUMBER not null,
  branch_id          NUMBER not null,
  product_code       NUMBER not null,
  sub_product_code   NUMBER not null,
  takaful_type       VARCHAR2(1) not null,
  document_type      VARCHAR2(1) not null,
  document_no        VARCHAR2(10) not null,
  record_type        VARCHAR2(1) not null,
  document_year      VARCHAR2(10) not null,
  issue_count        NUMBER not null,
  endorsement_no     NUMBER not null,
  application_id     NUMBER not null,
  process_id         NUMBER not null,
  process_start_date DATE,
  process_end_date   DATE,
  creation_date      DATE,
  created_by         VARCHAR2(50),
  last_update_date   DATE,
  last_updated_by    VARCHAR2(50),
  status_message     VARCHAR2(1000)
)
;
alter table TK_RUN_CALCULATION_LOGS_T
  add constraint PK_RUN_CALCULATION_LOGS primary key (ORG_ID, BRANCH_ID, PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, PROCESS_ID);

prompt
prompt Creating table TK_SUB_CLASS_CHARGES_T
prompt =====================================
prompt
create table TK_SUB_CLASS_CHARGES_T
(
  org_id           NUMBER not null,
  b_class_code     VARCHAR2(10) not null,
  sub_class_code   VARCHAR2(10) not null,
  charge_code      NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_SUB_CLASS_CHARGES_T
  add constraint PK_TK_SUB_CLASS_CHARGES_T primary key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, CHARGE_CODE);
alter table TK_SUB_CLASS_CHARGES_T
  add constraint FK_CHARGE_SUBCLASS_CHARGE foreign key (ORG_ID, CHARGE_CODE)
  references TK_CHARGES_SETUP_T (ORG_ID, CHARGE_CODE);
alter table TK_SUB_CLASS_CHARGES_T
  add constraint FK_ORG_SC_CHARGE foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);
alter table TK_SUB_CLASS_CHARGES_T
  add constraint FK_SUBCLASS_SUBCLASS_CHARGE foreign key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE)
  references TK_SUB_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE);

prompt
prompt Creating table TK_SUB_CLASS_CLAUSES_T
prompt =====================================
prompt
create table TK_SUB_CLASS_CLAUSES_T
(
  org_id           NUMBER not null,
  b_class_code     VARCHAR2(10) not null,
  sub_class_code   VARCHAR2(10) not null,
  clause_code      VARCHAR2(10) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_SUB_CLASS_CLAUSES_T
  add constraint PK_TK_SUB_CLASS_CLAUSES_T primary key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, CLAUSE_CODE);
alter table TK_SUB_CLASS_CLAUSES_T
  add constraint FK_CLAUSE_SUBCLASS_CLAUSE foreign key (ORG_ID, B_CLASS_CODE, CLAUSE_CODE)
  references TK_CLAUSES_SETUP_T (ORG_ID, B_CLASS_CODE, CLAUSE_CODE);
alter table TK_SUB_CLASS_CLAUSES_T
  add constraint FK_ORG_SC_CLAUSE foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);
alter table TK_SUB_CLASS_CLAUSES_T
  add constraint FK_SUBCLASS_SUBCLASS_CLAUSE foreign key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE)
  references TK_SUB_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE);

prompt
prompt Creating table TK_SUB_CLASS_FACTORS_T
prompt =====================================
prompt
create table TK_SUB_CLASS_FACTORS_T
(
  org_id           NUMBER not null,
  b_class_code     VARCHAR2(10) not null,
  sub_class_code   VARCHAR2(10) not null,
  factor_code      VARCHAR2(10) not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TK_SUB_CLASS_FACTORS_T
  add constraint PK_TK_SUB_CLASS_FACTORS_T primary key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE, FACTOR_CODE);
alter table TK_SUB_CLASS_FACTORS_T
  add constraint FK_FACTOR_SUBCLASS_FACTOR foreign key (ORG_ID, B_CLASS_CODE, FACTOR_CODE)
  references TK_FACTOR_SETUP_T (ORG_ID, B_CLASS_CODE, FACTOR_CODE);
alter table TK_SUB_CLASS_FACTORS_T
  add constraint FK_ORG_SC_FATORS foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);
alter table TK_SUB_CLASS_FACTORS_T
  add constraint FK_SUBCLASS_SUBCLASS_FACTOR foreign key (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE)
  references TK_SUB_CLASS_SETUP_T (ORG_ID, B_CLASS_CODE, SUB_CLASS_CODE);

prompt
prompt Creating table TK_SUB_PRODUCT_CONDITION_MAP_T
prompt =============================================
prompt
create table TK_SUB_PRODUCT_CONDITION_MAP_T
(
  sub_product_id   NUMBER not null,
  cn_code          NUMBER not null,
  default_tag      VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  org_id           NUMBER not null
)
;
alter table TK_SUB_PRODUCT_CONDITION_MAP_T
  add constraint TK_SUB_PRODUCT_CONDITION_M_PK primary key (SUB_PRODUCT_ID, CN_CODE, ORG_ID);

prompt
prompt Creating table TK_SUB_PRODUCT_COVER_T
prompt =====================================
prompt
create table TK_SUB_PRODUCT_COVER_T
(
  org_id           NUMBER not null,
  sub_product_code NUMBER not null,
  cover_code       NUMBER not null,
  default_tag      VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  age_from         NUMBER not null,
  age_to           NUMBER not null
)
;
alter table TK_SUB_PRODUCT_COVER_T
  add constraint TK_SUB_PRODUCT_COVER_T_PK primary key (ORG_ID, SUB_PRODUCT_CODE, COVER_CODE, AGE_FROM, AGE_TO);

prompt
prompt Creating table TK_SUB_PRODUCT_EXCLUSION_MAP_T
prompt =============================================
prompt
create table TK_SUB_PRODUCT_EXCLUSION_MAP_T
(
  sub_product_id   NUMBER not null,
  ex_code          NUMBER not null,
  default_tag      VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  org_id           NUMBER not null
)
;
alter table TK_SUB_PRODUCT_EXCLUSION_MAP_T
  add constraint TK_SUB_PRODUCT_EXCLUSION_M_PK primary key (SUB_PRODUCT_ID, EX_CODE, ORG_ID);

prompt
prompt Creating table TK_VARIABLE_SETUP_T
prompt ==================================
prompt
create table TK_VARIABLE_SETUP_T
(
  org_id                NUMBER not null,
  variable_code         VARCHAR2(100) not null,
  variable_name         VARCHAR2(250),
  variable_query        VARCHAR2(4000),
  effective_start_date  DATE,
  effective_end_date    DATE,
  variable_type         VARCHAR2(10),
  variable_query_detail VARCHAR2(4000),
  created_by            VARCHAR2(50),
  creation_date         DATE,
  last_updated_by       VARCHAR2(50),
  last_update_date      DATE,
  module_code           VARCHAR2(10)
)
;
alter table TK_VARIABLE_SETUP_T
  add constraint PK_TK_VAR_SETUP primary key (ORG_ID, VARIABLE_CODE);
alter table TK_VARIABLE_SETUP_T
  add constraint FK_TK_VAR_ORG foreign key (ORG_ID)
  references TK_ORGANIZATION_SETUP_T (ORG_ID);

prompt
prompt Creating table TOAD_PLAN_TABLE
prompt ==============================
prompt
create table TOAD_PLAN_TABLE
(
  statement_id      VARCHAR2(30),
  plan_id           NUMBER,
  timestamp         DATE,
  remarks           VARCHAR2(4000),
  operation         VARCHAR2(30),
  options           VARCHAR2(255),
  object_node       VARCHAR2(128),
  object_owner      VARCHAR2(30),
  object_name       VARCHAR2(30),
  object_alias      VARCHAR2(65),
  object_instance   INTEGER,
  object_type       VARCHAR2(30),
  optimizer         VARCHAR2(255),
  search_columns    NUMBER,
  id                INTEGER,
  parent_id         INTEGER,
  depth             INTEGER,
  position          INTEGER,
  cost              INTEGER,
  cardinality       INTEGER,
  bytes             INTEGER,
  other_tag         VARCHAR2(255),
  partition_start   VARCHAR2(255),
  partition_stop    VARCHAR2(255),
  partition_id      INTEGER,
  other             LONG,
  distribution      VARCHAR2(30),
  cpu_cost          INTEGER,
  io_cost           INTEGER,
  temp_space        INTEGER,
  access_predicates VARCHAR2(4000),
  filter_predicates VARCHAR2(4000),
  projection        VARCHAR2(4000),
  time              INTEGER,
  qblock_name       VARCHAR2(30),
  other_xml         CLOB
)
;

prompt
prompt Creating table TRAVEL_BENEFIT_T
prompt ===============================
prompt
create table TRAVEL_BENEFIT_T
(
  org_id            NUMBER not null,
  travel_benefit_id NUMBER not null,
  benefit_desc      VARCHAR2(500),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  branch_id         NUMBER not null
)
;
alter table TRAVEL_BENEFIT_T
  add constraint PK_TRAVEL_BENEFIT_T primary key (ORG_ID, BRANCH_ID, TRAVEL_BENEFIT_ID);

prompt
prompt Creating table TRAVEL_INSURED_FAMILY_INFO_T
prompt ===========================================
prompt
create table TRAVEL_INSURED_FAMILY_INFO_T
(
  org_id           NUMBER not null,
  document_number  VARCHAR2(6) not null,
  policy_number    VARCHAR2(30) not null,
  family_info_code NUMBER not null,
  name             VARCHAR2(50),
  gender           VARCHAR2(1),
  relation         VARCHAR2(1),
  date_of_birth    DATE,
  passport_number  VARCHAR2(20),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  branch_id        NUMBER not null
)
;
alter table TRAVEL_INSURED_FAMILY_INFO_T
  add constraint PK_INSURED_FAMILY_T primary key (ORG_ID, BRANCH_ID, DOCUMENT_NUMBER, POLICY_NUMBER, FAMILY_INFO_CODE);

prompt
prompt Creating table TRAVEL_INVOICE_DETAIL_T
prompt ======================================
prompt
create table TRAVEL_INVOICE_DETAIL_T
(
  org_id             NUMBER not null,
  invoice_no         NUMBER not null,
  serial_no          NUMBER not null,
  policy_number      VARCHAR2(50),
  total_contribution NUMBER(15,2),
  total_payable      NUMBER(15,2),
  agent_commission   NUMBER(15,2),
  agent              VARCHAR2(50),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  agent_amount       NUMBER(15,2),
  branch_id          NUMBER not null
)
;
alter table TRAVEL_INVOICE_DETAIL_T
  add constraint PK_TRAVEL_INVOICE_DTL primary key (ORG_ID, BRANCH_ID, INVOICE_NO, SERIAL_NO);

prompt
prompt Creating table TRAVEL_INVOICE_HEADER_T
prompt ======================================
prompt
create table TRAVEL_INVOICE_HEADER_T
(
  org_id             NUMBER not null,
  invoice_no         NUMBER not null,
  invoice_date       DATE,
  from_date          DATE,
  to_date            DATE,
  agent              VARCHAR2(150),
  total_contribution NUMBER(15,2),
  total_payable      NUMBER(15,2),
  lock_flag          VARCHAR2(20),
  posted_user_name   VARCHAR2(50),
  post_flag          VARCHAR2(20),
  post_date          DATE,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  settled_tag        VARCHAR2(10),
  commission_type    VARCHAR2(2),
  branch_id          NUMBER not null
)
;
alter table TRAVEL_INVOICE_HEADER_T
  add constraint TRAVEL_INVOICE_HEADER_T primary key (ORG_ID, BRANCH_ID, INVOICE_NO);

prompt
prompt Creating table TRAVEL_PLAN_PRICE_T
prompt ==================================
prompt
create table TRAVEL_PLAN_PRICE_T
(
  org_id           NUMBER not null,
  tp_id            NUMBER not null,
  plan_price_id    NUMBER not null,
  individual_price NUMBER,
  family_price     NUMBER,
  nm_of_days       NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  branch_id        NUMBER not null,
  trip_type        VARCHAR2(1)
)
;
alter table TRAVEL_PLAN_PRICE_T
  add constraint PK_TP_PRICE_T primary key (ORG_ID, TP_ID, PLAN_PRICE_ID, BRANCH_ID);

prompt
prompt Creating table TRAVEL_PLAN_T
prompt ============================
prompt
create table TRAVEL_PLAN_T
(
  org_id               NUMBER not null,
  tp_id                NUMBER not null,
  plan_name            VARCHAR2(100),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE,
  geographical_mapping VARCHAR2(250),
  branch_id            NUMBER not null,
  age_from             NUMBER,
  age_from_type        VARCHAR2(1),
  age_to               NUMBER
)
;
alter table TRAVEL_PLAN_T
  add constraint PK_TRAVEL_PLAN_T primary key (ORG_ID, TP_ID, BRANCH_ID);

prompt
prompt Creating table TRAVEL_PR_DETAIL_T
prompt =================================
prompt
create table TRAVEL_PR_DETAIL_T
(
  org_id             NUMBER not null,
  pr_no              VARCHAR2(30) not null,
  invoice_no         NUMBER not null,
  total_contribution NUMBER(15,2),
  total_payable      NUMBER(15,2),
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE,
  instrument_amount  NUMBER,
  branch_id          NUMBER not null
)
;
alter table TRAVEL_PR_DETAIL_T
  add constraint PK_TRAVEL_PR_DTL_T primary key (ORG_ID, BRANCH_ID, INVOICE_NO, PR_NO);

prompt
prompt Creating table TRAVEL_PR_HEADER_T
prompt =================================
prompt
create table TRAVEL_PR_HEADER_T
(
  org_id            NUMBER not null,
  pr_no             VARCHAR2(30) not null,
  pr_date           DATE,
  agent             VARCHAR2(50),
  from_date         DATE,
  to_date           DATE,
  bank_code         VARCHAR2(50),
  branch_code       VARCHAR2(50),
  bank_account      VARCHAR2(50),
  instrument_type   VARCHAR2(50),
  instrument_number VARCHAR2(50),
  instrument_date   DATE,
  instrument_amount NUMBER,
  drawn_on          VARCHAR2(200),
  drawn_on_bank     VARCHAR2(50),
  reason            VARCHAR2(50),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE,
  lock_check        NVARCHAR2(20),
  lock_date         DATE,
  lock_by           VARCHAR2(20),
  remarks           VARCHAR2(500),
  lock_flag         VARCHAR2(20),
  post_flag         VARCHAR2(20),
  post_date         DATE,
  posted_user_name  VARCHAR2(50),
  invoice_no        VARCHAR2(200),
  settled_tag       VARCHAR2(10),
  branch_id         NUMBER not null
)
;
alter table TRAVEL_PR_HEADER_T
  add constraint PK_TRAVEL_PR_HEADER primary key (ORG_ID, BRANCH_ID, PR_NO);

prompt
prompt Creating table TRAVLE_POLICY_T
prompt ==============================
prompt
create table TRAVLE_POLICY_T
(
  org_id              NUMBER not null,
  document_number     VARCHAR2(100) not null,
  plan_type           VARCHAR2(200),
  policy_number       VARCHAR2(200) not null,
  full_name           VARCHAR2(50),
  mobile_no           VARCHAR2(20),
  email               VARCHAR2(100),
  plan                VARCHAR2(5),
  destination         VARCHAR2(50),
  start_date          DATE,
  date_of_birth       DATE,
  filer               VARCHAR2(50),
  cnic_no             VARCHAR2(20),
  cnic_issue_date     DATE,
  nm_of_days          VARCHAR2(20),
  contribution_amount NUMBER,
  passport_no         VARCHAR2(20),
  no_of_dependent     NUMBER,
  spouse_name         VARCHAR2(50),
  child_name_1        VARCHAR2(50),
  child_name_2        VARCHAR2(50),
  child_name_3        VARCHAR2(50),
  child_name_4        VARCHAR2(50),
  policy_status       VARCHAR2(20),
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  destination_country VARCHAR2(5),
  destination_state   VARCHAR2(5),
  destination_city    VARCHAR2(5),
  cancel_status       VARCHAR2(1),
  address             VARCHAR2(200),
  travel_purpose      VARCHAR2(1),
  destination2        VARCHAR2(4),
  invoice_tag         VARCHAR2(10),
  clear_by            VARCHAR2(50),
  clear_at            DATE,
  branch_id           NUMBER not null,
  age_at_entry        NUMBER,
  over_age            VARCHAR2(1),
  allow_over_age      VARCHAR2(1),
  age_type            VARCHAR2(1)
)
;
alter table TRAVLE_POLICY_T
  add constraint PK_TRAVEL_POLICY_T primary key (ORG_ID, DOCUMENT_NUMBER, POLICY_NUMBER, BRANCH_ID);

prompt
prompt Creating table TT_DOCUMENT_REQUIREMENT_MAP_T
prompt ============================================
prompt
create table TT_DOCUMENT_REQUIREMENT_MAP_T
(
  org_id               NUMBER not null,
  application_id       NUMBER not null,
  ticket_type_id       NUMBER not null,
  ticket_sub_type_id   NUMBER not null,
  doc_requirement_code NUMBER not null,
  required_document    VARCHAR2(200),
  is_mandatory         VARCHAR2(1),
  is_default           VARCHAR2(1),
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table TT_DOCUMENT_REQUIREMENT_MAP_T
  add primary key (ORG_ID, APPLICATION_ID, TICKET_TYPE_ID, TICKET_SUB_TYPE_ID, DOC_REQUIREMENT_CODE);

prompt
prompt Creating table TYPES_OF_LETTER_SETUP_T
prompt ======================================
prompt
create table TYPES_OF_LETTER_SETUP_T
(
  org_id           NUMBER not null,
  type_id          NUMBER not null,
  type_name        VARCHAR2(500),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table TYPES_OF_LETTER_SETUP_T
  add constraint PK_TYPES_OF_LETTER primary key (ORG_ID, TYPE_ID);

prompt
prompt Creating table UCR_DETAIL_T
prompt ===========================
prompt
create table UCR_DETAIL_T
(
  org_id                   NUMBER not null,
  application_id           NUMBER not null,
  branch_id                NUMBER not null,
  process_id               NUMBER not null,
  serial_code              NUMBER not null,
  client_desc              VARCHAR2(100),
  policy_no                VARCHAR2(15),
  alteration_type          VARCHAR2(50),
  record_type              VARCHAR2(1),
  item_no                  NUMBER,
  first_name               VARCHAR2(100),
  cnic_no                  VARCHAR2(15),
  date_of_birth            DATE,
  age                      NUMBER,
  policy_start_date        DATE,
  policy_end_date          DATE,
  contract_start_date      DATE,
  contract_end_date        DATE,
  payment_mode             VARCHAR2(1),
  endorsement_no           NUMBER,
  loading_percentage       NUMBER,
  benefit_code             NUMBER,
  benefit_desc             VARCHAR2(100),
  benefit_type             VARCHAR2(1),
  sum_assured              NUMBER,
  net_rate                 NUMBER,
  gross_rate               NUMBER,
  retention_sa             NUMBER,
  quota_share_sa           NUMBER,
  installment_no           NUMBER,
  inst_date_from           DATE,
  inst_date_to             DATE,
  gross_contribution       NUMBER,
  wakala_amount            NUMBER,
  special_discount         NUMBER,
  gross_cont_after_disc    NUMBER,
  quota_share_contribution NUMBER,
  osf                      NUMBER,
  ptf                      NUMBER,
  posting_tag              VARCHAR2(1),
  post_user                VARCHAR2(50),
  post_date                DATE,
  created_by               VARCHAR2(50),
  creation_date            DATE,
  last_updated_by          VARCHAR2(50),
  last_update_date         DATE,
  regular_or_alt           VARCHAR2(1),
  mode_of_payment          NUMBER,
  gross_premium            NUMBER,
  net_premium              NUMBER,
  policy_year              NUMBER,
  contract_year            NUMBER,
  policy_date_lag          NUMBER,
  contract_date_lag        NUMBER,
  life_non_life            VARCHAR2(1),
  final_period             NUMBER,
  ucr_factor               NUMBER,
  gross_ucr                NUMBER,
  ri_ucr                   NUMBER,
  ue_wakala                NUMBER,
  gross_sar                NUMBER,
  retakaful_sar            NUMBER,
  ri_percent               NUMBER,
  fy                       NUMBER,
  installment_days         NUMBER
)
;
alter table UCR_DETAIL_T
  add constraint PK_UCR_DETAIL_T primary key (ORG_ID, APPLICATION_ID, BRANCH_ID, PROCESS_ID, SERIAL_CODE);

prompt
prompt Creating table UCR_HEADER_T
prompt ===========================
prompt
create table UCR_HEADER_T
(
  org_id           NUMBER not null,
  application_id   NUMBER not null,
  branch_id        NUMBER not null,
  date_from        DATE,
  date_to          DATE,
  process_id       NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table UCR_HEADER_T
  add constraint PK_UCR_HEADER_T primary key (ORG_ID, APPLICATION_ID, BRANCH_ID, PROCESS_ID);

prompt
prompt Creating table UNIT_TESTING_HISTORY_T
prompt =====================================
prompt
create table UNIT_TESTING_HISTORY_T
(
  serial_no      NUMBER not null,
  test_id        NUMBER not null,
  given_input    VARCHAR2(1000),
  test_status    VARCHAR2(50),
  status_message VARCHAR2(4000),
  created_by     VARCHAR2(50),
  creation_date  DATE
)
;
alter table UNIT_TESTING_HISTORY_T
  add constraint PK_UNIT_TEST_HIST primary key (SERIAL_NO, TEST_ID);

prompt
prompt Creating table UNIT_TESTING_T
prompt =============================
prompt
create table UNIT_TESTING_T
(
  org_id           NUMBER not null,
  test_id          NUMBER not null,
  test_name        VARCHAR2(500),
  class_name       VARCHAR2(500),
  module_name      VARCHAR2(500),
  last_run_date    DATE,
  last_run_status  VARCHAR2(10),
  api_path         VARCHAR2(500),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  valid_input      VARCHAR2(1000),
  given_input      VARCHAR2(1000)
)
;
alter table UNIT_TESTING_T
  add primary key (ORG_ID, TEST_ID);

prompt
prompt Creating table UPLOAD_FILER_L_PAYLOAD_T
prompt =======================================
prompt
create table UPLOAD_FILER_L_PAYLOAD_T
(
  org_id            NUMBER not null,
  payroll_id        NUMBER,
  payroll_period_id NUMBER,
  upload_filer_id   NUMBER not null,
  cnic              VARCHAR2(20),
  created_by        VARCHAR2(50),
  creation_date     DATE,
  last_updated_by   VARCHAR2(50),
  last_update_date  DATE
)
;
alter table UPLOAD_FILER_L_PAYLOAD_T
  add primary key (ORG_ID, UPLOAD_FILER_ID);

prompt
prompt Creating table UPLOAD_RATES_INTERFACE_TABLE
prompt ===========================================
prompt
create table UPLOAD_RATES_INTERFACE_TABLE
(
  upload_id       NUMBER not null,
  term            NUMBER,
  policy_year_1   NUMBER,
  policy_year_2   NUMBER,
  policy_year_3   NUMBER,
  policy_year_4   NUMBER,
  policy_year_5   NUMBER,
  policy_year_6   NUMBER,
  policy_year_7   NUMBER,
  policy_year_8   NUMBER,
  policy_year_9   NUMBER,
  policy_year_10  NUMBER,
  policy_year_11  NUMBER,
  policy_year_12  NUMBER,
  policy_year_13  NUMBER,
  policy_year_14  NUMBER,
  policy_year_15  NUMBER,
  policy_year_16  NUMBER,
  policy_year_17  NUMBER,
  policy_year_18  NUMBER,
  policy_year_19  NUMBER,
  policy_year_20  NUMBER,
  policy_year_21  NUMBER,
  policy_year_22  NUMBER,
  policy_year_23  NUMBER,
  policy_year_24  NUMBER,
  policy_year_25  NUMBER,
  policy_year_26  NUMBER,
  policy_year_27  NUMBER,
  policy_year_28  NUMBER,
  policy_year_29  NUMBER,
  policy_year_30  NUMBER,
  policy_year_31  NUMBER,
  policy_year_32  NUMBER,
  policy_year_33  NUMBER,
  policy_year_34  NUMBER,
  policy_year_35  NUMBER,
  policy_year_36  NUMBER,
  policy_year_37  NUMBER,
  policy_year_38  NUMBER,
  policy_year_39  NUMBER,
  policy_year_40  NUMBER,
  policy_year_41  NUMBER,
  policy_year_42  NUMBER,
  policy_year_43  NUMBER,
  policy_year_44  NUMBER,
  policy_year_45  NUMBER,
  policy_year_46  NUMBER,
  policy_year_47  NUMBER,
  policy_year_48  NUMBER,
  policy_year_49  NUMBER,
  policy_year_50  NUMBER,
  policy_year_51  NUMBER,
  policy_year_52  NUMBER,
  policy_year_53  NUMBER,
  policy_year_54  NUMBER,
  policy_year_55  NUMBER,
  policy_year_56  NUMBER,
  policy_year_57  NUMBER,
  policy_year_58  NUMBER,
  policy_year_59  NUMBER,
  policy_year_60  NUMBER,
  policy_year_61  NUMBER,
  policy_year_62  NUMBER,
  policy_year_63  NUMBER,
  policy_year_64  NUMBER,
  policy_year_65  NUMBER,
  policy_year_66  NUMBER,
  policy_year_67  NUMBER,
  policy_year_68  NUMBER,
  policy_year_69  NUMBER,
  policy_year_70  NUMBER,
  policy_year_71  NUMBER,
  policy_year_72  NUMBER,
  policy_year_73  NUMBER,
  policy_year_74  NUMBER,
  policy_year_75  NUMBER,
  policy_year_76  NUMBER,
  policy_year_77  NUMBER,
  policy_year_78  NUMBER,
  policy_year_79  NUMBER,
  policy_year_80  NUMBER,
  policy_year_81  NUMBER,
  policy_year_82  NUMBER,
  policy_year_83  NUMBER,
  policy_year_84  NUMBER,
  policy_year_85  NUMBER,
  policy_year_86  NUMBER,
  policy_year_87  NUMBER,
  policy_year_88  NUMBER,
  policy_year_89  NUMBER,
  policy_year_90  NUMBER,
  policy_year_91  NUMBER,
  policy_year_92  NUMBER,
  policy_year_93  NUMBER,
  policy_year_94  NUMBER,
  policy_year_95  NUMBER,
  policy_year_96  NUMBER,
  policy_year_97  NUMBER,
  policy_year_98  NUMBER,
  policy_year_99  NUMBER,
  policy_year_100 NUMBER
)
;
alter table UPLOAD_RATES_INTERFACE_TABLE
  add primary key (UPLOAD_ID);

prompt
prompt Creating table USER_COUNTRY_WISE
prompt ================================
prompt
create table USER_COUNTRY_WISE
(
  userid           VARCHAR2(100) not null,
  country_id       VARCHAR2(50) not null,
  active           VARCHAR2(1),
  createddate      TIMESTAMP(6),
  createdby        VARCHAR2(50),
  updateddate      TIMESTAMP(6),
  updatedby        VARCHAR2(50),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  user_type        VARCHAR2(1)
)
;
alter table USER_COUNTRY_WISE
  add constraint USER_COUNTRY_WISE_PK primary key (USERID, COUNTRY_ID);

prompt
prompt Creating table USER_PARTNER_BRANCH_MAP_T
prompt ========================================
prompt
create table USER_PARTNER_BRANCH_MAP_T
(
  org_id           NUMBER not null,
  user_id          NUMBER not null,
  partner_id       NUMBER not null,
  branch_id        NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table USER_PARTNER_BRANCH_MAP_T
  add constraint PK_USER_PARTNER_BRANCH_MAP_T primary key (ORG_ID, USER_ID, PARTNER_ID, BRANCH_ID);

prompt
prompt Creating table USER_PARTNER_MAPPING_T
prompt =====================================
prompt
create table USER_PARTNER_MAPPING_T
(
  org_id           NUMBER,
  mapping_id       NUMBER,
  partner_id       NUMBER,
  user_id          NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table USER_PARTNER_MAPPING_T
  add constraint FK_USER_PARTNER_MAPPING_T_USER foreign key (USER_ID)
  references SM_USERS_T (USERID);
alter table USER_PARTNER_MAPPING_T
  add constraint FK_USER_PARTNER_PARTNER foreign key (ORG_ID, PARTNER_ID)
  references AM_PARTNER_T (ORG_ID, PARTNER_ID);

prompt
prompt Creating table USER_PROJECT_T
prompt =============================
prompt
create table USER_PROJECT_T
(
  org_id             NUMBER not null,
  project_id         NUMBER not null,
  project_name       VARCHAR2(200),
  project_desc       VARCHAR2(200),
  project_category   VARCHAR2(50),
  project_type       VARCHAR2(20),
  project_start_date DATE,
  project_end_date   DATE,
  created_by         VARCHAR2(50),
  creation_date      DATE,
  last_updated_by    VARCHAR2(50),
  last_update_date   DATE
)
;
alter table USER_PROJECT_T
  add constraint PK_USER_PROJECT_T primary key (ORG_ID, PROJECT_ID);

prompt
prompt Creating table VEHICLE_MAKE_T
prompt =============================
prompt
create table VEHICLE_MAKE_T
(
  make_code        NUMBER not null,
  make_desc        VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table VEHICLE_MAKE_T
  add constraint PK_VEHICLE_MAKE_T primary key (MAKE_CODE);

prompt
prompt Creating table VEHICLE_MODEL_T
prompt ==============================
prompt
create table VEHICLE_MODEL_T
(
  make_code        NUMBER not null,
  model_code       NUMBER not null,
  model_desc       VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table VEHICLE_MODEL_T
  add constraint PK_VEHICLE_MODEL_T primary key (MAKE_CODE, MODEL_CODE);
alter table VEHICLE_MODEL_T
  add foreign key (MAKE_CODE)
  references VEHICLE_MAKE_T (MAKE_CODE);

prompt
prompt Creating table XBRL_USERS
prompt =========================
prompt
create table XBRL_USERS
(
  userid          NVARCHAR2(20),
  username        NVARCHAR2(100),
  password        NVARCHAR2(20),
  usertype        NVARCHAR2(50),
  pageallow       NVARCHAR2(100),
  managerid       NVARCHAR2(20) default 0 not null,
  email           NVARCHAR2(50),
  contactno       NUMBER,
  externaluserid  INTEGER default 1,
  imagepath       NVARCHAR2(30),
  clientcode      INTEGER,
  outlookpassword NVARCHAR2(100),
  namedescription NVARCHAR2(100),
  firstname       NVARCHAR2(500),
  lastname        NVARCHAR2(500),
  countrycode     NVARCHAR2(20),
  userrole        NVARCHAR2(50),
  entity_id       NUMBER,
  terms_accepted  VARCHAR2(1),
  creation_date   DATE
)
;

prompt
prompt Creating table ZP_PROJECT_STAGE_T
prompt =================================
prompt
create table ZP_PROJECT_STAGE_T
(
  org_id           NUMBER not null,
  project_id       NUMBER not null,
  task_stage_id    NUMBER not null,
  start_date       DATE,
  end_date         DATE,
  close_flag       VARCHAR2(5),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE,
  stage_closed_by  VARCHAR2(100)
)
;
alter table ZP_PROJECT_STAGE_T
  add constraint PK_ZP_PROJECT_STAGE primary key (ORG_ID, PROJECT_ID, TASK_STAGE_ID);

prompt
prompt Creating table ZP_PROJECT_TASK_GROUP_T
prompt ======================================
prompt
create table ZP_PROJECT_TASK_GROUP_T
(
  org_id           NUMBER not null,
  project_id       NUMBER not null,
  task_group_id    NUMBER not null,
  group_name       VARCHAR2(50),
  active           VARCHAR2(1),
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table ZP_PROJECT_TASK_GROUP_T
  add constraint PK_PROJECT_TASK_GROUP_T primary key (ORG_ID, PROJECT_ID, TASK_GROUP_ID);

prompt
prompt Creating table ZP_PROJECT_TEAM_T
prompt ================================
prompt
create table ZP_PROJECT_TEAM_T
(
  org_id           NUMBER not null,
  project_id       NUMBER not null,
  team_id          NUMBER not null,
  user_id          NUMBER,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table ZP_PROJECT_TEAM_T
  add constraint PK_PROJECT_TEAM_T primary key (ORG_ID, PROJECT_ID, TEAM_ID);

prompt
prompt Creating table ZP_SUPERVISOR_HIERARCHY_T
prompt ========================================
prompt
create table ZP_SUPERVISOR_HIERARCHY_T
(
  org_id               NUMBER not null,
  h_id                 NUMBER not null,
  user_id              NUMBER,
  supervisor_id        NUMBER,
  effective_start_date DATE,
  effective_end_date   DATE,
  created_by           VARCHAR2(50),
  creation_date        DATE,
  last_updated_by      VARCHAR2(50),
  last_update_date     DATE
)
;
alter table ZP_SUPERVISOR_HIERARCHY_T
  add constraint PK_SUPERVISOR_HIERARCHY_T primary key (ORG_ID, H_ID);

prompt
prompt Creating table ZP_TASK_CC_USER_T
prompt ================================
prompt
create table ZP_TASK_CC_USER_T
(
  org_id           NUMBER not null,
  project_id       NUMBER not null,
  task_id          NUMBER not null,
  cc_user_id       NUMBER not null,
  created_by       VARCHAR2(50),
  creation_date    DATE,
  last_updated_by  VARCHAR2(50),
  last_update_date DATE
)
;
alter table ZP_TASK_CC_USER_T
  add constraint PK_TASK_CC_USER_T primary key (ORG_ID, PROJECT_ID, TASK_ID, CC_USER_ID);

prompt
prompt Creating table ZP_TASK_STAGE_MAPPING_T
prompt ======================================
prompt
create table ZP_TASK_STAGE_MAPPING_T
(
  org_id                  NUMBER not null,
  project_id              NUMBER not null,
  task_id                 NUMBER not null,
  task_stage_id           NUMBER not null,
  start_date              DATE,
  end_date                DATE,
  close_flag              VARCHAR2(5),
  stage_closed_by         VARCHAR2(100),
  created_by              VARCHAR2(50),
  creation_date           DATE,
  last_updated_by         VARCHAR2(50),
  last_update_date        DATE,
  project_mapped_stage_id NUMBER
)
;
alter table ZP_TASK_STAGE_MAPPING_T
  add constraint PK_ZP_TASK_STAGE_MAP primary key (ORG_ID, PROJECT_ID, TASK_ID, TASK_STAGE_ID);

prompt
prompt Creating table ZP_USER_TASK_UPDATE_T
prompt ====================================
prompt
create table ZP_USER_TASK_UPDATE_T
(
  org_id              NUMBER not null,
  project_id          NUMBER not null,
  task_id             NUMBER not null,
  task_update_id      NUMBER not null,
  update_summary      VARCHAR2(200),
  upadte_desc         VARCHAR2(200),
  start_date          DATE,
  end_date            DATE,
  created_by          VARCHAR2(50),
  creation_date       DATE,
  last_updated_by     VARCHAR2(50),
  last_update_date    DATE,
  file_path           VARCHAR2(200),
  is_system_generated VARCHAR2(2),
  re_assignee_id      NUMBER
)
;
alter table ZP_USER_TASK_UPDATE_T
  add constraint PK_TAS_UPDATE_T primary key (ORG_ID, PROJECT_ID, TASK_ID, TASK_UPDATE_ID);

prompt
prompt Creating sequence COACHILD_SEQUENCE
prompt ===================================
prompt
create sequence COACHILD_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 61
increment by 1
cache 20;

prompt
prompt Creating sequence COA_SEQUENCE
prompt ==============================
prompt
create sequence COA_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1721
increment by 1
cache 20;

prompt
prompt Creating sequence COLUMN_SEQ
prompt ============================
prompt
create sequence COLUMN_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence EMAIL_SEQ
prompt ===========================
prompt
create sequence EMAIL_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 9261
increment by 1
cache 20;

prompt
prompt Creating sequence ETFCode_SEQUENCE
prompt ==================================
prompt
create sequence ETFCode_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 81
increment by 1
cache 20;

prompt
prompt Creating sequence FS_HEADER_ROW
prompt ===============================
prompt
create sequence FS_HEADER_ROW
minvalue 1
maxvalue 9999999999999999999999999999
start with 12261
increment by 1
cache 20;

prompt
prompt Creating sequence Index.Sequence
prompt ================================
prompt
create sequence Index.Sequence
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence IndexCode_SEQUENCE
prompt ====================================
prompt
create sequence IndexCode_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 101
increment by 1
cache 20;

prompt
prompt Creating sequence Index_Sequence
prompt ================================
prompt
create sequence Index_Sequence
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MAPPINGDETAILID_SEQUENCE
prompt ==========================================
prompt
create sequence MAPPINGDETAILID_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 281
increment by 1
cache 20;

prompt
prompt Creating sequence MAPPINGID_SEQUENCE
prompt ====================================
prompt
create sequence MAPPINGID_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 313121
increment by 1
cache 20;

prompt
prompt Creating sequence MENUGROUP_SEQUENCE
prompt ====================================
prompt
create sequence MENUGROUP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 142
increment by 1
cache 20;

prompt
prompt Creating sequence MENU_GROUP_SEQUENCE
prompt =====================================
prompt
create sequence MENU_GROUP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 521
increment by 1
cache 20;

prompt
prompt Creating sequence MENU_SEQUENCE
prompt ===============================
prompt
create sequence MENU_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence MORTALITY_CHART_SEQ
prompt =====================================
prompt
create sequence MORTALITY_CHART_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 2261
increment by 1
cache 20;

prompt
prompt Creating sequence PARAMETERTYPE_SEQ
prompt ===================================
prompt
create sequence PARAMETERTYPE_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_ACTION_TYPE_T_SEQ
prompt ======================================
prompt
create sequence PF_ACTION_TYPE_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 21
increment by 1
cache 20;

prompt
prompt Creating sequence PF_BROKER_SETUP_T_SEQ
prompt =======================================
prompt
create sequence PF_BROKER_SETUP_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 61
increment by 1
cache 20;

prompt
prompt Creating sequence PF_CATEGORY_T_SEQ
prompt ===================================
prompt
create sequence PF_CATEGORY_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 41
increment by 1
cache 20;

prompt
prompt Creating sequence PF_CLIENT_RISK_PROFILE_SEQ
prompt ============================================
prompt
create sequence PF_CLIENT_RISK_PROFILE_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_CLIENT_RISK_PROFILE_T_SEQ
prompt ==============================================
prompt
create sequence PF_CLIENT_RISK_PROFILE_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 10
increment by 1
nocache;

prompt
prompt Creating sequence PF_CLIENT_SETUP_T_SEQ
prompt =======================================
prompt
create sequence PF_CLIENT_SETUP_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 661
increment by 1
cache 20;

prompt
prompt Creating sequence PF_INCOME_SOURCE_T_SEQ
prompt ========================================
prompt
create sequence PF_INCOME_SOURCE_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_MARKET_CAP_T_SEQ
prompt =====================================
prompt
create sequence PF_MARKET_CAP_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 6
increment by 1
nocache;

prompt
prompt Creating sequence PF_MY_PF_DETAIL_T_SEQ
prompt =======================================
prompt
create sequence PF_MY_PF_DETAIL_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1066
increment by 1
nocache;

prompt
prompt Creating sequence PF_MY_PORTFOLIO_HEADER_T_SEQ
prompt ==============================================
prompt
create sequence PF_MY_PORTFOLIO_HEADER_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 148
increment by 1
nocache;

prompt
prompt Creating sequence PF_ORDER_PROGRESS_T_SEQ
prompt =========================================
prompt
create sequence PF_ORDER_PROGRESS_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
nocache;

prompt
prompt Creating sequence PF_ORDER_TYPE_T_SEQ
prompt =====================================
prompt
create sequence PF_ORDER_TYPE_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 6
increment by 1
nocache;

prompt
prompt Creating sequence PF_ORDER_T_SEQ
prompt ================================
prompt
create sequence PF_ORDER_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 10610
increment by 1
nocache;

prompt
prompt Creating sequence PF_PAYMENT_TYPE_T_SEQ
prompt =======================================
prompt
create sequence PF_PAYMENT_TYPE_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_RISK_PROFILE_DETAIL_SEQ
prompt ============================================
prompt
create sequence PF_RISK_PROFILE_DETAIL_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_RISK_PROFILE_FACTOR_T_SEQ
prompt ==============================================
prompt
create sequence PF_RISK_PROFILE_FACTOR_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 61
increment by 1
cache 20;

prompt
prompt Creating sequence PF_RISK_PROFILE_QUES_SEQ
prompt ==========================================
prompt
create sequence PF_RISK_PROFILE_QUES_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_RISK_PROFILE_SEQUENCE
prompt ==========================================
prompt
create sequence PF_RISK_PROFILE_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 21
increment by 1
cache 20;

prompt
prompt Creating sequence PF_R_PROF_CATE_DETAIL_SEQ
prompt ===========================================
prompt
create sequence PF_R_PROF_CATE_DETAIL_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence PF_TIMING_T_SEQ
prompt =================================
prompt
create sequence PF_TIMING_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 4
increment by 1
nocache;

prompt
prompt Creating sequence PF_VALUESETS_T_SEQ
prompt ====================================
prompt
create sequence PF_VALUESETS_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 259
increment by 1
nocache;

prompt
prompt Creating sequence PF_VALUESET_VALUES_T_SEQ
prompt ==========================================
prompt
create sequence PF_VALUESET_VALUES_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 199
increment by 1
nocache;

prompt
prompt Creating sequence PF_VIEW_HEADER_T_SEQ
prompt ======================================
prompt
create sequence PF_VIEW_HEADER_T_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 9
increment by 1
nocache;

prompt
prompt Creating sequence PSXID_SEQ
prompt ===========================
prompt
create sequence PSXID_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 12
increment by 1
nocache;

prompt
prompt Creating sequence PS_TXN_SEQ
prompt ============================
prompt
create sequence PS_TXN_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 3301
increment by 50
cache 20;

prompt
prompt Creating sequence QUESTION_SEQUENCE
prompt ===================================
prompt
create sequence QUESTION_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 79
increment by 1
nocache;

prompt
prompt Creating sequence Question_sequence
prompt ===================================
prompt
create sequence Question_sequence
minvalue 1
maxvalue 9999999999999999999999999999
start with 19
increment by 1
nocache;

prompt
prompt Creating sequence SEQ_EMAIL
prompt ===========================
prompt
create sequence SEQ_EMAIL
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence TABLE_SEQ
prompt ===========================
prompt
create sequence TABLE_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence UPLOADDETAILID_SEQ
prompt ====================================
prompt
create sequence UPLOADDETAILID_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 32900
increment by 1
nocache;

prompt
prompt Creating sequence UPLOADIDFIX_SEQ
prompt =================================
prompt
create sequence UPLOADIDFIX_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 375961
increment by 1
cache 20;

prompt
prompt Creating sequence UPLOADID_SEQ
prompt ==============================
prompt
create sequence UPLOADID_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 2241071
increment by 1
nocache;

prompt
prompt Creating sequence USERMENUGROUPMAPPING_SEQUENCE
prompt ===============================================
prompt
create sequence USERMENUGROUPMAPPING_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 401
increment by 1
cache 20;

prompt
prompt Creating sequence USER_MENU_EXCLUSION_SEQUENCE
prompt ==============================================
prompt
create sequence USER_MENU_EXCLUSION_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 41
increment by 1
cache 20;

prompt
prompt Creating sequence USER_MENU_GROUP_MAP_SEQUENCE
prompt ==============================================
prompt
create sequence USER_MENU_GROUP_MAP_SEQUENCE
minvalue 1
maxvalue 9999999999999999999999999999
start with 301
increment by 1
cache 20;

prompt
prompt Creating sequence YOONEK_COLUMN_SCREENER_SEQ
prompt ============================================
prompt
create sequence YOONEK_COLUMN_SCREENER_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence YOONEK_SCREENERTABS_SEQ
prompt =========================================
prompt
create sequence YOONEK_SCREENERTABS_SEQ
minvalue 1
maxvalue 9999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating synonym APPLICANT_ATTACHMENT_T
prompt =======================================
prompt
create or replace synonym APPLICANT_ATTACHMENT_T
  for HCM.APPLICANT_ATTACHMENT_T;

prompt
prompt Creating synonym APPLICANT_SCREENING_HEADER_T
prompt =============================================
prompt
create or replace synonym APPLICANT_SCREENING_HEADER_T
  for HCM.APPLICANT_SCREENING_HEADER_T;

prompt
prompt Creating synonym APP_SCREENING_ATTACHMENT_T
prompt ===========================================
prompt
create or replace synonym APP_SCREENING_ATTACHMENT_T
  for HCM.APP_SCREENING_ATTACHMENT_T;

prompt
prompt Creating synonym APP_SCREENING_EXPERIENCE_T
prompt ===========================================
prompt
create or replace synonym APP_SCREENING_EXPERIENCE_T
  for HCM.APP_SCREENING_EXPERIENCE_T;

prompt
prompt Creating synonym APP_SCREENING_QUALIFICATION_T
prompt ==============================================
prompt
create or replace synonym APP_SCREENING_QUALIFICATION_T
  for HCM.APP_SCREENING_QUALIFICATION_T;

prompt
prompt Creating synonym ASSIGNMENTHISTORY
prompt ==================================
prompt
create or replace synonym ASSIGNMENTHISTORY
  for HCM.ASSIGNMENTHISTORY;

prompt
prompt Creating synonym ASSIGNMENTS
prompt ============================
prompt
create or replace synonym ASSIGNMENTS
  for HCM.ASSIGNMENTS;

prompt
prompt Creating synonym ATTENDANCE_MACHINE_LOG
prompt =======================================
prompt
create or replace synonym ATTENDANCE_MACHINE_LOG
  for HCM.ATTENDANCE_MACHINE_LOG;

prompt
prompt Creating synonym ATT_RULES_T
prompt ============================
prompt
create or replace synonym ATT_RULES_T
  for HCM.ATT_RULES_T;

prompt
prompt Creating synonym ATT_SHIFT_T
prompt ============================
prompt
create or replace synonym ATT_SHIFT_T
  for HCM.ATT_SHIFT_T;

prompt
prompt Creating synonym CANDIDATE
prompt ==========================
prompt
create or replace synonym CANDIDATE
  for HCM.CANDIDATE;

prompt
prompt Creating synonym CANDIDATE_ASSESSMENT_ANS_T
prompt ===========================================
prompt
create or replace synonym CANDIDATE_ASSESSMENT_ANS_T
  for HCM.CANDIDATE_ASSESSMENT_ANS_T;

prompt
prompt Creating synonym CAND_ATTACH
prompt ============================
prompt
create or replace synonym CAND_ATTACH
  for HCM.REC_CAND_ATTACH_T;

prompt
prompt Creating synonym CUST_TAX_SETUP_T
prompt =================================
prompt
create or replace synonym CUST_TAX_SETUP_T
  for HCM.CUST_TAX_SETUP_T;

prompt
prompt Creating synonym CUST_TAX_SLABS_T
prompt =================================
prompt
create or replace synonym CUST_TAX_SLABS_T
  for HCM.CUST_TAX_SLABS_T;

prompt
prompt Creating synonym ELEMENTELIGIBILITY
prompt ===================================
prompt
create or replace synonym ELEMENTELIGIBILITY
  for HCM.ELEMENTELIGIBILITY;

prompt
prompt Creating synonym ELEMENTELIGIBILITYDETAIL
prompt =========================================
prompt
create or replace synonym ELEMENTELIGIBILITYDETAIL
  for HCM.ELEMENTELIGIBILITYDETAIL;

prompt
prompt Creating synonym ELEMENTENTRIESDETAIL
prompt =====================================
prompt
create or replace synonym ELEMENTENTRIESDETAIL
  for HCM.ELEMENTENTRIESDETAIL;

prompt
prompt Creating synonym ELEMENTENTRIESHEADER
prompt =====================================
prompt
create or replace synonym ELEMENTENTRIESHEADER
  for HCM.ELEMENTENTRIESHEADER;

prompt
prompt Creating synonym ELEMENTSETDETAIL
prompt =================================
prompt
create or replace synonym ELEMENTSETDETAIL
  for HCM.ELEMENTSETDETAIL;

prompt
prompt Creating synonym ELEMENTSETHEADER
prompt =================================
prompt
create or replace synonym ELEMENTSETHEADER
  for HCM.ELEMENTSETHEADER;

prompt
prompt Creating synonym EMAIL
prompt ======================
prompt
create or replace synonym EMAIL
  for XBRL.EMAIL;

prompt
prompt Creating synonym EMPLOYEE
prompt =========================
prompt
create or replace synonym EMPLOYEE
  for HCM.EMPLOYEE;

prompt
prompt Creating synonym EMPLOYEE_LEVEL_SUPERVISORS_T
prompt =============================================
prompt
create or replace synonym EMPLOYEE_LEVEL_SUPERVISORS_T
  for HCM.EMPLOYEE_LEVEL_SUPERVISORS_T;

prompt
prompt Creating synonym EMP_PAYMENT_METHOD_T
prompt =====================================
prompt
create or replace synonym EMP_PAYMENT_METHOD_T
  for HCM.EMP_PAYMENT_METHOD_T;

prompt
prompt Creating synonym ENDEMPLOYMENT
prompt ==============================
prompt
create or replace synonym ENDEMPLOYMENT
  for HCM.ENDEMPLOYMENT;

prompt
prompt Creating synonym EXCEPTION_T
prompt ============================
prompt
create or replace synonym EXCEPTION_T
  for HCM.EXCEPTION_T;

prompt
prompt Creating synonym FAMILYDETAILS
prompt ==============================
prompt
create or replace synonym FAMILYDETAILS
  for HCM.FAMILYDETAILS;

prompt
prompt Creating synonym GRADES
prompt =======================
prompt
create or replace synonym GRADES
  for HCM.GRADES;

prompt
prompt Creating synonym HCM_TICKET_UPDATE_T
prompt ====================================
prompt
create or replace synonym HCM_TICKET_UPDATE_T
  for HCM.HCM_TICKET_UPDATE_T;

prompt
prompt Creating synonym HOLIDAY_T
prompt ==========================
prompt
create or replace synonym HOLIDAY_T
  for HCM.HOLIDAY_T;

prompt
prompt Creating synonym HR_APPRAISAL_HISTORY_T
prompt =======================================
prompt
create or replace synonym HR_APPRAISAL_HISTORY_T
  for HCM.HR_APPRAISAL_HISTORY_T;

prompt
prompt Creating synonym HR_APPRAISAL_STATUS_T
prompt ======================================
prompt
create or replace synonym HR_APPRAISAL_STATUS_T
  for HCM.HR_APPRAISAL_STATUS_T;

prompt
prompt Creating synonym HR_ASSET_T
prompt ===========================
prompt
create or replace synonym HR_ASSET_T
  for HCM.HR_ASSET_T;

prompt
prompt Creating synonym HR_BENEFITS_T
prompt ==============================
prompt
create or replace synonym HR_BENEFITS_T
  for HCM.HR_BENEFITS_T;

prompt
prompt Creating synonym HR_COMPETENCY_APPRAISAL_T
prompt ==========================================
prompt
create or replace synonym HR_COMPETENCY_APPRAISAL_T
  for HCM.HR_COMPETENCY_APPRAISAL_T;

prompt
prompt Creating synonym HR_COMPETENCY_LIST_T
prompt =====================================
prompt
create or replace synonym HR_COMPETENCY_LIST_T
  for HCM.HR_COMPETENCY_LIST_T;

prompt
prompt Creating synonym HR_COMPETENCY_MULTIRATOR_T
prompt ===========================================
prompt
create or replace synonym HR_COMPETENCY_MULTIRATOR_T
  for HCM.HR_COMPETENCY_MULTIRATOR_T;

prompt
prompt Creating synonym HR_COMPETENCY_TEMPLATE_T
prompt =========================================
prompt
create or replace synonym HR_COMPETENCY_TEMPLATE_T
  for HCM.HR_COMPETENCY_TEMPLATE_T;

prompt
prompt Creating synonym HR_COMP_MANAGER_APPRAISAL_T
prompt ============================================
prompt
create or replace synonym HR_COMP_MANAGER_APPRAISAL_T
  for HCM.HR_COMP_MANAGER_APPRAISAL_T;

prompt
prompt Creating synonym HR_EMPLOYEE_ASSET_ALLOCATION_T
prompt ===============================================
prompt
create or replace synonym HR_EMPLOYEE_ASSET_ALLOCATION_T
  for HCM.HR_EMPLOYEE_ASSET_ALLOCATION_T;

prompt
prompt Creating synonym HR_EMPLOYEE_ATTENDANCE_T
prompt =========================================
prompt
create or replace synonym HR_EMPLOYEE_ATTENDANCE_T
  for HCM.HR_EMPLOYEE_ATTENDANCE_T;

prompt
prompt Creating synonym HR_EMPLOYEE_BEN_ALLOCATION_T
prompt =============================================
prompt
create or replace synonym HR_EMPLOYEE_BEN_ALLOCATION_T
  for HCM.HR_EMPLOYEE_BEN_ALLOCATION_T;

prompt
prompt Creating synonym HR_EMPLOYEE_PERFORMANCE_PLAN_T
prompt ===============================================
prompt
create or replace synonym HR_EMPLOYEE_PERFORMANCE_PLAN_T
  for HCM.HR_EMPLOYEE_PERFORMANCE_PLAN_T;

prompt
prompt Creating synonym HR_EMPLOYEE_PLAN_MAPPING_T
prompt ===========================================
prompt
create or replace synonym HR_EMPLOYEE_PLAN_MAPPING_T
  for HCM.HR_EMPLOYEE_PLAN_MAPPING_T;

prompt
prompt Creating synonym HR_EMPLOYEE_PLAN_OBJECTIVES_T
prompt ==============================================
prompt
create or replace synonym HR_EMPLOYEE_PLAN_OBJECTIVES_T
  for HCM.HR_EMPLOYEE_PLAN_OBJECTIVES_T;

prompt
prompt Creating synonym HR_EMPLOYEE_PLAN_OBJ_HISTORY_T
prompt ===============================================
prompt
create or replace synonym HR_EMPLOYEE_PLAN_OBJ_HISTORY_T
  for HCM.HR_EMPLOYEE_PLAN_OBJ_HISTORY_T;

prompt
prompt Creating synonym HR_EMP_ATTENDANCE_T
prompt ====================================
prompt
create or replace synonym HR_EMP_ATTENDANCE_T
  for HCM.HR_EMP_ATTENDANCE_T;

prompt
prompt Creating synonym HR_MANAGER_APPRAISAL_HEADER_T
prompt ==============================================
prompt
create or replace synonym HR_MANAGER_APPRAISAL_HEADER_T
  for HCM.HR_MANAGER_APPRAISAL_HEADER_T;

prompt
prompt Creating synonym HR_MULTIRATOR_ASSIGN_T
prompt =======================================
prompt
create or replace synonym HR_MULTIRATOR_ASSIGN_T
  for HCM.HR_MULTIRATOR_ASSIGN_T;

prompt
prompt Creating synonym HR_MULTIRATOR_HEADER_T
prompt =======================================
prompt
create or replace synonym HR_MULTIRATOR_HEADER_T
  for HCM.HR_MULTIRATOR_HEADER_T;

prompt
prompt Creating synonym HR_OBJECTIVES_APPRAISAL_T
prompt ==========================================
prompt
create or replace synonym HR_OBJECTIVES_APPRAISAL_T
  for HCM.HR_OBJECTIVES_APPRAISAL_T;

prompt
prompt Creating synonym HR_OBJECTIVE_MULTIRATOR_T
prompt ==========================================
prompt
create or replace synonym HR_OBJECTIVE_MULTIRATOR_T
  for HCM.HR_OBJECTIVE_MULTIRATOR_T;

prompt
prompt Creating synonym HR_OBJECTIVE_TEMPLATE_T
prompt ========================================
prompt
create or replace synonym HR_OBJECTIVE_TEMPLATE_T
  for HCM.HR_OBJECTIVE_TEMPLATE_T;

prompt
prompt Creating synonym HR_OBJ_HR_REVIEW_T
prompt ===================================
prompt
create or replace synonym HR_OBJ_HR_REVIEW_T
  for HCM.HR_OBJ_HR_REVIEW_T;

prompt
prompt Creating synonym HR_OBJ_MANAGER_APPRAISAL_T
prompt ===========================================
prompt
create or replace synonym HR_OBJ_MANAGER_APPRAISAL_T
  for HCM.HR_OBJ_MANAGER_APPRAISAL_T;

prompt
prompt Creating synonym HR_OBJ_MANAGER_REVIEW_T
prompt ========================================
prompt
create or replace synonym HR_OBJ_MANAGER_REVIEW_T
  for HCM.HR_OBJ_MANAGER_REVIEW_T;

prompt
prompt Creating synonym HR_PERFORMANCE_OBJECTIVES_T
prompt ============================================
prompt
create or replace synonym HR_PERFORMANCE_OBJECTIVES_T
  for HCM.HR_PERFORMANCE_OBJECTIVES_T;

prompt
prompt Creating synonym HR_PERFORMANCE_PLANS_T
prompt =======================================
prompt
create or replace synonym HR_PERFORMANCE_PLANS_T
  for HCM.HR_PERFORMANCE_PLANS_T;

prompt
prompt Creating synonym HR_PLAN_APPRAISAL_HEADER_T
prompt ===========================================
prompt
create or replace synonym HR_PLAN_APPRAISAL_HEADER_T
  for HCM.HR_PLAN_APPRAISAL_HEADER_T;

prompt
prompt Creating synonym HR_PLAN_MAPPING_ENTRIES_T
prompt ==========================================
prompt
create or replace synonym HR_PLAN_MAPPING_ENTRIES_T
  for HCM.HR_PLAN_MAPPING_ENTRIES_T;

prompt
prompt Creating synonym HR_PLAN_OBJETIVE_MAPPING_T
prompt ===========================================
prompt
create or replace synonym HR_PLAN_OBJETIVE_MAPPING_T
  for HCM.HR_PLAN_OBJETIVE_MAPPING_T;

prompt
prompt Creating synonym HR_PLAN_OBJ_COMMENT_HISTORY_T
prompt ==============================================
prompt
create or replace synonym HR_PLAN_OBJ_COMMENT_HISTORY_T
  for HCM.HR_PLAN_OBJ_COMMENT_HISTORY_T;

prompt
prompt Creating synonym HR_PLAN_SETUP_T
prompt ================================
prompt
create or replace synonym HR_PLAN_SETUP_T
  for HCM.HR_PLAN_SETUP_T;

prompt
prompt Creating synonym HR_RATING_SCALE_DETAILS_T
prompt ==========================================
prompt
create or replace synonym HR_RATING_SCALE_DETAILS_T
  for HCM.HR_RATING_SCALE_DETAILS_T;

prompt
prompt Creating synonym HR_RATING_SCALE_T
prompt ==================================
prompt
create or replace synonym HR_RATING_SCALE_T
  for HCM.HR_RATING_SCALE_T;

prompt
prompt Creating synonym HR_SELF_APPRAISAL_COMPETENCY_T
prompt ===============================================
prompt
create or replace synonym HR_SELF_APPRAISAL_COMPETENCY_T
  for HCM.HR_SELF_APPRAISAL_COMPETENCY_T;

prompt
prompt Creating synonym HR_SELF_APPRAISAL_OBJECTIVES_T
prompt ===============================================
prompt
create or replace synonym HR_SELF_APPRAISAL_OBJECTIVES_T
  for HCM.HR_SELF_APPRAISAL_OBJECTIVES_T;

prompt
prompt Creating synonym JOBS
prompt =====================
prompt
create or replace synonym JOBS
  for HCM.JOBS;

prompt
prompt Creating synonym LEAVE_MARKING_T
prompt ================================
prompt
create or replace synonym LEAVE_MARKING_T
  for HCM.LEAVE_MARKING_T;

prompt
prompt Creating synonym LEAVE_REQUEST_T
prompt ================================
prompt
create or replace synonym LEAVE_REQUEST_T
  for HCM.LEAVE_REQUEST_T;

prompt
prompt Creating synonym LMS_COURSE_ANNOUCMENTS_T
prompt =========================================
prompt
create or replace synonym LMS_COURSE_ANNOUCMENTS_T
  for HCM.LMS_COURSE_ANNOUCMENTS_T;

prompt
prompt Creating synonym LMS_COURSE_FEEDBACK_T
prompt ======================================
prompt
create or replace synonym LMS_COURSE_FEEDBACK_T
  for HCM.LMS_COURSE_FEEDBACK_T;

prompt
prompt Creating synonym LMS_COURSE_FILE_T
prompt ==================================
prompt
create or replace synonym LMS_COURSE_FILE_T
  for HCM.LMS_COURSE_FILE_T;

prompt
prompt Creating synonym LMS_COURSE_MODULE_MAIN_T
prompt =========================================
prompt
create or replace synonym LMS_COURSE_MODULE_MAIN_T
  for HCM.LMS_COURSE_MODULE_MAIN_T;

prompt
prompt Creating synonym LMS_COURSE_MODULE_T
prompt ====================================
prompt
create or replace synonym LMS_COURSE_MODULE_T
  for HCM.LMS_COURSE_MODULE_T;

prompt
prompt Creating synonym LMS_COURSE_NOTE_T
prompt ==================================
prompt
create or replace synonym LMS_COURSE_NOTE_T
  for HCM.LMS_COURSE_NOTE_T;

prompt
prompt Creating synonym LMS_COURSE_QUIZZ_T
prompt ===================================
prompt
create or replace synonym LMS_COURSE_QUIZZ_T
  for HCM.LMS_COURSE_QUIZZ_T;

prompt
prompt Creating synonym LMS_COURSE_RQUEST_ENROLL_T
prompt ===========================================
prompt
create or replace synonym LMS_COURSE_RQUEST_ENROLL_T
  for HCM.LMS_COURSE_RQUEST_ENROLL_T;

prompt
prompt Creating synonym LMS_COURSE_T
prompt =============================
prompt
create or replace synonym LMS_COURSE_T
  for HCM.LMS_COURSE_T;

prompt
prompt Creating synonym LMS_COURSE_TEAM_T
prompt ==================================
prompt
create or replace synonym LMS_COURSE_TEAM_T
  for HCM.LMS_COURSE_TEAM_T;

prompt
prompt Creating synonym LMS_FEEDBACK_HEADER_T
prompt ======================================
prompt
create or replace synonym LMS_FEEDBACK_HEADER_T
  for HCM.LMS_FEEDBACK_HEADER_T;

prompt
prompt Creating synonym LMS_FEEDBACK_QUESTIONS_T
prompt =========================================
prompt
create or replace synonym LMS_FEEDBACK_QUESTIONS_T
  for HCM.LMS_FEEDBACK_QUESTIONS_T;

prompt
prompt Creating synonym LMS_FEEDBACK_QUESTION_CAT_T
prompt ============================================
prompt
create or replace synonym LMS_FEEDBACK_QUESTION_CAT_T
  for HCM.LMS_FEEDBACK_QUESTION_CAT_T;

prompt
prompt Creating synonym LMS_LEARNER_ALLOW_RETAKE_T
prompt ===========================================
prompt
create or replace synonym LMS_LEARNER_ALLOW_RETAKE_T
  for HCM.LMS_LEARNER_ALLOW_RETAKE_T;

prompt
prompt Creating synonym LMS_LEARNER_COURSE_FEEDBACK
prompt ============================================
prompt
create or replace synonym LMS_LEARNER_COURSE_FEEDBACK
  for HCM.LMS_LEARNER_COURSE_FEEDBACK;

prompt
prompt Creating synonym LMS_LEARNER_FEEDBACK_ANSWER_T
prompt ==============================================
prompt
create or replace synonym LMS_LEARNER_FEEDBACK_ANSWER_T
  for HCM.LMS_LEARNER_FEEDBACK_ANSWER_T;

prompt
prompt Creating synonym LMS_LEARNER_MODULE_TRACK_T
prompt ===========================================
prompt
create or replace synonym LMS_LEARNER_MODULE_TRACK_T
  for HCM.LMS_LEARNER_MODULE_TRACK_T;

prompt
prompt Creating synonym LMS_LEARNER_QUIZZ_ANSWER_T
prompt ===========================================
prompt
create or replace synonym LMS_LEARNER_QUIZZ_ANSWER_T
  for HCM.LMS_LEARNER_QUIZZ_ANSWER_T;

prompt
prompt Creating synonym LMS_MODULE_TYPE_T
prompt ==================================
prompt
create or replace synonym LMS_MODULE_TYPE_T
  for HCM.LMS_MODULE_TYPE_T;

prompt
prompt Creating synonym LMS_QUESTION_ANSWER_T
prompt ======================================
prompt
create or replace synonym LMS_QUESTION_ANSWER_T
  for HCM.LMS_QUESTION_ANSWER_T;

prompt
prompt Creating synonym LMS_QUESTION_BANK_ANSWER_T
prompt ===========================================
prompt
create or replace synonym LMS_QUESTION_BANK_ANSWER_T
  for HCM.LMS_QUESTION_BANK_ANSWER_T;

prompt
prompt Creating synonym LMS_QUESTION_BANK_T
prompt ====================================
prompt
create or replace synonym LMS_QUESTION_BANK_T
  for HCM.LMS_QUESTION_BANK_T;

prompt
prompt Creating synonym LMS_QUIZZ_MARKS_T
prompt ==================================
prompt
create or replace synonym LMS_QUIZZ_MARKS_T
  for HCM.LMS_QUIZZ_MARKS_T;

prompt
prompt Creating synonym LMS_QUIZZ_QUESTION_T
prompt =====================================
prompt
create or replace synonym LMS_QUIZZ_QUESTION_T
  for HCM.LMS_QUIZZ_QUESTION_T;

prompt
prompt Creating synonym LM_AUTH_DEL_T
prompt ==============================
prompt
create or replace synonym LM_AUTH_DEL_T
  for HCM.LM_AUTH_DEL_T;

prompt
prompt Creating synonym LM_HIERARCHY_T
prompt ===============================
prompt
create or replace synonym LM_HIERARCHY_T
  for HCM.LM_HIERARCHY_T;

prompt
prompt Creating synonym LM_LEAVECOUNT_T
prompt ================================
prompt
create or replace synonym LM_LEAVECOUNT_T
  for HCM.LM_LEAVECOUNT_T;

prompt
prompt Creating synonym LM_LEAVETYPE_T
prompt ===============================
prompt
create or replace synonym LM_LEAVETYPE_T
  for HCM.LM_LEAVETYPE_T;

prompt
prompt Creating synonym LM_NOTIFICATIONS_T
prompt ===================================
prompt
create or replace synonym LM_NOTIFICATIONS_T
  for HCM.LM_NOTIFICATIONS_T;

prompt
prompt Creating synonym LOAN_REQUEST_T
prompt ===============================
prompt
create or replace synonym LOAN_REQUEST_T
  for HCM.LOAN_REQUEST_T;

prompt
prompt Creating synonym LOCATIONS
prompt ==========================
prompt
create or replace synonym LOCATIONS
  for HCM.LOCATIONS;

prompt
prompt Creating synonym MY_EVENTS_T
prompt ============================
prompt
create or replace synonym MY_EVENTS_T
  for HCM.MY_EVENTS_T;

prompt
prompt Creating synonym ORGANIZATIONS
prompt ==============================
prompt
create or replace synonym ORGANIZATIONS
  for HCM.ORGANIZATIONS;

prompt
prompt Creating synonym PAYELEMENTCALCULATIONRULES
prompt ===========================================
prompt
create or replace synonym PAYELEMENTCALCULATIONRULES
  for HCM.PAYELEMENTCALCULATIONRULES;

prompt
prompt Creating synonym PAYELEMENTS
prompt ============================
prompt
create or replace synonym PAYELEMENTS
  for HCM.PAYELEMENTS;

prompt
prompt Creating synonym PAYLOVVALUES
prompt =============================
prompt
create or replace synonym PAYLOVVALUES
  for HCM.PAYLOVVALUES;

prompt
prompt Creating synonym PAYROLLCALANDER
prompt ================================
prompt
create or replace synonym PAYROLLCALANDER
  for HCM.PAYROLLCALANDER;

prompt
prompt Creating synonym PAYTIMEPERIODSDATES
prompt ====================================
prompt
create or replace synonym PAYTIMEPERIODSDATES
  for HCM.PAYTIMEPERIODSDATES;

prompt
prompt Creating synonym PER_PAY_SALARY
prompt ===============================
prompt
create or replace synonym PER_PAY_SALARY
  for HCM.PER_PAY_SALARY;

prompt
prompt Creating synonym PER_PAY_SALARY_COMPONENTS
prompt ==========================================
prompt
create or replace synonym PER_PAY_SALARY_COMPONENTS
  for HCM.PER_PAY_SALARY_COMPONENTS;

prompt
prompt Creating synonym POSITION
prompt =========================
prompt
create or replace synonym POSITION
  for HCM.POSITION;

prompt
prompt Creating synonym PREVIOUSEMPLOYMENTS
prompt ====================================
prompt
create or replace synonym PREVIOUSEMPLOYMENTS
  for HCM.PREVIOUSEMPLOYMENTS;

prompt
prompt Creating synonym QUALIFICATIONS
prompt ===============================
prompt
create or replace synonym QUALIFICATIONS
  for HCM.QUALIFICATIONS;

prompt
prompt Creating synonym REC_APPLICATION
prompt ================================
prompt
create or replace synonym REC_APPLICATION
  for HCM.REC_APPLICATION_T;

prompt
prompt Creating synonym REC_ASSESSMENT_ATTACH_T
prompt ========================================
prompt
create or replace synonym REC_ASSESSMENT_ATTACH_T
  for HCM.REC_ASSESSMENT_ATTACH_T;

prompt
prompt Creating synonym REC_ASSESSMENT_QUEST_T
prompt =======================================
prompt
create or replace synonym REC_ASSESSMENT_QUEST_T
  for HCM.REC_ASSESSMENT_QUEST_T;

prompt
prompt Creating synonym REC_ASSESSMENT_T
prompt =================================
prompt
create or replace synonym REC_ASSESSMENT_T
  for HCM.REC_ASSESSMENT_T;

prompt
prompt Creating synonym REC_CANDIDATE_ASSESSMENT_ANS_T
prompt ===============================================
prompt
create or replace synonym REC_CANDIDATE_ASSESSMENT_ANS_T
  for HCM.REC_CANDIDATE_ASSESSMENT_ANS_T;

prompt
prompt Creating synonym REC_CANDIDATE_EXPERIENCE_T
prompt ===========================================
prompt
create or replace synonym REC_CANDIDATE_EXPERIENCE_T
  for HCM.REC_CANDIDATE_EXPERIENCE_T;

prompt
prompt Creating synonym REC_CANDIDATE_QUALIFICATION_T
prompt ==============================================
prompt
create or replace synonym REC_CANDIDATE_QUALIFICATION_T
  for HCM.REC_CANDIDATE_QUALIFICATION_T;

prompt
prompt Creating synonym REC_CAND_ASSESSMENT_HEADER_T
prompt =============================================
prompt
create or replace synonym REC_CAND_ASSESSMENT_HEADER_T
  for HCM.REC_CAND_ASSESSMENT_HEADER_T;

prompt
prompt Creating synonym REC_INTERVIEWER_T
prompt ==================================
prompt
create or replace synonym REC_INTERVIEWER_T
  for HCM.REC_INTERVIEWER_T;

prompt
prompt Creating synonym REC_INTERVIEW_T
prompt ================================
prompt
create or replace synonym REC_INTERVIEW_T
  for HCM.REC_INTERVIEW_T;

prompt
prompt Creating synonym REC_JOB_OPENING_T
prompt ==================================
prompt
create or replace synonym REC_JOB_OPENING_T
  for HCM.REC_JOB_OPENING_T;

prompt
prompt Creating synonym REC_QUEST_CATEGORY_T
prompt =====================================
prompt
create or replace synonym REC_QUEST_CATEGORY_T
  for HCM.REC_QUEST_CATEGORY_T;

prompt
prompt Creating synonym REC_REFERAL_T
prompt ==============================
prompt
create or replace synonym REC_REFERAL_T
  for HCM.REC_REFERAL_T;

prompt
prompt Creating synonym REC_REFR_ATTACH_T
prompt ==================================
prompt
create or replace synonym REC_REFR_ATTACH_T
  for HCM.REC_REFR_ATTACH_T;

prompt
prompt Creating synonym RUNPAYROLLHISTORY
prompt ==================================
prompt
create or replace synonym RUNPAYROLLHISTORY
  for HCM.RUNPAYROLLHISTORY;

prompt
prompt Creating synonym TICKET_SUB_TYPE_T
prompt ==================================
prompt
create or replace synonym TICKET_SUB_TYPE_T
  for HCM.TICKET_SUB_TYPE_T;

prompt
prompt Creating synonym TICKET_T
prompt =========================
prompt
create or replace synonym TICKET_T
  for HCM.TICKET_T;

prompt
prompt Creating synonym TICKET_TYPE_T
prompt ==============================
prompt
create or replace synonym TICKET_TYPE_T
  for HCM.TICKET_TYPE_T;

prompt
prompt Creating synonym TKT_RESPONSIBLE_DEPT_T
prompt =======================================
prompt
create or replace synonym TKT_RESPONSIBLE_DEPT_T
  for HCM.TKT_RESPONSIBLE_DEPT_T;

prompt
prompt Creating synonym TKT_RESP_DEPT_PERS_T
prompt =====================================
prompt
create or replace synonym TKT_RESP_DEPT_PERS_T
  for HCM.TKT_RESP_DEPT_PERS_T;

prompt
prompt Creating synonym TKT_SUB_TYPE_ESCALATION_T
prompt ==========================================
prompt
create or replace synonym TKT_SUB_TYPE_ESCALATION_T
  for HCM.TKT_SUB_TYPE_ESCALATION_T;

prompt
prompt Creating synonym USER_FORM_GROUP_MAPPING_T
prompt ==========================================
prompt
create or replace synonym USER_FORM_GROUP_MAPPING_T
  for HCM.USER_FORM_GROUP_MAPPING_T;

prompt
prompt Creating view AGENT_COMMISSION_DETAIL_V
prompt =======================================
prompt
CREATE OR REPLACE FORCE VIEW AGENT_COMMISSION_DETAIL_V AS
SELECT 
    IDHT.MASTER_REF_NO, 
    GPSDT.DESCRIPTION AS PRODUCT, 
    IDACT.BRANCH_ID, 
    IDHT.PARTNER_BRANCH_ID, 
    IDACT.COMMISSION_RATE, 
    IDACT.COMMISSION_AMOUNT, 
    IDAT.CONTRIBUTION_PAID_AMT,
    AAT.AGENT_CODE, 
    AAT.AGENT_NAME, 
    CASE 
        WHEN AAT.AGENT_STATUS = 'A' 
        THEN 'ACTIVE' 
        WHEN AAT.AGENT_STATUS = 'T' 
        THEN 'TERMINATE' 
        ELSE 'RESIGN' 
    END                   AS AGENT_STATUS,
    IDACT.COMMISSION_TYPE AS STATUS_TYPE, 
    APBT.PARTNER_BRANCH_NAME, 
    ADT.DESIGNATION_NAME, 
    ADCT.CHANNEL_NAME, 
    ACMT.MODEL_NAME,
    APT.PARTNER_NAME,
    CASE 
        WHEN IDHT.PAYMENT_MODE = 'A' 
        THEN 'ANNUALLY'
        WHEN IDHT.PAYMENT_MODE = 'H' 
        THEN 'HALF YEARLY' 
        WHEN IDHT.PAYMENT_MODE = 'M' 
        THEN 'MONTHLY' 
        WHEN IDHT.PAYMENT_MODE = 'Q' 
        THEN 'QUATERLY' 
        ELSE '-'
    END              AS PAYMENT_MODE, 
    IDHT.POLICY_TERM AS CONTRIBUTION_YEAR, 
    CASE 
        WHEN IDACT.ALLOCATION_TYPE = '1' 
        THEN 'REGULAR' 
        WHEN IDACT.ALLOCATION_TYPE = '2' 
        THEN 'ADHOC'
        ELSE '-' 
    END AS COMMISSION_TYPE 
FROM 
    IL_DOC_HEADER_T IDHT 
INNER JOIN 
    IL_DOC_ALLOCATIONDTL_T IDAT 
ON 
    ( 
        IDHT.ORG_ID = IDAT.ORG_ID 
    AND IDHT.BRANCH_ID = IDAT.BRANCH_ID
    AND IDHT.MAIN_PRODUCT_CODE = IDAT.MAIN_PRODUCT_CODE
    AND IDHT.SUB_PRODUCT_CODE = IDAT.SUB_PRODUCT_CODE
    AND IDHT.TAKAFUL_TYPE = IDAT.TAKAFUL_TYPE
    AND IDHT.DOCUMENT_TYPE = IDAT.DOCUMENT_TYPE
    AND IDHT.DOCUMENT_NO = IDAT.DOCUMENT_NO
    AND IDHT.RECORD_TYPE = IDAT.RECORD_TYPE
    AND IDHT.DOCUMENT_YEAR = IDAT.DOCUMENT_YEAR
    AND IDHT.ISSUE_COUNT = IDAT.ISSUE_COUNT
    AND IDHT.ENDORSEMENT_NO = IDAT.ENDORSEMENT_NO
    AND IDHT.APPLICATION_ID = IDAT.APPLICATION_ID)
INNER JOIN
    IL_DOC_ALLOC_DTL_COMM_T IDACT 
ON 
    ( 
        IDAT.ORG_ID = IDACT.ORG_ID
    AND IDAT.BRANCH_ID = IDACT.BRANCH_ID
    AND IDAT.MAIN_PRODUCT_CODE = IDACT.MAIN_PRODUCT_CODE
    AND IDAT.SUB_PRODUCT_CODE = IDACT.SUB_PRODUCT_CODE
    AND IDAT.TAKAFUL_TYPE = IDACT.TAKAFUL_TYPE
    AND IDAT.DOCUMENT_TYPE = IDACT.DOCUMENT_TYPE
    AND IDAT.DOCUMENT_NO = IDACT.DOCUMENT_NO
    AND IDAT.RECORD_TYPE = IDACT.RECORD_TYPE
    AND IDAT.DOCUMENT_YEAR = IDACT.DOCUMENT_YEAR
    AND IDAT.ISSUE_COUNT = IDACT.ISSUE_COUNT
    AND IDAT.ENDORSEMENT_NO = IDACT.ENDORSEMENT_NO
    AND IDAT.APPLICATION_ID = IDACT.APPLICATION_ID
    AND IDAT.ALLOCATION_ID = IDACT.ALLOCATION_ID
    AND IDAT.SUB_SERIAL_NO = IDACT.SUB_SERIAL_NO)
LEFT OUTER JOIN
    AM_AGENT_T AAT 
ON 
    IDHT.ORG_ID = AAT.ORG_ID
AND IDHT.AGENT_ID = AAT.AGENT_ID
LEFT OUTER JOIN
    AM_PARTNER_BRANCHES_T APBT 
ON 
    IDHT.ORG_ID = APBT.ORG_ID
AND IDHT.PARTNER_BRANCH_ID = APBT.PARTNER_BRANCH_ID
AND IDHT.PARTNER_ID = APBT.PARTNER_ID
LEFT OUTER JOIN
    GLAS_SUB_PRODUCT_SETUP_T GPSDT 
ON 
    IDACT.SUB_PRODUCT_CODE = GPSDT.SUB_PRODUCT_CODE
AND IDACT.ORG_ID = GPSDT.ORG_ID
LEFT JOIN
    AM_DESIGNATION_T ADT 
ON 
    IDACT.DESIGNATION_ID = ADT.DESIGNATION_ID
AND IDACT.ORG_ID = ADT.ORG_ID
LEFT JOIN 
    AM_DISTRIBUTION_CHANNEL_T ADCT
ON 
    IDHT.ORG_ID = ADCT.ORG_ID
AND IDHT.CHANNEL_ID = ADCT.CHANNEL_ID
LEFT JOIN 
    AM_CHANNEL_MODEL_T ACMT
ON 
    IDHT.ORG_ID = ACMT.ORG_ID
AND IDHT.CHANNEL_ID = ACMT.CHANNEL_ID
AND IDHT.MODEL_ID = ACMT.MODEL_ID
LEFT JOIN 
    AM_PARTNER_T APT
ON 
    IDHT.ORG_ID = APT.ORG_ID
AND IDHT.PARTNER_ID = APT.PARTNER_ID;

prompt
prompt Creating view AM_AGENT_CHANNEL_MODEL_V
prompt ======================================
prompt
CREATE OR REPLACE FORCE VIEW AM_AGENT_CHANNEL_MODEL_V AS
SELECT     AMT."ORG_ID",
           AMT."AGENT_ID",
           AMT."PARTNER_ID",
           AMT."CHANNEL_ID",
           AMT."MODEL_ID",
           AMT."CREATED_BY",
           AMT."CREATION_DATE",
           AMT."LAST_UPDATED_BY",
           AMT."LAST_UPDATE_DATE",
           AMT."TERMINATION_ID",
           AMT."TERMINATION_DATE",
           AMT."TERMINATION_BY",
           EAT.ENTITY_TYPE,
           EAT.ENTITY_CODE,
           EAT.ADDRESS1 AS ADDRESS,
           EAT.PHONE1 AS CONTACT_NO,
           AMT.DELETE_FLAG,
           AGT.AGENT_NAME,
           APT.PARTNER_NAME,
           ACT.CHANNEL_NAME,
           ACMT.MODEL_NAME,
           CCT.CITY_NAME
      FROM AM_AGENT_CHANNEL_MODEL_T AMT
        LEFT JOIN AM_AGENT_T AGT
          ON AGT.AGENT_ID = AMT.AGENT_ID
          AND AGT.ORG_ID = AMT.ORG_ID
        LEFT JOIN AM_PARTNER_T APT
          ON AMT.PARTNER_ID = APT.PARTNER_ID
          AND AMT.ORG_ID = APT.ORG_ID
        LEFT JOIN AM_DISTRIBUTION_CHANNEL_T ACT
          ON AMT.CHANNEL_ID = ACT.CHANNEL_ID
          AND AMT.ORG_ID = ACT.ORG_ID
        LEFT JOIN AM_CHANNEL_MODEL_T ACMT
          ON AMT.MODEL_ID = ACMT.MODEL_ID
          AND AMT.ORG_ID = ACMT.ORG_ID
          AND AMT.CHANNEL_ID = ACMT.CHANNEL_ID
          LEFT JOIN ENTITY_ADDRESS_T EAT 
            ON AMT.ORG_ID = EAT.ORG_ID
          LEFT JOIN COUNTRY_CITY_T CCT
            ON EAT.CITY_CODE = CCT.CITY_CODE
            AND EAT.COUNTRY_CODE = CCT.COUNTRY_CODE 
            AND EAT.STATE_CODE = CCT.STATE_CODE;

prompt
prompt Creating view BANK_REVENUE_V
prompt ============================
prompt
CREATE OR REPLACE FORCE VIEW BANK_REVENUE_V AS
SELECT
    TO_CHAR (IDIT.DUE_DATE ,
    'DD-MON-YYYY')COMMENCEMENT_DATE,
    idit.INSTALLMENT_NO SUBMISSION,
    --IDIT.DUE_DATE COMM_DATE,
    APBT.PARTNER_BRANCH_NAME Branchname,
    APGT.GROUP_NAME Groups,
    APRT.PARTNER_REGION_NAME RegionName,
    APAT.PARTNER_AREA_NAME Area,
    apbt.BRANCH_RM_NAME,
    apbt.BRANCH_MANUAL_CODE AS BRANCH_MANUAL_CODE,
    amt.PARTNER_NAME PARTNER_NAME,
    --TO_CHAR (DH.SUBMIT_DATE,'DD-MON-YYYY')SUBMISSION,
    MOD.MODEL_DESC,
    pr.DESCRIPTION,
    CHANN.CHANNEL_ID,
    CHANN.CHANNEL_NAME,
    DH.CANCELLATION_REMARKS,
    TO_CHAR (DH.CANCEL_DATE,
    'DD-MON-YYYY') CANCEL_DATE,
    TO_CHAR (DH.COMM_DATE,
    'DD-MON-YYYY') COMM_DATE,
    TO_CHAR (DH.ISSUE_DATE,
    'DD-MON-YYYY') ISSUE_DATE,
    DH.MASTER_REF_NO,
    DH.DOC_REFERENCE_NO,
    --DH.TOPUP_AMOUNT TOPUP_AMOUNT,
    DH.BASIC_CONTRIBUTION_MODAL,
    DH.PAYMENT_TERM,
    DH.POLICY_TERM,
    TO_CHAR (DH.POST_DATE,
    'DD-MON-YYYY') POST_DATE,
    NVL (ow.first_name,
    '')
       || ' '
       || NVL (ow.middle_name,
    '')
       || ' '
       || NVL (ow.last_name,
    '')
          AS OwnerName,
    cty.CITY_NAME,
    idit.INSTALLMENT_NO,
    TO_CHAR (idit.DUE_DATE,
    'DD-MON-YYYY') DUE_DATE,
    --GRP.GROUP_NAME,
    APRT.PARTNER_REGION_NAME,
    
    dss.STATUS_DESC,
    AGT.AGENT_NAME AgentName,
    agt.AGENT_CODE AgentCode,
    com.COMMISSION_AMOUNT CommissionAmount,
    DH.INITIAL_TOPUP TOPUP_AMOUNT,
    --com.COMMISSION_RATE_TOPUP ProductWiseTopUp,
    com.COMMISSION_RATE ProductWiseCommision,
    apbt.PARTNER_BRANCH_NAME,
    CASE
        WHEN com.ALLOCATION_TYPE = '2' THEN COMMISSION_AMOUNT
        ELSE 0
    END AS TopUpAmountCommission,
    CASE
        WHEN DH.PAYMENT_MODE = 'A' THEN 'ANNUALLY'
        WHEN DH.PAYMENT_MODE = 'H' THEN 'HALF YEARLY'
        WHEN DH.PAYMENT_MODE = 'M' THEN 'MONTHLY'
        WHEN DH.PAYMENT_MODE = 'Q' THEN 'QUATERLY'
        ELSE '-'
    END AS PremiumMode
FROM
    il_doc_header_t dh
LEFT OUTER JOIN am_agent_t AGT
          ON
    (AGT.ORG_ID = DH.ORG_ID
        AND AGT.AGENT_ID = DH.AGENT_ID)
LEFT OUTER JOIN AM_DISTRIBUTION_CHANNEL_T CHANN
          ON
    (CHANN.ORG_ID = DH.ORG_ID
        AND CHANN.CHANNEL_ID = DH.CHANNEL_ID)
LEFT OUTER JOIN IL_DOC_CLIENT_PERS_INFO_T ow
          ON
    ( ow.ORG_ID = DH.ORG_ID
        AND ow.BRANCH_ID = DH.BRANCH_ID
        AND ow.MAIN_PRODUCT_CODE = DH.MAIN_PRODUCT_CODE
        AND ow.SUB_PRODUCT_CODE = DH.SUB_PRODUCT_CODE
        AND ow.TAKAFUL_TYPE = DH.TAKAFUL_TYPE
        AND ow.DOCUMENT_TYPE = DH.DOCUMENT_TYPE
        AND ow.RECORD_TYPE = DH.RECORD_TYPE
        AND ow.DOCUMENT_YEAR = DH.DOCUMENT_YEAR
        AND ow.ISSUE_COUNT = DH.ISSUE_COUNT
        AND ow.ENDORSEMENT_NO = DH.ENDORSEMENT_NO
        AND ow.APPLICATION_ID = DH.APPLICATION_ID
        AND ow.DOCUMENT_NO = DH.DOCUMENT_NO
        AND ow.client_code = DH.client_code)
LEFT OUTER JOIN il_doc_address_t b
          ON
    ( DH.ORG_ID = b.ORG_ID
        AND DH.BRANCH_ID = b.BRANCH_ID
        AND DH.MAIN_PRODUCT_CODE = b.MAIN_PRODUCT_CODE
        AND DH.SUB_PRODUCT_CODE = b.SUB_PRODUCT_CODE
        AND DH.TAKAFUL_TYPE = b.TAKAFUL_TYPE
        AND DH.DOCUMENT_TYPE = b.DOCUMENT_TYPE
        AND DH.RECORD_TYPE = b.RECORD_TYPE
        AND DH.DOCUMENT_YEAR = b.DOCUMENT_YEAR
        AND DH.ISSUE_COUNT = b.ISSUE_COUNT
        AND DH.ENDORSEMENT_NO = b.ENDORSEMENT_NO
        AND DH.APPLICATION_ID = b.APPLICATION_ID
        AND DH.DOCUMENT_NO = b.DOCUMENT_NO
        AND b.CORRESPONDENCE_TAG = 'Y'
        AND b.ENTRY_TYPE =
        CASE
            NVL (DH.PAYER_SAME_TAG,
            'N')
                        WHEN 'Y' THEN 'CL'
            ELSE 'PY'
        END)
LEFT OUTER JOIN COUNTRY_city_t CTY
          ON
    ( CTY.COUNTRY_CODE = B.COUNTRY_CODE
        AND CTY.STATE_CODE = B.STATE_CODE
        AND CTY.CITY_CODE = B.CITY_CODE)
LEFT OUTER JOIN IL_DOC_INSTALLMENTS_T idit
          ON
    ( DH.ORG_ID = idit.ORG_ID
        AND DH.BRANCH_ID = idit.BRANCH_ID
        AND DH.MAIN_PRODUCT_CODE = idit.MAIN_PRODUCT_CODE
        AND DH.SUB_PRODUCT_CODE = idit.SUB_PRODUCT_CODE
        AND DH.TAKAFUL_TYPE = idit.TAKAFUL_TYPE
        AND DH.DOCUMENT_TYPE = idit.DOCUMENT_TYPE
        AND DH.RECORD_TYPE = idit.RECORD_TYPE
        AND DH.DOCUMENT_YEAR = idit.DOCUMENT_YEAR
        AND DH.ISSUE_COUNT = idit.ISSUE_COUNT
        AND DH.ENDORSEMENT_NO = idit.ENDORSEMENT_NO
        AND DH.APPLICATION_ID = idit.APPLICATION_ID
        AND DH.DOCUMENT_NO = idit.DOCUMENT_NO)
LEFT OUTER JOIN AM_CHANNEL_MODEL_T MOD
          ON
    ( DH.ORG_ID = MOD.ORG_ID
        AND DH.CHANNEL_ID = MOD.CHANNEL_ID
        AND DH.MODEL_ID = MOD.MODEL_ID)
LEFT OUTER JOIN AM_PARTNER_T amt
          ON
    (DH.ORG_ID = amt.ORG_ID
        AND DH.partner_id = amt.partner_id)
LEFT OUTER JOIN IL_DOC_STATUS_SETUP_T dss
          ON
    (dss.ORG_ID = DH.ORG_ID
        AND dss.STATUS_CODE = DH.undwt_status)
LEFT OUTER JOIN GLAS_SUB_PRODUCT_SETUP_T pr ON
    (DH.org_id = pr.org_id
        AND DH.MAIN_PRODUCT_CODE = pr.MAIN_PRODUCT_CODE
        AND DH.SUB_PRODUCT_CODE = pr.SUB_PRODUCT_CODE)
LEFT OUTER JOIN IL_DOC_ALLOC_DTL_COMM_T com
          ON
    ( DH.ORG_ID = com.ORG_ID
        AND idit.BRANCH_ID = com.BRANCH_ID
        AND idit.MAIN_PRODUCT_CODE = com.MAIN_PRODUCT_CODE
        AND idit.SUB_PRODUCT_CODE = com.SUB_PRODUCT_CODE
        AND idit.TAKAFUL_TYPE = com.TAKAFUL_TYPE
        AND idit.DOCUMENT_TYPE = com.DOCUMENT_TYPE
        AND idit.RECORD_TYPE = com.RECORD_TYPE
        AND idit.DOCUMENT_YEAR = com.DOCUMENT_YEAR
        AND idit.ISSUE_COUNT = com.ISSUE_COUNT
        AND idit.ENDORSEMENT_NO = com.ENDORSEMENT_NO
        AND idit.APPLICATION_ID = com.APPLICATION_ID
        AND idit.DOCUMENT_NO = com.DOCUMENT_NO
        AND idit.installment_no = com.installment_no)
LEFT OUTER JOIN AM_PARTNER_BRANCHES_T apbt ON
    (DH.ORG_ID = apbt.ORG_ID
        AND DH.partner_id = apbt.partner_id
        AND DH.PARTNER_BRANCH_ID = APBT.PARTNER_BRANCH_ID)
LEFT OUTER JOIN AM_PARTNER_GROUP_T APGT ON
    (apbt.ORG_ID = APGT.ORG_ID
        AND apbt.PARTNER_ID = APGT.PARTNER_ID
        AND apbt.GROUP_ID = APGT.PARTNER_GROUP_ID)
LEFT OUTER JOIN AM_PARTNER_REGION_T APRT ON
    (apbt.ORG_ID = APRT.ORG_ID
        AND apbt.PARTNER_ID = APRT.PARTNER_ID
        AND apbt.GROUP_ID = APRT.PARTNER_GROUP_ID
        AND apbt.REGION_ID = APRT.PARTNER_REGION_ID)
LEFT OUTER JOIN AM_PARTNER_AREA_T APAT ON
    (apbt.ORG_ID = APAT.ORG_ID
        AND apbt.PARTNER_ID = APAT.PARTNER_ID
        AND apbt.GROUP_ID = APAT.PARTNER_GROUP_ID
        AND apbt.REGION_ID = APAT.PARTNER_REGION_ID
        AND apbt.AREA_ID = APAT.PARTNER_AREA_ID)
WHERE
    com.COMMISSION_NATURE = 'B'
    AND dss.STATUS_CODE IN (8, 10, 14, 15, 16)
    AND amt.ORG_ID = '5'
    AND NVL(DH.POLICY_POSTED, 'N') <> 'Y'
    AND DH.ENDORSEMENT_NO = 0
    AND DH.CANCEL_TAG IS NULL
    AND DH.DOC_REFERENCE_KEY IS NOT NULL
    AND DH.REVISED_TAG IS NULL
    AND amt.Partner_ID = '7'
    AND trunc(DH.SUBMIT_DATE) BETWEEN '01-jul-2023' AND '31-dec-2023'
;

prompt
prompt Creating view GLAS_UNDWT_REQ_WITH_COMMA
prompt =======================================
prompt
CREATE OR REPLACE FORCE VIEW GLAS_UNDWT_REQ_WITH_COMMA AS
SELECT ORG_ID,REQ_CODE,LISTAGG(SHORT_DESC, ', ') WITHIN GROUP (ORDER BY SHORT_DESC ASC) AS SHORT_DESC FROM glas_undwt_req_setup_t
    GROUP BY ORG_ID,REQ_CODE
    ORDER BY REQ_CODE;

prompt
prompt Creating view GL_CLAIM_REGISTER_V
prompt =================================
prompt
CREATE OR REPLACE FORCE VIEW GL_CLAIM_REGISTER_V AS
SELECT TO_CHAR (ant.Reporting_Date, 'dd/mm/yyyy') AS Activity_Date,
       apct.CHANNEL_NAME AS Channel,
       aprg.PARTNER_REGION_NAME AS region,
       A.PRODUCER_CODE AS Marketing_Executive,
       INITCAP (NVL (b.client_desc, '-')) Participant_Name,
       ant.POLICY_NO AS POLICY_NO,
       i.FCL AS Free_Cover_Limit_FCL,
       TO_CHAR (A.GDH_ISSUE_DATE, 'dd/mm/yyyy') AS Policy_Start_Date,
       TO_CHAR (A.GDH_EXPIRY_DATE, 'dd/mm/yyyy') AS Policy_End_Date,
       CASE
          WHEN A.GDH_EXPIRY_DATE <= SYSDATE THEN 'ACTIVE'
          ELSE 'EXPIRED'
       END
          AS STATUS,
       ant.CLAIM_NO AS Claim_Code,
       ant.CLAIM_REFERENCE_NO AS System_Claim,
       i.FIRST_Name || ' ' || i.Last_Name Member_Name,
       i.Gender AS Gender,
       TO_CHAR (i.DATE_OF_BIRTH, 'dd/mm/yyyy') AS DATE_OF_BIRTH,
       i.AGE,
       i.CNIC_NO AS CNIC,
       i.PERSONAL_ID AS E_ID,
       i.ITEM_NO AS Cert_ID,
       i.ITEM_STATUS AS Status_Insured,
       TO_CHAR (i.Effective_Date, 'dd/mm/yyyy') AS Effective_Date,
          FLOOR (MONTHS_BETWEEN (ant.EVENT_DATE, i.Effective_Date) / 12)
       || ' Year  '
       || FLOOR (MOD (MONTHS_BETWEEN (ant.EVENT_DATE, i.Effective_Date), 12))
       || ' Months  '
       || TRUNC (
               ant.EVENT_DATE
             - ADD_MONTHS (
                  i.Effective_Date,
                  FLOOR (MONTHS_BETWEEN (ant.EVENT_DATE, i.Effective_Date))))
       || ' Days  '
          AS Aging_Effective_Event,
       ben.BENEFIT_TYPE_CODE AS Benefit_Code,
       ben.BENEFIT_DESC AS Benefit_Desc,
       ant.CAUSE_OF_LOSS AS Cause_of_Event,
       ant.PROXIMATE_CAUSE AS Proximate_Cause,
       TO_CHAR (ant.EVENT_DATE, 'dd/mm/yyyy') AS Date_of_Event,
       ant.EVENT_PLACE AS Place_of_Event,
       TO_CHAR (ant.REPORTING_DATE, 'dd/mm/yyyy') AS Claim_Intimation_Date,
       TO_CHAR (ant.RE_OPEN_DATE, 'dd/mm/yyyy') AS Claim_Reopen_Date,
          FLOOR (MONTHS_BETWEEN (ant.REPORTING_DATE, ant.RE_OPEN_DATE) / 12)
       || ' Year  '
       || FLOOR (
             MOD (MONTHS_BETWEEN (ant.REPORTING_DATE, ant.RE_OPEN_DATE), 12))
       || ' Months  '
       || TRUNC (
               ant.REPORTING_DATE
             - ADD_MONTHS (
                  ant.RE_OPEN_DATE,
                  FLOOR (
                     MONTHS_BETWEEN (ant.REPORTING_DATE, ant.RE_OPEN_DATE))))
       || ' Days  '
          AS Duration_Intimation_Event,
       ant.CLAIM_STATUS AS Claim_Status,
       TO_CHAR (tcs.Settlement_date, 'dd/mm/yyyy') AS settlement_date,
          FLOOR (MONTHS_BETWEEN (tcs.Settlement_date, ant.EVENT_DATE) / 12)
       || ' Year  '
       || FLOOR (
             MOD (MONTHS_BETWEEN (tcs.Settlement_date, ant.EVENT_DATE), 12))
       || ' Months  '
       || TRUNC (
               tcs.Settlement_date
             - ADD_MONTHS (
                  ant.EVENT_DATE,
                  FLOOR (
                     MONTHS_BETWEEN (tcs.Settlement_date, ant.EVENT_DATE))))
       || ' Days  '
          AS Duration_Decision_Intimation,
       crt.INITIAL_CLAIM_AMOUNT AS provisional_Amount,
       (SELECT MAX (GCC.DESIGNATION) AS DESIGNATION
          FROM GLAS_CLIENT_CONTACTPERSON_T GCC
         WHERE     GCC.ORG_ID = A.ORG_ID
               AND GCC.CLIENT_CODE = A.PPS_PARTY_CODE
               AND GCC.contact_type = 'P')
          AS DESIGNATION,
       (SELECT MAX (GCC.Email) AS Email
          FROM GLAS_CLIENT_CONTACTPERSON_T GCC
         WHERE     GCC.ORG_ID = A.ORG_ID
               AND GCC.CLIENT_CODE = A.PPS_PARTY_CODE
               AND GCC.contact_type = 'P')
          AS EMAIL,
       (SELECT MAX (GCC.MOBILE_NO) AS Contact
          FROM GLAS_CLIENT_CONTACTPERSON_T GCC
         WHERE     GCC.ORG_ID = A.ORG_ID
               AND GCC.CLIENT_CODE = A.PPS_PARTY_CODE
               AND GCC.contact_type = 'P')
          AS CONTACT,
       (SELECT MAX (GCC.CONTACT_NAME) AS Contact_Person
          FROM GLAS_CLIENT_CONTACTPERSON_T GCC
         WHERE     GCC.ORG_ID = A.ORG_ID
               AND GCC.CLIENT_CODE = A.PPS_PARTY_CODE
               AND GCC.contact_type = 'P')
          AS Contact_Person,
       CASE WHEN ant.claim_status = 'A' THEN tcs.SETTLEMENT_AMOUNT ELSE 0 END
          AS approved_amount,
       CASE
          WHEN ant.claim_status = 'RJ' THEN crt.INITIAL_CLAIM_AMOUNT
          ELSE 0
       END
          AS Declined_Amount,
       CASE
          WHEN ant.claim_status NOT IN ('A', 'RJ') THEN tcs.SETTLEMENT_AMOUNT
          ELSE 0
       END
          AS Oustanding_Amount,
       CASE
          WHEN ant.claim_status = 'C' THEN crt.INITIAL_CLAIM_AMOUNT
          ELSE 0
       END
          AS Cancelled,
       ass.RETENTION_CLAIM_AMOUNT AS RETEN,
       ass.QUOTA_SHARE_AMOUNT AS QUOTA
  FROM TK_CLAIM_INTIMATION_T ant
       LEFT OUTER JOIN TK_DOC_HEADER_T A
          ON (    ant.ORG_ID = A.ORG_ID
              AND ant.BRANCH_ID = A.BRANCH_ID
              AND ant.sub_product_code = A.sub_product_code
              AND ant.policy_no = A.MASTER_REF_NO
              AND A.RECORD_TYPE =
                     CASE WHEN A.endorsement_no = 0 THEN 'O' ELSE 'P' END
              AND TRUNC (ANT.EVENT_DATE) BETWEEN TRUNC (A.GDH_COMM_DATE)
                                             AND TRUNC (A.GDH_EXPIRY_DATE) --    AND A.endorsement_no = (
                                       --        SELECT MAX(dh.endorsement_no)
                                             --        FROM TK_DOC_HEADER_T dh
                            --        WHERE dh.MASTER_REF_NO = a.master_ref_no
                                                                       --    )
             )
       LEFT OUTER JOIN GLAS_DOC_INSURED_ITEMS_T i
          ON     A.ORG_ID = i.ORG_ID
             AND A.BRANCH_ID = i.BRANCH_ID
             AND A.PRODUCT_CODE = i.product_code
             AND A.sub_product_code = i.sub_product_code
             AND A.takaful_type = i.takaful_type
             AND A.document_type = i.document_type
             AND A.record_type = i.record_type
             AND A.document_no = i.document_no
             AND A.document_year = i.document_year
             AND A.issue_count = i.issue_count
             AND A.endorsement_no = i.endorsement_no
             AND A.application_id = i.application_id
             AND ant.INSURED_ID = i.ITEM_NO
       LEFT OUTER JOIN tk_claim_settlement_t tcs
          ON     tcs.ORG_ID = ant.ORG_ID
             AND tcs.BRANCH_ID = ant.BRANCH_ID
             AND tcs.SUB_PRODUCT_CODE = ant.SUB_PRODUCT_CODE
             AND tcs.APPLICATION_ID = ant.APPLICATION_ID
             AND tcs.CLAIM_NO = ant.CLAIM_NO
       LEFT OUTER JOIN TK_CLAIM_ASSESSMENT_T ass
          ON     ass.ORG_ID = ant.ORG_ID
             AND ass.BRANCH_ID = ant.BRANCH_ID
             AND ass.SUB_PRODUCT_CODE = ant.SUB_PRODUCT_CODE
             AND ass.APPLICATION_ID = ant.APPLICATION_ID
             AND ass.CLAIM_NO = ant.CLAIM_NO
       LEFT OUTER JOIN claim_Registration_t crt
          ON     tcs.ORG_ID = crt.ORG_ID
             AND tcs.BRANCH_ID = crt.BRANCH_ID
             AND tcs.SUB_PRODUCT_CODE = crt.SUB_PRODUCT_CODE
             AND tcs.APPLICATION_ID = crt.APPLICATION_ID
             AND tcs.CLAIM_NO = crt.CLAIM_NO
       LEFT OUTER JOIN GLAS_CLIENT_SETUP_T b
          ON (a.ORG_ID = b.ORG_ID AND a.PPS_PARTY_CODE = b.CLIENT_CODE)
       LEFT OUTER JOIN TK_CLAIM_BENEFITS_T BA
          ON     BA.ORG_ID = ant.ORG_ID
             AND BA.BRANCH_ID = ant.BRANCH_ID
             AND BA.SUB_PRODUCT_CODE = ant.SUB_PRODUCT_CODE
             AND BA.CLAIM_NO = ant.CLAIM_NO
       LEFT OUTER JOIN glas_benefit_setup_t ben
          ON (BA.org_id = ben.org_id AND BA.benefit_code = ben.BENEFIT_CODE)
       LEFT OUTER JOIN AM_AGENT_T agtt
          ON (A.org_id = agtt.org_id AND A.PRODUCER_CODE = agtt.AGENT_Id)
       LEFT OUTER JOIN AM_PARTNER_T apr
          ON (apr.org_id = agtt.org_id AND APR.IS_PARTNER = 0)
       LEFT OUTER JOIN AM_PARTNER_BRANCHES_T BR
          ON (BR.ORG_ID = APR.ORG_ID AND BR.PARTNER_ID = APR.PARTNER_ID)
       LEFT OUTER JOIN AM_PARTNER_REGION_T aprg
          ON (    BR.org_id = aprg.org_id
              AND BR.partner_id = aprg.partner_id
              AND BR.REGION_ID = APRG.PARTNER_REGION_ID)
       LEFT OUTER JOIN AM_PARTNER_CHANNEL_T apc
          ON (apr.org_id = apc.org_id AND apr.partner_id = apc.partner_id)
       LEFT OUTER JOIN AM_DISTRIBUTION_CHANNEL_T apct
          ON (apct.org_id = apc.org_id AND apct.CHANNEL_ID = apc.CHANNEL_ID)
--WHERE
--    ant.ORG_ID = 5
--    AND ant.BRANCH_ID = 14
--    AND ant.claim_status = 'IP'
--    AND ant.CLAIM_NO = '000013'
;

prompt
prompt Creating view GL_LOSSRATIO_V
prompt ============================
prompt
CREATE OR REPLACE FORCE VIEW GL_LOSSRATIO_V AS
WITH Endorsement_TABLE AS (
SELECT
    b.ORG_ID,
    b.BRANCH_ID,
    b.SUB_PRODUCT_CODE,
    b.TAKAFUL_TYPE,
    b.DOCUMENT_TYPE,
    b.DOCUMENT_NO,
    b.RECORD_TYPE,
    b.DOCUMENT_YEAR,
    b.ISSUE_COUNT,
    b.APPLICATION_ID,
    max(B.ENDORSEMENT_NO) AS End_No
FROM
    TK_DOC_HEADER_T b
WHERE
    b.ORG_ID = 5
    AND B.DOCUMENT_TYPE = 'P'
    AND b.POLICY_RENEWAL_REFERENCE_NO IS NULL
    AND B.RECORD_TYPE =
    CASE
        WHEN B.ENDORSEMENT_NO = 0 THEN 'O'
        ELSE 'P'
    END
GROUP BY
    b.ORG_ID,
    b.BRANCH_ID,
    b.SUB_PRODUCT_CODE,
    b.TAKAFUL_TYPE,
    b.DOCUMENT_TYPE,
    b.DOCUMENT_NO,
    b.RECORD_TYPE,
    b.DOCUMENT_YEAR,
    b.ISSUE_COUNT,
    b.APPLICATION_ID
                                           
                                             
                                           )

    
,
 CLAIM_INTIMATION AS(
SELECT
    C_INT.ORG_ID,
    C_INT.BRANCH_ID,
    C_INT.SUB_PRODUCT_CODE,
    C_INT.APPLICATION_ID,
    C_INT.POLICY_HOLDER,
    C_INT.ENDORSEMENT_NO,
    C_INT.POLICY_NO,
    SUM(C_ASS.ASSESSMENT_AMOUNT)AS ASSESSMENT_AMOUNT
FROM
    TK_CLAIM_INTIMATION_T C_INT
LEFT OUTER JOIN TK_CLAIM_ASSESSMENT_T C_ASS ON
    (C_INT.ORG_ID = C_ASS.ORG_ID
        AND C_INT.BRANCH_ID = C_ASS.BRANCH_ID
        AND C_INT.SUB_PRODUCT_CODE = C_ASS.SUB_PRODUCT_CODE
        AND
C_INT.APPLICATION_ID = C_ASS.APPLICATION_ID
        AND C_INT.CLAIM_NO = C_ASS.CLAIM_NO
        AND C_ASS.ASSESSMENT_STATUS IN ('A'))
WHERE
    C_INT.ORG_ID = 5
    AND C_INT.BRANCH_ID = 14
    AND C_INT.SUB_PRODUCT_CODE = 1
    AND C_INT.APPLICATION_ID = 11
GROUP BY
    (C_INT.ORG_ID,
    C_INT.BRANCH_ID,
    C_INT.SUB_PRODUCT_CODE,
    C_INT.APPLICATION_ID,
    C_INT.POLICY_HOLDER,
    C_INT.ENDORSEMENT_NO,
    C_INT.POLICY_NO)),

DOC_INSURED AS (
SELECT
    count(*)totalLives,
    A.ORG_ID,
    A.BRANCH_ID,
    A.APPLICATION_ID,
    A.SUB_PRODUCT_CODE,
    A.ENDORSEMENT_NO,
    A.ISSUE_COUNT,
    A.PPS_PARTY_CODE,
    A.master_ref_no
FROM
    TK_DOC_HEADER_T a
LEFT OUTER JOIN GLAS_DOC_INSURED_ITEMS_T i ON
    (a.ORG_ID = i.ORG_ID
        AND a.BRANCH_ID = i.BRANCH_ID
        AND a.product_code = i.product_code
        AND
a.sub_product_code = i.sub_product_code
        AND a.takaful_type = i.takaful_type
        AND a.document_type = i.document_type
        AND a.record_type = i.record_type
        AND a.document_no = i.document_no
        AND a.document_year = i.document_year
        AND a.issue_count = i.issue_count
        AND a.endorsement_no = i.endorsement_no
        AND a.application_id = i.application_id)
GROUP BY
    (A.ORG_ID,
    A.BRANCH_ID,
    A.APPLICATION_ID,
    A.SUB_PRODUCT_CODE,
    A.ENDORSEMENT_NO,
    A.ISSUE_COUNT,
    A.PPS_PARTY_CODE,
    A.master_ref_no))

SELECT
    lod.LOADING_AMOUNT,
    ag.commission_rate,
    hd.POLICY_RENEWAL_REFERENCE_NO,
    hd.record_type,
    HD.producer_code,
    ag.commission_rate AS NEW_COMMISSION_RATE,
    hd.pps_party_code,
    hd.master_ref_no PolicyNo,
    c_intm.assessment_amount,
    TO_CHAR(HD.GDH_EXPIRY_DATE + 1, 'DD-MON-YYYY') AS NEW_EXPIRY_DATE,
    INS.totalLives Live,
    hd.ENDORSEMENT_NO ,
    hd.ISSUE_COUNT ,
    CASE
        hd.PAYMENT_MODE  
WHEN 'M' THEN 'MONTHLY'
        WHEN 'Q' THEN 'QUATERLY'
        WHEN 'H' THEN 'HALF_YEARLY'
        ELSE 'ANUALLY'
    END AS PaymentMode,
    CLT.CLIENT_DESC Participant,
    TO_CHAR(HD.GDH_COMM_DATE, 'DD-MON-YYYY') PolStartDate,
    TO_CHAR(HD.GDH_EXPIRY_DATE, 'DD-MON-YYYY') PolEndDate,
    nvl(HD.GDH_GROSS_PREMIUM, 0) Annualized,
    nvl(CLT.VAT_REG_NO, '-') ntnNo,
    AGT.AGENT_NAME AgentName,
    AGT.AGENT_ID AgentCode,
    HD.NET_CONTRIBUTION,
    c_intm.assessment_amount ClaimsAmount,
    ROUND (c_intm.assessment_amount / nvl(HD.GDH_GROSS_PREMIUM, 0) * 100,
    2) AS GrossLoss,
    --ROUND (c_intm.assessment_amount/nvl(HD.NET_CONTRIBUTION,0) * 100,2) AS NetLoss
    --ROUND((c_intm.assessment_amount / NVL(HD.GDH_GROSS_PREMIUM, 0) - NVL(lod.LOADING_AMOUNT, 0)) * 100, 2) AS NetLoss
    ROUND(c_intm.assessment_amount / (NVL(HD.GDH_GROSS_PREMIUM, 0) - NVL(lod.LOADING_AMOUNT, 0)) * 100, 2) AS NetLoss
    --SELECT *
FROM
    tk_doc_header_t hd
INNER JOIN Endorsement_TABLE ET ON
    (ET.ORG_ID = hd.ORG_ID
        AND ET.BRANCH_ID = hd.BRANCH_ID
        AND ET.SUB_PRODUCT_CODE = hd.SUB_PRODUCT_CODE
        AND ET.TAKAFUL_TYPE = hd.TAKAFUL_TYPE
        AND ET.DOCUMENT_TYPE = hd.DOCUMENT_TYPE
        AND ET.RECORD_TYPE = hd.RECORD_TYPE
        AND ET.DOCUMENT_YEAR = hd.DOCUMENT_YEAR
        AND ET.ISSUE_COUNT = hd.ISSUE_COUNT
        AND ET.APPLICATION_ID = hd.APPLICATION_ID
        AND ET.DOCUMENT_NO = hd.DOCUMENT_NO
        AND hd.ENDORSEMENT_NO = ET.End_No )
JOIN claim_intimation c_intm ON
    ( C_INTM.ORG_ID = HD.org_id
        AND C_INTM.BRANCH_ID = HD.BRANCH_ID
        AND C_INTM.SUB_PRODUCT_CODE = HD.SUB_PRODUCT_CODE
        AND C_INTM.APPLICATION_ID = HD.APPLICATION_ID
        AND C_INTM.POLICY_NO = hd.master_ref_no
        AND C_INTM.ENDORSEMENT_NO = HD.endorsement_no
        AND C_INTM.POLICY_HOLDER = HD.pps_party_code)
LEFT JOIN DOC_INSURED INS ON
    (INS.ORG_ID = HD.ORG_ID
        AND INS.BRANCH_ID = HD.BRANCH_ID
        AND INS.SUB_PRODUCT_CODE = HD.SUB_PRODUCT_CODE
        AND INS.ENDORSEMENT_NO = HD.ENDORSEMENT_NO
        AND INS.APPLICATION_ID = HD.APPLICATION_ID
        AND INS.PPS_PARTY_CODE = HD.PPS_PARTY_CODE
        AND INS.master_ref_no = HD.MASTER_REF_NO)
LEFT OUTER JOIN GLAS_CLIENT_SETUP_T CLT ON
    (HD.ORG_ID = CLT.ORG_ID
        AND HD.PPS_PARTY_CODE = CLT.CLIENT_CODE)
LEFT OUTER JOIN GLAS_DOC_AGENT_T ag ON
    (ag.ORG_ID = hd.ORG_ID
        AND ag.BRANCH_ID = hd.BRANCH_ID
        AND ag.PRODUCT_CODE = HD.PRODUCT_CODE
        AND ag.SUB_PRODUCT_CODE = hd.SUB_PRODUCT_CODE
        AND ag.TAKAFUL_TYPE = hd.TAKAFUL_TYPE
        AND ag.DOCUMENT_TYPE = hd.DOCUMENT_TYPE
        AND ag.RECORD_TYPE = hd.RECORD_TYPE
        AND ag.DOCUMENT_YEAR = hd.DOCUMENT_YEAR
        AND ag.ISSUE_COUNT = hd.ISSUE_COUNT
        AND ag.APPLICATION_ID = hd.APPLICATION_ID
        AND ag.DOCUMENT_NO = hd.DOCUMENT_NO
        AND hd.ENDORSEMENT_NO = ag.ENDORSEMENT_NO
        AND AG.AGENCY_TYPE = 'P' )
LEFT OUTER JOIN am_agent_t AGT ON
    AG.ORG_ID = agt.ORG_ID
    AND ag.agent_code = agt.agent_id
LEFT OUTER JOIN GLAS_DOC_EXPENSE_MARGIN_T lod ON
    (lod.ORG_ID = hd.ORG_ID
        AND lod.BRANCH_ID = hd.BRANCH_ID
        AND lod.PRODUCT_CODE = HD.PRODUCT_CODE
        AND lod.SUB_PRODUCT_CODE = hd.SUB_PRODUCT_CODE
        AND lod.TAKAFUL_TYPE = hd.TAKAFUL_TYPE
        AND lod.DOCUMENT_TYPE = hd.DOCUMENT_TYPE
        AND lod.RECORD_TYPE = hd.RECORD_TYPE
        AND lod.DOCUMENT_YEAR = hd.DOCUMENT_YEAR
        AND lod.ISSUE_COUNT = hd.ISSUE_COUNT
        AND lod.APPLICATION_ID = hd.APPLICATION_ID
        AND lod.DOCUMENT_NO = hd.DOCUMENT_NO
        AND hd.ENDORSEMENT_NO = lod.ENDORSEMENT_NO )
WHERE
    HD.ORG_ID = '5'
    AND HD.GDH_DOC_REFERENCE_NO IS NOT NULL
    AND HD.DOCUMENT_TYPE = 'P'
    AND HD.POSTING_TAG = 'Y'
    AND HD.ENDORSEMENT_NO = 0
    AND AG.AGENCY_TYPE = 'P'
    --AND hd.document_no ='00026'
    --AND hd.issue_count=1
    --SELECT agent_code from  GLAS_DOC_AGENT_T
;

prompt
prompt Creating view IL_DOC_HEADER_V
prompt =============================
prompt
CREATE OR REPLACE FORCE VIEW IL_DOC_HEADER_V AS
SELECT DISTINCT
          a.ORG_ID,
          a.BRANCH_ID,
          CASE
             WHEN a.DOCUMENT_TYPE = 'Q' THEN 'QOUTATION/PROPOSAL'
             WHEN a.DOCUMENT_TYPE = 'P' THEN 'POLICY'
          END
             AS DOC_TYPE,
          a.MAIN_PRODUCT_CODE,
          a.SUB_PRODUCT_CODE,
          a.TAKAFUL_TYPE,
          a.DOCUMENT_TYPE,
          a.DOCUMENT_NO,
          a.REVISED_TAG,
          a.REJECTED_TAG,
          a.RECORD_TYPE,
          a.DOCUMENT_YEAR,
          a.ISSUE_COUNT,
          a.ENDORSEMENT_NO,
          a.BASE_DOC_NO,
          a.POSTING_TAG,
          a.CLIENT_CODE,
          a.CNIC_NO,
          a.APPLICATION_ID,
          NVL (a.PAYER_SAME_TAG, 'Y') PAYER_SAME_TAG,
          a.DOC_REFERENCE_NO,
          b.DESCRIPTION,
          a.REMARKS,
          a.PREMIUM_BASIS,
          a.PRODUCER_CODE,
          a.CURRENCY_CODE,
          a.PAYMENT_MODE,
          a.WAKALA_FEE,
          a.LOADING_OVRD_RATE,
          a.LOADING_RATE,
          a.POLICY_FEE,
          a.OVERRIDING_RATE,
          a.EXCHANGE_RATE,
          a.SUB_DOCUMENT_NO,
          a.CREATED_BY,
          a.STANDARD_TREATY,
          TO_CHAR (NEXT_DUE_DATE, 'dd/MM/yyyy') NEXT_DUE_DATE,
          TO_CHAR (QUOTATION_DATE, 'dd/MM/yyyy') QUOTATION_DATE,
          TO_CHAR (a.CREATION_DATE, 'dd/MM/yyyy') CREATION_DATE,
          TO_CHAR (a.DOB1, 'dd/MM/yyyy') DOB1,
          TO_CHAR (a.DOB2, 'dd/MM/yyyy') DOB2,
          TO_CHAR (a.ISSUE_DATE, 'dd/MM/yyyy') ISSUE_DATE,
          TO_CHAR (a.ISSUE_DATE, 'dd-mon-yyyy') ISSUE_DATE_DISPLAY,
          TO_CHAR (a.COMM_DATE, 'dd/MM/yyyy') COMM_DATE,
          TO_CHAR (a.COMM_DATE, 'dd-mon-yyyy') COMM_DATE_DISPLAY,
          TO_CHAR (a.PROPOSAL_DATE, 'dd/MM/yyyy') PROPOSAL_DATE,
          TO_CHAR (a.DOC_DISPATCH_DATE, 'dd/MM/yyyy') DOC_DISPATCH_DATE,
          TO_CHAR (a.DOC_RECEIVE_DATE, 'dd/MM/yyyy') DOC_RECEIVE_DATE,
          TO_CHAR (a.CANCEL_DATE, 'dd/MM/yyyy') CANCEL_DATE,
          TO_CHAR (a.ALTERATION_ISSUE_DATE, 'dd/MM/yyyy')
             ALTERATION_ISSUE_DATE,
          TO_CHAR (a.ALTERATION_DATE, 'dd/MM/yyyy') ALTERATION_DATE,
             TO_CHAR (a.CREATION_DATE, 'dd')
          || TO_CHAR (a.CREATION_DATE, 'mm')
          || TO_CHAR (a.CREATION_DATE, 'yyyy')
             SORT_ID,
          a.SECOND_LIFE,
          a.NAME1,
          a.NAME2,
          a.AGE1,
          a.AGE2,
          a.GENDER1,
          a.GENDER2,
          a.POLICY_TERM,
          a.SUM_COVERED,
          a.SUM_COVERED_INDEX,
          a.CONTRIBUTION_INDEX,
          a.BASIC_CONTRIBUTION,
          a.GROSS_CONTRIBUTION,
          a.NET_CONTRIBUTION,
          NVL (a.MASTER_REF_NO, a.DOC_REFERENCE_NO) MASTER_REF_NO,
          a.COVER_MULTIPLE,
          a.CONT_MARGIN,
          a.LAST_AGE_INDEX,
          a.EXPECTED_CLAIM,
          a.INVESTMENT_INCOME,
          A.BID_OFFER,
          a.BASIC_CONTRIBUTION_MODAL,
          a.SUM_COVERED_MODAL,
          a.UNDWT_STATUS,
          c.STATUS_DESC,
          d.DECISION_DESC,
          a.CONVERT_TAG,
          a.CONVERTED_POLICY_NO,
          a.SUBMIT_TAG,
          a.UNDWT_DECISION,
          a.RISK_PROFILE,
          a.CONTRIBUTION_TYPE,
          a.RISK_PROFILE_COMMENTS,
          a.CUSTOMER_PROFILE_COMMENTS,
          a.ADVANCE_AMOUNT,
          a.PAYMENT_TERM,
          f.CLIENT_DESC,
          f.CLIENT_TYPE,
          a.ILLUSTRATION_REF_NO,
          a.CHANNEL_ID,
          a.MODEL_ID,
          a.AGENT_ID,
          a.PARTNER_ID,
          a.TOPUP_AMOUNT,
          a.TOTAL_CONTRIBUTION_MODAL,
          a.ALTERATION_TYPE,
          t.DESCRIPTION alteration,
          a.CANCELLATION_TYPE,
          a.CHARGEABLE_FROM,
          a.CHARGEABLE_AMOUNT,
          a.CANCEL_TAG,
          a.CANCEL_BY,
          a.POLICY_POSTED,
          a.NON_FINANCIAL_ACTIVITY,
          a.NON_FINANCIAL_SUB_ACTIVITY,
          agent.AGENT_NAME,
          a.UNDWT_DECISION_REASON,
          a.UNDWT_NOTES,
          a.UNDERWRITING_IL_CREATE,
          a.PROPOSAL_APPROVED_BY,
          a.UNDWT_OTHER_EXCULUSIONS
     FROM                IL_DOC_HEADER_T a
                      LEFT OUTER JOIN
                         IL_DOC_STATUS_SETUP_T c
                      ON (    a.ORG_ID = c.ORG_ID
                          AND a.UNDWT_STATUS = c.STATUS_CODE)
                   LEFT OUTER JOIN
                      IL_DECISION_SETUP_T d
                   ON (    a.ORG_ID = c.ORG_ID
                       AND a.UNDWT_DECISION = d.DECISION_CODE)
                LEFT OUTER JOIN
                   GLAS_CLIENT_SETUP_T f
                ON (a.ORG_ID = f.ORG_ID AND a.CLIENT_CODE = f.CLIENT_CODE)
             LEFT OUTER JOIN
                GLAS_ALTERATION_TYPE_SETUP_T T
             ON (    T.ORG_ID = a.ORG_ID
                 AND t.ALTERATION_TYPE = a.ALTERATION_TYPE)
          LEFT OUTER JOIN
             AM_AGENT_T agent
          ON (agent.ORG_ID = a.ORG_ID AND agent.AGENT_ID = a.AGENT_ID),
          GLAS_SUB_PRODUCT_SETUP_T b
    WHERE     a.ORG_ID = b.ORG_ID
          AND a.APPLICATION_ID = b.APPLICATION_ID
          AND a.SUB_PRODUCT_CODE = b.SUB_PRODUCT_CODE;

prompt
prompt Creating view TERMINATED_CHANNEL_MODEL_V
prompt ========================================
prompt
CREATE OR REPLACE FORCE VIEW TERMINATED_CHANNEL_MODEL_V AS
SELECT AMT.ORG_ID,
           AMT.AGENT_ID,
           AMT.PARTNER_ID,
           AMT.CHANNEL_ID,
           AMT.MODEL_ID,
           AMT.CREATED_BY,
           AMT.CREATION_DATE,
           AMT.TERMINATED_ID,
           AGT.AGENT_NAME,
           APT.PARTNER_NAME,
           ACT.CHANNEL_NAME,
           ACMT.MODEL_NAME
      FROM AM_TERMINATION_CHANNEL_MODEL_T AMT
        LEFT JOIN AM_AGENT_T AGT
          ON AGT.AGENT_ID = AMT.AGENT_ID
          AND AGT.ORG_ID = AMT.ORG_ID
        LEFT JOIN AM_PARTNER_T APT
          ON AMT.PARTNER_ID = APT.PARTNER_ID
          AND AMT.ORG_ID = APT.ORG_ID
        LEFT JOIN AM_DISTRIBUTION_CHANNEL_T ACT
          ON AMT.CHANNEL_ID = ACT.CHANNEL_ID
          AND AMT.ORG_ID = ACT.ORG_ID
        LEFT JOIN AM_CHANNEL_MODEL_T ACMT
          ON AMT.MODEL_ID = ACMT.MODEL_ID
          AND AMT.ORG_ID = ACMT.ORG_ID
          AND AMT.CHANNEL_ID = ACMT.CHANNEL_ID;

prompt
prompt Creating view UW_REQ_DTL_WITH_COMMA
prompt ===================================
prompt
CREATE OR REPLACE FORCE VIEW UW_REQ_DTL_WITH_COMMA AS
SELECT ORG_ID,REQ_CODE,LISTAGG(DESCRIPTION, ', ') WITHIN GROUP (ORDER BY DESCRIPTION ASC) AS Description FROM GLAS_UNDWT_REQ_DTL_SETUP_T
    GROUP BY ORG_ID,REQ_CODE
    ORDER BY REQ_CODE;

prompt
prompt Creating view glas_undwt_req_with_comma
prompt =======================================
prompt
CREATE OR REPLACE FORCE VIEW glas_undwt_req_with_comma AS
SELECT ORG_ID,REQ_CODE,LISTAGG(SHORT_DESC, ', ') WITHIN GROUP (ORDER BY SHORT_DESC ASC) AS SHORT_DESC FROM glas_undwt_req_setup_t
    GROUP BY ORG_ID,REQ_CODE
    ORDER BY REQ_CODE;

prompt
prompt Creating function ADD_MONTHS_F
prompt ==============================
prompt
CREATE OR REPLACE FUNCTION ADD_MONTHS_F (ORIGNAL_DATE    DATE,
                                                      MONTHS          NUMBER)
   RETURN DATE
IS
   DAY_PART            NUMBER;
   MONTH_PART          NUMBER;
   YEAR_PART           NUMBER;
   LAST_DAY_OF_MONTH   NUMBER;
   NEW_DATE            DATE;
   ADD_YEARS           NUMBER;
   ADD_MONTH           NUMBER;
BEGIN
   DAY_PART := TO_NUMBER (TO_CHAR (ORIGNAL_DATE, 'DD'));
   MONTH_PART := TO_NUMBER (TO_CHAR (ORIGNAL_DATE, 'MM'));
   YEAR_PART := TO_NUMBER (TO_CHAR (ORIGNAL_DATE, 'YYYY'));

   ADD_YEARS := FLOOR (ABS (MONTHS) / 12);

   IF MONTHS >= 0
   THEN
      ADD_MONTH := MONTHS - (ADD_YEARS * 12);

      YEAR_PART := YEAR_PART + ADD_YEARS;
   ELSE
      ADD_MONTH := MONTHS + (ADD_YEARS * 12);

      YEAR_PART := YEAR_PART - ADD_YEARS;
   END IF;

   MONTH_PART := MONTH_PART + ADD_MONTH;

   IF MONTH_PART > 12
   THEN
      MONTH_PART := MONTH_PART - 12;
      YEAR_PART := YEAR_PART + 1;
   ELSIF MONTH_PART <= 0
   THEN
      MONTH_PART := MONTH_PART + 12;
      YEAR_PART := YEAR_PART - 1;
   END IF;

   LAST_DAY_OF_MONTH :=
      TO_NUMBER (
         TO_CHAR (LAST_DAY (ADD_MONTHS (ORIGNAL_DATE, MONTHS)), 'DD'));

   IF LAST_DAY_OF_MONTH < DAY_PART
   THEN
      DAY_PART := LAST_DAY_OF_MONTH;
   END IF;

   NEW_DATE :=
      TO_DATE (
            LPAD (DAY_PART, 2, '0')
         || '/'
         || LPAD (MONTH_PART, 2, '0')
         || '/'
         || LPAD (YEAR_PART, 4, '0'),
         'DD/MM/YYYY');

   RETURN NEW_DATE;
END;
/

prompt
prompt Creating function EVAL
prompt ======================
prompt
CREATE OR REPLACE FUNCTION eval (p_rowid      IN ROWID,
                                          p_tname      IN VARCHAR2,
                                          p_function   IN VARCHAR2)
   RETURN NUMBER
AS
   l_return      NUMBER;
   ZERO_DIVIDE   EXCEPTION;
   PRAGMA EXCEPTION_INIT (ZERO_DIVIDE, -1476);
BEGIN
   EXECUTE IMMEDIATE
      'select ' || p_function || ' from ' || p_tname || ' where rowid = :x'
      INTO l_return
      USING p_rowid;

   RETURN l_return;
EXCEPTION
   WHEN ZERO_DIVIDE
   THEN
      RETURN NULL;
END;
/

prompt
prompt Creating function GET_EFFECTIVE_AGE_P
prompt =====================================
prompt
CREATE OR REPLACE FUNCTION GET_EFFECTIVE_AGE_P (
   P_ORG_ID               NUMBER,
   P_AGE1            NUMBER,
   P_AGE2    NUMBER,
   P_SEEK_AGE    NUMBER,
P_BENEFIT_TYPE    VARCHAR
      
   
   ) RETURN NUMBER
   
IS  

LN_EFFECTIVE_AGE        NUMBER;
ln_new_age1             NUMBER;
ln_effective_age_factor NUMBER;

BEGIN 

LN_EFFECTIVE_AGE := P_AGE1;

    IF P_SEEK_AGE =2 THEN 
        LN_EFFECTIVE_AGE := P_AGE2 -2;
    END IF; 

    IF  P_BENEFIT_TYPE='B' THEN 
         IF  P_AGE2 > 0 THEN 
                    
              ln_new_age1 := P_AGE2 - 2;
              
           IF ln_new_age1 > 0  
           THEN
               BEGIN 
              SELECT VALUE
                INTO ln_effective_age_factor
                FROM TK_EFFECTIVE_AGE_CHART_T
               WHERE ORG_ID = P_ORG_ID AND AGE_DIFFERENCE = ABS (P_AGE1 - ln_new_age1);
              EXCEPTION WHEN OTHERS THEN 
              ln_effective_age_factor := 0;
              
              END;

            

           ELSE
              ln_effective_age_factor := 0;
           END IF;

           -- calculate effective age in case of joint life
           IF P_AGE1 >= ln_new_age1 
           THEN
              ln_effective_age := P_AGE1 - ln_effective_age_factor;
           ELSE
              ln_effective_age := ln_new_age1 - ln_effective_age_factor;
           END IF;
           
    END IF;         

 END IF;


RETURN LN_EFFECTIVE_AGE ;

END;
/

prompt
prompt Creating function GET_NUM_GEN_F
prompt ===============================
prompt
CREATE OR REPLACE FUNCTION get_num_gen_f (p_org_id        NUMBER,
                                                   p_num_gen_id    VARCHAR2)
   RETURN VARCHAR2
IS
   v_numgen_tablename   VARCHAR2 (32);
   v_query_str          VARCHAR2 (2000);
   v_iterator           NUMBER := 0;

   CURSOR num_gen_data
   IS
        SELECT ROWID,
               NUMGEN_ID,
               NUMGEN_DTL_ID,
               ORG_ID,
               NUMGEN_DESC,
               COLUMN_ID,
               CREATED_BY,
               CREATION_DATE,
               LAST_UPDATED_BY,
               LAST_UPDATE_DATE,
               COLUMN_TYPE,
               COLUMN_EXPRESSION
          FROM NUM_GEN_SETUP_DTL_T
         WHERE org_id = p_org_id AND numgen_id = p_num_gen_id
      ORDER BY NUMGEN_DTL_ID;
BEGIN
   SELECT TABLENAME
     INTO v_numgen_tablename
     FROM NUM_GEN_SETUP_HD_T
    WHERE org_id = p_org_id AND numgen_id = p_num_gen_id;

   v_query_str := 'select count(*) from ' || v_numgen_tablename || ' where ';

   FOR crow IN num_gen_data
   LOOP
      IF v_iterator > 0
      THEN
         v_query_str := v_query_str || ' and ';
      END IF;

      v_query_str :=
            v_query_str
         || CASE
               WHEN CROW.COLUMN_TYPE = 'D' THEN crow.COLUMN_ID
               ELSE CROW.COLUMN_EXPRESSION
            END
         || ' = '':'
         || v_iterator
         || '''';

      v_iterator := v_iterator + 1;
   END LOOP;



   RETURN v_query_str;
EXCEPTION
   WHEN OTHERS
   THEN
      RETURN 'error' || SQLERRM;
END;
/

prompt
prompt Creating function GET_POLICY_CASHVALUE_F
prompt ========================================
prompt
CREATE OR REPLACE FUNCTION get_policy_cashvalue_f (
   P_ORG_ID             VARCHAR2,
   P_POLICY_NO          VARCHAR2,
   P_ALLOCATION_TYPE    NUMBER,
   P_PROCESS_DATE       DATE DEFAULT SYSDATE - 1)
   RETURN NUMBER
IS
   LN_CURRENT_BID_PRICE    NUMBER;
   LV_PRICE_TYPE           VARCHAR2 (1);
   LN_OFFER_SPREAD_RATE    NUMBER := -1;
   LN_CURRENT_CASH_VALUE   NUMBER := 0;
   LD_PROCESS_DATE         DATE;

   CURSOR ACTIVE_POLICY_DATA
   IS
        SELECT dh.MAIN_PRODUCT_CODE,
               dh.SUB_PRODUCT_CODE,
               FUND_CODE,
               a.TRANSACTION_TYPE,
               NVL (SUM (NVL (NO_OF_UNITS, 0)), 0) LASTDAY_CLOSING_UNITS,
               NVL (
                  SUM (
                     CASE
                        WHEN A.UNIT_PROCESS_DATE IS NOT NULL THEN 0
                        ELSE TOTAL_NET_AMOUNT
                     END),
                  0)
                  UNALLOCATED_AMOUNT
          FROM IL_DOC_HEADER_T DH
               INNER JOIN IL_DOC_ALLOC_DTL_BREAKUP_T A
                  ON (    dh.ORG_ID = A.ORG_ID
                      AND dh.BRANCH_ID = A.BRANCH_ID
                      AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                      AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                      AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                      AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                      AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                      AND dh.RECORD_TYPE = A.RECORD_TYPE
                      AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                      AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                      AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                      AND dh.APPLICATION_ID = A.APPLICATION_ID)
               INNER JOIN IL_ALLOC_TRANS_TYPE_T t
                  ON t.ORG_ID = A.ORG_ID AND t.TYPE_CODE = A.TRANSACTION_TYPE
         WHERE     DH.ORG_ID = P_ORG_ID
               AND a.record_type = 'O'
               AND DH.DOC_REFERENCE_KEY IS NOT NULL
               AND DH.REVISED_TAG IS NULL
               AND A.ISSUE_COUNT = 1
               AND A.ENDORSEMENT_NO = 0
               AND A.ALLOCATION_TYPE = P_ALLOCATION_TYPE
               AND MASTER_REF_NO = P_POLICY_NO
               AND TRUNC (a.TRANSACTION_DATE) <= TRUNC (P_PROCESS_DATE)
      GROUP BY dh.MAIN_PRODUCT_CODE,
               dh.SUB_PRODUCT_CODE,
               FUND_CODE,
               TRANSACTION_TYPE
      ORDER BY FUND_CODE, TRANSACTION_TYPE;
BEGIN
   LD_PROCESS_DATE := TRUNC (P_PROCESS_DATE);

   FOR CROW IN ACTIVE_POLICY_DATA
   LOOP
      IF LN_OFFER_SPREAD_RATE = -1
      THEN
         SELECT NVL (OFFER_SPREAD_RATE, 0)
           INTO LN_OFFER_SPREAD_RATE
           FROM GLAS_SUB_PRODUCT_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = CROW.MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = CROW.SUB_PRODUCT_CODE;
      END IF;

      -- check curent bid price
      BEGIN
         SELECT f.price_type
           INTO LV_PRICE_TYPE
           FROM FUND_SETUP_T F
          WHERE F.ORG_ID = P_ORG_ID AND F.FUND_CODE = CROW.FUND_CODE;

         SELECT BID_PRICE
           INTO LN_CURRENT_BID_PRICE
           FROM IL_FUND_PRICE_HISTORY_T
          WHERE     ORG_ID = P_ORG_ID
                AND FUND_CODE = CROW.FUND_CODE
                AND TRUNC (TRANSACTION_DATE) = LD_PROCESS_DATE;


         LN_CURRENT_BID_PRICE :=
            CASE
               WHEN LV_PRICE_TYPE = 'O'
               THEN
                  NVL (LN_CURRENT_BID_PRICE, 0) * (1 - LN_OFFER_SPREAD_RATE)
               ELSE
                  NVL (LN_CURRENT_BID_PRICE, 0)
            END;

         LN_CURRENT_CASH_VALUE :=
              LN_CURRENT_CASH_VALUE
            + (CROW.LASTDAY_CLOSING_UNITS * LN_CURRENT_BID_PRICE)
            + crow.UNALLOCATED_AMOUNT * (1 - LN_OFFER_SPREAD_RATE);
      --            LN_CURRENT_CASH_VALUE:= LN_CURRENT_CASH_VALUE + (CROW.LASTDAY_CLOSING_UNITS  * LN_CURRENT_BID_PRICE);-- + crow.UNALLOCATED_AMOUNT;

      EXCEPTION
         WHEN OTHERS
         THEN
            LN_CURRENT_CASH_VALUE := LN_CURRENT_CASH_VALUE;
      END;
   END LOOP;


   RETURN ROUND (LN_CURRENT_CASH_VALUE, 4);
EXCEPTION
   WHEN OTHERS
   THEN
      --             RETURN  'error:'||sqlerrm;

      RETURN 0;
END;
/

prompt
prompt Creating procedure FINANCE_YEAR_END_PROCESS_P
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE FINANCE_YEAR_END_PROCESS_P (
   P_ORG_ID         VARCHAR2,
   P_FISCAL_YEAR    VARCHAR2)
AS
   LV_YEAR_END_FLAG          VARCHAR2 (1);
   LV_RETAINED_EARNING_COA   VARCHAR2 (20);
   LV_NEXT_FISCAL_YEAR       VARCHAR2 (10);
BEGIN
   SELECT NVL (YEAR_END_FLAG, 'N')
     INTO LV_YEAR_END_FLAG
     FROM GL_FISCAL_YEAR_SETUP_T
    WHERE ORG_ID = P_ORG_ID AND FISCAL_YEAR = P_FISCAL_YEAR;

   IF LV_YEAR_END_FLAG = 'N'
   THEN
      BEGIN
         SELECT CONFIG_VALUE
           INTO LV_RETAINED_EARNING_COA
           FROM SM_APPLICATION_CONFIG_T
          WHERE CONFIG_NAME = 'RETAINED_EARNING_CODE';
      EXCEPTION
         WHEN OTHERS
         THEN
            LV_RETAINED_EARNING_COA := '30101001';
      END;

      SELECT TO_CHAR (MIN (fiscal_year))
        INTO LV_NEXT_FISCAL_YEAR
        FROM GL_FISCAL_YEAR_SETUP_T
       WHERE ORG_ID = P_ORG_ID AND FISCAL_YEAR > P_FISCAL_YEAR;

      DELETE FROM GL_BALANCES_SUBLEDGER_T
            WHERE     ORG_ID = P_ORG_ID
                  AND FISCAL_YEAR = LV_NEXT_FISCAL_YEAR
                  AND PERIOD_NO = 0;

      DELETE FROM GL_BALANCES_DIMENSIONS_T
            WHERE     ORG_ID = P_ORG_ID
                  AND FISCAL_YEAR = LV_NEXT_FISCAL_YEAR
                  AND PERIOD_NO = 0;

      DELETE FROM GL_BALANCES_HEADER_T
            WHERE     ORG_ID = P_ORG_ID
                  AND FISCAL_YEAR = LV_NEXT_FISCAL_YEAR
                  AND PERIOD_NO = 0;

      INSERT INTO GL_BALANCES_DIMENSIONS_T (ORG_ID,
                                            BRANCH_ID,
                                            FISCAL_YEAR,
                                            PERIOD_NO,
                                            COST_CENTER_CODE,
                                            COA_CODE,
                                            POLICY_NO,
                                            CLAIM_NO,
                                            BU,
                                            LOB,
                                            LOCATION,
                                            EMPLOYEE,
                                            CHANNEL,
                                            AGENT,
                                            CURRENCY_CODE,
                                            DEBIT_BASE_CURR,
                                            CREDIT_BASE_CURR,
                                            DEBIT_FOREIGN_CURR,
                                            CREDIT_FOREIGN_CURR,
                                            CREATED_BY,
                                            CREATION_DATE,
                                            EXCHANGE_RATE)
           SELECT ORG_ID,
                  BRANCH_ID,
                  LV_NEXT_FISCAL_YEAR FISCAL_YEAR,
                  0 PERIOD_NO,
                  COST_CENTER_CODE,
                  COA_CODE,
                  POLICY_NO,
                  CLAIM_NO,
                  BU,
                  LOB,
                  LOCATION,
                  EMPLOYEE,
                  CHANNEL,
                  AGENT,
                  CURRENCY_CODE,
                  SUM (DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                  SUM (CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                  SUM (DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                  SUM (CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                  'ADMIN' CREATED_BY,
                  SYSDATE CREATION_DATE,
                  EXCHANGE_RATE
             FROM (  SELECT wht.ORG_ID,
                            wht.BRANCH_ID,
                            VD.COST_CENTER_CODE,
                            VD.COA_CODE,
                            POLICY_NO,
                            CLAIM_NO,
                            BU,
                            LOB,
                            LOCATION,
                            EMPLOYEE,
                            CHANNEL,
                            AGENT,
                            CURRENCY_CODE,
                            SUM (VD.DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                            SUM (VD.CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                            SUM (VD.DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                            SUM (VD.CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                            1 EXCHANGE_RATE
                       FROM GL_VOUCHER_HEADER_T wht
                            INNER JOIN GL_VOUCHER_DETAIL_T VD
                               ON     VD.ORG_ID = wht.org_id
                                  AND Vd.BRANCH_ID = WHT.BRANCH_ID
                                  AND VD.VOUCHER_TYPE = WHT.VOUCHER_TYPE
                                  AND VD.FISCAL_YEAR = wht.FISCAL_YEAR
                                  AND VD.VOUCHER_NO = wht.VOUCHER_NO
                            INNER JOIN CHART_OF_ACCOUNT_GL_T COA
                               ON (    VD.ORG_ID = COA.org_id
                                   AND VD.COA_CODE = COA.COA_CODE)
                      WHERE     wht.ORG_ID = P_ORG_ID
                            AND wht.FISCAL_YEAR = P_FISCAL_YEAR
                            AND NVL (COA_NATURE, 'N') = 'BS'
                            AND NVL (WHT.VOUCHER_STATUS, 'N') = 'A'
                            AND COA.COA_CODE <> LV_RETAINED_EARNING_COA
                   GROUP BY wht.ORG_ID,
                            wht.BRANCH_ID,
                            VD.COST_CENTER_CODE,
                            VD.COA_CODE,
                            POLICY_NO,
                            CLAIM_NO,
                            BU,
                            LOB,
                            LOCATION,
                            EMPLOYEE,
                            CHANNEL,
                            AGENT,
                            CURRENCY_CODE
                   UNION ALL
                   SELECT ORG_ID,
                          BRANCH_ID,
                          COST_CENTER_CODE,
                          COA_CODE,
                          POLICY_NO,
                          CLAIM_NO,
                          BU,
                          LOB,
                          LOCATION,
                          EMPLOYEE,
                          CHANNEL,
                          AGENT,
                          CURRENCY_CODE,
                          DEBIT_BASE_CURR,
                          CREDIT_BASE_CURR,
                          DEBIT_FOREIGN_CURR,
                          CREDIT_FOREIGN_CURR,
                          EXCHANGE_RATE
                     FROM GL_BALANCES_DIMENSIONS_T
                    WHERE     ORG_ID = P_ORG_ID
                          AND FISCAL_YEAR = P_FISCAL_YEAR
                          AND period_no = 0
                          AND COA_CODE <> LV_RETAINED_EARNING_COA) tab
         GROUP BY ORG_ID,
                  BRANCH_ID,
                  COST_CENTER_CODE,
                  COA_CODE,
                  POLICY_NO,
                  CLAIM_NO,
                  BU,
                  LOB,
                  LOCATION,
                  EMPLOYEE,
                  CHANNEL,
                  AGENT,
                  CURRENCY_CODE,
                  EXCHANGE_RATE;


      INSERT INTO GL_BALANCES_SUBLEDGER_T (ORG_ID,
                                           BRANCH_ID,
                                           FISCAL_YEAR,
                                           PERIOD_NO,
                                           COST_CENTER_CODE,
                                           COA_CODE,
                                           CURRENCY_CODE,
                                           SL_TYPE,
                                           SL_CODE,
                                           DEBIT_BASE_CURR,
                                           CREDIT_BASE_CURR,
                                           DEBIT_FOREIGN_CURR,
                                           CREDIT_FOREIGN_CURR,
                                           CREATED_BY,
                                           CREATION_DATE,
                                           EXCHANGE_RATE)
           SELECT ORG_ID,
                  BRANCH_ID,
                  LV_NEXT_FISCAL_YEAR FISCAL_YEAR,
                  0 PERIOD_NO,
                  COST_CENTER_CODE,
                  COA_CODE,
                  CURRENCY_CODE,
                  SL_TYPE,
                  SL_CODE,
                  SUM (DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                  SUM (CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                  SUM (DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                  SUM (CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                  'ADMIN',
                  SYSDATE,
                  EXCHANGE_RATE
             FROM (  SELECT wht.ORG_ID,
                            wht.BRANCH_ID,
                            SLDT.COST_CENTER_CODE,
                            SLDT.COA_CODE,
                            NVL (SLDT.CURRENCY_CODE, 'PKR') CURRENCY_CODE,
                            SLDT.SL_TYPE,
                            SLDT.SL_CODE,
                            SUM (SLDT.DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                            SUM (SLDT.CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                            SUM (SLDT.DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                            SUM (SLDT.CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                            1 EXCHANGE_RATE
                       FROM GL_VOUCHER_HEADER_T wht
                            INNER JOIN GL_SUB_LEDGER_DETAIL_T SLDT
                               ON     SLDT.ORG_ID = wht.org_id
                                  AND SLDT.BRANCH_ID = WHT.BRANCH_ID
                                  AND SLDT.VOUCHER_TYPE = WHT.VOUCHER_TYPE
                                  AND SLDT.FISCAL_YEAR = wht.FISCAL_YEAR
                                  AND SLDT.VOUCHER_NO = wht.VOUCHER_NO
                            INNER JOIN CHART_OF_ACCOUNT_GL_T COA
                               ON (    SLDT.ORG_ID = COA.org_id
                                   AND SLDT.COA_CODE = COA.COA_CODE)
                      WHERE     wht.ORG_ID = P_ORG_ID
                            AND wht.FISCAL_YEAR = P_FISCAL_YEAR
                            AND NVL (COA_NATURE, 'N') = 'BS'
                            AND NVL (WHT.VOUCHER_STATUS, 'N') = 'A'
                            AND COA.COA_CODE <> LV_RETAINED_EARNING_COA
                   GROUP BY wht.ORG_ID,
                            wht.BRANCH_ID,
                            SLDT.COST_CENTER_CODE,
                            SLDT.COA_CODE,
                            NVL (SLDT.CURRENCY_CODE, 'PKR'),
                            SLDT.SL_TYPE,
                            SLDT.SL_CODE
                   UNION ALL
                   SELECT ORG_ID,
                          BRANCH_ID,
                          COST_CENTER_CODE,
                          COA_CODE,
                          CURRENCY_CODE,
                          SL_TYPE,
                          SL_CODE,
                          DEBIT_BASE_CURR,
                          CREDIT_BASE_CURR,
                          DEBIT_FOREIGN_CURR,
                          CREDIT_FOREIGN_CURR,
                          EXCHANGE_RATE
                     FROM GL_BALANCES_SUBLEDGER_T
                    WHERE     ORG_ID = P_ORG_ID
                          AND FISCAL_YEAR = P_FISCAL_YEAR
                          AND period_no = 0
                          AND COA_CODE <> LV_RETAINED_EARNING_COA) tab
         GROUP BY ORG_ID,
                  BRANCH_ID,
                  COST_CENTER_CODE,
                  COA_CODE,
                  CURRENCY_CODE,
                  SL_TYPE,
                  SL_CODE,
                  EXCHANGE_RATE;

      ------- FOR RETAINED EARNING

      INSERT INTO GL_BALANCES_DIMENSIONS_T (ORG_ID,
                                            BRANCH_ID,
                                            FISCAL_YEAR,
                                            PERIOD_NO,
                                            COST_CENTER_CODE,
                                            COA_CODE,
                                            POLICY_NO,
                                            CLAIM_NO,
                                            BU,
                                            LOB,
                                            LOCATION,
                                            EMPLOYEE,
                                            CHANNEL,
                                            AGENT,
                                            CURRENCY_CODE,
                                            DEBIT_BASE_CURR,
                                            CREDIT_BASE_CURR,
                                            DEBIT_FOREIGN_CURR,
                                            CREDIT_FOREIGN_CURR,
                                            CREATED_BY,
                                            CREATION_DATE,
                                            EXCHANGE_RATE)
           SELECT ORG_ID,
                  BRANCH_ID,
                  LV_NEXT_FISCAL_YEAR FISCAL_YEAR,
                  0 PERIOD_NO,
                  COST_CENTER_CODE,
                  LV_RETAINED_EARNING_COA COA_CODE,
                  POLICY_NO,
                  CLAIM_NO,
                  BU,
                  LOB,
                  LOCATION,
                  EMPLOYEE,
                  CHANNEL,
                  AGENT,
                  CURRENCY_CODE,
                  SUM (DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                  SUM (CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                  SUM (DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                  SUM (CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                  'ADMIN' CREATED_BY,
                  SYSDATE CREATION_DATE,
                  EXCHANGE_RATE
             FROM (  SELECT wht.ORG_ID,
                            wht.BRANCH_ID,
                            VD.COST_CENTER_CODE,
                            POLICY_NO,
                            CLAIM_NO,
                            BU,
                            LOB,
                            LOCATION,
                            EMPLOYEE,
                            CHANNEL,
                            AGENT,
                            CURRENCY_CODE,
                            SUM (VD.DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                            SUM (VD.CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                            SUM (VD.DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                            SUM (VD.CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                            1 EXCHANGE_RATE
                       FROM GL_VOUCHER_HEADER_T wht
                            INNER JOIN GL_VOUCHER_DETAIL_T VD
                               ON     VD.ORG_ID = wht.org_id
                                  AND Vd.BRANCH_ID = WHT.BRANCH_ID
                                  AND VD.VOUCHER_TYPE = WHT.VOUCHER_TYPE
                                  AND VD.FISCAL_YEAR = wht.FISCAL_YEAR
                                  AND VD.VOUCHER_NO = wht.VOUCHER_NO
                            INNER JOIN CHART_OF_ACCOUNT_GL_T COA
                               ON (    VD.ORG_ID = COA.org_id
                                   AND VD.COA_CODE = COA.COA_CODE)
                      WHERE     wht.ORG_ID = P_ORG_ID
                            AND wht.FISCAL_YEAR = P_FISCAL_YEAR
                            AND (   NVL (COA_NATURE, 'N') <> 'BS'
                                 OR coa.COA_CODE = LV_RETAINED_EARNING_COA)
                            AND NVL (WHT.VOUCHER_STATUS, 'N') = 'A'
                   GROUP BY wht.ORG_ID,
                            wht.BRANCH_ID,
                            VD.COST_CENTER_CODE,
                            POLICY_NO,
                            CLAIM_NO,
                            BU,
                            LOB,
                            LOCATION,
                            EMPLOYEE,
                            CHANNEL,
                            AGENT,
                            CURRENCY_CODE
                   UNION ALL
                   SELECT ORG_ID,
                          BRANCH_ID,
                          COST_CENTER_CODE,
                          POLICY_NO,
                          CLAIM_NO,
                          BU,
                          LOB,
                          LOCATION,
                          EMPLOYEE,
                          CHANNEL,
                          AGENT,
                          CURRENCY_CODE,
                          DEBIT_BASE_CURR,
                          CREDIT_BASE_CURR,
                          DEBIT_FOREIGN_CURR,
                          CREDIT_FOREIGN_CURR,
                          EXCHANGE_RATE
                     FROM GL_BALANCES_DIMENSIONS_T
                    WHERE     ORG_ID = P_ORG_ID
                          AND FISCAL_YEAR = P_FISCAL_YEAR
                          AND period_no = 0
                          AND COA_CODE = LV_RETAINED_EARNING_COA) tab
         GROUP BY ORG_ID,
                  BRANCH_ID,
                  COST_CENTER_CODE,
                  POLICY_NO,
                  CLAIM_NO,
                  BU,
                  LOB,
                  LOCATION,
                  EMPLOYEE,
                  CHANNEL,
                  AGENT,
                  CURRENCY_CODE,
                  EXCHANGE_RATE;


      INSERT INTO GL_BALANCES_SUBLEDGER_T (ORG_ID,
                                           BRANCH_ID,
                                           FISCAL_YEAR,
                                           PERIOD_NO,
                                           COST_CENTER_CODE,
                                           COA_CODE,
                                           CURRENCY_CODE,
                                           SL_TYPE,
                                           SL_CODE,
                                           DEBIT_BASE_CURR,
                                           CREDIT_BASE_CURR,
                                           DEBIT_FOREIGN_CURR,
                                           CREDIT_FOREIGN_CURR,
                                           CREATED_BY,
                                           CREATION_DATE,
                                           EXCHANGE_RATE)
           SELECT ORG_ID,
                  BRANCH_ID,
                  LV_NEXT_FISCAL_YEAR FISCAL_YEAR,
                  0 PERIOD_NO,
                  COST_CENTER_CODE,
                  LV_RETAINED_EARNING_COA COA_CODE,
                  CURRENCY_CODE,
                  SL_TYPE,
                  SL_CODE,
                  SUM (DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                  SUM (CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                  SUM (DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                  SUM (CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                  'ADMIN',
                  SYSDATE,
                  EXCHANGE_RATE
             FROM (  SELECT wht.ORG_ID,
                            wht.BRANCH_ID,
                            SLDT.COST_CENTER_CODE,
                            NVL (SLDT.CURRENCY_CODE, 'PKR') CURRENCY_CODE,
                            SLDT.SL_TYPE,
                            SLDT.SL_CODE,
                            SUM (SLDT.DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                            SUM (SLDT.CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                            SUM (SLDT.DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                            SUM (SLDT.CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                            1 EXCHANGE_RATE
                       FROM GL_VOUCHER_HEADER_T wht
                            INNER JOIN GL_SUB_LEDGER_DETAIL_T SLDT
                               ON     SLDT.ORG_ID = wht.org_id
                                  AND SLDT.BRANCH_ID = WHT.BRANCH_ID
                                  AND SLDT.VOUCHER_TYPE = WHT.VOUCHER_TYPE
                                  AND SLDT.FISCAL_YEAR = wht.FISCAL_YEAR
                                  AND SLDT.VOUCHER_NO = wht.VOUCHER_NO
                            INNER JOIN CHART_OF_ACCOUNT_GL_T COA
                               ON (    SLDT.ORG_ID = COA.org_id
                                   AND SLDT.COA_CODE = COA.COA_CODE)
                      WHERE     wht.ORG_ID = P_ORG_ID
                            AND wht.FISCAL_YEAR = P_FISCAL_YEAR
                            AND (   NVL (COA_NATURE, 'N') <> 'BS'
                                 OR coa.COA_CODE = LV_RETAINED_EARNING_COA)
                            AND NVL (WHT.VOUCHER_STATUS, 'N') = 'A'
                   GROUP BY wht.ORG_ID,
                            wht.BRANCH_ID,
                            SLDT.COST_CENTER_CODE,
                            NVL (SLDT.CURRENCY_CODE, 'PKR'),
                            SLDT.SL_TYPE,
                            SLDT.SL_CODE
                   UNION ALL
                   SELECT ORG_ID,
                          BRANCH_ID,
                          COST_CENTER_CODE,
                          CURRENCY_CODE,
                          SL_TYPE,
                          SL_CODE,
                          DEBIT_BASE_CURR,
                          CREDIT_BASE_CURR,
                          DEBIT_FOREIGN_CURR,
                          CREDIT_FOREIGN_CURR,
                          EXCHANGE_RATE
                     FROM GL_BALANCES_SUBLEDGER_T
                    WHERE     ORG_ID = P_ORG_ID
                          AND FISCAL_YEAR = P_FISCAL_YEAR
                          AND period_no = 0
                          AND COA_CODE = LV_RETAINED_EARNING_COA) tab
         GROUP BY ORG_ID,
                  BRANCH_ID,
                  COST_CENTER_CODE,
                  CURRENCY_CODE,
                  SL_TYPE,
                  SL_CODE,
                  EXCHANGE_RATE;


      -- insert balances of next year from dimension table to header table
      INSERT INTO GL_BALANCES_HEADER_T (ORG_ID,
                                        BRANCH_ID,
                                        FISCAL_YEAR,
                                        PERIOD_NO,
                                        COST_CENTER_CODE,
                                        COA_CODE,
                                        CURRENCY_CODE,
                                        DEBIT_BASE_CURR,
                                        CREDIT_BASE_CURR,
                                        DEBIT_FOREIGN_CURR,
                                        CREDIT_FOREIGN_CURR,
                                        CREATED_BY,
                                        CREATION_DATE,
                                        EXCHANGE_RATE)
           SELECT ORG_ID,
                  BRANCH_ID,
                  FISCAL_YEAR,
                  PERIOD_NO,
                  COST_CENTER_CODE,
                  COA_CODE,
                  CURRENCY_CODE,
                  SUM (DEBIT_BASE_CURR) DEBIT_BASE_CURR,
                  SUM (CREDIT_BASE_CURR) CREDIT_BASE_CURR,
                  SUM (DEBIT_FOREIGN_CURR) DEBIT_FOREIGN_CURR,
                  SUM (CREDIT_FOREIGN_CURR) CREDIT_FOREIGN_CURR,
                  'ADMIN' CREATED_BY,
                  SYSDATE CREATION_DATE,
                  EXCHANGE_RATE
             FROM GL_BALANCES_DIMENSIONS_T
            WHERE     ORG_ID = P_ORG_ID
                  AND FISCAL_YEAR = LV_NEXT_FISCAL_YEAR
                  AND period_no = 0
         GROUP BY ORG_ID,
                  BRANCH_ID,
                  FISCAL_YEAR,
                  PERIOD_NO,
                  COST_CENTER_CODE,
                  COA_CODE,
                  CURRENCY_CODE,
                  EXCHANGE_RATE;


      COMMIT;
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      DBMS_OUTPUT.put_line ('error is ' || SQLERRM);
END;
/

prompt
prompt Creating procedure GAINLOSSDAILYPROCESSPOLICY
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE GainLossDailyProcessPolicy (
   P_ORG_ID             VARCHAR2,
   P_POLICY_NO          VARCHAR2,
   P_ALLOCATION_TYPE    NUMBER,
   P_PMD_YEAR           NUMBER,
   P_FUND_CODE          NUMBER)
AS
   LD_PROCESS_DATE            DATE;
   LD_CURRENT_DATE            DATE := TRUNC (SYSDATE);
   LN_LASTDAY_CLOSING_UNITS   NUMBER;
   LN_CURRENT_BID_PRICE       NUMBER;
   LN_LAST_DAY_BID_PRICE      NUMBER;
   LV_PRICE_TYPE              VARCHAR2 (1);
   LN_OFFER_SPREAD_RATE       NUMBER;
   lc_cost_center_code        VARCHAR2 (20);

   LC_CURRENCY_CODE           VARCHAR2 (10);
   LC_BU                      VARCHAR2 (300 BYTE);
   LC_LOB                     VARCHAR2 (300 BYTE);
   LC_LOCATION                VARCHAR2 (20);
   LN_CHANNEL                 NUMBER;
   LN_AGENT                   NUMBER;
   LN_BRANCH_ID               NUMBER;
BEGIN
   SELECT f.price_type
     INTO LV_PRICE_TYPE
     FROM FUND_SETUP_T F
    WHERE F.ORG_ID = P_ORG_ID AND F.FUND_CODE = P_FUND_CODE;

   SELECT dh.COST_CENTER_CODE,
          DH.CURRENCY_CODE,
          AGENT_BRANCH_ID,
          CHANNEL_ID,
          AGENT_ID,
          LOC.BU,
          APP.LOB,
          DH.BRANCH_ID
     INTO lc_cost_center_code,
          LC_CURRENCY_CODE,
          LC_LOCATION,
          LN_CHANNEL,
          LN_AGENT,
          LC_BU,
          LC_LOB,
          LN_BRANCH_ID
     FROM IL_DOC_HEADER_T DH
          INNER JOIN SM_APPLICATION_LOB_MAP_T APP
             ON     APP.ORG_ID = DH.ORG_ID
                AND APP.APPLICATION_ID = DH.APPLICATION_ID
          INNER JOIN TK_BRANCH_SETUP_T LOC
             ON LOC.ORG_ID = DH.ORG_ID AND LOC.BRANCH_ID = DH.BRANCH_ID
    WHERE     DH.record_type = 'O'
          AND DH.DOCUMENT_TYPE = 'P'
          AND DH.ISSUE_COUNT = 1
          AND DH.ENDORSEMENT_NO = 0
          AND DH.ORG_ID = P_ORG_ID
          AND DH.MASTER_REF_NO = P_POLICY_NO;

   BEGIN
        SELECT PROCESS_DATE + 1
          INTO LD_PROCESS_DATE
          FROM IL_POLICYWISE_DAILY_GAINLOSS_T
         WHERE     ORG_ID = P_ORG_ID
               AND MASTER_REF_NO = P_POLICY_NO
               AND ALLOCATION_TYPE = P_ALLOCATION_TYPE
               AND FUND_CODE = P_FUND_CODE
      ORDER BY PROCESS_DATE DESC                      FETCH NEXT 1 ROWS ONLY
;


      SELECT P.OFFER_SPREAD_RATE
        INTO LN_OFFER_SPREAD_RATE
        FROM    IL_DOC_HEADER_T DH
             INNER JOIN
                GLAS_SUB_PRODUCT_SETUP_T p
             ON (    dh.ORG_ID = p.ORG_ID
                 AND dh.MAIN_PRODUCT_CODE = p.MAIN_PRODUCT_CODE
                 AND dh.SUB_PRODUCT_CODE = p.SUB_PRODUCT_CODE)
       WHERE     DH.record_type = 'O'
             AND DH.DOCUMENT_TYPE = 'P'
             AND DH.ISSUE_COUNT = 1
             AND DH.ENDORSEMENT_NO = 0
             AND DH.ORG_ID = P_ORG_ID
             AND DH.MASTER_REF_NO = P_POLICY_NO;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         SELECT MIN (trunc(TRANSACTION_DATE)), MIN (P.OFFER_SPREAD_RATE)
           INTO LD_PROCESS_DATE, LN_OFFER_SPREAD_RATE
           FROM IL_DOC_HEADER_T DH
                INNER JOIN GLAS_SUB_PRODUCT_SETUP_T p
                   ON (    dh.ORG_ID = p.ORG_ID
                       AND dh.MAIN_PRODUCT_CODE = p.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = p.SUB_PRODUCT_CODE)
                INNER JOIN IL_DOC_ALLOC_DTL_BREAKUP_T A
                   ON (    dh.ORG_ID = A.ORG_ID
                       AND dh.BRANCH_ID = A.BRANCH_ID
                       AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                       AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                       AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                       AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                       AND dh.RECORD_TYPE = A.RECORD_TYPE
                       AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                       AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                       AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                       AND dh.APPLICATION_ID = A.APPLICATION_ID)
          WHERE     DH.record_type = 'O'
                AND DH.DOCUMENT_TYPE = 'P'
                AND DH.ISSUE_COUNT = 1
                AND DH.ENDORSEMENT_NO = 0
                AND DH.ORG_ID = P_ORG_ID
                AND DH.MASTER_REF_NO = P_POLICY_NO
                AND A.ALLOCATION_TYPE = P_ALLOCATION_TYPE
                AND A.FUND_CODE = P_FUND_CODE
                AND A.unit_process_date IS NOT NULL
                AND DH.REVISED_TAG IS NULL
                AND trunc(TRANSACTION_DATE) < LD_CURRENT_DATE;
   END;

   WHILE (LD_PROCESS_DATE < LD_CURRENT_DATE)
   LOOP
      -- check curent bid price
      BEGIN
         SELECT BID_PRICE
           INTO LN_CURRENT_BID_PRICE
           FROM IL_FUND_PRICE_HISTORY_T
          WHERE     ORG_ID = P_ORG_ID
                AND FUND_CODE = P_FUND_CODE
                AND trunc(TRANSACTION_DATE) = LD_PROCESS_DATE;

         BEGIN
            SELECT NVL (SUM (NVL (NO_OF_UNITS, 0)), 0)
              INTO LN_LASTDAY_CLOSING_UNITS
              FROM    IL_DOC_HEADER_T DH
                   INNER JOIN
                      IL_DOC_ALLOC_DTL_BREAKUP_T A
                   ON (    dh.ORG_ID = A.ORG_ID
                       AND dh.BRANCH_ID = A.BRANCH_ID
                       AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                       AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                       AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                       AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                       AND dh.RECORD_TYPE = A.RECORD_TYPE
                       AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                       AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                       AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                       AND dh.APPLICATION_ID = A.APPLICATION_ID)
             WHERE     DH.record_type = 'O'
                   AND DH.DOCUMENT_TYPE = 'P'
                   AND DH.ISSUE_COUNT = 1
                   AND DH.ENDORSEMENT_NO = 0
                   AND DH.ORG_ID = P_ORG_ID
                   AND DH.MASTER_REF_NO = P_POLICY_NO
                   AND A.ALLOCATION_TYPE = P_ALLOCATION_TYPE
                   AND A.FUND_CODE = P_FUND_CODE
                   AND A.unit_process_date IS NOT NULL
                   AND DH.REVISED_TAG IS NULL
                   AND trunc(TRANSACTION_DATE) <= LD_PROCESS_DATE - 1;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LN_LASTDAY_CLOSING_UNITS := 0;
         END;

         BEGIN
            SELECT BID_PRICE
              INTO LN_LAST_DAY_BID_PRICE
              FROM IL_FUND_PRICE_HISTORY_T
             WHERE     ORG_ID = P_ORG_ID
                   AND FUND_CODE = P_FUND_CODE
                   AND trunc(TRANSACTION_DATE) = LD_PROCESS_DATE - 1;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LN_LAST_DAY_BID_PRICE := 0;
         END;

         LN_CURRENT_BID_PRICE :=
            CASE
               WHEN LV_PRICE_TYPE = 'O'
               THEN
                  NVL (LN_CURRENT_BID_PRICE, 0) * (1 - LN_OFFER_SPREAD_RATE)
               ELSE
                  NVL (LN_CURRENT_BID_PRICE, 0)
            END;

         LN_LAST_DAY_BID_PRICE :=
            CASE
               WHEN LV_PRICE_TYPE = 'O'
               THEN
                  NVL (LN_LAST_DAY_BID_PRICE, 0) * (1 - LN_OFFER_SPREAD_RATE)
               ELSE
                  NVL (LN_LAST_DAY_BID_PRICE, 0)
            END;

         INSERT INTO IL_POLICYWISE_DAILY_GAINLOSS_T (ORG_ID,
                                                     PROCESS_DATE,
                                                     MASTER_REF_NO,
                                                     PMD_YEAR,
                                                     ALLOCATION_TYPE,
                                                     FUND_CODE,
                                                     NO_OF_UNTS,
                                                     LAST_DAY_PRICE,
                                                     CURRENT_DAY_PRICE,
                                                     LAST_DAY_AMOUNT,
                                                     CURRENT_DAY_AMOUNT,
                                                     GAINLOSS_AMOUNT,
                                                     CREATION_DATE,
                                                     cost_center_code,
                                                     CURRENCY_CODE,
                                                     BU,
                                                     LOB,
                                                     LOCATION,
                                                     CHANNEL,
                                                     AGENT,
                                                     branch_id)
              VALUES (
                        P_ORG_ID,
                        LD_PROCESS_DATE,
                        P_POLICY_NO,
                        P_PMD_YEAR,
                        P_ALLOCATION_TYPE,
                        P_FUND_CODE,
                        LN_LASTDAY_CLOSING_UNITS,
                        LN_LAST_DAY_BID_PRICE,
                        LN_CURRENT_BID_PRICE,
                        LN_LASTDAY_CLOSING_UNITS * LN_LAST_DAY_BID_PRICE,
                        LN_LASTDAY_CLOSING_UNITS * LN_CURRENT_BID_PRICE,
                          LN_LASTDAY_CLOSING_UNITS * LN_CURRENT_BID_PRICE
                        - LN_LASTDAY_CLOSING_UNITS * LN_LAST_DAY_BID_PRICE,
                        SYSDATE,
                        lc_cost_center_code,
                        LC_CURRENCY_CODE,
                        LC_BU,
                        LC_LOB,
                        LC_LOCATION,
                        LN_CHANNEL,
                        LN_AGENT,
                        LN_BRANCH_ID);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LD_PROCESS_DATE := LD_CURRENT_DATE;
      --            LN_CURRENT_BID_PRICE := 0;
      END;



      LD_PROCESS_DATE := LD_PROCESS_DATE + 1;
   END LOOP;

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('ERROR IN GAIN LOSS POLICY PROCEDURE' ||SQLERRM);

END;
/

prompt
prompt Creating procedure GAINLOSSDAILYPROCESSVOUCHERS
prompt ===============================================
prompt
CREATE OR REPLACE PROCEDURE GainLossDailyProcessVouchers (
   P_ORG_ID VARCHAR2)
AS
   LD_CURRENT_DATE          DATE := TRUNC (SYSDATE);
   LD_PREVIOUS_DATE         DATE := TRUNC (SYSDATE);
   ln_new_vch_sr_no         NUMBER;
   ln_new_vchdtl_sr_no      NUMBER := 1;
   ln_new_vch_year          VARCHAR2 (10);
   ln_new_vch_month         VARCHAR2 (2);
   ln_new_vch_no            VARCHAR2 (10);
   ln_new_vch_ref_no        VARCHAR2 (50);
   lc_num_gen_query_param   VARCHAR2 (2000);
   lc_num_gen_query         VARCHAR2 (2000);
   lc_vch_type              VARCHAR2 (10) := 'JMFU';
   ln_voucher_pading        NUMBER;
   lc_num_gen_id            VARCHAR2 (50) := 'VOUCHER_NO';
   LC_detail_desc           VARCHAR2 (500);
   LC_COA_CODE              VARCHAR2 (50);
   LC_OFFSET_COA_CODE       VARCHAR2 (50) := '20201001';

   LN_DR_AMOUNT             NUMBER;
   LN_CR_AMOUNT             NUMBER;
   LN_DR_AMOUNT_TOTAL       NUMBER := 0;
   LN_BRANCH_ID             NUMBER;
   LN_FIRST_ITERATION       NUMBER := 0;

   CURSOR UNPOSTED_POLICIES_DATA
   IS
        SELECT G.ORG_ID,
               TRUNC (G.PROCESS_DATE) PROCESS_DATE,
               G.MASTER_REF_NO,
               G.PMD_YEAR,
               G.ALLOCATION_TYPE,
               A.TYPE_DESC ALLOCATION_TYPE_DESC,
               G.FUND_CODE,
               F.FUND_DESC,
               G.COST_CENTER_CODE,
               G.CURRENCY_CODE,
               G.BU,
               G.LOB,
               G.LOCATION,
               G.CHANNEL,
               G.AGENT,
               G.branch_id,
               G.NO_OF_UNTS,
               G.LAST_DAY_PRICE,
               G.CURRENT_DAY_PRICE,
               G.LAST_DAY_AMOUNT,
               G.CURRENT_DAY_AMOUNT,
               G.GAINLOSS_AMOUNT
          FROM IL_POLICYWISE_DAILY_GAINLOSS_T G
               INNER JOIN FUND_SETUP_T F
                  ON F.ORG_ID = G.ORG_ID AND F.FUND_CODE = G.FUND_CODE
               INNER JOIN IL_ALLOC_TYPE_SETUP_T A
                  ON A.ORG_ID = G.ORG_ID AND A.TYPE_CODE = G.ALLOCATION_TYPE
         WHERE POST_TAG IS NULL
      ORDER BY TRUNC (G.PROCESS_DATE), G.MASTER_REF_NO, G.FUND_CODE;
BEGIN
   lc_num_gen_query_param := get_num_gen_f (P_ORG_ID, lc_num_gen_id);

   SELECT NUMBER_LENGTH
     INTO ln_voucher_pading
     FROM NUM_GEN_SETUP_HD_T
    WHERE org_id = p_org_id AND numgen_id = lc_num_gen_id;



   FOR crow IN UNPOSTED_POLICIES_DATA
   LOOP
      lc_num_gen_query := lc_num_gen_query_param;
      LD_CURRENT_DATE := CROW.PROCESS_DATE;

      IF LD_CURRENT_DATE <> LD_PREVIOUS_DATE
      THEN
         -- UPDATE PREVIUOS ROW VOUCHER AMOUNT
         IF LN_FIRST_ITERATION <> 0
         THEN
            IF LN_DR_AMOUNT_TOTAL > 0
            THEN
               UPDATE GL_VOUCHER_HEADER_T
                  SET VOUCHER_AMOUNT = LN_DR_AMOUNT_TOTAL
                WHERE     ORG_ID = P_ORG_ID
                      AND BRANCH_ID = LN_BRANCH_ID
                      AND VOUCHER_TYPE = lc_vch_type
                      AND FISCAL_YEAR = ln_new_vch_year
                      AND VOUCHER_NO = ln_new_vch_no;
            ELSE
               DBMS_OUTPUT.PUT_LINE (
                  'INSIDE DELETE. DETAIL AMOUNT : ' || LN_DR_AMOUNT_TOTAL);

               DELETE FROM GL_VOUCHER_HEADER_T
                     WHERE     ORG_ID = P_ORG_ID
                           AND BRANCH_ID = LN_BRANCH_ID
                           AND VOUCHER_TYPE = lc_vch_type
                           AND FISCAL_YEAR = ln_new_vch_year
                           AND VOUCHER_NO = ln_new_vch_no;
            END IF;
         END IF;

         LN_FIRST_ITERATION := 1;
         LN_BRANCH_ID := crow.branch_id;

         -- get fiscal year of the vouche date;
         SELECT DISTINCT FISCAL_YEAR
           INTO ln_new_vch_year
           FROM GL_PERIOD_SETUP_T
          WHERE     org_id = P_ORG_ID
                AND crow.PROCESS_DATE BETWEEN TRUNC (FROM_DATE)
                                          AND TRUNC (TO_DATE);

         -- get month of the vouche date;
         ln_new_vch_month := TO_CHAR (crow.PROCESS_DATE, 'MM');

         lc_num_gen_query := REPLACE (lc_num_gen_query, ':0', P_ORG_ID);
         lc_num_gen_query := REPLACE (lc_num_gen_query, ':1', lc_vch_type);
         lc_num_gen_query := REPLACE (lc_num_gen_query, ':2', ln_new_vch_year);
         lc_num_gen_query :=
            REPLACE (lc_num_gen_query, ':3', ln_new_vch_month);

         --         DBMS_OUTPUT.PUT_LINE (lc_num_gen_query);

         EXECUTE IMMEDIATE lc_num_gen_query INTO ln_new_vch_sr_no;

         ln_new_vch_sr_no := ln_new_vch_sr_no + 1;
         ln_new_vch_no :=
               ln_new_vch_month
            || LPAD (ln_new_vch_sr_no, ln_voucher_pading, '0');
         ln_new_vch_ref_no :=
               lc_vch_type
            || '-'
            || ln_new_vch_no
            || '/'
            || ln_new_vch_month
            || '/'
            || ln_new_vch_year;

         INSERT INTO GL_VOUCHER_HEADER_T (ORG_ID,
                                          BRANCH_ID,
                                          VOUCHER_TYPE,
                                          FISCAL_YEAR,
                                          VOUCHER_NO,
                                          VOUCHER_DATE,
                                          VOUCHER_DESCRIPTION,
                                          VOUCHER_STATUS,
                                          VERIFIED_BY,
                                          VERIFIED_DATE,
                                          APPROVED_BY,
                                          APPROVAL_DATE,
                                          CREATED_BY,
                                          CREATION_DATE,
                                          MANUAL_TAG,
                                          VOUCHER_REF_NO)
              VALUES (P_ORG_ID,
                      crow.branch_id,
                      lc_vch_type,
                      ln_new_vch_year,
                      ln_new_vch_no,
                      LD_CURRENT_DATE,
                      'AUTO DAILY FUND REVALUAITON UNIT LINK PROCESS',
                      'A',
                      '5PLR.ADMIN',
                      SYSDATE,
                      '5PLR.ADMIN',
                      SYSDATE,
                      '5PLR.ADMIN',
                      SYSDATE,
                      'N',
                      ln_new_vch_ref_no);

         LN_DR_AMOUNT_TOTAL := 0;
         ln_new_vchdtl_sr_no := 1;
         LD_PREVIOUS_DATE := LD_CURRENT_DATE;
         DBMS_OUTPUT.put_line (' new vch header created ');
      END IF;

      LC_detail_desc :=
            CROW.MASTER_REF_NO
         || ' , '
         || CROW.ALLOCATION_TYPE_DESC
         || ' , '
         || CROW.FUND_DESC;
      LC_COA_CODE :=
         CASE
            WHEN CROW.ALLOCATION_TYPE = 2 THEN '60101048'
            WHEN CROW.PMD_YEAR = 1 THEN '60101045'
            WHEN CROW.PMD_YEAR = 2 THEN '60101046'
            ELSE '60101047'
         END;
      LN_DR_AMOUNT :=
         CASE
            WHEN CROW.GAINLOSS_AMOUNT >= 0
            THEN
               ROUND (CROW.GAINLOSS_AMOUNT, 2)
            ELSE
               0
         END;
      LN_CR_AMOUNT :=
         CASE
            WHEN CROW.GAINLOSS_AMOUNT < 0
            THEN
               ABS (ROUND (CROW.GAINLOSS_AMOUNT, 2))
            ELSE
               0
         END;

      IF LN_DR_AMOUNT + LN_CR_AMOUNT > 0
      THEN
         DBMS_OUTPUT.put_line (' new vch detail creating ');

         -- insert voucher detail rows
         INSERT INTO GL_VOUCHER_DETAIL_T (ORG_ID,
                                          BRANCH_ID,
                                          VOUCHER_TYPE,
                                          FISCAL_YEAR,
                                          VOUCHER_NO,
                                          DETAIL_SR_NO,
                                          COST_CENTER_CODE,
                                          ROW_DESCRIPTION,
                                          COA_CODE,
                                          DEBIT_BASE_CURR,
                                          CREDIT_BASE_CURR,
                                          CURRENCY_CODE,
                                          EXCHANGE_RATE,
                                          DEBIT_FOREIGN_CURR,
                                          CREDIT_FOREIGN_CURR,
                                          CREATED_BY,
                                          CREATION_DATE,
                                          POLICY_YEAR,
                                          POLICY_NO,
                                          ENDORSEMENT_NO,
                                          BU,
                                          LOB,
                                          LOCATION,
                                          CHANNEL,
                                          AGENT,
                                          SUBLEDGER_FLAG)
              VALUES (P_ORG_ID,
                      crow.branch_id,
                      lc_vch_type,
                      ln_new_vch_year,
                      ln_new_vch_no,
                      ln_new_vchdtl_sr_no,
                      crow.COST_CENTER_CODE,
                      LC_detail_desc,
                      LC_COA_CODE,
                      LN_DR_AMOUNT,
                      LN_CR_AMOUNT,
                      'PKR',
                      1,
                      LN_DR_AMOUNT,
                      LN_CR_AMOUNT,
                      '5PLR.ADMIN',
                      SYSDATE,
                      CROW.PMD_YEAR,
                      CROW.MASTER_REF_NO,
                      '0',
                      crow.bu,
                      crow.lob,
                      crow.location,
                      crow.channel,
                      crow.agent,
                      'N');

         DBMS_OUTPUT.put_line (' off set entry creating ');
         -- offset entry for each row
         ln_new_vchdtl_sr_no := ln_new_vchdtl_sr_no + 1;

         INSERT INTO GL_VOUCHER_DETAIL_T (ORG_ID,
                                          BRANCH_ID,
                                          VOUCHER_TYPE,
                                          FISCAL_YEAR,
                                          VOUCHER_NO,
                                          DETAIL_SR_NO,
                                          COST_CENTER_CODE,
                                          ROW_DESCRIPTION,
                                          COA_CODE,
                                          DEBIT_BASE_CURR,
                                          CREDIT_BASE_CURR,
                                          CURRENCY_CODE,
                                          EXCHANGE_RATE,
                                          DEBIT_FOREIGN_CURR,
                                          CREDIT_FOREIGN_CURR,
                                          CREATED_BY,
                                          CREATION_DATE,
                                          POLICY_YEAR,
                                          POLICY_NO,
                                          ENDORSEMENT_NO,
                                          BU,
                                          LOB,
                                          LOCATION,
                                          CHANNEL,
                                          AGENT,
                                          SUBLEDGER_FLAG)
              VALUES (P_ORG_ID,
                      crow.branch_id,
                      lc_vch_type,
                      ln_new_vch_year,
                      ln_new_vch_no,
                      ln_new_vchdtl_sr_no,
                      crow.COST_CENTER_CODE,
                      LC_detail_desc,
                      LC_OFFSET_COA_CODE,
                      LN_CR_AMOUNT,
                      LN_DR_AMOUNT,
                      'PKR',
                      1,
                      LN_CR_AMOUNT,
                      LN_DR_AMOUNT,
                      '5PLR.ADMIN',
                      SYSDATE,
                      CROW.PMD_YEAR,
                      CROW.MASTER_REF_NO,
                      '0',
                      crow.bu,
                      crow.lob,
                      crow.location,
                      crow.channel,
                      crow.agent,
                      'N');

         LN_DR_AMOUNT_TOTAL :=
            LN_DR_AMOUNT_TOTAL + LN_DR_AMOUNT + LN_CR_AMOUNT;
         DBMS_OUTPUT.put_line (' DR AMOUNT IS ' || LN_DR_AMOUNT);
         DBMS_OUTPUT.put_line (' CR AMOUNT IS ' || LN_CR_AMOUNT);
         DBMS_OUTPUT.put_line (' DR AMOUNT TOTAL IS ' || LN_DR_AMOUNT_TOTAL);

         ln_new_vchdtl_sr_no := ln_new_vchdtl_sr_no + 1;
      END IF;
   END LOOP;

   DBMS_OUTPUT.put_line (
      ' out side loop update amount on voucher else delete ');


   -- UPDATE PREVIUOS ROW VOUCHER AMOUNT
   IF LN_DR_AMOUNT_TOTAL > 0
   THEN
      UPDATE GL_VOUCHER_HEADER_T
         SET VOUCHER_AMOUNT = LN_DR_AMOUNT_TOTAL
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = LN_BRANCH_ID
             AND VOUCHER_TYPE = lc_vch_type
             AND FISCAL_YEAR = ln_new_vch_year
             AND VOUCHER_NO = ln_new_vch_no;
   ELSE
      DELETE FROM GL_VOUCHER_HEADER_T
            WHERE     ORG_ID = P_ORG_ID
                  AND BRANCH_ID = LN_BRANCH_ID
                  AND VOUCHER_TYPE = lc_vch_type
                  AND FISCAL_YEAR = ln_new_vch_year
                  AND VOUCHER_NO = ln_new_vch_no;
   END IF;

   UPDATE IL_POLICYWISE_DAILY_GAINLOSS_T
      SET POST_TAG = 'Y', POST_DATE = SYSDATE
    WHERE POST_TAG IS NULL;

   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      ROLLBACK;
      DBMS_OUTPUT.PUT_LINE (
            'ERROR IN GAIN LOSS VOUCHER PROCEDURE'
         || SQLERRM
         || ' in VCH '
         || ln_new_vch_no);
END;
/

prompt
prompt Creating procedure GAINLOSSDAILYPROCESS
prompt =======================================
prompt
CREATE OR REPLACE PROCEDURE GainLossDailyProcess (P_ORG_ID VARCHAR2)
AS
   LD_CURRENT_DATE   DATE := TRUNC (SYSDATE);

   CURSOR ACTIVE_POLICIES_DATA
   IS
        SELECT MASTER_REF_NO,
               FUND_CODE,
               A.ALLOCATION_TYPE,
               MAX (AH.POLICY_YEAR) PMD_YEAR
          FROM IL_DOC_HEADER_T DH
               INNER JOIN IL_DOC_ALLOC_DTL_BREAKUP_T A
                  ON (    dh.ORG_ID = A.ORG_ID
                      AND dh.BRANCH_ID = A.BRANCH_ID
                      AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                      AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                      AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                      AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                      AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                      AND dh.RECORD_TYPE = A.RECORD_TYPE
                      AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                      AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                      AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                      AND dh.APPLICATION_ID = A.APPLICATION_ID)
               INNER JOIN IL_DOC_ALLOCATIONHD_T AH
                  ON (    Ah.ORG_ID = A.ORG_ID
                      AND Ah.BRANCH_ID = A.BRANCH_ID
                      AND Ah.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                      AND Ah.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                      AND Ah.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                      AND Ah.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                      AND Ah.DOCUMENT_NO = A.DOCUMENT_NO
                      AND Ah.RECORD_TYPE = A.RECORD_TYPE
                      AND Ah.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                      AND Ah.ISSUE_COUNT = A.ISSUE_COUNT
                      AND Ah.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                      AND Ah.APPLICATION_ID = A.APPLICATION_ID
                      AND Ah.ALLOCATION_TYPE = A.ALLOCATION_TYPE
                      AND Ah.ALLOCATION_ID = A.ALLOCATION_ID)
         WHERE     DH.ORG_ID = P_ORG_ID
               AND a.record_type = 'O'
               AND DH.DOC_REFERENCE_KEY IS NOT NULL
               AND DH.REVISED_TAG IS NULL
               AND A.ISSUE_COUNT = 1
               AND A.ENDORSEMENT_NO = 0
               AND TRUNC (a.unit_process_date) <= LD_CURRENT_DATE - 1
      GROUP BY MASTER_REF_NO, FUND_CODE, A.ALLOCATION_TYPE
        HAVING SUM (ROUND (NVL (NO_OF_UNITS, 0), 6)) > 0
      ORDER BY MASTER_REF_NO, FUND_CODE, A.ALLOCATION_TYPE;
BEGIN
   FOR CROW IN ACTIVE_POLICIES_DATA
   LOOP
      GainLossDailyProcessPolicy (P_ORG_ID,
                                  CROW.MASTER_REF_NO,
                                  CROW.ALLOCATION_TYPE,
                                  CROW.PMD_YEAR,
                                  CROW.FUND_CODE);
   END LOOP;


   GainLossDailyProcessVouchers (P_ORG_ID);
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.PUT_LINE ('ERROR IN GAIN LOSS MAIN PROCEDURE' || SQLERRM);
END;
/

prompt
prompt Creating procedure GENERATE_CASHBACK_TABLE_P
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE GENERATE_CASHBACK_TABLE_P (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_basic_contribution   NUMBER;
   ln_POLICY_TERM          NUMBER;
BEGIN
   BEGIN
      -- get basic details from illustration header
      SELECT   NVL (BASIC_CONTRIBUTION_MODAL, 0)
             * CASE PAYMENT_MODE
                  WHEN 'A' THEN 1
                  WHEN 'H' THEN 2
                  WHEN 'Q' THEN 4
                  WHEN 'M' THEN 12
                  ELSE 1
               END
                AS TOTAL_CONTRIBUTION,
             POLICY_TERM
        INTO ln_basic_contribution, ln_POLICY_TERM
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND APPLICATION_ID = P_APPLICATION_ID
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND (NVL (payment_term, 0) > 1 OR NVL (payment_mode, 'n') <> 'A');
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_POLICY_TERM := 0;
   END;

   BEGIN
      DELETE FROM TK_ILLUST_CASHBACK_POS_T
            WHERE     ORG_ID = P_ORG_ID
                  AND BRANCH_ID = P_BRANCH_ID
                  AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                  AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                  AND DOCUMENT_NO = P_DOCUMENT_NO
                  AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
                  AND APPLICATION_ID = P_APPLICATION_ID
                  AND ISSUE_COUNT = P_ISSUE_COUNT;

      INSERT INTO TK_ILLUST_CASHBACK_POS_T (ORG_ID,
                                            BRANCH_ID,
                                            MAIN_PRODUCT_CODE,
                                            SUB_PRODUCT_CODE,
                                            DOCUMENT_NO,
                                            DOCUMENT_YEAR,
                                            APPLICATION_ID,
                                            ISSUE_COUNT,
                                            POLICY_YEAR,
                                            CASHBACK_PERCENT,
                                            CASHBACK_AMOUNT)
         SELECT P_ORG_ID,
                P_BRANCH_ID,
                P_MAIN_PRODUCT_CODE,
                P_SUB_PRODUCT_CODE,
                P_DOCUMENT_NO,
                P_DOCUMENT_YEAR,
                P_APPLICATION_ID,
                P_ISSUE_COUNT,
                RTD.POLICY_YEAR,
                NVL (RTD.RATE, 0),
                ROUND (NVL (RTD.RATE, 0) / 100 * ln_basic_contribution, 2)
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 10
                AND ln_POLICY_TERM >= RTB.VAL_FROM
                AND ln_POLICY_TERM <= RTB.VAL_TO;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_POLICY_TERM := 0;
   END;

   COMMIT;
END;
/

prompt
prompt Creating procedure UPDATE_ILLUST_CV_MONTH_TOPUP_P
prompt =================================================
prompt
CREATE OR REPLACE PROCEDURE UPDATE_ILLUST_CV_MONTH_TOPUP_P (P_ORG_ID                  NUMBER,
                                          P_BRANCH_ID               NUMBER,
                                          P_MAIN_PRODUCT_CODE       NUMBER,
                                          P_SUB_PRODUCT_CODE        NUMBER,
                                          P_ISSUE_COUNT             NUMBER,
                                          P_DOCUMENT_NO             VARCHAR2,
                                          P_DOCUMENT_YEAR           NUMBER,
                                          P_APPLICATION_ID          NUMBER,
                                          P_ILLUSTRATION_ID         NUMBER,
                                          P_IMC_RATE                NUMBER,
                                          P_POLICY_TERM             NUMBER,
                                          P_BID_RATE                NUMBER,
                                          P_MASTER_REF_NO_POLICY    VARCHAR2,
                                          p_max_policy_month        NUMBER)
AS
   ln_policy_year                   NUMBER;
   ln_topup_allocation_percentage   NUMBER;

   ln_topup_contribution            NUMBER;
   ln_allocated_contribution        NUMBER;
   ln_topup_commulative             NUMBER;
   ln_bid_offer                     NUMBER;

   ln_net_value1                    NUMBER;
   ln_net_value2                    NUMBER;
   ln_net_value3                    NUMBER;
   ln_cashvalue1                    NUMBER;
   ln_cashvalue2                    NUMBER;
   ln_cashvalue3                    NUMBER;

   ln_cashvalue_current             NUMBER;

   ln_investment_income1            NUMBER;
   ln_im_charges1                   NUMBER;

   ln_investment_income2            NUMBER;
   ln_im_charges2                   NUMBER;

   ln_investment_income3            NUMBER;
   ln_im_charges3                   NUMBER;

   Ln_month                         NUMBER := 1;
   ln_iterator                      NUMBER := 1;
   ln_inflation_rate2               NUMBER;
   ln_nominal_rate2                 NUMBER;
   ln_inflation_factor              NUMBER;

   ln_topup_inflation_adj_contri    NUMBER;
   ln_topup_inflation_accum_cont    NUMBER;

   lc_projection_tag                VARCHAR2 (1);
   ln_curr_policy_year              NUMBER := 0;
   ln_ill_current_month             NUMBER;


   CURSOR C1
   IS
      SELECT ROWNUM ROW_NUMBER, a.*
        FROM (  SELECT RATE
                  FROM TK_NOMINAL_RATE_SETUP_T
                 WHERE ORG_ID = P_ORG_ID AND EFFECTIVE_END_DATE IS NULL
              ORDER BY RATE) a;
BEGIN
   ln_cashvalue1 := 0;
   ln_cashvalue2 := 0;
   ln_cashvalue3 := 0;
   ln_curr_policy_year := CEIL (p_max_policy_month / 12);

   SELECT RATE
     INTO ln_inflation_rate2
     FROM (SELECT ROWNUM RATE_ID, a.RATE
             FROM (  SELECT RATE
                       FROM TK_INFLATION_RATE_SETUP_T
                      WHERE ORG_ID = P_ORG_ID AND EFFECTIVE_END_DATE IS NULL
                   ORDER BY RATE) a) TAB
    WHERE RATE_ID = 2;

   --    SELECT RATE into ln_nominal_rate2
   --    FROM (select rownum RATE_ID, a.RATE from (SELECT RATE  FROM TK_NOMINAL_RATE_SETUP_T WHERE ORG_ID=P_ORG_ID  AND EFFECTIVE_END_DATE IS NULL  ORDER BY RATE)a
   --         )TAB
   --    where RATE_ID=2;

   --    SELECT RATE into ln_inflation_rate2 FROM TK_INFLATION_RATE_SETUP_T where ORG_ID= P_ORG_ID and RATE_ID=2;
   --
   --    SELECT RATE into ln_nominal_rate2 FROM TK_NOMINAL_RATE_SETUP_T where ORG_ID= P_ORG_ID and RATE_ID=2;

   --    commented below formula for inflation
   --    ln_inflation_factor := round( ( (1 + ln_nominal_rate2/100) / ( 1 + ln_inflation_rate2/100)) -1 ,8);
   ln_inflation_factor := ln_inflation_rate2 / 100;

   ln_policy_year := 1;
   ln_topup_inflation_accum_cont := 0;
   ln_ill_current_month := 1;


   SELECT NVL (TOPUP_ALLOCATION, 100) / 100
     INTO ln_topup_allocation_percentage
     FROM GLAS_SUB_PRODUCT_SETUP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE;

   WHILE ln_policy_year <= p_policy_term
   LOOP
      IF Ln_month > 12
      THEN
         Ln_month := 1;
      END IF;

      BEGIN
         SELECT NVL (FAP_AMOUNT, 0)
           INTO ln_topup_contribution
           FROM TK_ILL_POS_FAP
          WHERE     ORG_ID = P_ORG_ID
                AND BRANCH_ID = P_BRANCH_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND DOCUMENT_NO = P_DOCUMENT_NO
                AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND APPLICATION_ID = P_APPLICATION_ID
                AND ISSUE_COUNT = P_ISSUE_COUNT
                AND FAP_YEAR = ln_policy_year;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_topup_contribution := 0;
      END;

      ln_allocated_contribution :=
         ln_topup_contribution * ln_topup_allocation_percentage;
      ln_bid_offer := ln_allocated_contribution * P_bid_rate;
      ln_topup_commulative :=
         NVL (ln_topup_commulative, 0) + ln_topup_contribution;
      ln_topup_inflation_adj_contri := 0;

      WHILE Ln_month <= 12
      LOOP
         IF ln_ill_current_month < p_max_policy_month
         THEN
            ln_cashvalue1 := 0;
            ln_cashvalue2 := 0;
            ln_cashvalue3 := 0;

            ln_topup_inflation_adj_contri :=
               ROUND (
                    ln_topup_contribution
                  / POWER ( (1 + ln_inflation_factor),
                           (ln_iterator - 1) / 12),
                  6);
         ELSIF ln_ill_current_month = p_max_policy_month
         THEN
            ln_cashvalue1 :=
               get_policy_cashvalue_f (P_ORG_ID,
                                       P_MASTER_REF_NO_POLICY,
                                       2,
                                       TRUNC (SYSDATE));
            ln_cashvalue2 := ln_cashvalue1;
            ln_cashvalue3 := ln_cashvalue1;

            ln_topup_inflation_adj_contri :=
               ROUND (
                    ln_topup_contribution
                  / POWER ( (1 + ln_inflation_factor),
                           (ln_iterator - 1) / 12),
                  6);
         ELSE
            FOR CROW IN C1
            LOOP
               IF crow.ROW_NUMBER = 1
               THEN
                  ln_net_value1 :=
                     ln_cashvalue1 + ln_allocated_contribution - ln_bid_offer;
                  --                      ln_investment_income1   := ( ( ln_net_value1) * crow.rate/100 ) /12;
                  ln_investment_income1 :=
                     ROUND (
                          ln_net_value1
                        * (ROUND (POWER (1 + crow.rate / 100, 1 / 12) - 1, 8)),
                        6);

                  ln_net_value1 := ln_net_value1 + ln_investment_income1;
                  ln_im_charges1 :=
                     ROUND ( (ln_net_value1 * p_imc_rate) / 12, 6);

                  ln_cashvalue1 := ROUND (ln_net_value1 - ln_im_charges1, 6);

                  ln_net_value1 := ln_net_value1 - ln_investment_income1;
               ELSIF crow.ROW_NUMBER = 2
               THEN
                  ln_net_value2 :=
                     ln_cashvalue2 + ln_allocated_contribution - ln_bid_offer;
                  --                      ln_investment_income2   :=  (( ln_net_value2) * crow.rate/100) / 12;
                  ln_investment_income2 :=
                     ROUND (
                          ln_net_value2
                        * (ROUND (POWER (1 + crow.rate / 100, 1 / 12) - 1, 8)),
                        6);

                  ln_net_value2 := ln_net_value2 + ln_investment_income2;
                  ln_im_charges2 :=
                     ROUND ( (ln_net_value2 * p_imc_rate) / 12, 6);

                  ln_cashvalue2 := ROUND (ln_net_value2 - ln_im_charges2, 6);

                  ln_net_value2 := ln_net_value2 - ln_investment_income2;

                  ln_topup_inflation_adj_contri :=
                     ROUND (
                          ln_topup_contribution
                        / POWER ( (1 + ln_inflation_factor),
                                 (ln_iterator - 1) / 12),
                        6);
               ELSIF crow.ROW_NUMBER = 3
               THEN
                  ln_net_value3 :=
                     ln_cashvalue3 + ln_allocated_contribution - ln_bid_offer;
                  --                      ln_investment_income3   := ( ( ln_net_value3) * crow.rate/100 ) / 12;
                  ln_investment_income3 :=
                     ROUND (
                          ln_net_value3
                        * (ROUND (POWER (1 + crow.rate / 100, 1 / 12) - 1, 8)),
                        6);

                  ln_net_value3 := ln_net_value3 + ln_investment_income3;
                  ln_im_charges3 :=
                     ROUND ( (ln_net_value3 * p_imc_rate) / 12, 6);

                  ln_cashvalue3 := ROUND (ln_net_value3 - ln_im_charges3, 6);

                  ln_net_value3 := ln_net_value3 - ln_investment_income3;
               END IF;
            END LOOP;
         END IF;

         ln_topup_inflation_accum_cont :=
            ln_topup_inflation_accum_cont + ln_topup_inflation_adj_contri;

         UPDATE TK_ILLUSTRATIONDTL_MONTHLY_T
            SET topup_contributon = ln_topup_contribution,
                topup_allocation_contribution = ln_allocated_contribution,
                topup_Cumulative = ln_topup_commulative,
                topup_cash_value1 = ln_cashvalue1,
                topup_cash_value2 = ln_cashvalue2,
                topup_cash_value3 = ln_cashvalue3,
                topup_bid_offer = ln_bid_offer,
                topup_net_investment1 = ln_net_value1,
                topup_investment_income1 = ln_investment_income1,
                topup_im_charges1 = ln_im_charges1,
                topup_net_investment2 = ln_net_value2,
                topup_investment_income2 = ln_investment_income2,
                topup_im_charges2 = ln_im_charges2,
                topup_net_investment3 = ln_net_value3,
                topup_investment_income3 = ln_investment_income3,
                topup_im_charges3 = ln_im_charges3,
                TOPUP_INFLATION_ADJ_CONTRI = ln_topup_inflation_adj_contri,
                TOPUP_INFLATION_ACCUMU_CONTRI = ln_topup_inflation_accum_cont
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND DOCUMENT_NO = P_DOCUMENT_NO
                AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND ISSUE_COUNT = P_ISSUE_COUNT
                AND APPLICATION_ID = P_APPLICATION_ID
                AND ILLUSTRATION_ID = P_ILLUSTRATION_ID
                AND policy_year = ln_policy_year
                AND policy_month = ln_month
                AND BRANCH_ID = P_BRANCH_ID;

         ln_allocated_contribution := 0;
         ln_topup_contribution := 0;
         ln_bid_offer := 0;
         Ln_month := Ln_month + 1;
         ln_iterator := ln_iterator + 1;
         ln_ill_current_month := ln_ill_current_month + 1;
      END LOOP;

      ln_policy_year := ln_policy_year + 1;
   END LOOP;

   COMMIT;
END;
/

prompt
prompt Creating procedure UPDATE_ILLUST_CV_MONTHLY_P
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE UPDATE_ILLUST_CV_MONTHLY_P(
P_ORG_ID NUMBER,
P_BRANCH_ID NUMBER,
           P_MAIN_PRODUCT_CODE NUMBER,
           P_SUB_PRODUCT_CODE NUMBER,
           P_ISSUE_COUNT NUMBER,
           P_DOCUMENT_NO VARCHAR2,
           P_DOCUMENT_YEAR NUMBER,
           P_APPLICATION_ID NUMBER,
           P_ILLUSTRATION_ID NUMBER

) as
ln_policy_year number;
ln_policy_term number;
ln_sum_covered number;
ln_admin_charges number;
ln_allocated_contribution number;
ln_Indexation_sumassured_rate number;
ln_mortality_rate1 number;

ln_bid_rate number;
ln_bid_offer number;
ln_imc_rate number;

ln_net_value number;
ln_cashvalue1 number;
ln_cashvalue2 number;
ln_cashvalue3 number;

ln_sum_assured_at_risk1 number;
ln_mortality_charges1 number;
ln_investment_income1 number;
ln_im_charges1 number;

ln_sum_assured_at_risk2 number;
ln_mortality_charges2 number;
ln_investment_income2 number;
ln_im_charges2 number;

ln_sum_assured_at_risk3 number;
ln_mortality_charges3 number;
ln_investment_income3 number;
ln_im_charges3 number;
ln_inflation_adj_contribution number;
ln_inflation_accumulated_cont number;
ln_basic_contribution number;
ln_benefit_code number;
Ln_month number :=1;
ln_iterator number :=1;
ln_inflation_rate2 number;
ln_nominal_rate2 number;
ln_inflation_factor number;
lc_converted_proposal_no varchar2(50);
lc_converted_policy_no varchar2(50);
lc_master_ref_no_policy varchar2(50):='N';

lc_projection_tag varchar2(1);
ln_max_policy_month number:=0;
ln_ill_current_month number;
ld_illustration_date            DATE;

CURSOR C1 IS
select rownum row_number, a.* from (SELECT RATE  FROM TK_NOMINAL_RATE_SETUP_T WHERE ORG_ID=P_ORG_ID  AND EFFECTIVE_END_DATE IS NULL  ORDER BY RATE)a; 

BEGIN

    ln_cashvalue1 :=0;
    ln_cashvalue2 :=0;
    ln_cashvalue3 :=0;

    SELECT RATE  INTO ln_inflation_rate2 
    FROM (select rownum RATE_ID, a.RATE from (SELECT RATE  FROM TK_INFLATION_RATE_SETUP_T WHERE ORG_ID=P_ORG_ID  AND EFFECTIVE_END_DATE IS NULL  ORDER BY RATE)a 
         )TAB 
    where RATE_ID=2;

--    SELECT RATE into ln_nominal_rate2 
--    FROM (select rownum RATE_ID, a.RATE from (SELECT RATE  FROM TK_NOMINAL_RATE_SETUP_T WHERE ORG_ID=P_ORG_ID  AND EFFECTIVE_END_DATE IS NULL  ORDER BY RATE)a 
--         )TAB  
--    where RATE_ID=2;

    ln_inflation_factor := ln_inflation_rate2/100;
--    commented below formula for inflation 
--    ln_inflation_factor := round( ( (1 + ln_nominal_rate2/100) / ( 1 + ln_inflation_rate2/100)) -1 ,8);

    -- Get Main Plan ( basic benefit) code
    SELECT
       BENEFIT_CODE INTO LN_BENEFIT_CODE
    FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    where ORG_ID         = P_ORG_ID
    and  MAIN_PRODUCT_CODE    = P_MAIN_PRODUCT_CODE
    and SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
    and MAPPING_TYPE='B';

    select policy_term ,bid_offer,SUM_COVERED ,NVL(SUM_COVERED_INDEX,0), NVL(PROJECTION_TAG,'N')  ,TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE)) 
    into ln_policy_term,ln_bid_rate, ln_sum_covered ,  ln_Indexation_sumassured_rate,lc_projection_tag ,ld_illustration_date
    from TK_ILLUSTRATIONHD_POS
    where ORG_ID         = P_ORG_ID
    AND BRANCH_ID=P_BRANCH_ID
    and  MAIN_PRODUCT_CODE    = P_MAIN_PRODUCT_CODE
    and SUB_PRODUCT_CODE   = P_SUB_PRODUCT_CODE
    AND DOCUMENT_NO=P_DOCUMENT_NO
    and DOCUMENT_YEAR=P_DOCUMENT_YEAR
    and APPLICATION_ID= P_APPLICATION_ID
    AND ISSUE_COUNT=P_ISSUE_COUNT
    ;


    -- if policy already created and projection / alteration illustration is called
    if lc_projection_tag='Y' or lc_projection_tag='A'  then 

        BEGIN
            select DISTINCT nvl(CONVERTED_DOC_NO,'N')
            into lc_converted_proposal_no
            from TK_ILLUSTRATIONHD_POS
            where ORG_ID         = P_ORG_ID
            AND BRANCH_ID=P_BRANCH_ID
            and  MAIN_PRODUCT_CODE    = P_MAIN_PRODUCT_CODE
            and SUB_PRODUCT_CODE   = P_SUB_PRODUCT_CODE
            AND DOCUMENT_NO=P_DOCUMENT_NO
            and DOCUMENT_YEAR=P_DOCUMENT_YEAR
            and APPLICATION_ID= P_APPLICATION_ID
            AND CONVERTED_DOC_NO IS NOT NULL     ;
        EXCEPTION WHEN OTHERS THEN 
             lc_converted_proposal_no :='N'    ;
        END;

        BEGIN
            -- check if any version of proposal is converted to policy then get policy number
            SELECT CONVERTED_POLICY_NO INTO lc_converted_policy_no FROM  IL_DOC_HEADER_T DH
             WHERE   DH.ORG_ID=P_ORG_ID AND  dh.record_type = 'O' AND CONVERTED_POLICY_NO IS NOT NULL AND document_type='Q' 
             AND MASTER_REF_NO = (select distinct master_ref_no  from il_doc_header_t where document_type='Q' and DOC_REFERENCE_NO=lc_converted_proposal_no) ;
             
             -- Get master ref of policy if policy found       
             select distinct master_ref_no  INTO lc_master_ref_no_policy from il_doc_header_t where document_type='P' and DOC_REFERENCE_NO=lc_converted_policy_no ;



        EXCEPTION WHEN OTHERS THEN 
             lc_master_ref_no_policy :='N'    ;
        END;

        IF lc_converted_policy_no <>'N' THEN        

        SELECT   MAX(a.MONTH_NO) into ln_max_policy_month 
        FROM 
        IL_DOC_HEADER_T DH
                   INNER JOIN IL_DOC_ALLOC_DTL_BREAKUP_T A
                      ON (    dh.ORG_ID = A.ORG_ID
                          AND dh.BRANCH_ID = A.BRANCH_ID
                          AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                          AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                          AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                          AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                          AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                          AND dh.RECORD_TYPE = A.RECORD_TYPE
                          AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                          AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                          AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                          AND dh.APPLICATION_ID = A.APPLICATION_ID)
             WHERE   DH.ORG_ID=P_ORG_ID AND  a.record_type = 'O'
                   AND DH.DOC_REFERENCE_KEY IS NOT NULL
                   AND DH.REVISED_TAG IS NULL
                   AND A.ISSUE_COUNT = 1
                   AND A.ENDORSEMENT_NO = 0 
                   AND A.ALLOCATION_TYPE = 1
                   AND MASTER_REF_NO = lc_master_ref_no_policy;
        ELSE 
            ln_max_policy_month:=0;
        END IF;
          
    end if;


    -- get IMC rate from sub classes setup   Rate Type 22 is IMC PIF
    select RATE into ln_imc_rate from ILAS_SUB_PROD_RATES_SETUP_T where  ORG_ID= P_ORG_ID  AND  MAIN_PRODUCT_CODE=P_MAIN_PRODUCT_CODE
    AND SUB_PRODUCT_CODE=P_SUB_PRODUCT_CODE AND  BENEFIT_CODE= LN_BENEFIT_CODE and RATE_TYPE_ID=22 and POLICY_TERM =1
    AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;

    ln_policy_year :=1;
    ln_inflation_accumulated_cont :=0;
    ln_ill_current_month:=1;

    while ln_policy_year <= ln_policy_term
    loop

        if Ln_month > 12 then
            Ln_month := 1;
        end if;
                        -- apply sum assuraed indexation for the next year
--                      if ln_policy_year > 1 then
--                            ln_sum_covered   := round(ln_sum_covered   * power((1+ ln_Indexation_sumassured_rate),ln_policy_year-1) , 6) ;
--    --                        ln_sum_assured_at_risk1   := ln_sum_assured_at_risk1   + round ( ln_sum_assured_at_risk1 *   ln_Indexation_sumassured_rate ,2);
--                      end if;

        while Ln_month <= 12
        loop
               -- select nvl(ALLOCATION_CONTRIBUTION,0) - nvl(MORTALITY_CHARGES,0) - nvl(ADMIN_CHARGES ,0) , nvl(PTF_SURPLUS,0) into ln_net_value,ln_ptf_surplus
                 select nvl(ALLOCATION_CONTRIBUTION,0) , nvl(ADMIN_CHARGES ,0)  ,nvl(mortality_rate1 ,0) , nvl(BASIC_CONTRIBUTION,0), nvl(SUM_ASSURED,0)
                 into ln_allocated_contribution  ,ln_admin_charges , ln_mortality_rate1 , ln_basic_contribution, ln_sum_covered
                from TK_ILLUSTRATIONDTL_MONTHLY_T
                where ORG_ID         = P_ORG_ID
                and  MAIN_PRODUCT_CODE    = P_MAIN_PRODUCT_CODE
                and SUB_PRODUCT_CODE   = P_SUB_PRODUCT_CODE
                AND DOCUMENT_NO=P_DOCUMENT_NO
                and DOCUMENT_YEAR=P_DOCUMENT_YEAR
                AND ISSUE_COUNT=P_ISSUE_COUNT
                and APPLICATION_ID= P_APPLICATION_ID
                AND ILLUSTRATION_ID=P_ILLUSTRATION_ID
                and policy_year=ln_policy_year
                and policy_month=ln_month
                AND BRANCH_ID=P_BRANCH_ID
                ;


                ln_bid_offer          := ln_allocated_contribution * ln_bid_rate;
                ln_inflation_adj_contribution := 0;
    --                       dbms_output.put_line('ln_bid_offer '||ln_bid_offer);
    --                       dbms_output.put_line('ln_allocated_contribution '||ln_allocated_contribution);
    --                       dbms_output.put_line('ln_bid_rate '||ln_bid_rate);

            if ln_ill_current_month < ln_max_policy_month then 
                ln_cashvalue1:=0;
                ln_cashvalue2:=0;
                ln_cashvalue3:=0;

                ln_inflation_adj_contribution := round(ln_basic_contribution / power( (1 + ln_inflation_factor) , (ln_iterator -1)/12  )   , 6);
                
            elsif ln_ill_current_month = ln_max_policy_month then 
                ln_cashvalue1:=get_policy_cashvalue_f (P_ORG_ID,lc_master_ref_no_policy,1,TRUNC (SYSDATE )) ;
                ln_cashvalue2:=ln_cashvalue1;
                ln_cashvalue3:=ln_cashvalue1;

                ln_inflation_adj_contribution := round(ln_basic_contribution / power( (1 + ln_inflation_factor) , (ln_iterator -1)/12  )   , 6);
            
            else 
                FOR CROW IN C1
                LOOP
                    if crow.row_number = 1 then

                          ln_sum_assured_at_risk1  := round(ln_sum_covered - ln_cashvalue1 - (ln_allocated_contribution *(1-ln_bid_rate) - ln_admin_charges),6);
                          if ln_sum_assured_at_risk1 <0 then
                                ln_sum_assured_at_risk1 :=0;
                          end if;
                          -- calculate admin charges for next policy year


                          ln_mortality_charges1  := round( ln_sum_assured_at_risk1 * (ln_mortality_rate1 /12) ,6);
                          ln_net_value          := round ( ln_cashvalue1 + ln_allocated_contribution - ln_admin_charges - ln_bid_offer - ln_mortality_charges1 ,6);
    --                      ln_investment_income1   := ( ( ln_net_value) * crow.rate/100 ) /12;
                          ln_investment_income1   :=  round( ln_net_value *  (round(power(1+crow.rate/100, 1/12) -1,8) ) ,6)  ;

                          ln_net_value          := ln_net_value +ln_investment_income1;
                          ln_im_charges1         := round((ln_net_value  * ln_imc_rate) / 12 ,6);

                          ln_cashvalue1          := round(ln_net_value - ln_im_charges1,6);

    --                       dbms_output.put_line('ln_mortality_charges1 '||ln_mortality_charges1);
    --                       dbms_output.put_line('ln_investment_income1 '||ln_investment_income1);
    --                       dbms_output.put_line('ln_im_charges1 '||ln_im_charges1);

                    elsif  crow.row_number = 2 then
                          ln_sum_assured_at_risk2  := round( ln_sum_covered - ln_cashvalue2 - (ln_allocated_contribution *(1-ln_bid_rate) - ln_admin_charges) ,6);
                          if ln_sum_assured_at_risk2 <0 then
                                ln_sum_assured_at_risk2 :=0;
                          end if;
                          -- calculate admin charges for next policy year
    --                      if ln_policy_year > 1 then
    --                            ln_sum_assured_at_risk2   := round( ln_sum_assured_at_risk2   * power((1+ ln_Indexation_sumassured_rate),ln_policy_year-1) ,6);
    --    --                        ln_sum_assured_at_risk2   := ln_sum_assured_at_risk2   + round ( ln_sum_assured_at_risk2 *   ln_Indexation_sumassured_rate ,2);
    --                      end if;


                          ln_mortality_charges2  := round( ln_sum_assured_at_risk2 * ln_mortality_rate1 /12 ,6) ;
                          ln_net_value          := round ( ln_cashvalue2 + ln_allocated_contribution - ln_admin_charges - ln_bid_offer - ln_mortality_charges2 ,6);
    --                      ln_investment_income2   :=  (( ln_net_value) * crow.rate/100) / 12;
                          ln_investment_income2   :=   round( ln_net_value *  (round(power(1+crow.rate/100, 1/12) -1,8) ) ,6)  ;
                          ln_net_value          := ln_net_value +ln_investment_income2;
                          ln_im_charges2         := round( (ln_net_value  * ln_imc_rate) / 12 ,6);

                          ln_cashvalue2          := round(ln_net_value - ln_im_charges2,6);

                          ln_inflation_adj_contribution := round(ln_basic_contribution / power( (1 + ln_inflation_factor) , (ln_iterator -1)/12  )   , 6);

                    elsif  crow.row_number = 3 then
                          ln_sum_assured_at_risk3  := round( ln_sum_covered - ln_cashvalue3 - (ln_allocated_contribution *(1-ln_bid_rate) - ln_admin_charges) ,6);
                          if ln_sum_assured_at_risk3 <0 then
                                ln_sum_assured_at_risk3 :=0;
                          end if;
                          -- calculate admin charges for next policy year
    --                      if ln_policy_year > 1 then
    --                            ln_sum_assured_at_risk3   := round( ln_sum_assured_at_risk3   * power((1+ ln_Indexation_sumassured_rate),ln_policy_year-1) ,6) ;
    --    --                        ln_sum_assured_at_risk3   := ln_sum_assured_at_risk3   + round ( ln_sum_assured_at_risk3 *   ln_Indexation_sumassured_rate ,2);
    --                      end if;


                          ln_mortality_charges3  := round( ln_sum_assured_at_risk3 * ln_mortality_rate1 /12 ,6);
                          ln_net_value          := round( ln_cashvalue3 + ln_allocated_contribution - ln_admin_charges - ln_bid_offer - ln_mortality_charges3 ,6);
    --                      ln_investment_income3   := ( ( ln_net_value) * crow.rate/100 ) / 12;
                          ln_investment_income3   :=   round( ln_net_value *  (round(power(1+crow.rate/100, 1/12) -1,8) ) ,6)  ;
                          ln_net_value          := ln_net_value +ln_investment_income3;
                          ln_im_charges3         :=round(  (ln_net_value  * ln_imc_rate) / 12 ,6);

                          ln_cashvalue3          := round(ln_net_value - ln_im_charges3,6);


                    end if;
                END LOOP;
            end if;

            ln_inflation_accumulated_cont := ln_inflation_accumulated_cont + ln_inflation_adj_contribution;

            update TK_ILLUSTRATIONDTL_MONTHLY_T
            set cash_value1 = ln_cashvalue1,
                cash_value2 = ln_cashvalue2,
                cash_value3 = ln_cashvalue3,
                bid_offer = ln_bid_offer,

                sum_assured_at_risk1 = ln_sum_assured_at_risk1,
                mortality_charges1 = ln_mortality_charges1,
                investment_income1 = ln_investment_income1,
                im_charges1 = ln_im_charges1,

                sum_assured_at_risk2 = ln_sum_assured_at_risk2,
                mortality_charges2 = ln_mortality_charges2,
                investment_income2 = ln_investment_income2,
                im_charges2 = ln_im_charges2,

                sum_assured_at_risk3 = ln_sum_assured_at_risk3,
                mortality_charges3 = ln_mortality_charges3,
                investment_income3 = ln_investment_income3,
                im_charges3 = ln_im_charges3 ,
                INFLATION_ADJ_CONTRIBUTION=ln_inflation_adj_contribution,
                INFLATION_ACCUMULATED_CONTRI= ln_inflation_accumulated_cont

            where ORG_ID         = P_ORG_ID
            and  MAIN_PRODUCT_CODE    = P_MAIN_PRODUCT_CODE
            and SUB_PRODUCT_CODE   = P_SUB_PRODUCT_CODE
            AND DOCUMENT_NO=P_DOCUMENT_NO
            and DOCUMENT_YEAR=P_DOCUMENT_YEAR
            AND ISSUE_COUNT=P_ISSUE_COUNT
            and APPLICATION_ID= P_APPLICATION_ID
            AND ILLUSTRATION_ID=P_ILLUSTRATION_ID
            and policy_year=ln_policy_year
            and policy_month=ln_month
            AND BRANCH_ID=P_BRANCH_ID
            ;

            Ln_month := Ln_month + 1;
            ln_iterator := ln_iterator +1;
            
            ln_ill_current_month := ln_ill_current_month +1;
        
        end loop;
        ln_policy_year:=ln_policy_year +1;

    end loop;

    commit;

    UPDATE_ILLUST_CV_MONTH_TOPUP_P(P_ORG_ID,
          P_BRANCH_ID,
           P_MAIN_PRODUCT_CODE,
           P_SUB_PRODUCT_CODE ,
           P_ISSUE_COUNT,
           P_DOCUMENT_NO,
           P_DOCUMENT_YEAR,
           P_APPLICATION_ID,
           P_ILLUSTRATION_ID,ln_imc_rate,ln_policy_term,ln_bid_rate,lc_master_ref_no_policy,ln_max_policy_month);


END;
/

prompt
prompt Creating procedure GENERATE_IL_DETAIL_MONTHLY_P
prompt ===============================================
prompt
CREATE OR REPLACE PROCEDURE GENERATE_IL_DETAIL_MONTHLY_P (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_policy_year                   NUMBER;

   ln_allocation_percentage         NUMBER;

   ln_allocation_bonus_percentage   NUMBER;

   ln_allocation_contribution       NUMBER;

   ln_mortality_rate1               NUMBER;

   ln_mortality_rate2               NUMBER;

   ln_mortality_em_rate1            NUMBER;

   ln_rating_class_percent          NUMBER;

   ln_loading_em_rate1              NUMBER;

   ln_loading_other_rate1           NUMBER;

   ln_age1                          NUMBER;

   ln_age2                          NUMBER;

   lc_gender1                       VARCHAR2 (1);

   lc_gender2                       VARCHAR2 (1);

   ln_effective_age_factor          NUMBER;

   ln_effective_age                 NUMBER;

   ln_basic_contribution            NUMBER;

   ln_invested_contribution         NUMBER;

   ln_policy_term                   NUMBER;

   ln_pay_term                      NUMBER;



   ln_sum_covered                   NUMBER;

   ln_sum_at_risk                   NUMBER;



   ln_mortality_charges             NUMBER;

   ln_reins_amount                  NUMBER;

   ln_ptf_surplus                   NUMBER;

   ln_waqala_charges                NUMBER;

   ln_contingency_margin            NUMBER;



   ln_admin_charges                 NUMBER;



   ln_admin_charges_monthly         NUMBER;



   allocation_month                 BOOLEAN := FALSE;



   ln_Indexation_admin_ch_rate      NUMBER;



   ln_Indexation_sumassured_rate    NUMBER;

   ln_Indexation_contribute_rate    NUMBER;

   ln_waqala_rate                   NUMBER;

   ln_contingency_margin_rate       NUMBER;

   ln_Investment_income_rate        NUMBER;

   ln_discount_rate_net             NUMBER;

   ln_expected_claim_rate           NUMBER;

   ln_new_age1                      NUMBER := 0;

   Ln_month                         NUMBER := 1;



   lc_is_joint_life                 VARCHAR2 (1) := 'N';

   LC_MODE                          VARCHAR2 (1);

   LC_BENEFIT_CODE                  NUMBER;

   LN_BASIC_CONTRIBUTION_MODAL      NUMBER;
   LN_BASIC_CONTRIBUTION_ORIGNAL      NUMBER;

   ln_surrender_charge_rate         NUMBER;
   lc_converted_proposal_no         VARCHAR2 (50);
   lc_converted_policy_no           VARCHAR2 (50);
   lc_master_ref_no_policy          VARCHAR2 (50) := 'N';
   lc_projection_tag                VARCHAR2 (1);
   ln_max_policy_month              NUMBER := 0;
   LN_ALTERATION_YEAR               NUMBER :=0;
   LC_ILLUSTRATION_REF_NO           VARCHAR2 (50);
   ld_illustration_date            DATE;
BEGIN
   -- initialize variables

   ln_policy_year := 1;

   ln_invested_contribution := 0;

   ln_ptf_surplus := 0;



   -- Get Main Plan ( basic benefit) code

   SELECT BENEFIT_CODE
     INTO LC_BENEFIT_CODE
     FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND MAPPING_TYPE = 'B';



   BEGIN
      -- get basic details from illustration header

      SELECT NVL (age1, 0),
             NVL (age2, 0),
             basic_contribution,
             SUM_COVERED,
             GENDER1,
             GENDER2,
             POLICY_TERM,
             PAYMENT_TERM,
             NVL (SUM_COVERED_INDEX, 0) SUM_COVERED_INDEX,
             NVL (CONTRIBUTION_INDEX, 0) CONTRIBUTION_INDEX,
             NVL (CONT_MARGIN, 0) CONT_MARGIN,
             NVL (WAQALA_FEE, 0) WAQALA_FEE,
             NVL (EXPECTED_CLAIM, 0) EXPECTED_CLAIM,
             NVL (INVESTMENT_INCOME, 0) INVESTMENT_INCOME,
             PAYMENT_MODE,
             BASIC_CONTRIBUTION_MODAL,
             NVL (PROJECTION_TAG, 'N'),
             DOC_REFERENCE_NO,
             TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE))
        INTO ln_age1,
             ln_age2,
             ln_basic_contribution,
             ln_SUM_COVERED,
             lc_gender1,
             lc_gender2,
             ln_POLICY_TERM,
             ln_pay_term,
             ln_Indexation_sumassured_rate,
             ln_Indexation_contribute_rate,
             ln_contingency_margin_rate,
             ln_waqala_rate,
             ln_expected_claim_rate,
             ln_Investment_income_rate,
             LC_MODE,
             LN_BASIC_CONTRIBUTION_MODAL,
             lc_projection_tag,
             LC_ILLUSTRATION_REF_NO,
             ld_illustration_date
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND DOCUMENT_NO = P_DOCUMENT_NO;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_SUM_COVERED := 0;
         lc_gender1 := 0;
         lc_gender2 := 0;
         ln_POLICY_TERM := 0;
         ln_Indexation_sumassured_rate := 0;

         ln_Indexation_contribute_rate := 0;
         ln_contingency_margin_rate := 0;
         ln_waqala_rate := 0;
         ln_expected_claim_rate := 0;
         ln_Investment_income_rate := 0;

         LN_BASIC_CONTRIBUTION_MODAL := 0;
         ld_illustration_date := TRUNC (SYSDATE);

   END;
    LN_BASIC_CONTRIBUTION_ORIGNAL  :=LN_BASIC_CONTRIBUTION_MODAL;

   BEGIN
      -- get admin charges for sub classes setup   Rate Type 21 is Policy Fee / admin ch

      SELECT NVL (RATE, 0)
        INTO ln_admin_charges
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 21
             AND POLICY_TERM = 1             
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_admin_charges := 0;
   END;



   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation

      SELECT NVL (RATE, 0)
        INTO ln_Indexation_admin_ch_rate
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 20
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_Indexation_admin_ch_rate := 0;
   END;


   -- get age factor to calculate effective age in case of joint life

   IF lc_is_joint_life = 'Y'
   THEN
      ln_new_age1 := ln_age1 - 3;
   END IF;

   IF ln_new_age1 > 0 AND lc_is_joint_life = 'Y'
   THEN
      SELECT VALUE
        INTO ln_effective_age_factor
        FROM TK_EFFECTIVE_AGE_CHART_T
       WHERE AGE_DIFFERENCE = ABS (ln_age1 - ln_new_age1);
   ELSE
      ln_effective_age_factor := 0;
   END IF;



   -- calculate effective age in case of joint life

   IF ln_age1 >= ln_new_age1 OR lc_is_joint_life = 'N'
   THEN
      ln_effective_age := ln_age1 - ln_effective_age_factor;
   ELSE
      ln_effective_age := ln_new_age1 - ln_effective_age_factor;
   END IF;



   -- delete existing data before generating fresh data

   DELETE FROM TK_ILLUSTRATIONDTL_MONTHLY_T
         WHERE     ORG_ID = P_ORG_ID
               AND BRANCH_ID = P_BRANCH_ID
               AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND ISSUE_COUNT = P_ISSUE_COUNT
               AND DOCUMENT_NO = P_DOCUMENT_NO
               AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND ILLUSTRATION_ID = P_ILLUSTRATION_ID;

   COMMIT;


   -- if policy already created and projection / alteration illustration is called
   IF lc_projection_tag = 'Y' OR lc_projection_tag = 'A'
   THEN
      BEGIN
         SELECT DISTINCT NVL (CONVERTED_DOC_NO, 'N')
           INTO lc_converted_proposal_no
           FROM TK_ILLUSTRATIONHD_POS
          WHERE     ORG_ID = P_ORG_ID
                AND BRANCH_ID = P_BRANCH_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND DOCUMENT_NO = P_DOCUMENT_NO
                AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND APPLICATION_ID = P_APPLICATION_ID
                AND CONVERTED_DOC_NO IS NOT NULL;
      EXCEPTION
         WHEN OTHERS
         THEN
            lc_converted_proposal_no := 'N';
      END;

      BEGIN
         -- check if any version of proposal is converted to policy then get policy number
         SELECT CONVERTED_POLICY_NO
           INTO lc_converted_policy_no
           FROM IL_DOC_HEADER_T DH
          WHERE     DH.ORG_ID = P_ORG_ID
                AND dh.record_type = 'O'
                AND CONVERTED_POLICY_NO IS NOT NULL
                AND document_type = 'Q'
                AND MASTER_REF_NO =
                       (SELECT DISTINCT master_ref_no
                          FROM il_doc_header_t
                         WHERE     document_type = 'Q'
                               AND DOC_REFERENCE_NO =
                                      lc_converted_proposal_no);

         -- Get master ref of policy if policy found
         SELECT DISTINCT master_ref_no
           INTO lc_master_ref_no_policy
           FROM il_doc_header_t
          WHERE     document_type = 'P'
                AND DOC_REFERENCE_NO = lc_converted_policy_no;
      EXCEPTION
         WHEN OTHERS
         THEN
            lc_master_ref_no_policy := 'N';
      END;

      IF lc_converted_policy_no <> 'N'
      THEN
         SELECT MAX (a.MONTH_NO)
           INTO ln_max_policy_month
           FROM    IL_DOC_HEADER_T DH
                INNER JOIN
                   IL_DOC_ALLOC_DTL_BREAKUP_T A
                ON (    dh.ORG_ID = A.ORG_ID
                    AND dh.BRANCH_ID = A.BRANCH_ID
                    AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                    AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                    AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                    AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                    AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                    AND dh.RECORD_TYPE = A.RECORD_TYPE
                    AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                    AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                    AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                    AND dh.APPLICATION_ID = A.APPLICATION_ID)
          WHERE     DH.ORG_ID = P_ORG_ID
                AND a.record_type = 'O'
                AND DH.DOC_REFERENCE_KEY IS NOT NULL
                AND DH.REVISED_TAG IS NULL
                AND A.ISSUE_COUNT = 1
                AND A.ENDORSEMENT_NO = 0
                AND A.ALLOCATION_TYPE = 1
                AND MASTER_REF_NO = lc_master_ref_no_policy;
                
            SELECT MIN (
                      CASE
                         WHEN ENDORSEMENT_NO = 0
                         THEN
                            0
                         ELSE
                            CEIL (
                                 MONTHS_BETWEEN (TRUNC (ALTERATION_DATE) + 1,
                                                 TRUNC (COMM_DATE))
                               / 12)
                      END)
              INTO LN_ALTERATION_YEAR
              FROM il_doc_header_t
             WHERE     master_ref_no = lc_master_ref_no_policy
                   AND document_type = 'P'
                   AND RECORD_TYPE = 'O'
                   AND ILLUSTRATION_REF_NO = LC_ILLUSTRATION_REF_NO;                
      ELSE
         ln_max_policy_month := 0;
         LN_ALTERATION_YEAR :=0;
      END IF;
   END IF;



   ln_effective_age := ln_effective_age - 1;

   --    dbms_output.put_line('effective age :'||to_char(ln_effective_age));
   --   5,14,1,7,2023,3,13,001872
   BEGIN
      SELECT DISTINCT NVL (RTL.LOADING_PERCENT, 0)
        INTO ln_rating_class_percent
        FROM TK_ILLUSTRATIONHD_POS ILL,
             il_doc_header_t DH,
             TK_ILL_DOC_LOADING LD,
             IL_SUB_PRODUCT_RTC_LOADING_T RTL
       WHERE        ILL.ORG_ID
                 || ','
                 || ILL.BRANCH_ID
                 || ','
                 || ILL.MAIN_PRODUCT_CODE
                 || ','
                 || ILL.SUB_PRODUCT_CODE
                 || ','
                 || ILL.DOCUMENT_YEAR
                 || ','
                 || ILL.ISSUE_COUNT
                 || ','
                 || ILL.APPLICATION_ID
                 || ','
                 || ILL.DOCUMENT_NO =
                    CASE
                       WHEN dh.endorsement_no > 0
                       THEN
                          dh.ILLUSTRATION_REF_NO_KEY
                       ELSE
                          DH.BASE_DOC_NO_KEY
                    END
             AND dh.ORG_ID = LD.ORG_ID
             AND dh.BRANCH_ID = LD.BRANCH_ID
             AND dh.MAIN_PRODUCT_CODE = LD.MAIN_PRODUCT_CODE
             AND dh.SUB_PRODUCT_CODE = LD.SUB_PRODUCT_CODE
             AND dh.TAKAFUL_TYPE = LD.TAKAFUL_TYPE
             AND dh.DOCUMENT_TYPE = LD.DOCUMENT_TYPE
             AND dh.DOCUMENT_NO = LD.DOCUMENT_NO
             AND dh.RECORD_TYPE = LD.RECORD_TYPE
             AND dh.DOCUMENT_YEAR = LD.DOCUMENT_YEAR
             AND dh.ISSUE_COUNT = LD.ISSUE_COUNT
             AND dh.ENDORSEMENT_NO = LD.ENDORSEMENT_NO
             AND dh.APPLICATION_ID = LD.APPLICATION_ID
             AND LD.LOADING_TYPE = 'RT'
             AND ld.BENEFIT_CODE = LC_BENEFIT_CODE
             AND RTL.ORG_ID = LD.ORG_ID
             AND RTL.MAIN_PRODUCT_CODE = LD.MAIN_PRODUCT_CODE
             AND RTL.SUB_PRODUCT_CODE = LD.SUB_PRODUCT_CODE
             AND RTL.RATING_CLASS_CODE = LD.LOADING_CODE
             AND ILL.ORG_ID = P_ORG_ID
             AND ILL.BRANCH_ID = P_BRANCH_ID
             AND ILL.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND ILL.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ILL.DOCUMENT_NO = P_DOCUMENT_NO
             AND ILL.DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND ILL.APPLICATION_ID = P_APPLICATION_ID
             AND ILL.CONVERTED_DOC_NO IS NOT NULL;
   --             AND ILL.ISSUE_COUNT = P_ISSUE_COUNT;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_rating_class_percent := 0;
   END;

   BEGIN
      SELECT NVL (SUM (NVL (LOADING_VALUE, 0)), 0)
        INTO ln_loading_other_rate1
        FROM (SELECT DISTINCT
                     LD.LOADING_TYPE, NVL (ld.LOADING_VALUE, 0) LOADING_VALUE
                FROM TK_ILLUSTRATIONHD_POS ILL,
                     il_doc_header_t DH,
                     TK_ILL_DOC_LOADING LD
               WHERE        ILL.ORG_ID
                         || ','
                         || ILL.BRANCH_ID
                         || ','
                         || ILL.MAIN_PRODUCT_CODE
                         || ','
                         || ILL.SUB_PRODUCT_CODE
                         || ','
                         || ILL.DOCUMENT_YEAR
                         || ','
                         || ILL.ISSUE_COUNT
                         || ','
                         || ILL.APPLICATION_ID
                         || ','
                         || ILL.DOCUMENT_NO =
                            CASE
                               WHEN dh.endorsement_no > 0
                               THEN
                                  dh.ILLUSTRATION_REF_NO_KEY
                               ELSE
                                  DH.BASE_DOC_NO_KEY
                            END
                     AND dh.ORG_ID = LD.ORG_ID
                     AND dh.BRANCH_ID = LD.BRANCH_ID
                     AND dh.MAIN_PRODUCT_CODE = LD.MAIN_PRODUCT_CODE
                     AND dh.SUB_PRODUCT_CODE = LD.SUB_PRODUCT_CODE
                     AND dh.TAKAFUL_TYPE = LD.TAKAFUL_TYPE
                     AND dh.DOCUMENT_TYPE = LD.DOCUMENT_TYPE
                     AND dh.DOCUMENT_NO = LD.DOCUMENT_NO
                     AND dh.RECORD_TYPE = LD.RECORD_TYPE
                     AND dh.DOCUMENT_YEAR = LD.DOCUMENT_YEAR
                     AND dh.ISSUE_COUNT = LD.ISSUE_COUNT
                     AND dh.ENDORSEMENT_NO = LD.ENDORSEMENT_NO
                     AND dh.APPLICATION_ID = LD.APPLICATION_ID
                     AND LD.LOADING_TYPE <> 'RT'
                     AND ld.BENEFIT_CODE = LC_BENEFIT_CODE
                     AND ILL.ORG_ID = P_ORG_ID
                     AND ILL.BRANCH_ID = P_BRANCH_ID
                     AND ILL.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                     AND ILL.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                     AND ILL.DOCUMENT_NO = P_DOCUMENT_NO
                     AND ILL.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                     AND ILL.APPLICATION_ID = P_APPLICATION_ID
                     AND ILL.CONVERTED_DOC_NO IS NOT NULL);

      --           AND ILL.ISSUE_COUNT = P_ISSUE_COUNT);

      ln_loading_other_rate1 := ln_loading_other_rate1 / 1000;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_loading_other_rate1 := 0;
   END;

   WHILE ln_policy_year <= ln_POLICY_TERM
   LOOP
      IF Ln_month > 12
      THEN
         Ln_month := 1;
      END IF;


      -- get allocation percentage
      BEGIN
         SELECT RATE
           INTO ln_allocation_percentage
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 1
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_allocation_percentage := 0;
      END;

      -- get bonus allocation %age

      BEGIN
         SELECT RATE
           INTO ln_allocation_bonus_percentage
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 2
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_allocation_bonus_percentage := 0;
      END;



      ln_allocation_percentage :=
         ln_allocation_percentage + ln_allocation_bonus_percentage;

      -- get surrender charges rate

      BEGIN
         SELECT RATE
           INTO ln_surrender_charge_rate
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 16
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_surrender_charge_rate := 0;
      END;


      --        ln_mortality_rate1

      BEGIN
         --   select m_rate into ln_mortality_rate1 from tk_mortality_rate_t where m_age=ln_effective_age +ln_policy_year and m_year=(ln_effective_age +1 -17) ;

         SELECT M_RATE, NVL (EM_RATE, 0)
           INTO ln_mortality_rate1, ln_mortality_em_rate1
           FROM GLAS_SUB_PROD_MORT_RT_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND M_YEAR = 1
                AND M_age = ln_effective_age + ln_policy_year
                AND GENDER = lc_gender1;
      --            dbms_output.put_line('mortality rate 1 success:'||ln_mortality_rate1);

      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate1 := 0;
            ln_mortality_em_rate1 := 0;
      END;

      IF ln_rating_class_percent > 0 AND ln_mortality_em_rate1 > 0
      THEN
         ln_loading_em_rate1 :=
            ln_mortality_em_rate1 * ln_rating_class_percent / 100;
      ELSE
         ln_loading_em_rate1 := 0;
      END IF;


      BEGIN
         -- get year wise discount for Rate Type 28

         SELECT NVL (RATE, 0)
           INTO ln_discount_rate_net
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 28
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_discount_rate_net := 0;
      END;



      IF ln_discount_rate_net > 0
      THEN
         ln_mortality_rate1 :=
            ln_mortality_rate1 - ln_discount_rate_net * ln_mortality_rate1;
      END IF;

      -- add rating class loading rate and other loading rates in mortality rate

      ln_mortality_rate1 :=
         ln_mortality_rate1 + ln_loading_em_rate1 + ln_loading_other_rate1;

      --        ln_mortality_rate2

      BEGIN
         --            select m_rate into ln_mortality_rate2 from tk_mortality_rate_t where m_age=ln_age2+ ln_policy_year and m_year= (ln_age2  -17);

         SELECT M_RATE
           INTO ln_mortality_rate2
           FROM GLAS_SUB_PROD_MORT_RT_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND M_YEAR = 1
                AND m_age = ln_age2 + ln_policy_year
                AND GENDER = lc_gender2;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate2 := 0;
      END;
    --if monthly process run for current month then take contribution from there.
    IF (ln_policy_year - 1) * 12 + Ln_month <= ln_max_policy_month
    THEN
       BEGIN
          SELECT CONTRIBUTION_PAID_AMT
            INTO LN_BASIC_CONTRIBUTION_MODAL
            FROM    IL_DOC_HEADER_T DH
                 INNER JOIN
                    IL_DOC_ALLOCATIONDTL_T A
                 ON (    dh.ORG_ID = A.ORG_ID
                     AND dh.BRANCH_ID = A.BRANCH_ID
                     AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                     AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                     AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                     AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                     AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                     AND dh.RECORD_TYPE = A.RECORD_TYPE
                     AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                     AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                     AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                     AND dh.APPLICATION_ID = A.APPLICATION_ID)
           WHERE     DH.ORG_ID = P_ORG_ID
                 AND a.record_type = 'O'
                 AND DH.DOC_REFERENCE_KEY IS NOT NULL
                 AND DH.REVISED_TAG IS NULL
                 AND A.TRANSACTION_TYPE = 1
                 AND A.ISSUE_COUNT = 1
                 AND A.ENDORSEMENT_NO = 0
                 AND A.ALLOCATION_TYPE = 1
                 AND A.MONTH_NO =
                        (ln_policy_year - 1) * 12 + Ln_month
                 AND MASTER_REF_NO = lc_master_ref_no_policy;
       EXCEPTION
          WHEN OTHERS
          THEN
             LN_BASIC_CONTRIBUTION_MODAL := LN_BASIC_CONTRIBUTION_MODAL;
       END;
    elsIF (ln_policy_year - 1) * 12 + Ln_month = ln_max_policy_month + 1 then   
             LN_BASIC_CONTRIBUTION_MODAL := LN_BASIC_CONTRIBUTION_ORIGNAL;
    end if;

      -- apply indexation after policy first year 
      IF ln_policy_year > 1 
      THEN
         -- admin indxation
         ln_admin_charges :=
              ln_admin_charges
            + ROUND (ln_admin_charges * ln_Indexation_admin_ch_rate, 6);

         -- SA indxation
         ln_SUM_COVERED :=
            ln_SUM_COVERED + (ln_SUM_COVERED * ln_Indexation_sumassured_rate);

         -- contribution indxation if payterm not passed and current month is after policy current month
         IF ln_policy_year <= ln_pay_term
         THEN
            IF (ln_policy_year - 1) * 12 + Ln_month <= ln_max_policy_month
            THEN
               BEGIN
                     LN_BASIC_CONTRIBUTION_MODAL := LN_BASIC_CONTRIBUTION_MODAL;
               END;

            ELSIF ln_policy_year > LN_ALTERATION_YEAR  THEN 
               LN_BASIC_CONTRIBUTION_MODAL :=
                    LN_BASIC_CONTRIBUTION_MODAL
                  + (  LN_BASIC_CONTRIBUTION_MODAL
                     * ln_Indexation_contribute_rate);
            END IF;
         ELSE
            LN_BASIC_CONTRIBUTION_MODAL := 0;
         END IF;
      END IF;



      ln_admin_charges_monthly := ROUND (ln_admin_charges / 12, 6);

      WHILE Ln_month <= 12
      LOOP
         IF lc_mode = 'A' AND ln_month = 1
         THEN
            allocation_month := TRUE;
         ELSIF lc_mode = 'H' AND ln_month IN (1, 7)
         THEN
            allocation_month := TRUE;
         ELSIF lc_mode = 'Q' AND ln_month IN (1, 4, 7, 10)
         THEN
            allocation_month := TRUE;
         ELSIF lc_mode = 'M'
         THEN
            allocation_month := TRUE;
         ELSE
            allocation_month := FALSE;
         END IF;



         -- if allocation month is true then add allocation

         IF allocation_month
         THEN
            ln_invested_contribution :=
               ln_invested_contribution + LN_BASIC_CONTRIBUTION_MODAL;

            ln_allocation_contribution :=
               ROUND (LN_BASIC_CONTRIBUTION_MODAL * ln_allocation_percentage,
                      6);

            ln_basic_contribution := LN_BASIC_CONTRIBUTION_MODAL;
         ELSE
            ln_allocation_contribution := 0;

            ln_basic_contribution := 0;
         END IF;



         --          ln_sum_at_risk             := ln_sum_covered + ln_ptf_surplus;

         --        ln_mortality_charges       := round( ln_sum_at_risk * (ln_mortality_rate1+ln_mortality_rate2)  ,2);

         --         ln_waqala_charges          := round( ln_mortality_charges * ln_waqala_rate ,2);

         --       ln_contingency_margin      := round( ln_mortality_charges * ln_contingency_margin_rate ,2);

         --   ln_reins_amount            := round( ln_mortality_charges - ln_waqala_charges - ln_contingency_margin ,2);



         --       ln_ptf_surplus             := round( (ln_reins_amount +ln_contingency_margin)  * ln_Investment_income_rate  ,2)+

         --                                   round(ln_reins_amount * (1- ln_expected_claim_rate),2);



         INSERT INTO TK_ILLUSTRATIONDTL_MONTHLY_T (ORG_ID,
                                                   BRANCH_ID,
                                                   MAIN_PRODUCT_CODE,
                                                   SUB_PRODUCT_CODE,
                                                   ISSUE_COUNT,
                                                   DOCUMENT_NO,
                                                   DOCUMENT_YEAR,
                                                   APPLICATION_ID,
                                                   ILLUSTRATION_ID,
                                                   EFFECTIVE_AGE,
                                                   POLICY_YEAR,
                                                   POLICY_MONTH,
                                                   BASIC_CONTRIBUTION,
                                                   INVESTED_CONTRIBUTION,
                                                   ALLOCATION_PERCENTAGE,
                                                   ALLOCATION_CONTRIBUTION,
                                                   MORTALITY_RATE1,
                                                   MORTALITY_RATE2,
                                                   SUM_ASSURED,
                                                   SUM_ASSURED_AT_RISK,
                                                   MORTALITY_CHARGES,
                                                   PTF_SURPLUS,
                                                   WAQALA_CHARGES,
                                                   CONTINGENCY_MARGIN,
                                                   REINS_AMOUNT,
                                                   ADMIN_CHARGES,
                                                   SURRENDER_CHARGE_RATE)
              VALUES (P_ORG_ID,
                      P_BRANCH_ID,
                      P_MAIN_PRODUCT_CODE,
                      P_SUB_PRODUCT_CODE,
                      P_ISSUE_COUNT,
                      P_DOCUMENT_NO,
                      P_DOCUMENT_YEAR,
                      P_APPLICATION_ID,
                      P_ILLUSTRATION_ID,
                      ln_effective_age + ln_policy_year,
                      ln_policy_year,
                      Ln_month,
                      ln_basic_contribution,
                      ln_invested_contribution,
                      ln_allocation_percentage,
                      ln_allocation_contribution,
                      ln_mortality_rate1,
                      ln_mortality_rate2,
                      ln_SUM_COVERED,
                      ln_sum_at_risk,
                      ln_mortality_charges,
                      ln_ptf_surplus,
                      ln_waqala_charges,
                      ln_contingency_margin,
                      ln_reins_amount,
                      ln_admin_charges_monthly,
                      ln_surrender_charge_rate);



         Ln_month := Ln_month + 1;
      END LOOP;



      -- increment the counter

      ln_policy_year := ln_policy_year + 1;
   END LOOP;

   COMMIT;

   UPDATE_ILLUST_CV_MONTHLY_P (P_ORG_ID,
                               P_BRANCH_ID,
                               P_MAIN_PRODUCT_CODE,
                               P_SUB_PRODUCT_CODE,
                               P_ISSUE_COUNT,
                               P_DOCUMENT_NO,
                               P_DOCUMENT_YEAR,
                               P_APPLICATION_ID,
                               P_ILLUSTRATION_ID);
END;
/

prompt
prompt Creating procedure UPDATE_ILLUST_CASHVALUE_POS_P
prompt ================================================
prompt
CREATE OR REPLACE PROCEDURE UPDATE_ILLUST_CASHVALUE_POS_P (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_policy_year                  NUMBER;
   ln_policy_term                  NUMBER;
   ln_sum_covered                  NUMBER;
   ln_dtl_sum_covered              NUMBER;
   ln_admin_charges                NUMBER;
   ln_allocated_contribution       NUMBER;
   ln_Indexation_sumassured_rate   NUMBER;
   ln_mortality_rate1              NUMBER;

   ln_bid_rate                     NUMBER;
   ln_bid_offer                    NUMBER;
   ln_imc_rate                     NUMBER;

   ln_net_value                    NUMBER;
   ln_cashvalue1                   NUMBER;
   ln_cashvalue2                   NUMBER;
   ln_cashvalue3                   NUMBER;

   ln_sum_assured_at_risk1         NUMBER;
   ln_mortality_charges1           NUMBER;
   ln_investment_income1           NUMBER;
   ln_im_charges1                  NUMBER;
   ln_mortality_charges1_running_total              NUMBER;

   ln_sum_assured_at_risk2         NUMBER;
   ln_mortality_charges2           NUMBER;
   ln_investment_income2           NUMBER;
   ln_im_charges2                  NUMBER;

   ln_sum_assured_at_risk3         NUMBER;
   ln_mortality_charges3           NUMBER;
   ln_investment_income3           NUMBER;
   ln_im_charges3                  NUMBER;

   ln_benefit_code                 NUMBER;

   ln_SURRENDER_VALUE              NUMBER;
   ln_SV_RATE_OF_BONUS             NUMBER;
   ln_bonus_charges_rate           NUMBER;

   ln_BONUS_RATE                   NUMBER;
   ln_BONUS_RATE1                  NUMBER;
   ln_BONUS_SV1                    NUMBER;
   ln_BONUS_AMOUNT1                NUMBER;

   ln_BONUS_RATE2                  NUMBER;
   ln_BONUS_SV2                    NUMBER;
   ln_BONUS_AMOUNT2                NUMBER;

   ln_BONUS_RATE3                  NUMBER;
   ln_BONUS_SV3                    NUMBER;
   ln_BONUS_AMOUNT3                NUMBER;

   ln_SV_PAYABLE1                  NUMBER;
   ln_DEATH_BENEFIT1               NUMBER;

   ln_SV_PAYABLE2                  NUMBER;
   ln_DEATH_BENEFIT2               NUMBER;

   ln_SV_PAYABLE3                  NUMBER;
   ln_DEATH_BENEFIT3               NUMBER;

   ln_inflation_adj_contribution   NUMBER;
   ln_inflation_accumulated_cont   NUMBER;
   ln_iterator                     NUMBER := 1;
   ln_basic_contribution           NUMBER;

   ln_inflation_rate2              NUMBER;
   ln_inflation_factor             NUMBER;
   ld_illustration_date            DATE;
   ln_product_type                 number;

   CURSOR C1
   IS
      SELECT ROWNUM ROW_NUMBER, RATE
        FROM (WITH illustration_data
                   AS (SELECT TRUNC (
                                 NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE))
                                 illustration_date
                         FROM TK_ILLUSTRATIONHD_POS
                        WHERE     ORG_ID = P_ORG_ID
                              AND BRANCH_ID = P_BRANCH_ID
                              AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                              AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                              AND ISSUE_COUNT = P_ISSUE_COUNT
                              AND DOCUMENT_NO = P_DOCUMENT_NO
                              AND DOCUMENT_YEAR = P_DOCUMENT_YEAR)
                SELECT RATE
                  FROM TK_NOMINAL_RATE_SETUP_T, illustration_data idd
                 WHERE     ORG_ID = P_ORG_ID
                       AND idd.illustration_date BETWEEN TRUNC (
                                                            EFFECTIVE_START_DATE)
                                                     AND TRUNC (
                                                            NVL (
                                                               EFFECTIVE_END_DATE,
                                                               SYSDATE))
              ORDER BY RATE);
BEGIN
   SELECT policy_term,
          bid_offer,
          SUM_COVERED_MODAL,
          NVL (SUM_COVERED_INDEX, 0),
          TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE))
     INTO ln_policy_term,
          ln_bid_rate,
          ln_sum_covered,
          ln_Indexation_sumassured_rate,
          ld_illustration_date
     FROM TK_ILLUSTRATIONHD_POS
    WHERE     ORG_ID = P_ORG_ID
          AND BRANCH_ID = P_BRANCH_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND ISSUE_COUNT = P_ISSUE_COUNT
          AND DOCUMENT_NO = P_DOCUMENT_NO
          AND DOCUMENT_YEAR = P_DOCUMENT_YEAR;

    SELECT 
       PRODUCT_TYPE_IL into ln_product_type 
    FROM GLAS_SUB_PRODUCT_SETUP_T 
    WHERE     ORG_ID = P_ORG_ID
      AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
      AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
 ;
   SELECT RATE
     INTO ln_inflation_rate2
     FROM (SELECT ROWNUM RATE_ID, a.RATE
             FROM (  SELECT RATE
                       FROM TK_INFLATION_RATE_SETUP_T
                      WHERE     ORG_ID = P_ORG_ID
                            AND ld_illustration_date BETWEEN TRUNC (
                                                                EFFECTIVE_START_DATE)
                                                         AND TRUNC (
                                                                NVL (
                                                                   EFFECTIVE_END_DATE,
                                                                   SYSDATE))
                   ORDER BY RATE) a) TAB
    WHERE RATE_ID = 2;

   ln_inflation_factor := ln_inflation_rate2 / 100;

   ln_cashvalue1 := 0;
   ln_cashvalue2 := 0;
   ln_cashvalue3 := 0;


   -- Get Main Plan ( basic benefit) code
   SELECT BENEFIT_CODE
     INTO LN_BENEFIT_CODE
     FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND MAPPING_TYPE = 'B';


   -- get IMC rate from sub classes setup   Rate Type 22 is IMC PIF
   SELECT RATE
     INTO ln_imc_rate
     FROM ILAS_SUB_PROD_RATES_SETUP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND BENEFIT_CODE = LN_BENEFIT_CODE
          AND RATE_TYPE_ID = 22
          AND POLICY_TERM = 1
          AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
         ;

   ln_policy_year := 1;
   ln_mortality_charges1_running_total :=0;

   WHILE ln_policy_year <= ln_policy_term
   LOOP
      -- select nvl(ALLOCATION_CONTRIBUTION,0) - nvl(MORTALITY_CHARGES,0) - nvl(ADMIN_CHARGES ,0) , nvl(PTF_SURPLUS,0) into ln_net_value,ln_ptf_surplus
      SELECT NVL (ALLOCATION_CONTRIBUTION, 0),
             NVL (ADMIN_CHARGES, 0),
             NVL (mortality_rate1, 0),
             NVL (SURRENDER_VALUE, 0),
             NVL (SV_RATE_OF_BONUS, 0),
             NVL (BASIC_CONTRIBUTION, 0),
             NVL (SUM_ASSURED, 0)
        INTO ln_allocated_contribution,
             ln_admin_charges,
             ln_mortality_rate1,
             ln_SURRENDER_VALUE,
             ln_SV_RATE_OF_BONUS,
             ln_basic_contribution,
             ln_dtl_sum_covered
        FROM TK_ILLUSTRATIONDTL_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND ILLUSTRATION_ID = P_ILLUSTRATION_ID
             AND policy_year = ln_policy_year;

          BEGIN
             SELECT RATE
               INTO ln_bonus_charges_rate
               FROM ILAS_SUB_PROD_RATES_SETUP_T
              WHERE     ORG_ID = P_ORG_ID
                    AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                    AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                    AND BENEFIT_CODE = ln_benefit_code
                    AND RATE_TYPE_ID = 17
                    AND POLICY_TERM = ln_policy_year
                    AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                    ;
          EXCEPTION
             WHEN OTHERS
             THEN
                ln_bonus_charges_rate := 0;
          END;

      ln_bid_offer := ln_allocated_contribution * ln_bid_rate;
      ln_inflation_adj_contribution := 0;

      DBMS_OUTPUT.put_line ('ln_bid_offer ' || ln_bid_offer);
      DBMS_OUTPUT.put_line (
         'ln_allocated_contribution ' || ln_allocated_contribution);
      DBMS_OUTPUT.put_line ('ln_bid_rate ' || ln_bid_rate);
      
      FOR CROW IN C1
      LOOP
         -- GET BONUS RATE FROM RATING TABLE FOR SELECTED PROFIT RATE
         BEGIN
            SELECT RTD.RATE
              INTO ln_BONUS_RATE
              FROM IL_RATING_TABLE_HD_T RTH
                   INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                      ON (    RTH.ORG_ID = RTB.ORG_ID
                          AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                          AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                          AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                   INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                      ON (    RTB.ORG_ID = RTD.ORG_ID
                          AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                          AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                          AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                          AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
             WHERE     RTH.ORG_ID = P_ORG_ID
                   AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                   AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                   AND RTH.HD_RATE_ID = 6
                       and RTB.BENEFIT_CODE = LN_BENEFIT_CODE 
                   AND crow.rate >= RTB.VAL_FROM
                   AND crow.rate <= RTB.VAL_TO
                   AND ld_illustration_date BETWEEN TRUNC (
                                                       RTB.EFFECTIVE_FROM)
                                                AND TRUNC (
                                                       NVL (RTB.EFFECTIVE_TO,
                                                            SYSDATE))
                   AND RTD.TERM = ln_policy_term
                   AND RTD.POLICY_YEAR = ln_policy_year;
         EXCEPTION
            WHEN OTHERS
            THEN
            DBMS_OUTPUT.put_line (
               'error in bonus rates query' || sqlerrm);
               ln_BONUS_RATE := 0;
         END;

         IF crow.ROW_NUMBER = 1
         THEN
            ln_sum_assured_at_risk1 :=
                 ln_sum_covered
               - ln_cashvalue1
               - ln_allocated_contribution * (1 - ln_bid_rate);
            -- for GBA mortality is calculated on fixed sum covered
            ln_sum_assured_at_risk1 := ln_dtl_sum_covered;

            IF ln_sum_assured_at_risk1 < 0
            THEN
               ln_sum_assured_at_risk1 := 0;
            END IF;

            -- calculate admin charges for next policy year
            IF ln_policy_year > 1
            THEN
               ln_sum_assured_at_risk1 :=
                    ln_sum_assured_at_risk1
                  * POWER ( (1 + ln_Indexation_sumassured_rate),
                           ln_policy_year - 1);
            --                        ln_sum_assured_at_risk1   := ln_sum_assured_at_risk1   + round ( ln_sum_assured_at_risk1 *   ln_Indexation_sumassured_rate ,2);
            END IF;


            ln_mortality_charges1 :=
               ROUND (ln_sum_assured_at_risk1 * ln_mortality_rate1, 2);
            ln_net_value :=
                 ln_cashvalue1
               + ln_allocated_contribution
               - ln_admin_charges
               - ln_bid_offer
               - ln_mortality_charges1;
            ln_investment_income1 := (ln_net_value) * crow.rate / 100;
            ln_net_value := ln_net_value + ln_investment_income1;
            ln_im_charges1 := ln_net_value * ln_imc_rate;

            ln_cashvalue1 := ROUND (ln_net_value - ln_im_charges1, 2);


            DBMS_OUTPUT.put_line (
               'ln_mortality_charges1 ' || ln_mortality_charges1);
            DBMS_OUTPUT.put_line (
               'ln_investment_income1 ' || ln_investment_income1);
            DBMS_OUTPUT.put_line ('ln_im_charges1 ' || ln_im_charges1);

            -- BONUS WORKING
            ln_BONUS_RATE1 := ln_BONUS_RATE;

            ln_BONUS_SV1 :=
               ln_BONUS_RATE1 * (ln_sum_covered / 1000) * ln_SV_RATE_OF_BONUS;
            ln_BONUS_AMOUNT1 := ln_BONUS_RATE1 * ln_sum_covered / 1000;

            -- update surrnder value 
            ln_mortality_charges1_running_total := NVL(ln_mortality_charges1_running_total,0) + NVL(ln_mortality_charges1,0);  

            IF ln_product_type =1 THEN 
                ln_SURRENDER_VALUE := ln_SURRENDER_VALUE * NVL(ln_mortality_charges1_running_total,0);
            END IF;     

            ln_SURRENDER_VALUE := CASE WHEN ln_SURRENDER_VALUE > ln_sum_covered THEN ln_sum_covered ELSE ln_SURRENDER_VALUE END;
            
            ln_SV_PAYABLE1 := ln_SURRENDER_VALUE + ln_BONUS_SV1 * (1-ln_bonus_charges_rate);
            ln_DEATH_BENEFIT1 := ln_sum_covered + ln_BONUS_AMOUNT1 ;

            if ln_policy_year = ln_policy_term and ln_SURRENDER_VALUE=0 then 
                ln_SV_PAYABLE1 := ln_SV_PAYABLE1  + ln_sum_covered;                    
            end if;
            
         ELSIF crow.ROW_NUMBER = 2
         THEN
            ln_sum_assured_at_risk2 :=
                 ln_sum_covered
               - ln_cashvalue2
               - ln_allocated_contribution * (1 - ln_bid_rate);
            -- for GBA mortality is calculated on fixed sum covered
            ln_sum_assured_at_risk2 := ln_dtl_sum_covered;

            IF ln_sum_assured_at_risk2 < 0
            THEN
               ln_sum_assured_at_risk2 := 0;
            END IF;

            -- calculate admin charges for next policy year
            IF ln_policy_year > 1
            THEN
               ln_sum_assured_at_risk2 :=
                    ln_sum_assured_at_risk2
                  * POWER ( (1 + ln_Indexation_sumassured_rate),
                           ln_policy_year - 1);
            --                        ln_sum_assured_at_risk2   := ln_sum_assured_at_risk2   + round ( ln_sum_assured_at_risk2 *   ln_Indexation_sumassured_rate ,2);
            END IF;


            ln_mortality_charges2 :=
               ROUND (ln_sum_assured_at_risk2 * ln_mortality_rate1, 2);
            ln_net_value :=
                 ln_cashvalue2
               + ln_allocated_contribution
               - ln_admin_charges
               - ln_bid_offer
               - ln_mortality_charges2;
            ln_investment_income2 := (ln_net_value) * crow.rate / 100;
            ln_net_value := ln_net_value + ln_investment_income2;
            ln_im_charges2 := ln_net_value * ln_imc_rate;

            ln_cashvalue2 := ROUND (ln_net_value - ln_im_charges2, 2);
            -- BONUS WORKING
            ln_BONUS_RATE2 := ln_BONUS_RATE;

            ln_BONUS_SV2 :=
               ln_BONUS_RATE2 * (ln_sum_covered / 1000) * ln_SV_RATE_OF_BONUS;
            ln_BONUS_AMOUNT2 := ln_BONUS_RATE2 * ln_sum_covered / 1000;

            ln_SV_PAYABLE2 := ln_SURRENDER_VALUE + ln_BONUS_SV2 * (1-ln_bonus_charges_rate);
            ln_DEATH_BENEFIT2 := ln_sum_covered + ln_BONUS_AMOUNT2;

            if ln_policy_year = ln_policy_term and ln_SURRENDER_VALUE=0 then 
                ln_SV_PAYABLE2 := ln_SV_PAYABLE2  + ln_sum_covered;                    
            end if;

            ln_inflation_adj_contribution :=
               ROUND (
                    ln_basic_contribution
                  / POWER ( (1 + ln_inflation_factor), (ln_iterator - 1)),
                  6);
         ELSIF crow.ROW_NUMBER = 3
         THEN
            ln_sum_assured_at_risk3 :=
                 ln_sum_covered
               - ln_cashvalue3
               - ln_allocated_contribution * (1 - ln_bid_rate);
            -- for GBA mortality is calculated on fixed sum covered
            ln_sum_assured_at_risk3 := ln_dtl_sum_covered;

            IF ln_sum_assured_at_risk3 < 0
            THEN
               ln_sum_assured_at_risk3 := 0;
            END IF;

            -- calculate admin charges for next policy year
            IF ln_policy_year > 1
            THEN
               ln_sum_assured_at_risk3 :=
                    ln_sum_assured_at_risk3
                  * POWER ( (1 + ln_Indexation_sumassured_rate),
                           ln_policy_year - 1);
            --                        ln_sum_assured_at_risk3   := ln_sum_assured_at_risk3   + round ( ln_sum_assured_at_risk3 *   ln_Indexation_sumassured_rate ,2);
            END IF;


            ln_mortality_charges3 :=
               ROUND (ln_sum_assured_at_risk3 * ln_mortality_rate1, 2);
            ln_net_value :=
                 ln_cashvalue3
               + ln_allocated_contribution
               - ln_admin_charges
               - ln_bid_offer
               - ln_mortality_charges3;
            ln_investment_income3 := (ln_net_value) * crow.rate / 100;
            ln_net_value := ln_net_value + ln_investment_income3;
            ln_im_charges3 := ln_net_value * ln_imc_rate;

            ln_cashvalue3 := ROUND (ln_net_value - ln_im_charges3, 2);

            -- BONUS WORKING
            ln_BONUS_RATE3 := ln_BONUS_RATE;

            ln_BONUS_SV3 :=
               ln_BONUS_RATE3 * (ln_sum_covered / 1000) * ln_SV_RATE_OF_BONUS;
            ln_BONUS_AMOUNT3 := ln_BONUS_RATE3 * ln_sum_covered / 1000;

            ln_SV_PAYABLE3 := ln_SURRENDER_VALUE + ln_BONUS_SV3* (1-ln_bonus_charges_rate);
            ln_DEATH_BENEFIT3 := ln_sum_covered + ln_BONUS_AMOUNT3;

            if ln_policy_year = ln_policy_term and ln_SURRENDER_VALUE=0 then 
                ln_SV_PAYABLE3 := ln_SV_PAYABLE3  + ln_sum_covered;                    
            end if;


         END IF;
      END LOOP;

        ln_inflation_accumulated_cont :=
         ln_inflation_accumulated_cont + ln_inflation_adj_contribution;
      UPDATE TK_ILLUSTRATIONDTL_POS
         SET cash_value1 = ln_cashvalue1,
             cash_value2 = ln_cashvalue2,
             cash_value3 = ln_cashvalue3,
             bid_offer = ln_bid_offer,
             sum_assured_at_risk1 = ln_sum_assured_at_risk1,
             mortality_charges1 = ln_mortality_charges1,
             investment_income1 = ln_investment_income1,
             im_charges1 = ln_im_charges1,
             sum_assured_at_risk2 = ln_sum_assured_at_risk2,
             mortality_charges2 = ln_mortality_charges2,
             investment_income2 = ln_investment_income2,
             im_charges2 = ln_im_charges2,
             sum_assured_at_risk3 = ln_sum_assured_at_risk3,
             mortality_charges3 = ln_mortality_charges3,
             investment_income3 = ln_investment_income3,
             im_charges3 = ln_im_charges3,
             BONUS_RATE1 = ln_BONUS_RATE1,
             BONUS_SV1 = ln_BONUS_SV1,
             BONUS_AMOUNT1 = ln_BONUS_AMOUNT1,
             SV_PAYABLE1 = ln_SV_PAYABLE1,
             DEATH_BENEFIT1 = ln_DEATH_BENEFIT1,
             BONUS_RATE2 = ln_BONUS_RATE2,
             BONUS_SV2 = ln_BONUS_SV2,
             BONUS_AMOUNT2 = ln_BONUS_AMOUNT2,
             SV_PAYABLE2 = ln_SV_PAYABLE2,
             DEATH_BENEFIT2 = ln_DEATH_BENEFIT2,
             BONUS_RATE3 = ln_BONUS_RATE3,
             BONUS_SV3 = ln_BONUS_SV3,
             BONUS_AMOUNT3 = ln_BONUS_AMOUNT3,
             SV_PAYABLE3 = ln_SV_PAYABLE3,
             DEATH_BENEFIT3 = ln_DEATH_BENEFIT3,
             INFLATION_ADJ_CONTRIBUTION = ln_inflation_adj_contribution,
             INFLATION_ACCUMULATED_CONTRI = ln_inflation_accumulated_cont,
             SURRENDER_VALUE=ln_SURRENDER_VALUE
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND ILLUSTRATION_ID = P_ILLUSTRATION_ID
             AND policy_year = ln_policy_year;

      ln_policy_year := ln_policy_year + 1;
      ln_iterator := ln_iterator + 1;
   END LOOP;

   COMMIT;
END;
/

prompt
prompt Creating procedure GENERATE_IL_DETAIL_POS_1MAR25_P
prompt ==================================================
prompt
CREATE OR REPLACE PROCEDURE GENERATE_IL_DETAIL_POS_1mar25_P (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_policy_year                  NUMBER;
   ln_allocation_percentage        NUMBER;
   ln_allocation_contribution      NUMBER;
   ln_mortality_rate1              NUMBER;
   ln_mortality_rate2              NUMBER;

   ln_age1                         NUMBER;
   ln_age2                         NUMBER;
   lc_gender1                      VARCHAR2 (1);
   lc_gender2                      VARCHAR2 (1);
   ln_effective_age_factor         NUMBER;
   ln_effective_age                NUMBER;
   ln_basic_contribution           NUMBER;
   ln_invested_contribution        NUMBER;
   ln_policy_term                  NUMBER;
   ln_pay_term                     NUMBER;

   ln_sum_covered                  NUMBER;
   ln_sum_at_risk                  NUMBER;

   ln_mortality_charges            NUMBER;
   ln_reins_amount                 NUMBER;
   ln_ptf_surplus                  NUMBER;
   ln_waqala_charges               NUMBER;
   ln_contingency_margin           NUMBER;

   ln_admin_charges                NUMBER;


   ln_Indexation_admin_ch_rate     NUMBER;

   ln_Indexation_sumassured_rate   NUMBER;
   ln_Indexation_contribute_rate   NUMBER;
   ln_waqala_rate                  NUMBER;
   ln_contingency_margin_rate      NUMBER;
   ln_Investment_income_rate       NUMBER;
   ln_expected_claim_rate          NUMBER;
   ln_new_age1                     NUMBER := 0;

   lc_is_joint_life                VARCHAR2 (1) := 'N';
   LC_BENEFIT_CODE                 NUMBER;

   ln_PAIDUP_VALUE                 NUMBER;
   ln_SV_RATE_OF_SA                NUMBER;
   ln_SURRENDER_VALUE              NUMBER;
   ln_SV_RATE_OF_BONUS             NUMBER;
   ln_x                            NUMBER;
   ln_y                            NUMBER;
   ln_z                            NUMBER;
   ln_mx_at_maturity_age           NUMBER;
   ln_dx_at_maturity_age           NUMBER;
   ln_nx_at_maturity_age           NUMBER;

   ln_mx_at_maturity_age_bonus     NUMBER;
   ln_dx_at_maturity_age_bonus     NUMBER;
   ln_nx_at_maturity_age_bonus     NUMBER;

   ln_mx_at_current_age            NUMBER;
   ln_dx_at_current_age            NUMBER;
   ln_nx_at_current_age            NUMBER;
   ln_surrender_charge_rate        NUMBER;
   ld_illustration_date            DATE;
   ln_product_type                 number;

BEGIN
   -- initialize variables
   ln_policy_year := 1;
   ln_invested_contribution := 0;
   ln_ptf_surplus := 0;

   ln_mx_at_current_age := 0;
   ln_dx_at_current_age := 0;
   ln_nx_at_current_age := 0;

   -- Get Main Plan ( basic benefit) code
   SELECT BENEFIT_CODE
     INTO LC_BENEFIT_CODE
     FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND MAPPING_TYPE = 'B';

   SELECT 
       PRODUCT_TYPE_IL into ln_product_type 
    FROM GLAS_SUB_PRODUCT_SETUP_T 
    WHERE     ORG_ID = P_ORG_ID
      AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
      AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
 ;
 
   BEGIN
      -- get basic details from illustration header
      SELECT NVL (age1, 0),
             NVL (age2, 0),
             basic_contribution,
             SUM_COVERED_MODAL,
             GENDER1,
             GENDER2,
             POLICY_TERM,
             PAYMENT_TERM,
             NVL (SUM_COVERED_INDEX, 0) SUM_COVERED_INDEX,
             NVL (CONTRIBUTION_INDEX, 0) CONTRIBUTION_INDEX,
             NVL (CONT_MARGIN, 0) CONT_MARGIN,
             NVL (WAQALA_FEE, 0) WAQALA_FEE,
             NVL (EXPECTED_CLAIM, 0) EXPECTED_CLAIM,
             NVL (INVESTMENT_INCOME, 0) INVESTMENT_INCOME,
             TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE)),
             nvl( SECOND_LIFE,'N') 
        INTO ln_age1,
             ln_age2,
             ln_basic_contribution,
             ln_SUM_COVERED,
             lc_gender1,
             lc_gender2,
             ln_POLICY_TERM,
             ln_pay_term,
             ln_Indexation_sumassured_rate,
             ln_Indexation_contribute_rate,
             ln_contingency_margin_rate,
             ln_waqala_rate,
             ln_expected_claim_rate,
             ln_Investment_income_rate,
             ld_illustration_date,
             lc_is_joint_life
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_SUM_COVERED := 0;
         lc_gender1 := 0;
         lc_gender2 := 0;
         ln_POLICY_TERM := 0;
         ln_Indexation_sumassured_rate := 0;
         ln_Indexation_contribute_rate := 0;
         ln_contingency_margin_rate := 0;
         ln_waqala_rate := 0;
         ln_expected_claim_rate := 0;
         ln_Investment_income_rate := 0;
         ld_illustration_date := TRUNC (SYSDATE);
   END;

   BEGIN
      -- get admin charges for sub classes setup   Rate Type 21 is Policy Fee / admin ch
      SELECT NVL (RATE, 0)
        INTO ln_admin_charges
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 21
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_admin_charges := 0;
   END;

   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (RATE, 0)
        INTO ln_Indexation_admin_ch_rate
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 20
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_Indexation_admin_ch_rate := 0;
   END;

   -- get mx , dx, nx at maturity age
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age,
             ln_dx_at_maturity_age,
             ln_nx_at_maturity_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM - 2;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age := 0;
         ln_dx_at_maturity_age := 0;
         ln_nx_at_maturity_age := 0;
   END;

   -- get mx , dx, nx at maturity age for bounus
   BEGIN
      -- get SV TABLE DATA at maturity age - 2
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age_bonus,
             ln_dx_at_maturity_age_bonus,
             ln_nx_at_maturity_age_bonus
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM-2;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age_bonus := 0;
         ln_dx_at_maturity_age_bonus := 0;
         ln_nx_at_maturity_age_bonus := 0;
   END;

   -- get mx , dx, nx at current age + 1
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_current_age, ln_dx_at_current_age, ln_nx_at_current_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + 1;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_current_age := 0;
         ln_dx_at_current_age := 0;
         ln_nx_at_current_age := 0;
   END;

   ln_y :=
      CASE
         WHEN (ln_nx_at_current_age - ln_nx_at_maturity_age) = 0
         THEN
            0
         ELSE
              (  ln_mx_at_current_age
               - ln_mx_at_maturity_age
               + ln_dx_at_maturity_age)
            / (ln_nx_at_current_age - ln_nx_at_maturity_age)
      END;

   -- get age factor to calculate effective age in case of joint life
   IF lc_is_joint_life = 'Y'
   THEN
      ln_new_age1 := ln_age2 - 2;
      
   END IF;

   IF ln_new_age1 > 0 AND lc_is_joint_life = 'Y'
   THEN
      SELECT VALUE
        INTO ln_effective_age_factor
        FROM TK_EFFECTIVE_AGE_CHART_T
       WHERE AGE_DIFFERENCE = ABS (ln_age1 - ln_new_age1);
   ELSE
      ln_effective_age_factor := 0;
   END IF;

   -- calculate effective age in case of joint life
   IF ln_age1 >= ln_new_age1 OR lc_is_joint_life = 'N'
   THEN
      ln_effective_age := ln_age1 - ln_effective_age_factor;
   ELSE
      ln_effective_age := ln_new_age1 - ln_effective_age_factor;
   END IF;



   -- delete existing data before generating fresh data
   DELETE FROM TK_ILLUSTRATIONDTL_POS
         WHERE     ORG_ID = P_ORG_ID
               AND BRANCH_ID = P_BRANCH_ID
               AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND ISSUE_COUNT = P_ISSUE_COUNT
               AND DOCUMENT_NO = P_DOCUMENT_NO
               AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND ILLUSTRATION_ID = P_ILLUSTRATION_ID;

   COMMIT;

   ln_effective_age := ln_effective_age - 1; -- reduce age one year to add policy year later as below query it will add one year again for first row
   DBMS_OUTPUT.put_line ('effective age :' || TO_CHAR (ln_effective_age));

   WHILE ln_policy_year <= ln_POLICY_TERM
   LOOP
      --        ln_allocation_percentage
      --           select RATE  into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= 1 AND  TYPE_ID=1 AND NO_OF_YEARS=2;
      BEGIN
         SELECT RATE
           INTO ln_allocation_percentage
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 1
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_allocation_percentage := 0;
      END;

      -- get surrender charges rate

      BEGIN
         SELECT RATE
           INTO ln_surrender_charge_rate
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 16
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_surrender_charge_rate := 0;
      END;

      --           select RATE into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= P_ORG_ID AND  TYPE_ID=1 AND NO_OF_YEARS=1;

      --        ln_mortality_rate1
      --           begin
      --
      --            --   select m_rate into ln_mortality_rate1 from tk_mortality_rate_t where m_age=ln_effective_age +ln_policy_year and m_year=(ln_effective_age +1 -17) ;
      --            select M_RATE into ln_mortality_rate1
      --            FROM GLAS_SUB_PROD_MORT_RT_T
      --            where  ORG_ID= P_ORG_ID  AND  MAIN_PRODUCT_CODE=P_MAIN_PRODUCT_CODE
      --            AND SUB_PRODUCT_CODE=P_SUB_PRODUCT_CODE AND  BENEFIT_CODE= LC_BENEFIT_CODE and M_YEAR =1 and M_age=ln_effective_age +ln_policy_year and GENDER=lc_gender1 ;
      --            dbms_output.put_line('mortality rate 1 success:'||ln_mortality_rate1);
      --           exception when others then
      --                ln_mortality_rate1:=0;
      --           end;

      BEGIN
         SELECT RTD.RATE
           INTO ln_mortality_rate1
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 2
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
                AND ln_policy_year >= RTB.VAL_FROM
                AND ln_policy_year <= RTB.VAL_TO
                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
                AND RTD.TERM = ln_policy_term
                AND RTD.age = ln_effective_age + 1;

         ln_mortality_rate1 := ln_mortality_rate1 / 1000;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate1 := 0;
      END;

      --        ln_mortality_rate2
      BEGIN
         --            select m_rate into ln_mortality_rate2 from tk_mortality_rate_t where m_age=ln_age2+ ln_policy_year and m_year= (ln_age2  -17);
         SELECT M_RATE
           INTO ln_mortality_rate2
           FROM GLAS_SUB_PROD_MORT_RT_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND M_YEAR = 1
                AND m_age = ln_age2 + ln_policy_year
                AND GENDER = lc_gender2;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate2 := 0;
      END;


      -- calculate admin charges for next policy year
      IF ln_policy_year > 1
      THEN
         ln_admin_charges :=
              ln_admin_charges
            + ROUND (ln_admin_charges * ln_Indexation_admin_ch_rate, 2);
         ln_SUM_COVERED :=
              ln_SUM_COVERED
            + ROUND (ln_SUM_COVERED * ln_Indexation_sumassured_rate, 2);

         IF ln_policy_year <= ln_pay_term
         THEN
            ln_basic_contribution :=
                 ln_basic_contribution
               + ROUND (
                    ln_basic_contribution * ln_Indexation_contribute_rate,
                    2);
         ELSE
            ln_basic_contribution := 0;
         END IF;
      END IF;

      ln_invested_contribution :=
         ln_invested_contribution + ln_basic_contribution;

      --          ln_sum_at_risk             := ln_sum_covered + ln_ptf_surplus;
      ln_allocation_contribution :=
         ROUND (ln_basic_contribution * ln_allocation_percentage, 2);
      --        ln_mortality_charges       := round( ln_sum_at_risk * (ln_mortality_rate1+ln_mortality_rate2)  ,2);
      --         ln_waqala_charges          := round( ln_mortality_charges * ln_waqala_rate ,2);
      --       ln_contingency_margin      := round( ln_mortality_charges * ln_contingency_margin_rate ,2);
      --   ln_reins_amount            := round( ln_mortality_charges - ln_waqala_charges - ln_contingency_margin ,2);

      --       ln_ptf_surplus             := round( (ln_reins_amount +ln_contingency_margin)  * ln_Investment_income_rate  ,2)+
      --                                   round(ln_reins_amount * (1- ln_expected_claim_rate),2);

      ln_PAIDUP_VALUE := (ln_sum_covered * ln_policy_year) / ln_POLICY_TERM;

      -- get mx , dx, nx at current age - 2
      ln_mx_at_current_age := 0;
      ln_dx_at_current_age := 0;
      ln_nx_at_current_age := 0;

      BEGIN
         -- get SV TABLE DATA 
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year - 2;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
      END;

      ln_x :=
         CASE
            WHEN ln_dx_at_current_age = 0
            THEN
               0
            ELSE
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age
                  + ln_dx_at_maturity_age)
               / ln_dx_at_current_age
         END;


      -- get mx , dx, nx at current age - 3
      ln_mx_at_current_age := 0;
      ln_dx_at_current_age := 0;
      ln_nx_at_current_age := 0;

--      BEGIN
--         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
--         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
--           INTO ln_mx_at_current_age,
--                ln_dx_at_current_age,
--                ln_nx_at_current_age
--           FROM IL_SV_TABLE_T
--          WHERE     ORG_ID = P_ORG_ID
--                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
--                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
--                AND RATE_CODE = ln_age1 + ln_policy_year - 3;
--
--         ln_z :=
--            CASE
--               WHEN ln_dx_at_current_age = 0
--               THEN
--                  0
--               ELSE
--                    (ln_nx_at_current_age - ln_nx_at_maturity_age)
--                  / ln_dx_at_current_age
--            END;
--
--         LN_SV_RATE_OF_SA :=
--            CASE
--               WHEN ln_policy_year < 3
--               THEN
--                  0
--               WHEN ln_x = 1
--               THEN
--                  1
--               ELSE
--                    ln_x
--                  - (  CASE
--                          WHEN ln_policy_year = 3 THEN ln_y / 1.036
--                          ELSE ln_y
--                       END
--                     * ln_z)
--            END;
--      EXCEPTION
--         WHEN OTHERS
--     --    THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_SA
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 7 -- it is for SV of SA rating header
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                  AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN LN_POLICY_YEAR  ELSE NVL(RTD.POLICY_YEAR,1) END
                ;
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_SA :=0;
          END;
--      END;
        
--      LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered;
        IF LN_SV_RATE_OF_SA<>0 and ln_product_type=1 THEN 
            LN_SURRENDER_VALUE := 10000 / LN_SV_RATE_OF_SA ;
        elsif ln_product_type<>1 then  
            LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered /10000;
        
        END IF;
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;

      -- get mx , dx, nx at current age
      BEGIN
         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year -2;

          LN_SV_RATE_OF_BONUS :=
         CASE
            WHEN (ln_dx_at_current_age = 0 OR ln_policy_year < 4 ) and ln_product_type=1
            THEN
               0
            ELSE
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age_bonus
                  + ln_dx_at_maturity_age_bonus)
               / ln_dx_at_current_age
         END;

         IF ln_product_type = 1 THEN 

                LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
                CASE
                    WHEN ln_dx_at_current_age = 0  OR ln_policy_year < 3
                    THEN
                       0
                    ELSE
                         (  ln_mx_at_current_age
                          - ln_mx_at_maturity_age_bonus
                          + ln_dx_at_maturity_age_bonus)
                       / ln_dx_at_current_age
                 END;
       
         END IF;     

      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_BONUS
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
            WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 8 -- it is for SV of Bonus rating header
               and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
--                AND RTD.TERM = ln_policy_term
--                AND RTD.age = ln_effective_age + 1
            --    and RTD.POLICY_YEAR= (ln_POLICY_TERM - ln_policy_year )
                
                AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN (ln_POLICY_TERM - ln_policy_year )  ELSE NVL(RTD.POLICY_YEAR,1) END
                               ;
                                                        
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_BONUS :=0;
          END;

         IF ln_product_type =1 THEN 

            LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
            CASE
            WHEN ln_policy_year < 3
            THEN
               0
            ELSE
                 LN_SV_RATE_OF_BONUS
            END;
         END IF; 
           LN_SV_RATE_OF_BONUS := 
                 CASE
                            WHEN ln_policy_year < 4 and ln_product_type =1
                            THEN
                               0
                            ELSE
                                 LN_SV_RATE_OF_BONUS
                         END;
             
      END;


      INSERT INTO TK_ILLUSTRATIONDTL_POS (ORG_ID,
                                          BRANCH_ID,
                                          MAIN_PRODUCT_CODE,
                                          SUB_PRODUCT_CODE,
                                          ISSUE_COUNT,
                                          DOCUMENT_NO,
                                          DOCUMENT_YEAR,
                                          APPLICATION_ID,
                                          ILLUSTRATION_ID,
                                          EFFECTIVE_AGE,
                                          POLICY_YEAR,
                                          BASIC_CONTRIBUTION,
                                          INVESTED_CONTRIBUTION,
                                          ALLOCATION_PERCENTAGE,
                                          ALLOCATION_CONTRIBUTION,
                                          MORTALITY_RATE1,
                                          MORTALITY_RATE2,
                                          SUM_ASSURED,
                                          SUM_ASSURED_AT_RISK,
                                          MORTALITY_CHARGES,
                                          PTF_SURPLUS,
                                          WAQALA_CHARGES,
                                          CONTINGENCY_MARGIN,
                                          REINS_AMOUNT,
                                          ADMIN_CHARGES,
                                          PAIDUP_VALUE,
                                          SV_RATE_OF_SA,
                                          SURRENDER_VALUE,
                                          SV_RATE_OF_BONUS,
                                          SURRENDER_CHARGE_RATE)
           VALUES (P_ORG_ID,
                   P_BRANCH_ID,
                   P_MAIN_PRODUCT_CODE,
                   P_SUB_PRODUCT_CODE,
                   P_ISSUE_COUNT,
                   P_DOCUMENT_NO,
                   P_DOCUMENT_YEAR,
                   P_APPLICATION_ID,
                   P_ILLUSTRATION_ID,
                   ln_effective_age + ln_policy_year,
                   ln_policy_year,
                   ln_basic_contribution,
                   ln_invested_contribution,
                   ln_allocation_percentage,
                   ln_allocation_contribution,
                   ln_mortality_rate1,
                   ln_mortality_rate2,
                   ln_SUM_COVERED,
                   ln_sum_at_risk,
                   ln_mortality_charges,
                   ln_ptf_surplus,
                   ln_waqala_charges,
                   ln_contingency_margin,
                   ln_reins_amount,
                   ln_admin_charges,
                   LN_PAIDUP_VALUE,
                   LN_SV_RATE_OF_SA,
                   LN_SURRENDER_VALUE,
                   LN_SV_RATE_OF_BONUS,
                   ln_surrender_charge_rate);

      -- increment the counter
      ln_policy_year := ln_policy_year + 1;
   END LOOP;

   COMMIT;
   UPDATE_ILLUST_CASHVALUE_POS_P (P_ORG_ID,
                                  P_BRANCH_ID,
                                  P_MAIN_PRODUCT_CODE,
                                  P_SUB_PRODUCT_CODE,
                                  P_ISSUE_COUNT,
                                  P_DOCUMENT_NO,
                                  P_DOCUMENT_YEAR,
                                  P_APPLICATION_ID,
                                  P_ILLUSTRATION_ID);
END;
/

prompt
prompt Creating procedure GENERATE_IL_DETAIL_POS_P
prompt ===========================================
prompt
CREATE OR REPLACE PROCEDURE GENERATE_IL_DETAIL_POS_P (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_policy_year                  NUMBER;
   ln_allocation_percentage        NUMBER;
   ln_allocation_contribution      NUMBER;
   ln_mortality_rate1              NUMBER;
   ln_mortality_rate2              NUMBER;

   ln_age1                         NUMBER;
   ln_age2                         NUMBER;
   lc_gender1                      VARCHAR2 (1);
   lc_gender2                      VARCHAR2 (1);
   ln_effective_age_factor         NUMBER;
   ln_effective_age                NUMBER;
   ln_basic_contribution           NUMBER;
   ln_invested_contribution        NUMBER;
   ln_policy_term                  NUMBER;
   ln_pay_term                     NUMBER;

   ln_sum_covered                  NUMBER;
   ln_sum_at_risk                  NUMBER;

   ln_mortality_charges            NUMBER;
   ln_reins_amount                 NUMBER;
   ln_ptf_surplus                  NUMBER;
   ln_waqala_charges               NUMBER;
   ln_contingency_margin           NUMBER;

   ln_admin_charges                NUMBER;


   ln_Indexation_admin_ch_rate     NUMBER;

   ln_Indexation_sumassured_rate   NUMBER;
   ln_Indexation_contribute_rate   NUMBER;
   ln_waqala_rate                  NUMBER;
   ln_contingency_margin_rate      NUMBER;
   ln_Investment_income_rate       NUMBER;
   ln_expected_claim_rate          NUMBER;
   ln_new_age1                     NUMBER := 0;

   lc_is_joint_life                VARCHAR2 (1) := 'N';
   LC_BENEFIT_CODE                 NUMBER;

   ln_PAIDUP_VALUE                 NUMBER;
   ln_SV_RATE_OF_SA                NUMBER;
   ln_SURRENDER_VALUE              NUMBER;
   ln_SV_RATE_OF_BONUS             NUMBER;
   ln_DISCOUNTING_RATE             NUMBER;
   ln_x                            NUMBER;
   ln_y                            NUMBER;
   ln_z                            NUMBER;
   ln_mx_at_maturity_age           NUMBER;
   ln_dx_at_maturity_age           NUMBER;
   ln_nx_at_maturity_age           NUMBER;

   ln_mx_at_maturity_age_bonus     NUMBER;
   ln_dx_at_maturity_age_bonus     NUMBER;
   ln_nx_at_maturity_age_bonus     NUMBER;

   ln_mx_at_current_age            NUMBER;
   ln_dx_at_current_age            NUMBER;
   ln_nx_at_current_age            NUMBER;
   ln_surrender_charge_rate        NUMBER;
   ld_illustration_date            DATE;
      ln_product_type                 number;

BEGIN
   -- initialize variables
   ln_policy_year := 1;
   ln_invested_contribution := 0;
   ln_ptf_surplus := 0;

   ln_mx_at_current_age := 0;
   ln_dx_at_current_age := 0;
   ln_nx_at_current_age := 0;

   -- Get Main Plan ( basic benefit) code
   SELECT BENEFIT_CODE
     INTO LC_BENEFIT_CODE
     FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND MAPPING_TYPE = 'B';

  SELECT 
       PRODUCT_TYPE_IL into ln_product_type 
    FROM GLAS_SUB_PRODUCT_SETUP_T 
    WHERE     ORG_ID = P_ORG_ID
      AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
      AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
 ;
   BEGIN
      -- get basic details from illustration header
      SELECT NVL (age1, 0),
             NVL (age2, 0),
             basic_contribution,
             SUM_COVERED_MODAL,
             GENDER1,
             GENDER2,
             POLICY_TERM,
             PAYMENT_TERM,
             NVL (SUM_COVERED_INDEX, 0) SUM_COVERED_INDEX,
             NVL (CONTRIBUTION_INDEX, 0) CONTRIBUTION_INDEX,
             NVL (CONT_MARGIN, 0) CONT_MARGIN,
             NVL (WAQALA_FEE, 0) WAQALA_FEE,
             NVL (EXPECTED_CLAIM, 0) EXPECTED_CLAIM,
             NVL (INVESTMENT_INCOME, 0) INVESTMENT_INCOME,
             TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE)),
             nvl( SECOND_LIFE,'N') 
        INTO ln_age1,
             ln_age2,
             ln_basic_contribution,
             ln_SUM_COVERED,
             lc_gender1,
             lc_gender2,
             ln_POLICY_TERM,
             ln_pay_term,
             ln_Indexation_sumassured_rate,
             ln_Indexation_contribute_rate,
             ln_contingency_margin_rate,
             ln_waqala_rate,
             ln_expected_claim_rate,
             ln_Investment_income_rate,
             ld_illustration_date,
             lc_is_joint_life
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_SUM_COVERED := 0;
         lc_gender1 := 0;
         lc_gender2 := 0;
         ln_POLICY_TERM := 0;
         ln_Indexation_sumassured_rate := 0;
         ln_Indexation_contribute_rate := 0;
         ln_contingency_margin_rate := 0;
         ln_waqala_rate := 0;
         ln_expected_claim_rate := 0;
         ln_Investment_income_rate := 0;
         ld_illustration_date := TRUNC (SYSDATE);
   END;

   BEGIN
      -- get admin charges for sub classes setup   Rate Type 21 is Policy Fee / admin ch
      SELECT NVL (RATE, 0)
        INTO ln_admin_charges
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 21
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_admin_charges := 0;
   END;

   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (RATE, 0)
        INTO ln_Indexation_admin_ch_rate
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 20
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_Indexation_admin_ch_rate := 0;
   END;

   -- get mx , dx, nx at maturity age
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age,
             ln_dx_at_maturity_age,
             ln_nx_at_maturity_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM - 2;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age := 0;
         ln_dx_at_maturity_age := 0;
         ln_nx_at_maturity_age := 0;
   END;

   -- get mx , dx, nx at maturity age for bounus
   BEGIN
      -- get SV TABLE DATA at maturity age - 2
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age_bonus,
             ln_dx_at_maturity_age_bonus,
             ln_nx_at_maturity_age_bonus
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age_bonus := 0;
         ln_dx_at_maturity_age_bonus := 0;
         ln_nx_at_maturity_age_bonus := 0;
   END;

   -- get mx , dx, nx at current age + 1
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_current_age, ln_dx_at_current_age, ln_nx_at_current_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + 1;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_current_age := 0;
         ln_dx_at_current_age := 0;
         ln_nx_at_current_age := 0;
   END;

   ln_y :=
      CASE
         WHEN (ln_nx_at_current_age - ln_nx_at_maturity_age) = 0
         THEN
            0
         ELSE
              (  ln_mx_at_current_age
               - ln_mx_at_maturity_age
               + ln_dx_at_maturity_age)
            / (ln_nx_at_current_age - ln_nx_at_maturity_age)
      END;

   -- get age factor to calculate effective age in case of joint life
   IF lc_is_joint_life = 'Y'
   THEN
      ln_new_age1 := ln_age2 - 2;
   END IF;

   IF ln_new_age1 > 0 AND lc_is_joint_life = 'Y'
   THEN
      SELECT VALUE
        INTO ln_effective_age_factor
        FROM TK_EFFECTIVE_AGE_CHART_T
       WHERE AGE_DIFFERENCE = ABS (ln_age1 - ln_new_age1);
   ELSE
      ln_effective_age_factor := 0;
   END IF;

   -- calculate effective age in case of joint life
   IF ln_age1 >= ln_new_age1 OR lc_is_joint_life = 'N'
   THEN
      ln_effective_age := ln_age1 - ln_effective_age_factor;
   ELSE
      ln_effective_age := ln_new_age1 - ln_effective_age_factor;
   END IF;



   -- delete existing data before generating fresh data
   DELETE FROM TK_ILLUSTRATIONDTL_POS
         WHERE     ORG_ID = P_ORG_ID
               AND BRANCH_ID = P_BRANCH_ID
               AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND ISSUE_COUNT = P_ISSUE_COUNT
               AND DOCUMENT_NO = P_DOCUMENT_NO
               AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND ILLUSTRATION_ID = P_ILLUSTRATION_ID;

   COMMIT;

   ln_effective_age := ln_effective_age - 1; -- reduce age one year to add policy year later as below query it will add one year again for first row
   DBMS_OUTPUT.put_line ('effective age :' || TO_CHAR (ln_effective_age));

   WHILE ln_policy_year <= ln_POLICY_TERM
   LOOP
      --        ln_allocation_percentage
      --           select RATE  into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= 1 AND  TYPE_ID=1 AND NO_OF_YEARS=2;
      BEGIN
         SELECT RATE
           INTO ln_allocation_percentage
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 1
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_allocation_percentage := 0;
      END;

      -- get surrender charges rate

      BEGIN
         SELECT RATE
           INTO ln_surrender_charge_rate
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 16
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_surrender_charge_rate := 0;
      END;

      --           select RATE into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= P_ORG_ID AND  TYPE_ID=1 AND NO_OF_YEARS=1;

      --        ln_mortality_rate1
      --           begin
      --
      --            --   select m_rate into ln_mortality_rate1 from tk_mortality_rate_t where m_age=ln_effective_age +ln_policy_year and m_year=(ln_effective_age +1 -17) ;
      --            select M_RATE into ln_mortality_rate1
      --            FROM GLAS_SUB_PROD_MORT_RT_T
      --            where  ORG_ID= P_ORG_ID  AND  MAIN_PRODUCT_CODE=P_MAIN_PRODUCT_CODE
      --            AND SUB_PRODUCT_CODE=P_SUB_PRODUCT_CODE AND  BENEFIT_CODE= LC_BENEFIT_CODE and M_YEAR =1 and M_age=ln_effective_age +ln_policy_year and GENDER=lc_gender1 ;
      --            dbms_output.put_line('mortality rate 1 success:'||ln_mortality_rate1);
      --           exception when others then
      --                ln_mortality_rate1:=0;
      --           end;

      BEGIN
         SELECT RTD.RATE
           INTO ln_mortality_rate1
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 2
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
                AND ln_policy_year >= RTB.VAL_FROM
                AND ln_policy_year <= RTB.VAL_TO
                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
                AND RTD.TERM = ln_policy_term
                AND RTD.age = ln_effective_age + 1;

         ln_mortality_rate1 := ln_mortality_rate1 / 1000;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate1 := 0;
      END;

      --        ln_mortality_rate2
      BEGIN
         --            select m_rate into ln_mortality_rate2 from tk_mortality_rate_t where m_age=ln_age2+ ln_policy_year and m_year= (ln_age2  -17);
         SELECT M_RATE
           INTO ln_mortality_rate2
           FROM GLAS_SUB_PROD_MORT_RT_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND M_YEAR = 1
                AND m_age = ln_age2 + ln_policy_year
                AND GENDER = lc_gender2;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate2 := 0;
      END;


      -- calculate admin charges for next policy year
      IF ln_policy_year > 1
      THEN
         ln_admin_charges :=
              ln_admin_charges
            + ROUND (ln_admin_charges * ln_Indexation_admin_ch_rate, 2);
         ln_SUM_COVERED :=
              ln_SUM_COVERED
            + ROUND (ln_SUM_COVERED * ln_Indexation_sumassured_rate, 2);

         IF ln_policy_year <= ln_pay_term
         THEN
            ln_basic_contribution :=
                 ln_basic_contribution
               + ROUND (
                    ln_basic_contribution * ln_Indexation_contribute_rate,
                    2);
         ELSE
            ln_basic_contribution := 0;
         END IF;
      END IF;

      ln_invested_contribution :=
         ln_invested_contribution + ln_basic_contribution;

      --          ln_sum_at_risk             := ln_sum_covered + ln_ptf_surplus;
      ln_allocation_contribution :=
         ROUND (ln_basic_contribution * ln_allocation_percentage, 2);
      --        ln_mortality_charges       := round( ln_sum_at_risk * (ln_mortality_rate1+ln_mortality_rate2)  ,2);
      --         ln_waqala_charges          := round( ln_mortality_charges * ln_waqala_rate ,2);
      --       ln_contingency_margin      := round( ln_mortality_charges * ln_contingency_margin_rate ,2);
      --   ln_reins_amount            := round( ln_mortality_charges - ln_waqala_charges - ln_contingency_margin ,2);

      --       ln_ptf_surplus             := round( (ln_reins_amount +ln_contingency_margin)  * ln_Investment_income_rate  ,2)+
      --                                   round(ln_reins_amount * (1- ln_expected_claim_rate),2);

      ln_PAIDUP_VALUE := (ln_sum_covered * ln_policy_year) / ln_POLICY_TERM;

      -- get mx , dx, nx at current age - 2
      ln_mx_at_current_age := 0;
      ln_dx_at_current_age := 0;
      ln_nx_at_current_age := 0;

      BEGIN
         -- get SV TABLE DATA 
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
      END;

      ln_x :=
         CASE
            WHEN ln_dx_at_current_age = 0
            THEN
               0
            ELSE
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age
                  + ln_dx_at_maturity_age)
               / ln_dx_at_current_age
         END;


      -- get mx , dx, nx at current age - 3
--      ln_mx_at_current_age := 0;
--      ln_dx_at_current_age := 0;
--      ln_nx_at_current_age := 0;

--      BEGIN
--         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
--         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
--           INTO ln_mx_at_current_age,
--                ln_dx_at_current_age,
--                ln_nx_at_current_age
--           FROM IL_SV_TABLE_T
--          WHERE     ORG_ID = P_ORG_ID
--                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
--                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
--                AND RATE_CODE = ln_age1 + ln_policy_year - 3;
--
--         ln_z :=
--            CASE
--               WHEN ln_dx_at_current_age = 0
--               THEN
--                  0
--               ELSE
--                    (ln_nx_at_current_age - ln_nx_at_maturity_age)
--                  / ln_dx_at_current_age
--            END;
--
--         LN_SV_RATE_OF_SA :=
--            CASE
--               WHEN ln_policy_year < 3
--               THEN
--                  0
--               WHEN ln_x = 1
--               THEN
--                  1
--               ELSE
--                    ln_x
--                  - (  CASE
--                          WHEN ln_policy_year = 3 THEN ln_y / 1.036
--                          ELSE ln_y
--                       END
--                     * ln_z)
--            END;
--      EXCEPTION
--         WHEN OTHERS
--     --    THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_SA
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 7 -- it is for SV of SA rating header
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                  AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN LN_POLICY_YEAR  ELSE NVL(RTD.POLICY_YEAR,1) END
                ;
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_SA :=0;
          END;
--      END;

--      LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered;
        IF LN_SV_RATE_OF_SA<>0 and ln_product_type=1 THEN 
            LN_SURRENDER_VALUE := 10000 / LN_SV_RATE_OF_SA ;
        elsif ln_product_type<>1 then  
            LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered /10000;
        
        END IF;
        
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;

      -- get mx , dx, nx at current age
      BEGIN
         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year ;

          LN_SV_RATE_OF_BONUS :=
         CASE
            WHEN (ln_dx_at_current_age = 0 OR ln_policy_year < 4 ) and ln_product_type = 1 
            THEN
               0
            ELSE 
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age_bonus
                  + ln_dx_at_maturity_age_bonus)
               / ln_dx_at_current_age
         END;
         
--           IF ln_product_type = 1 THEN 
--
--                    LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
--                    CASE
--                        WHEN ln_dx_at_current_age = 0  OR ln_policy_year < 3
--                        THEN
--                           0
--                        ELSE
--                             (  ln_mx_at_current_age
--                              - ln_mx_at_maturity_age_bonus
--                              + ln_dx_at_maturity_age_bonus)
--                           / ln_dx_at_current_age
--                     END;
--            end if; 
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_BONUS
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
            WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 8 -- it is for SV of Bonus rating header
               and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
--                AND RTD.TERM = ln_policy_term
--                AND RTD.age = ln_effective_age + 1
            --    and RTD.POLICY_YEAR= (ln_POLICY_TERM - ln_policy_year )
                
                AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN (ln_POLICY_TERM - ln_policy_year )  ELSE NVL(RTD.POLICY_YEAR,1) END
                               ;
                                                        
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_BONUS :=0;
          END;
          
           LN_SV_RATE_OF_BONUS := 
                 CASE
                            WHEN ln_policy_year < 4 and ln_product_type = 1 
                            THEN
                               0
                            ELSE
                                 LN_SV_RATE_OF_BONUS
                         END;
             
      END;
      ln_DISCOUNTING_RATE :=0;
         BEGIN
          SELECT RTD.RATE
           INTO ln_DISCOUNTING_RATE
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
            WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 9 -- it is for discounting rate in rating header
               and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
--                AND RTD.TERM = ln_policy_term
--                AND RTD.age = ln_effective_age + 1
            --    and RTD.POLICY_YEAR= (ln_POLICY_TERM - ln_policy_year )
                
                AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN (ln_POLICY_TERM - ln_policy_year )  ELSE NVL(RTD.POLICY_YEAR,1) END
                               ;
                                                        
                EXCEPTION WHEN OTHERS THEN
                ln_DISCOUNTING_RATE :=0;
          END;      

            IF ln_product_type =1 THEN 
                LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
                CASE
                WHEN ln_policy_year < 3
                THEN
                   0
                ELSE
                     ln_DISCOUNTING_RATE
                END;
            end if;
            
      INSERT INTO TK_ILLUSTRATIONDTL_POS (ORG_ID,
                                          BRANCH_ID,
                                          MAIN_PRODUCT_CODE,
                                          SUB_PRODUCT_CODE,
                                          ISSUE_COUNT,
                                          DOCUMENT_NO,
                                          DOCUMENT_YEAR,
                                          APPLICATION_ID,
                                          ILLUSTRATION_ID,
                                          EFFECTIVE_AGE,
                                          POLICY_YEAR,
                                          BASIC_CONTRIBUTION,
                                          INVESTED_CONTRIBUTION,
                                          ALLOCATION_PERCENTAGE,
                                          ALLOCATION_CONTRIBUTION,
                                          MORTALITY_RATE1,
                                          MORTALITY_RATE2,
                                          SUM_ASSURED,
                                          SUM_ASSURED_AT_RISK,
                                          MORTALITY_CHARGES,
                                          PTF_SURPLUS,
                                          WAQALA_CHARGES,
                                          CONTINGENCY_MARGIN,
                                          REINS_AMOUNT,
                                          ADMIN_CHARGES,
                                          PAIDUP_VALUE,
                                          SV_RATE_OF_SA,
                                          SURRENDER_VALUE,
                                          SV_RATE_OF_BONUS,
                                          SURRENDER_CHARGE_RATE)
           VALUES (P_ORG_ID,
                   P_BRANCH_ID,
                   P_MAIN_PRODUCT_CODE,
                   P_SUB_PRODUCT_CODE,
                   P_ISSUE_COUNT,
                   P_DOCUMENT_NO,
                   P_DOCUMENT_YEAR,
                   P_APPLICATION_ID,
                   P_ILLUSTRATION_ID,
                   ln_effective_age + ln_policy_year,
                   ln_policy_year,
                   ln_basic_contribution,
                   ln_invested_contribution,
                   ln_allocation_percentage,
                   ln_allocation_contribution,
                   ln_mortality_rate1,
                   ln_mortality_rate2,
                   ln_SUM_COVERED,
                   ln_sum_at_risk,
                   ln_mortality_charges,
                   ln_ptf_surplus,
                   ln_waqala_charges,
                   ln_contingency_margin,
                   ln_reins_amount,
                   ln_admin_charges,
                   LN_PAIDUP_VALUE,
                   LN_SV_RATE_OF_SA,
                   LN_SURRENDER_VALUE,
                   LN_SV_RATE_OF_BONUS,
                   ln_surrender_charge_rate);

      -- increment the counter
      ln_policy_year := ln_policy_year + 1;
   END LOOP;

   COMMIT;
   UPDATE_ILLUST_CASHVALUE_POS_P (P_ORG_ID,
                                  P_BRANCH_ID,
                                  P_MAIN_PRODUCT_CODE,
                                  P_SUB_PRODUCT_CODE,
                                  P_ISSUE_COUNT,
                                  P_DOCUMENT_NO,
                                  P_DOCUMENT_YEAR,
                                  P_APPLICATION_ID,
                                  P_ILLUSTRATION_ID);
END;
/

prompt
prompt Creating procedure GENERATE_IL_DETAIL_POS_P1
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE GENERATE_IL_DETAIL_POS_P1 (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   P_ILLUSTRATION_ID      NUMBER)
AS
   ln_policy_year                  NUMBER;
   ln_allocation_percentage        NUMBER;
   ln_allocation_contribution      NUMBER;
   ln_mortality_rate1              NUMBER;
   ln_mortality_rate2              NUMBER;

   ln_age1                         NUMBER;
   ln_age2                         NUMBER;
   lc_gender1                      VARCHAR2 (1);
   lc_gender2                      VARCHAR2 (1);
   ln_effective_age_factor         NUMBER;
   ln_effective_age                NUMBER;
   ln_basic_contribution           NUMBER;
   ln_invested_contribution        NUMBER;
   ln_policy_term                  NUMBER;
   ln_pay_term                     NUMBER;

   ln_sum_covered                  NUMBER;
   ln_sum_at_risk                  NUMBER;

   ln_mortality_charges            NUMBER;
   ln_reins_amount                 NUMBER;
   ln_ptf_surplus                  NUMBER;
   ln_waqala_charges               NUMBER;
   ln_contingency_margin           NUMBER;

   ln_admin_charges                NUMBER;


   ln_Indexation_admin_ch_rate     NUMBER;

   ln_Indexation_sumassured_rate   NUMBER;
   ln_Indexation_contribute_rate   NUMBER;
   ln_waqala_rate                  NUMBER;
   ln_contingency_margin_rate      NUMBER;
   ln_Investment_income_rate       NUMBER;
   ln_expected_claim_rate          NUMBER;
   ln_new_age1                     NUMBER := 0;

   lc_is_joint_life                VARCHAR2 (1) := 'N';
   LC_BENEFIT_CODE                 NUMBER;

   ln_PAIDUP_VALUE                 NUMBER;
   ln_SV_RATE_OF_SA                NUMBER;
   ln_SURRENDER_VALUE              NUMBER;
   ln_SV_RATE_OF_BONUS             NUMBER;
   ln_DISCOUNTING_RATE             NUMBER;
   ln_x                            NUMBER;
   ln_y                            NUMBER;
   ln_z                            NUMBER;
   ln_mx_at_maturity_age           NUMBER;
   ln_dx_at_maturity_age           NUMBER;
   ln_nx_at_maturity_age           NUMBER;

   ln_mx_at_maturity_age_bonus     NUMBER;
   ln_dx_at_maturity_age_bonus     NUMBER;
   ln_nx_at_maturity_age_bonus     NUMBER;

   ln_mx_at_current_age            NUMBER;
   ln_dx_at_current_age            NUMBER;
   ln_nx_at_current_age            NUMBER;
   ln_surrender_charge_rate        NUMBER;
   ld_illustration_date            DATE;
      ln_product_type                 number;

BEGIN
   -- initialize variables
   ln_policy_year := 1;
   ln_invested_contribution := 0;
   ln_ptf_surplus := 0;

   ln_mx_at_current_age := 0;
   ln_dx_at_current_age := 0;
   ln_nx_at_current_age := 0;

   -- Get Main Plan ( basic benefit) code
   SELECT BENEFIT_CODE
     INTO LC_BENEFIT_CODE
     FROM GLAS_SUB_PROD_BENEFIT_MAP_T
    WHERE     ORG_ID = P_ORG_ID
          AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND MAPPING_TYPE = 'B';

  SELECT 
       PRODUCT_TYPE_IL into ln_product_type 
    FROM GLAS_SUB_PRODUCT_SETUP_T 
    WHERE     ORG_ID = P_ORG_ID
      AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
      AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
 ;
   BEGIN
      -- get basic details from illustration header
      SELECT NVL (age1, 0),
             NVL (age2, 0),
             basic_contribution,
             SUM_COVERED_MODAL,
             GENDER1,
             GENDER2,
             POLICY_TERM,
             PAYMENT_TERM,
             NVL (SUM_COVERED_INDEX, 0) SUM_COVERED_INDEX,
             NVL (CONTRIBUTION_INDEX, 0) CONTRIBUTION_INDEX,
             NVL (CONT_MARGIN, 0) CONT_MARGIN,
             NVL (WAQALA_FEE, 0) WAQALA_FEE,
             NVL (EXPECTED_CLAIM, 0) EXPECTED_CLAIM,
             NVL (INVESTMENT_INCOME, 0) INVESTMENT_INCOME,
             TRUNC (NVL (PROPOSAL_ENTRY_DATE, CREATION_DATE)),
             nvl( SECOND_LIFE,'N') 
        INTO ln_age1,
             ln_age2,
             ln_basic_contribution,
             ln_SUM_COVERED,
             lc_gender1,
             lc_gender2,
             ln_POLICY_TERM,
             ln_pay_term,
             ln_Indexation_sumassured_rate,
             ln_Indexation_contribute_rate,
             ln_contingency_margin_rate,
             ln_waqala_rate,
             ln_expected_claim_rate,
             ln_Investment_income_rate,
             ld_illustration_date,
             lc_is_joint_life
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ISSUE_COUNT = P_ISSUE_COUNT
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_basic_contribution := 0;
         ln_SUM_COVERED := 0;
         lc_gender1 := 0;
         lc_gender2 := 0;
         ln_POLICY_TERM := 0;
         ln_Indexation_sumassured_rate := 0;
         ln_Indexation_contribute_rate := 0;
         ln_contingency_margin_rate := 0;
         ln_waqala_rate := 0;
         ln_expected_claim_rate := 0;
         ln_Investment_income_rate := 0;
         ld_illustration_date := TRUNC (SYSDATE);
   END;

   BEGIN
      -- get admin charges for sub classes setup   Rate Type 21 is Policy Fee / admin ch
      SELECT NVL (RATE, 0)
        INTO ln_admin_charges
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 21
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
             ;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_admin_charges := 0;
   END;

   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (RATE, 0)
        INTO ln_Indexation_admin_ch_rate
        FROM ILAS_SUB_PROD_RATES_SETUP_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND BENEFIT_CODE = LC_BENEFIT_CODE
             AND RATE_TYPE_ID = 20
             AND POLICY_TERM = 1
             AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_Indexation_admin_ch_rate := 0;
   END;

   -- get mx , dx, nx at maturity age
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age,
             ln_dx_at_maturity_age,
             ln_nx_at_maturity_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM - 2;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age := 0;
         ln_dx_at_maturity_age := 0;
         ln_nx_at_maturity_age := 0;
   END;

   -- get mx , dx, nx at maturity age for bounus
   BEGIN
      -- get SV TABLE DATA at maturity age - 2
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_maturity_age_bonus,
             ln_dx_at_maturity_age_bonus,
             ln_nx_at_maturity_age_bonus
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + ln_POLICY_TERM;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_maturity_age_bonus := 0;
         ln_dx_at_maturity_age_bonus := 0;
         ln_nx_at_maturity_age_bonus := 0;
   END;

   -- get mx , dx, nx at current age + 1
   BEGIN
      -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
      SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
        INTO ln_mx_at_current_age, ln_dx_at_current_age, ln_nx_at_current_age
        FROM IL_SV_TABLE_T
       WHERE     ORG_ID = P_ORG_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_CODE = ln_age1 + 1;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_mx_at_current_age := 0;
         ln_dx_at_current_age := 0;
         ln_nx_at_current_age := 0;
   END;

   ln_y :=
      CASE
         WHEN (ln_nx_at_current_age - ln_nx_at_maturity_age) = 0
         THEN
            0
         ELSE
              (  ln_mx_at_current_age
               - ln_mx_at_maturity_age
               + ln_dx_at_maturity_age)
            / (ln_nx_at_current_age - ln_nx_at_maturity_age)
      END;

   -- get age factor to calculate effective age in case of joint life
   IF lc_is_joint_life = 'Y'
   THEN
      ln_new_age1 := ln_age2 - 2;
   END IF;

   IF ln_new_age1 > 0 AND lc_is_joint_life = 'Y'
   THEN
      SELECT VALUE
        INTO ln_effective_age_factor
        FROM TK_EFFECTIVE_AGE_CHART_T
       WHERE AGE_DIFFERENCE = ABS (ln_age1 - ln_new_age1);
   ELSE
      ln_effective_age_factor := 0;
   END IF;

   -- calculate effective age in case of joint life
   IF ln_age1 >= ln_new_age1 OR lc_is_joint_life = 'N'
   THEN
      ln_effective_age := ln_age1 - ln_effective_age_factor;
   ELSE
      ln_effective_age := ln_new_age1 - ln_effective_age_factor;
   END IF;



   -- delete existing data before generating fresh data
   DELETE FROM TK_ILLUSTRATIONDTL_POS
         WHERE     ORG_ID = P_ORG_ID
               AND BRANCH_ID = P_BRANCH_ID
               AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND ISSUE_COUNT = P_ISSUE_COUNT
               AND DOCUMENT_NO = P_DOCUMENT_NO
               AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND ILLUSTRATION_ID = P_ILLUSTRATION_ID;

   COMMIT;

   ln_effective_age := ln_effective_age - 1; -- reduce age one year to add policy year later as below query it will add one year again for first row
   DBMS_OUTPUT.put_line ('effective age :' || TO_CHAR (ln_effective_age));

   WHILE ln_policy_year <= ln_POLICY_TERM
   LOOP
      --        ln_allocation_percentage
      --           select RATE  into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= 1 AND  TYPE_ID=1 AND NO_OF_YEARS=2;
      BEGIN
         SELECT RATE
           INTO ln_allocation_percentage
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 1
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_allocation_percentage := 0;
      END;

      -- get surrender charges rate

      BEGIN
         SELECT RATE
           INTO ln_surrender_charge_rate
           FROM ILAS_SUB_PROD_RATES_SETUP_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND RATE_TYPE_ID = 16
                AND POLICY_TERM = ln_policy_year
                AND ld_illustration_date BETWEEN EFFECTIVE_START_DATE AND TRUNC(NVL(EFFECTIVE_END_DATE,SYSDATE)) 
                ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_surrender_charge_rate := 0;
      END;

      --           select RATE into ln_allocation_percentage from TK_RATES_SETUP_T where ORG_ID= P_ORG_ID AND  TYPE_ID=1 AND NO_OF_YEARS=1;

      --        ln_mortality_rate1
      --           begin
      --
      --            --   select m_rate into ln_mortality_rate1 from tk_mortality_rate_t where m_age=ln_effective_age +ln_policy_year and m_year=(ln_effective_age +1 -17) ;
      --            select M_RATE into ln_mortality_rate1
      --            FROM GLAS_SUB_PROD_MORT_RT_T
      --            where  ORG_ID= P_ORG_ID  AND  MAIN_PRODUCT_CODE=P_MAIN_PRODUCT_CODE
      --            AND SUB_PRODUCT_CODE=P_SUB_PRODUCT_CODE AND  BENEFIT_CODE= LC_BENEFIT_CODE and M_YEAR =1 and M_age=ln_effective_age +ln_policy_year and GENDER=lc_gender1 ;
      --            dbms_output.put_line('mortality rate 1 success:'||ln_mortality_rate1);
      --           exception when others then
      --                ln_mortality_rate1:=0;
      --           end;

      BEGIN
         SELECT RTD.RATE
           INTO ln_mortality_rate1
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 2
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
                AND ln_policy_year >= RTB.VAL_FROM
                AND ln_policy_year <= RTB.VAL_TO
                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
                AND RTD.TERM = ln_policy_term
                AND RTD.age = ln_effective_age + 1;

         ln_mortality_rate1 := ln_mortality_rate1 / 1000;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate1 := 0;
      END;

      --        ln_mortality_rate2
      BEGIN
         --            select m_rate into ln_mortality_rate2 from tk_mortality_rate_t where m_age=ln_age2+ ln_policy_year and m_year= (ln_age2  -17);
         SELECT M_RATE
           INTO ln_mortality_rate2
           FROM GLAS_SUB_PROD_MORT_RT_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND BENEFIT_CODE = LC_BENEFIT_CODE
                AND M_YEAR = 1
                AND m_age = ln_age2 + ln_policy_year
                AND GENDER = lc_gender2;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mortality_rate2 := 0;
      END;


      -- calculate admin charges for next policy year
      IF ln_policy_year > 1
      THEN
         ln_admin_charges :=
              ln_admin_charges
            + ROUND (ln_admin_charges * ln_Indexation_admin_ch_rate, 2);
         ln_SUM_COVERED :=
              ln_SUM_COVERED
            + ROUND (ln_SUM_COVERED * ln_Indexation_sumassured_rate, 2);

         IF ln_policy_year <= ln_pay_term
         THEN
            ln_basic_contribution :=
                 ln_basic_contribution
               + ROUND (
                    ln_basic_contribution * ln_Indexation_contribute_rate,
                    2);
         ELSE
            ln_basic_contribution := 0;
         END IF;
      END IF;

      ln_invested_contribution :=
         ln_invested_contribution + ln_basic_contribution;

      --          ln_sum_at_risk             := ln_sum_covered + ln_ptf_surplus;
      ln_allocation_contribution :=
         ROUND (ln_basic_contribution * ln_allocation_percentage, 2);
      --        ln_mortality_charges       := round( ln_sum_at_risk * (ln_mortality_rate1+ln_mortality_rate2)  ,2);
      --         ln_waqala_charges          := round( ln_mortality_charges * ln_waqala_rate ,2);
      --       ln_contingency_margin      := round( ln_mortality_charges * ln_contingency_margin_rate ,2);
      --   ln_reins_amount            := round( ln_mortality_charges - ln_waqala_charges - ln_contingency_margin ,2);

      --       ln_ptf_surplus             := round( (ln_reins_amount +ln_contingency_margin)  * ln_Investment_income_rate  ,2)+
      --                                   round(ln_reins_amount * (1- ln_expected_claim_rate),2);

      ln_PAIDUP_VALUE := (ln_sum_covered * ln_policy_year) / ln_POLICY_TERM;

      -- get mx , dx, nx at current age - 2
      ln_mx_at_current_age := 0;
      ln_dx_at_current_age := 0;
      ln_nx_at_current_age := 0;

      BEGIN
         -- get SV TABLE DATA 
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year ;
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
      END;

      ln_x :=
         CASE
            WHEN ln_dx_at_current_age = 0
            THEN
               0
            ELSE
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age
                  + ln_dx_at_maturity_age)
               / ln_dx_at_current_age
         END;


      -- get mx , dx, nx at current age - 3
--      ln_mx_at_current_age := 0;
--      ln_dx_at_current_age := 0;
--      ln_nx_at_current_age := 0;

--      BEGIN
--         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
--         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
--           INTO ln_mx_at_current_age,
--                ln_dx_at_current_age,
--                ln_nx_at_current_age
--           FROM IL_SV_TABLE_T
--          WHERE     ORG_ID = P_ORG_ID
--                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
--                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
--                AND RATE_CODE = ln_age1 + ln_policy_year - 3;
--
--         ln_z :=
--            CASE
--               WHEN ln_dx_at_current_age = 0
--               THEN
--                  0
--               ELSE
--                    (ln_nx_at_current_age - ln_nx_at_maturity_age)
--                  / ln_dx_at_current_age
--            END;
--
--         LN_SV_RATE_OF_SA :=
--            CASE
--               WHEN ln_policy_year < 3
--               THEN
--                  0
--               WHEN ln_x = 1
--               THEN
--                  1
--               ELSE
--                    ln_x
--                  - (  CASE
--                          WHEN ln_policy_year = 3 THEN ln_y / 1.036
--                          ELSE ln_y
--                       END
--                     * ln_z)
--            END;
--      EXCEPTION
--         WHEN OTHERS
--     --    THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_SA
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
          WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 7 -- it is for SV of SA rating header
                and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                  AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN LN_POLICY_YEAR  ELSE NVL(RTD.POLICY_YEAR,1) END
                ;
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_SA :=0;
          END;
--      END;

--      LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered;
        IF LN_SV_RATE_OF_SA<>0 and ln_product_type=1 THEN 
            LN_SURRENDER_VALUE := 10000 / LN_SV_RATE_OF_SA ;
        elsif ln_product_type<>1 then  
            LN_SURRENDER_VALUE := LN_SV_RATE_OF_SA * ln_sum_covered /10000;
        
        END IF;
        
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;

      -- get mx , dx, nx at current age
      BEGIN
         -- get admin charges indexation rate form sub classes setup Rate Type 22 is Policy Fee / Admin Indexation
         SELECT NVL (MX, 0), NVL (DX, 0), NVL (NX, 0)
           INTO ln_mx_at_current_age,
                ln_dx_at_current_age,
                ln_nx_at_current_age
           FROM IL_SV_TABLE_T
          WHERE     ORG_ID = P_ORG_ID
                AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RATE_CODE = ln_age1 + ln_policy_year ;

          LN_SV_RATE_OF_BONUS :=
         CASE
            WHEN (ln_dx_at_current_age = 0 OR ln_policy_year < 4 ) and ln_product_type = 1 
            THEN
               0
            ELSE 
                 (  ln_mx_at_current_age
                  - ln_mx_at_maturity_age_bonus
                  + ln_dx_at_maturity_age_bonus)
               / ln_dx_at_current_age
         END;
         
--           IF ln_product_type = 1 THEN 
--
--                    LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
--                    CASE
--                        WHEN ln_dx_at_current_age = 0  OR ln_policy_year < 3
--                        THEN
--                           0
--                        ELSE
--                             (  ln_mx_at_current_age
--                              - ln_mx_at_maturity_age_bonus
--                              + ln_dx_at_maturity_age_bonus)
--                           / ln_dx_at_current_age
--                     END;
--            end if; 
      EXCEPTION
         WHEN OTHERS
         THEN
            ln_mx_at_current_age := 0;
            ln_dx_at_current_age := 0;
            ln_nx_at_current_age := 0;
         BEGIN
          SELECT RTD.RATE
           INTO LN_SV_RATE_OF_BONUS
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
            WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 8 -- it is for SV of Bonus rating header
               and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
--                AND RTD.TERM = ln_policy_term
--                AND RTD.age = ln_effective_age + 1
            --    and RTD.POLICY_YEAR= (ln_POLICY_TERM - ln_policy_year )
                
                AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN (ln_POLICY_TERM - ln_policy_year )  ELSE NVL(RTD.POLICY_YEAR,1) END
                               ;
                                                        
                EXCEPTION WHEN OTHERS THEN
                LN_SV_RATE_OF_BONUS :=0;
          END;
          
           LN_SV_RATE_OF_BONUS := 
                 CASE
                            WHEN ln_policy_year < 4 and ln_product_type = 1 
                            THEN
                               0
                            ELSE
                                 LN_SV_RATE_OF_BONUS
                         END;
             
      END;
      ln_DISCOUNTING_RATE :=0;
         BEGIN
          SELECT RTD.RATE
           INTO ln_DISCOUNTING_RATE
           FROM IL_RATING_TABLE_HD_T RTH
                INNER JOIN IL_RATING_TABLE_BANDS_T RTB
                   ON (    RTH.ORG_ID = RTB.ORG_ID
                       AND RTH.MAIN_PRODUCT_CODE = RTB.MAIN_PRODUCT_CODE
                       AND RTH.SUB_PRODUCT_CODE = RTB.SUB_PRODUCT_CODE
                       AND RTH.HD_RATE_ID = RTB.HD_RATE_ID)
                INNER JOIN IL_RATING_TABLE_DETAIL_T RTD
                   ON (    RTB.ORG_ID = RTD.ORG_ID
                       AND RTB.MAIN_PRODUCT_CODE = RTD.MAIN_PRODUCT_CODE
                       AND RTB.SUB_PRODUCT_CODE = RTD.SUB_PRODUCT_CODE
                       AND RTB.HD_RATE_ID = RTD.HD_RATE_ID
                       and RTB.BENEFIT_CODE = RTD.BENEFIT_CODE 
                       AND RTB.HD_RATE_BAND_ID = RTD.HD_RATE_BAND_ID)
            WHERE     RTH.ORG_ID = P_ORG_ID
                AND RTH.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND RTH.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND RTH.HD_RATE_ID = 9 -- it is for discounting rate in rating header
               and RTB.BENEFIT_CODE = LC_BENEFIT_CODE 
               -- AND ln_POLICY_TERM >= RTB.VAL_FROM
                --AND ln_POLICY_TERM <= RTB.VAL_TO
                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END  >= RTB.VAL_FROM

                AND case RTH.SLAB_BASIS WHEN 'EA' THEN ln_effective_age + 1  
                WHEN 'MA' THEN ln_POLICY_TERM + ln_effective_age + 1   
                WHEN 'YM' THEN ln_POLICY_TERM  -    ln_policy_year
                WHEN 'MT' THEN ln_POLICY_TERM  
                ELSE ln_POLICY_TERM  END <= RTB.VAL_TO
                                AND ld_illustration_date BETWEEN TRUNC (RTB.EFFECTIVE_FROM)
                                             AND TRUNC (
                                                    NVL (RTB.EFFECTIVE_TO,
                                                         SYSDATE))
--                AND RTD.TERM = ln_policy_term
--                AND RTD.age = ln_effective_age + 1
            --    and RTD.POLICY_YEAR= (ln_POLICY_TERM - ln_policy_year )
                
                AND NVL(RTD.TERM,1) = CASE WHEN IS_TERM ='Y' THEN LN_POLICY_TERM ELSE NVL(RTD.TERM,1) END 
                AND NVL(RTD.AGE,1) = CASE WHEN IS_AGE ='Y' THEN LN_EFFECTIVE_AGE + 1 ELSE NVL(RTD.AGE,1) END 
                AND NVL(RTD.POLICY_YEAR,1) = CASE WHEN IS_YEAR ='Y' THEN (ln_POLICY_TERM - ln_policy_year )  ELSE NVL(RTD.POLICY_YEAR,1) END
                               ;
                                                        
                EXCEPTION WHEN OTHERS THEN
                ln_DISCOUNTING_RATE :=0;
          END;      

            IF ln_product_type =1 THEN 
                LN_SURRENDER_VALUE := LN_SURRENDER_VALUE * 
                CASE
                WHEN ln_policy_year < 3
                THEN
                   0
                ELSE
                     ln_DISCOUNTING_RATE
                END;
            end if;
            
      INSERT INTO TK_ILLUSTRATIONDTL_POS (ORG_ID,
                                          BRANCH_ID,
                                          MAIN_PRODUCT_CODE,
                                          SUB_PRODUCT_CODE,
                                          ISSUE_COUNT,
                                          DOCUMENT_NO,
                                          DOCUMENT_YEAR,
                                          APPLICATION_ID,
                                          ILLUSTRATION_ID,
                                          EFFECTIVE_AGE,
                                          POLICY_YEAR,
                                          BASIC_CONTRIBUTION,
                                          INVESTED_CONTRIBUTION,
                                          ALLOCATION_PERCENTAGE,
                                          ALLOCATION_CONTRIBUTION,
                                          MORTALITY_RATE1,
                                          MORTALITY_RATE2,
                                          SUM_ASSURED,
                                          SUM_ASSURED_AT_RISK,
                                          MORTALITY_CHARGES,
                                          PTF_SURPLUS,
                                          WAQALA_CHARGES,
                                          CONTINGENCY_MARGIN,
                                          REINS_AMOUNT,
                                          ADMIN_CHARGES,
                                          PAIDUP_VALUE,
                                          SV_RATE_OF_SA,
                                          SURRENDER_VALUE,
                                          SV_RATE_OF_BONUS,
                                          SURRENDER_CHARGE_RATE)
           VALUES (P_ORG_ID,
                   P_BRANCH_ID,
                   P_MAIN_PRODUCT_CODE,
                   P_SUB_PRODUCT_CODE,
                   P_ISSUE_COUNT,
                   P_DOCUMENT_NO,
                   P_DOCUMENT_YEAR,
                   P_APPLICATION_ID,
                   P_ILLUSTRATION_ID,
                   ln_effective_age + ln_policy_year,
                   ln_policy_year,
                   ln_basic_contribution,
                   ln_invested_contribution,
                   ln_allocation_percentage,
                   ln_allocation_contribution,
                   ln_mortality_rate1,
                   ln_mortality_rate2,
                   ln_SUM_COVERED,
                   ln_sum_at_risk,
                   ln_mortality_charges,
                   ln_ptf_surplus,
                   ln_waqala_charges,
                   ln_contingency_margin,
                   ln_reins_amount,
                   ln_admin_charges,
                   LN_PAIDUP_VALUE,
                   LN_SV_RATE_OF_SA,
                   LN_SURRENDER_VALUE,
                   LN_SV_RATE_OF_BONUS,
                   ln_surrender_charge_rate);

      -- increment the counter
      ln_policy_year := ln_policy_year + 1;
   END LOOP;

   COMMIT;
   UPDATE_ILLUST_CASHVALUE_POS_P (P_ORG_ID,
                                  P_BRANCH_ID,
                                  P_MAIN_PRODUCT_CODE,
                                  P_SUB_PRODUCT_CODE,
                                  P_ISSUE_COUNT,
                                  P_DOCUMENT_NO,
                                  P_DOCUMENT_YEAR,
                                  P_APPLICATION_ID,
                                  P_ILLUSTRATION_ID);
END;
/

prompt
prompt Creating procedure GET_MORTALITY_CHART_P
prompt ========================================
prompt
CREATE OR REPLACE PROCEDURE get_mortality_chart_p (
   p_org_id       NUMBER,
   p_type         VARCHAR2,
   prc        OUT SYS_REFCURSOR)
AS
   LC_VALUES   VARCHAR2 (4000);
   LC_QUERY    VARCHAR2 (4000);
BEGIN
   IF LOWER (p_type) = LOWER ('c')
   THEN
      SELECT DISTINCT
             LISTAGG (myLetter, ',') WITHIN GROUP (ORDER BY myLetter)
        INTO LC_VALUES
        FROM (SELECT DISTINCT m_year myLetter
                FROM TK_MORTALITY_RATE_T
               WHERE org_id = p_org_id);

      LC_QUERY :=
            'select * from
(select m_age,m_year,m_rate from TK_MORTALITY_RATE_T where org_id='
         || p_org_id
         || ' )
pivot
(
max(m_rate)
for m_year in('
         || LC_VALUES
         || ')
)
order by m_age  ';
   END IF;

   IF LOWER (p_type) = LOWER ('r')
   THEN
      SELECT DISTINCT
             LISTAGG (myLetter, ',') WITHIN GROUP (ORDER BY myLetter)
        INTO LC_VALUES
        FROM (SELECT DISTINCT m_year myLetter
                FROM TK_MORTALITY_RATE_REINSURER_T
               WHERE org_id = p_org_id);

      LC_QUERY :=
            'select * from
(select m_age,m_year,m_rate from TK_MORTALITY_RATE_REINSURER_T where org_id='
         || p_org_id
         || ' )
pivot
(
max(m_rate)
for m_year in('
         || LC_VALUES
         || ')
)
order by m_age  ';
   END IF;

   OPEN prc FOR LC_QUERY;
END;
/

prompt
prompt Creating procedure GOAL_SEEK_CALCULATOR_SUB_P
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE goal_seek_calculator_sub_p (
   P_ORG_ID                NUMBER,
   P_BRANCH_ID             NUMBER,
   P_MAIN_PRODUCT_CODE     NUMBER,
   P_SUB_PRODUCT_CODE      NUMBER,
   P_ISSUE_COUNT           NUMBER,
   P_DOCUMENT_NO           VARCHAR2,
   P_DOCUMENT_YEAR         NUMBER,
   P_APPLICATION_ID        NUMBER,
   p_target_cash_value     NUMBER,
   p_starting_value        NUMBER DEFAULT 0,
   p_iterator_increment    NUMBER,
   p_target_year           NUMBER,
   iteration               NUMBER,
   p_submit_tag            VARCHAR2)
AS
   ln_return_cash_value        NUMBER;
   ln_target_cash_value        NUMBER;
   ln_basic_contribution       NUMBER;
   ln_iterator                 NUMBER;
   ln_starting_value           NUMBER;
   ln_min_basic_contribution   NUMBER;
   ln_min_cash_value           NUMBER;
   ln_iterator_increment       NUMBER;
BEGIN
   ln_starting_value := p_starting_value;
   ln_iterator := 1;
   ln_iterator_increment := ROUND (p_iterator_increment / 2);

   ln_basic_contribution := ln_starting_value;

   ln_return_cash_value := ln_basic_contribution;
   ln_target_cash_value := p_target_cash_value;


   DELETE FROM GOAL_SEEK_LOG_T logs
         WHERE     logs.ORG_ID = P_ORG_ID
               AND logs.BRANCH_ID = P_BRANCH_ID
               AND logs.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND logs.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND logs.DOCUMENT_NO = P_DOCUMENT_NO
               AND logs.DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND logs.APPLICATION_ID = P_APPLICATION_ID
               AND logs.ISSUE_COUNT = P_ISSUE_COUNT;

   COMMIT;

   WHILE ln_return_cash_value <= ln_target_cash_value
   LOOP
      ln_basic_contribution := ln_basic_contribution + ln_iterator;

      IF p_submit_tag = 'N'
      THEN
         UPDATE TK_ILLUSTRATIONHD_POS pos
            SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
                TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution,
                SUM_COVERED =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * COVER_MULTIPLE,
                SUM_COVERED_MODAL =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * COVER_MULTIPLE,
                BASIC_CONTRIBUTION =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT;
      ELSE
         UPDATE TK_ILLUSTRATIONHD_POS pos
            SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
                TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution--               ,SUM_COVERED  = case pos.payment_mode when 'A' then 1 when 'H' then 2 when 'Q' then 4 when 'M' then 12 end * ln_basic_contribution * COVER_MULTIPLE
                                                                --               ,SUM_COVERED_MODAL  = case pos.payment_mode when 'A' then 1 when 'H' then 2 when 'Q' then 4 when 'M' then 12 end * ln_basic_contribution * COVER_MULTIPLE
                ,
                COVER_MULTIPLE =
                   ROUND (
                        SUM_COVERED
                      / (  CASE pos.payment_mode
                              WHEN 'A' THEN 1
                              WHEN 'H' THEN 2
                              WHEN 'Q' THEN 4
                              WHEN 'M' THEN 12
                           END
                         * ln_basic_contribution),
                      2),
                BASIC_CONTRIBUTION =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT;
      END IF;

      COMMIT;

      GENERATE_IL_DETAIL_MONTHLY_P (P_ORG_ID,
                                    P_BRANCH_ID,
                                    P_MAIN_PRODUCT_CODE,
                                    P_SUB_PRODUCT_CODE,
                                    P_ISSUE_COUNT,
                                    P_DOCUMENT_NO,
                                    P_DOCUMENT_YEAR,
                                    P_APPLICATION_ID,
                                    1);

        SELECT cash_value2
          INTO ln_return_cash_value
          FROM TK_ILLUSTRATIONDTL_MONTHLY_T pos
         WHERE     pos.ORG_ID = P_ORG_ID
               AND pos.BRANCH_ID = P_BRANCH_ID
               AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND pos.DOCUMENT_NO = P_DOCUMENT_NO
               AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND pos.APPLICATION_ID = P_APPLICATION_ID
               AND pos.ISSUE_COUNT = P_ISSUE_COUNT
               AND ILLUSTRATION_ID = 1
      ORDER BY policy_year DESC, policy_month DESC fetch next 1 rows only;

        INSERT INTO GOAL_SEEK_LOG_T VALUES(P_ORG_ID,P_BRANCH_ID,P_MAIN_PRODUCT_CODE,P_SUB_PRODUCT_CODE,P_DOCUMENT_NO,P_DOCUMENT_YEAR,P_APPLICATION_ID,P_ISSUE_COUNT,
        ln_iterator,ln_basic_contribution,ln_return_cash_value,ln_target_cash_value, p_target_year,'5plr.admin',sysdate);

        --dbms_output.put_line('iteration is '|| ln_iterator ||' and basic contribtion is '|| ln_basic_contribution || ' and cash value is '|| ln_return_cash_value);
        ln_iterator := ln_iterator + ln_iterator_increment;
    end loop;
    COMMIT;

    select min(basic_contribution), min(cash_value) into ln_min_basic_contribution ,ln_min_cash_value
    from
    (select * from GOAL_SEEK_LOG_T logs where logs.ORG_ID= P_ORG_ID and  logs.BRANCH_ID = P_BRANCH_ID and logs.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE and logs.SUB_PRODUCT_CODE= P_SUB_PRODUCT_CODE
            and  logs.DOCUMENT_NO= P_DOCUMENT_NO and  logs.DOCUMENT_YEAR=P_DOCUMENT_YEAR and logs.APPLICATION_ID=P_APPLICATION_ID and logs.ISSUE_COUNT=P_ISSUE_COUNT   order by iterator desc fetch next 2 rows only);

    if ln_min_cash_value <  ln_target_cash_value then
        goal_seek_calculator_sub_p(P_ORG_ID ,P_BRANCH_ID ,P_MAIN_PRODUCT_CODE ,P_SUB_PRODUCT_CODE ,P_ISSUE_COUNT ,P_DOCUMENT_NO ,P_DOCUMENT_YEAR ,P_APPLICATION_ID
        ,ln_target_cash_value ,ln_min_basic_contribution,ln_iterator_increment,p_target_year,iteration+1,p_submit_tag);
    end if;

exception when others then
        dbms_output.put_line('error is '|| SQLERRM );
    NULL;
end;
/

prompt
prompt Creating procedure GOAL_SEEK_CALCULATOR_P
prompt =========================================
prompt
CREATE OR REPLACE PROCEDURE goal_seek_calculator_p (
   P_ORG_ID               NUMBER,
   P_BRANCH_ID            NUMBER,
   P_MAIN_PRODUCT_CODE    NUMBER,
   P_SUB_PRODUCT_CODE     NUMBER,
   P_ISSUE_COUNT          NUMBER,
   P_DOCUMENT_NO          VARCHAR2,
   P_DOCUMENT_YEAR        NUMBER,
   P_APPLICATION_ID       NUMBER,
   p_target_cash_value    NUMBER,
   p_starting_value       NUMBER DEFAULT 0)
AS
   ln_return_cash_value            NUMBER;
   ln_target_cash_value            NUMBER;
   ln_basic_contribution           NUMBER;
   ln_basic_contribution_current   NUMBER;
   ln_iterator                     NUMBER;
   ln_starting_value               NUMBER;
   lv_payment_mode                 VARCHAR2 (1);
   ln_target_year                  NUMBER;
   ln_min_basic_contribution       NUMBER;
   ln_min_cash_value               NUMBER;
   ln_iterator_increment           NUMBER;

   lc_converted_proposal_no        VARCHAR2 (50);
   lc_submit_tag                   VARCHAR2 (1) := 'N';
   ln_age1                         NUMBER;
   ln_min_covermultiple            NUMBER;
   ln_calc_covermultiple           NUMBER;
   ln_no_of_persons                NUMBER;
BEGIN
   ln_starting_value := p_starting_value;

   -- get age
   BEGIN
      SELECT age1, BASIC_CONTRIBUTION_MODAL, NVL (NO_OF_PERSONS, 1)
        INTO ln_age1, ln_basic_contribution_current, ln_no_of_persons
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND APPLICATION_ID = P_APPLICATION_ID
             AND ISSUE_COUNT = P_ISSUE_COUNT;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_age1 := 0;
   END;

   -- get minimumn cover multipe for age
   BEGIN
      SELECT MIN (COVER_CODE)
        INTO ln_min_covermultiple
        FROM TK_SUB_PRODUCT_COVER_T
       WHERE     ORG_ID = P_ORG_ID
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND ln_age1 >= AGE_FROM
             AND ln_age1 <= AGE_TO;
   EXCEPTION
      WHEN OTHERS
      THEN
         ln_age1 := 0;
   END;

   -- check proposal is submitted

   BEGIN
      SELECT DISTINCT NVL (CONVERTED_DOC_NO, 'N')
        INTO lc_converted_proposal_no
        FROM TK_ILLUSTRATIONHD_POS
       WHERE     ORG_ID = P_ORG_ID
             AND BRANCH_ID = P_BRANCH_ID
             AND MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND DOCUMENT_NO = P_DOCUMENT_NO
             AND DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND APPLICATION_ID = P_APPLICATION_ID
             AND CONVERTED_DOC_NO IS NOT NULL;
   EXCEPTION
      WHEN OTHERS
      THEN
         lc_converted_proposal_no := 'N';
         lc_submit_tag := 'N';
   END;

   BEGIN
      -- check if any version of proposal is converted to policy then get policy number
      SELECT DISTINCT SUBMIT_TAG
        INTO lc_submit_tag
        FROM IL_DOC_HEADER_T DH
       WHERE     DH.ORG_ID = P_ORG_ID
             AND dh.record_type = 'O'
             AND NVL (SUBMIT_TAG, 'n') = 'Y'
             AND document_type = 'Q'
             AND MASTER_REF_NO =
                    (SELECT DISTINCT master_ref_no
                       FROM il_doc_header_t
                      WHERE     document_type = 'Q'
                            AND DOC_REFERENCE_NO = lc_converted_proposal_no);
   EXCEPTION
      WHEN OTHERS
      THEN
         lc_submit_tag := 'N';
   END;


   IF ln_starting_value = 0
   THEN
      BEGIN
         SELECT MIN_CONTRIBUTION,
                pos.payment_mode,
                TO_CHAR (SYSDATE, 'YYYY') + POLICY_TERM
           INTO ln_basic_contribution, lv_payment_mode, ln_target_year
           FROM GLAS_SUB_PROD_P_MODE_LOAD_T prod, TK_ILLUSTRATIONHD_POS pos
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT
                AND pos.ORG_ID = prod.org_id
                AND pos.SUB_PRODUCT_CODE = prod.SUB_PRODUCT_CODE
                AND pos.PAYMENT_MODE = prod.PAYMENT_MODE;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            ln_basic_contribution := 1000;
      END;

      ln_iterator := 0;
      ln_iterator_increment := 5000;
   ELSE
      ln_basic_contribution := ln_starting_value;
      ln_iterator := 1;
      ln_iterator_increment := 1;
   END IF;


   ln_return_cash_value := ln_basic_contribution;
   ln_target_cash_value := p_target_cash_value;

   BEGIN
      SELECT RATE
        INTO ln_target_cash_value
        FROM ILAS_SUB_PROD_RATES_SETUP_T POS
       WHERE     pos.ORG_ID = P_ORG_ID
             AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND RATE_TYPE_ID = 29
             AND POLICY_TERM = ln_target_year;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         ln_target_cash_value := p_target_cash_value;
   END;

   -- increase target value by number of persons
   ln_target_cash_value := ln_target_cash_value * ln_no_of_persons;

   DELETE FROM GOAL_SEEK_LOG_T logs
         WHERE     logs.ORG_ID = P_ORG_ID
               AND logs.BRANCH_ID = P_BRANCH_ID
               AND logs.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
               AND logs.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
               AND logs.DOCUMENT_NO = P_DOCUMENT_NO
               AND logs.DOCUMENT_YEAR = P_DOCUMENT_YEAR
               AND logs.APPLICATION_ID = P_APPLICATION_ID
               AND logs.ISSUE_COUNT = P_ISSUE_COUNT;

   COMMIT;

   WHILE ln_return_cash_value <= ln_target_cash_value
   LOOP
      ln_basic_contribution := ln_basic_contribution + ln_iterator;

      IF lc_submit_tag = 'N'
      THEN
         UPDATE TK_ILLUSTRATIONHD_POS pos
            SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
                TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution,
                SUM_COVERED =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * COVER_MULTIPLE,
                SUM_COVERED_MODAL =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * COVER_MULTIPLE,
                BASIC_CONTRIBUTION =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT;
      ELSE
         UPDATE TK_ILLUSTRATIONHD_POS pos
            SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
                TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution,
                COVER_MULTIPLE =
                   ROUND (
                        SUM_COVERED
                      / (  CASE pos.payment_mode
                              WHEN 'A' THEN 1
                              WHEN 'H' THEN 2
                              WHEN 'Q' THEN 4
                              WHEN 'M' THEN 12
                           END
                         * ln_basic_contribution),
                      2),
                BASIC_CONTRIBUTION =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT;
      END IF;

      COMMIT;

      GENERATE_IL_DETAIL_MONTHLY_P (P_ORG_ID,
                                    P_BRANCH_ID,
                                    P_MAIN_PRODUCT_CODE,
                                    P_SUB_PRODUCT_CODE,
                                    P_ISSUE_COUNT,
                                    P_DOCUMENT_NO,
                                    P_DOCUMENT_YEAR,
                                    P_APPLICATION_ID,
                                    1);

      BEGIN
           SELECT cash_value2
             INTO ln_return_cash_value
             FROM TK_ILLUSTRATIONDTL_MONTHLY_T pos
            WHERE     pos.ORG_ID = P_ORG_ID
                  AND pos.BRANCH_ID = P_BRANCH_ID
                  AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                  AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                  AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                  AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                  AND pos.APPLICATION_ID = P_APPLICATION_ID
                  AND pos.ISSUE_COUNT = P_ISSUE_COUNT
                  AND ILLUSTRATION_ID = 1
         ORDER BY policy_year DESC, policy_month DESC fetch next 1 rows only
;
      EXCEPTION
         WHEN OTHERS
         THEN
            DBMS_OUTPUT.put_line ('error point 1 ' || SQLERRM);
      END;

      INSERT INTO GOAL_SEEK_LOG_T
           VALUES (P_ORG_ID,
                   P_BRANCH_ID,
                   P_MAIN_PRODUCT_CODE,
                   P_SUB_PRODUCT_CODE,
                   P_DOCUMENT_NO,
                   P_DOCUMENT_YEAR,
                   P_APPLICATION_ID,
                   P_ISSUE_COUNT,
                   ln_iterator,
                   ln_basic_contribution,
                   ln_return_cash_value,
                   ln_target_cash_value,
                   ln_target_year,'5plr.admin',sysdate);

      --dbms_output.put_line('iteration is '|| ln_iterator ||' and basic contribtion is '|| ln_basic_contribution || ' and cash value is '|| ln_return_cash_value);
      ln_iterator := ln_iterator + ln_iterator_increment;
   END LOOP;

   COMMIT;

   BEGIN
      SELECT MIN (basic_contribution), MIN (cash_value)
        INTO ln_min_basic_contribution, ln_min_cash_value
        FROM (  SELECT *
                  FROM GOAL_SEEK_LOG_T logs
                 WHERE     logs.ORG_ID = P_ORG_ID
                       AND logs.BRANCH_ID = P_BRANCH_ID
                       AND logs.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                       AND logs.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                       AND logs.DOCUMENT_NO = P_DOCUMENT_NO
                       AND logs.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                       AND logs.APPLICATION_ID = P_APPLICATION_ID
                       AND logs.ISSUE_COUNT = P_ISSUE_COUNT
              ORDER BY iterator DESC                  fetch next 2 rows only
                                    );

      IF ln_min_cash_value < ln_target_cash_value
      THEN
         goal_seek_calculator_sub_p (P_ORG_ID,
                                     P_BRANCH_ID,
                                     P_MAIN_PRODUCT_CODE,
                                     P_SUB_PRODUCT_CODE,
                                     P_ISSUE_COUNT,
                                     P_DOCUMENT_NO,
                                     P_DOCUMENT_YEAR,
                                     P_APPLICATION_ID,
                                     ln_target_cash_value,
                                     ln_min_basic_contribution,
                                     ln_iterator_increment,
                                     ln_target_year,
                                     2,
                                     lc_submit_tag);
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.put_line ('error point 2 ' || SQLERRM);
   END;

   -- get final contribution and apply ceil function to it.
   SELECT CEIL (BASIC_CONTRIBUTION_MODAL / 100) * 100
     INTO ln_basic_contribution
     FROM TK_ILLUSTRATIONHD_POS pos
    WHERE     pos.ORG_ID = P_ORG_ID
          AND pos.BRANCH_ID = P_BRANCH_ID
          AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
          AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
          AND pos.DOCUMENT_NO = P_DOCUMENT_NO
          AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
          AND pos.APPLICATION_ID = P_APPLICATION_ID
          AND pos.ISSUE_COUNT = P_ISSUE_COUNT;

   IF ln_basic_contribution <= ln_basic_contribution_current
   THEN
      ln_basic_contribution := ln_basic_contribution_current;
   END IF;


   -- round contribution upto nearest 100
   IF lc_submit_tag = 'N'
   THEN
      UPDATE TK_ILLUSTRATIONHD_POS pos
         SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
             TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution,
             SUM_COVERED =
                  CASE pos.payment_mode
                     WHEN 'A' THEN 1
                     WHEN 'H' THEN 2
                     WHEN 'Q' THEN 4
                     WHEN 'M' THEN 12
                  END
                * ln_basic_contribution
                * COVER_MULTIPLE,
             SUM_COVERED_MODAL =
                  CASE pos.payment_mode
                     WHEN 'A' THEN 1
                     WHEN 'H' THEN 2
                     WHEN 'Q' THEN 4
                     WHEN 'M' THEN 12
                  END
                * ln_basic_contribution
                * COVER_MULTIPLE,
             BASIC_CONTRIBUTION =
                  CASE pos.payment_mode
                     WHEN 'A' THEN 1
                     WHEN 'H' THEN 2
                     WHEN 'Q' THEN 4
                     WHEN 'M' THEN 12
                  END
                * ln_basic_contribution
       WHERE     pos.ORG_ID = P_ORG_ID
             AND pos.BRANCH_ID = P_BRANCH_ID
             AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND pos.DOCUMENT_NO = P_DOCUMENT_NO
             AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND pos.APPLICATION_ID = P_APPLICATION_ID
             AND pos.ISSUE_COUNT = P_ISSUE_COUNT;
   ELSE
      UPDATE TK_ILLUSTRATIONHD_POS pos
         SET BASIC_CONTRIBUTION_MODAL = ln_basic_contribution,
             TOTAL_CONTRIBUTION_MODAL = ln_basic_contribution,
             COVER_MULTIPLE =
                ROUND (
                     SUM_COVERED
                   / (  CASE pos.payment_mode
                           WHEN 'A' THEN 1
                           WHEN 'H' THEN 2
                           WHEN 'Q' THEN 4
                           WHEN 'M' THEN 12
                        END
                      * ln_basic_contribution),
                   12),
             BASIC_CONTRIBUTION =
                  CASE pos.payment_mode
                     WHEN 'A' THEN 1
                     WHEN 'H' THEN 2
                     WHEN 'Q' THEN 4
                     WHEN 'M' THEN 12
                  END
                * ln_basic_contribution
       WHERE     pos.ORG_ID = P_ORG_ID
             AND pos.BRANCH_ID = P_BRANCH_ID
             AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND pos.DOCUMENT_NO = P_DOCUMENT_NO
             AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND pos.APPLICATION_ID = P_APPLICATION_ID
             AND pos.ISSUE_COUNT = P_ISSUE_COUNT;

      SELECT COVER_MULTIPLE
        INTO ln_calc_covermultiple
        FROM TK_ILLUSTRATIONHD_POS pos
       WHERE     pos.ORG_ID = P_ORG_ID
             AND pos.BRANCH_ID = P_BRANCH_ID
             AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
             AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
             AND pos.DOCUMENT_NO = P_DOCUMENT_NO
             AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
             AND pos.APPLICATION_ID = P_APPLICATION_ID
             AND pos.ISSUE_COUNT = P_ISSUE_COUNT;

      IF ln_min_covermultiple > ln_calc_covermultiple
      THEN
         UPDATE TK_ILLUSTRATIONHD_POS pos
            SET COVER_MULTIPLE = ln_min_covermultiple,
                SUM_COVERED =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * ln_min_covermultiple,
                SUM_COVERED_MODAL =
                     CASE pos.payment_mode
                        WHEN 'A' THEN 1
                        WHEN 'H' THEN 2
                        WHEN 'Q' THEN 4
                        WHEN 'M' THEN 12
                     END
                   * ln_basic_contribution
                   * ln_min_covermultiple
          WHERE     pos.ORG_ID = P_ORG_ID
                AND pos.BRANCH_ID = P_BRANCH_ID
                AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                AND pos.APPLICATION_ID = P_APPLICATION_ID
                AND pos.ISSUE_COUNT = P_ISSUE_COUNT;



          GENERATE_IL_DETAIL_MONTHLY_P (P_ORG_ID,
                                        P_BRANCH_ID,
                                        P_MAIN_PRODUCT_CODE,
                                        P_SUB_PRODUCT_CODE,
                                        P_ISSUE_COUNT,
                                        P_DOCUMENT_NO,
                                        P_DOCUMENT_YEAR,
                                        P_APPLICATION_ID,
                                        1);

          BEGIN
               SELECT cash_value2
                 INTO ln_return_cash_value
                 FROM TK_ILLUSTRATIONDTL_MONTHLY_T pos
                WHERE     pos.ORG_ID = P_ORG_ID
                      AND pos.BRANCH_ID = P_BRANCH_ID
                      AND pos.MAIN_PRODUCT_CODE = P_MAIN_PRODUCT_CODE
                      AND pos.SUB_PRODUCT_CODE = P_SUB_PRODUCT_CODE
                      AND pos.DOCUMENT_NO = P_DOCUMENT_NO
                      AND pos.DOCUMENT_YEAR = P_DOCUMENT_YEAR
                      AND pos.APPLICATION_ID = P_APPLICATION_ID
                      AND pos.ISSUE_COUNT = P_ISSUE_COUNT
                      AND ILLUSTRATION_ID = 1
             ORDER BY policy_year DESC, policy_month DESC fetch next 1 rows only
;
          EXCEPTION
             WHEN OTHERS
             THEN
                DBMS_OUTPUT.put_line ('error point 1 ' || SQLERRM);
          END;

          -- if again cash value becomes smaller than target then seek again
           if ln_return_cash_value <= ln_target_cash_value then
                goal_seek_calculator_p (
                   P_ORG_ID             , P_BRANCH_ID          ,
                   P_MAIN_PRODUCT_CODE  , P_SUB_PRODUCT_CODE   ,
                   P_ISSUE_COUNT        , P_DOCUMENT_NO        ,
                   P_DOCUMENT_YEAR      , P_APPLICATION_ID     ,
                   p_target_cash_value  , ln_basic_contribution);

           end if;

      END IF;
   END IF;


   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      DBMS_OUTPUT.put_line ('error is at end ' || SQLERRM);
      NULL;
END;
/

prompt
prompt Creating procedure MIGRATE_DATA_PROC
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE migrate_data_proc AS
  -- Declare a cursor to fetch data from the source table
  CURSOR IDHT_source_data IS
    SELECT * FROM IL_DOC_HEADER_T where rownum<21;
idht_record IL_DOC_HEADER_T%ROWTYPE;
  -- Variables to hold data fetched from the cursor
V_ORG_ID IL_DOC_HEADER_T.ORG_ID%TYPE;
V_BRANCH_ID IL_DOC_HEADER_T.BRANCH_ID%TYPE;
V_MAIN_PRODUCT_CODE IL_DOC_HEADER_T.MAIN_PRODUCT_CODE%TYPE;
V_SUB_PRODUCT_CODE IL_DOC_HEADER_T.SUB_PRODUCT_CODE%TYPE;
V_TAKAFUL_TYPE IL_DOC_HEADER_T.TAKAFUL_TYPE%TYPE;
V_DOCUMENT_TYPE IL_DOC_HEADER_T.DOCUMENT_TYPE%TYPE;
V_DOCUMENT_NO IL_DOC_HEADER_T.DOCUMENT_NO%TYPE;
V_RECORD_TYPE IL_DOC_HEADER_T.RECORD_TYPE%TYPE;
V_DOCUMENT_YEAR IL_DOC_HEADER_T.DOCUMENT_YEAR%TYPE;  
V_ISSUE_COUNT IL_DOC_HEADER_T.ISSUE_COUNT%TYPE; 
V_ENDORSEMENT_NO IL_DOC_HEADER_T.ENDORSEMENT_NO%TYPE; 
V_APPLICATION_ID IL_DOC_HEADER_T.APPLICATION_ID%TYPE; 
V_DOC_REFERENCE_NO IL_DOC_HEADER_T.DOC_REFERENCE_NO%TYPE;        
 

BEGIN
  --variables initialization
  V_ORG_ID:=5;
V_BRANCH_ID:=14;
V_MAIN_PRODUCT_CODE:=4;
V_SUB_PRODUCT_CODE:=6;
V_TAKAFUL_TYPE:='D';
V_DOCUMENT_TYPE:='P';
V_DOCUMENT_NO:='111111';
V_RECORD_TYPE:='O';
V_DOCUMENT_YEAR:='2024';  
V_ISSUE_COUNT:=1; 
V_ENDORSEMENT_NO:=0; 
V_APPLICATION_ID:=13; 
 
  -- Open the cursor
  OPEN IDHT_source_data;

  -- Fetch each row from the cursor
  LOOP
    FETCH IDHT_source_data
      INTO idht_record;
  
    -- Exit the loop when no more rows are fetched
    EXIT WHEN IDHT_source_data%NOTFOUND;
 V_DOC_REFERENCE_NO:=''||V_DOCUMENT_YEAR||V_DOCUMENT_NO;
    -- Insert the fetched data into the target table
insert into IL_DOC_HEADER_T 
(ORG_ID, BRANCH_ID, MAIN_PRODUCT_CODE, SUB_PRODUCT_CODE, TAKAFUL_TYPE, DOCUMENT_TYPE, DOCUMENT_NO
, RECORD_TYPE, DOCUMENT_YEAR, ISSUE_COUNT, ENDORSEMENT_NO, APPLICATION_ID, DOC_REFERENCE_NO
, CLIENT_CODE, FOLIO_CODE, SUM_INSURED, GROSS_PREMIUM, NET_PREMIUM, DOC_CHARGES, REMARKS, PREMIUM_BASIS, PRODUCER_CODE, CURRENCY_CODE, PAYMENT_MODE, PAYMENT_TERM, POLICY_TERM, MEMBER_ID_LABEL, WAKALA_FEE, LOADING_OVRD_RATE, LOADING_RATE, POLICY_FEE, OVERRIDING_RATE, EXCHANGE_RATE, NEXT_DUE_DATE, QUOTATION_DATE, SUB_DOCUMENT_NO, STANDARD_TREATY, POST_DATE, POSTING_TAG, POST_USER, NAME1, NAME2, DOB1, DOB2, AGE1, AGE2, GENDER1, GENDER2, SUM_COVERED, SUM_COVERED_INDEX, CONTRIBUTION_INDEX, BASIC_CONTRIBUTION, GROSS_CONTRIBUTION, NET_CONTRIBUTION, COVER_MULTIPLE, CONT_MARGIN, LAST_AGE_INDEX, EXPECTED_CLAIM, INVESTMENT_INCOME, SECOND_LIFE, BID_OFFER, ISSUE_DATE, COMM_DATE, EXPIRY_DATE, CONVERTED_DOC_NO, PROPOSAL_DATE, OCCUPATIONAL_CLASS, CREATION_DATE, CREATED_BY, LAST_UPDATE_DATE, LAST_UPDATED_BY, POST_BY, CONVERT_TAG, REVISED_TAG, BASE_DOC_NO, CNIC_ISSUE_DATE, CNIC_EXPIRY_DATE, CNIC_NO, WAQALA_FEE, QUOTATION_REF_NO, ALTERATION_TYPE, MASTER_REF_NO, COST_CENTER_CODE, ALTERATION_DATE, ADVANCE_AMOUNT, PAYER_SAME_TAG, SUBMIT_TAG, UNDWT_STATUS, SUM_COVERED_MODAL, BASIC_CONTRIBUTION_MODAL, UNDWT_DECISION, CONVERTED_POLICY_NO, CONVERT_PROPOSAL, RISK_PROFILE, CONTRIBUTION_TYPE, RISK_PROFILE_COMMENTS, ILLUSTRATION_REF_NO, CUSTOMER_PROFILE_COMMENTS, CHANNEL_ID, MODEL_ID, AGENT_ID, PARTNER_ID, TOPUP_AMOUNT, REJECTED_TAG, TOTAL_CONTRIBUTION_MODAL, CANCEL_TAG, CANCEL_BY, CANCEL_DATE, CANCELLATION_REMARKS, CANCELLATION_TYPE, DOC_DISPATCH_DATE, DOC_RECEIVE_DATE, CHARGEABLE_FROM, CHARGEABLE_AMOUNT, MIDDLE_NAME1, LAST_NAME1, ALTERATION_ISSUE_DATE, POLICY_POSTED, NON_FINANCIAL_ACTIVITY, NON_FINANCIAL_SUB_ACTIVITY, UNDWT_DECISION_REASON, UNDWT_NOTES, UNDERWRITING_IL_CREATE, PROPOSAL_APPROVED_BY, UNDWT_OTHER_EXCULUSIONS, UNDWT_DECISION_SYSTEM, PROPOSAL_APPROVED_DATE, PARTNER_BRANCH_ID, BASE_DOC_NO_KEY, ILLUSTRATION_REF_NO_KEY, CONVERTED_DOC_NO_KEY, AGENT_BRANCH_ID, LOCK_TAG, DOC_REFERENCE_KEY, INITIAL_TOPUP, RECEIVE_ACK_DATE, CANCELLATION_DATE, MEDICAL_AMOUNT, DAY_END_PROCESS_TAG, DAY_END_PROCESS_DATE, SUBMIT_DATE, SUBMIT_BY, COVER_MULTIPLE_OLD, AGE1_OLD, GENDER1_OLD, PAYMENT_MODE_OLD, PAYMENT_TERM_OLD, POLICY_TERM_OLD, SUM_COVERED_OLD, DOB1_OLD, SUM_COVERED_MODAL_OLD, BASIC_CONTRIBUTION_MODAL_OLD, BASIC_CONTRIBUTION_OLD, FUND_SWITCH_CHARGES, FUND_CHANGE_TAG, CONSIGNMENT_NO, NAME1_OLD, MIDDLE_NAME1_OLD, LAST_NAME1_OLD, CNIC_NO_OLD, RETURN_TAG, LOCK_BY, LOCK_DATE, IL_REVISE_TAG, AUTO_RENEWAL_TOPUP_TAG, AUTO_RENEWAL_TOPUP_TAG_OLD, POLICY_HOLD_FLAG, SUM_COVERED_INDEX_OLD, CONTRIBUTION_INDEX_OLD, FIRST_SUBMISSION_DATE, FACE_VALUE_INCREASE_TAG, APPROVED_DATE, BANK_REPRESENTATIVE_NAME, BANK_REPRESENTATIVE_CODE, OCCUPATIONAL_INDUSTRY, OCCUPATION, REJECT_COMMENTS, TOTAL_SCORE, CBC_REQUIRED_TAG, PR_DATE, PR_AMOUNT, ANF_OPTION, NIV_ADJUSTMENT_AMOUNT, NIV_ADJUSTMENT_AMOUNT_ADHOC, ASSIGNEE_TAG, BANK_REF_NO, VALID_TAG, PROPOSAL_ENTRY_DATE, INDEX_CHANGE_TYPE)
values (V_ORG_ID, V_BRANCH_ID, V_MAIN_PRODUCT_CODE, V_SUB_PRODUCT_CODE, V_TAKAFUL_TYPE, V_DOCUMENT_TYPE, V_DOCUMENT_NO
, V_RECORD_TYPE, V_DOCUMENT_YEAR, V_ISSUE_COUNT, V_ENDORSEMENT_NO, V_APPLICATION_ID, V_DOC_REFERENCE_NO
, '195', null, null, null, null, null, null, null, null, 'PKR', 'A', 10, 10, null, null, null, null, null, null, null, null, null, null, null, to_date('12-08-2024', 'dd-mm-yyyy'), 'Y', 'GBA.ADMIN', 'the zeal', null, to_date('15-07-1992', 'dd-mm-yyyy'), null, 32, null, 'M', null, 127000.00, null, null, 15589.25, null, null, 0, 0.000000, 55, 0.70, 0.00, null, 0.05, to_date('20-08-2024', 'dd-mm-yyyy'), to_date('20-08-2024', 'dd-mm-yyyy'), null, null, to_date('20-08-2024 11:16:56', 'dd-mm-yyyy hh24:mi:ss'), null, to_date('20-08-2024 11:42:59', 'dd-mm-yyyy hh24:mi:ss'), 'GBA.ADMIN', to_date('20-08-2024 17:05:58', 'dd-mm-yyyy hh24:mi:ss'), 'GBA.ADMIN', null, null, null,V_DOC_REFERENCE_NO, to_date('20-08-2024', 'dd-mm-yyyy'), to_date('30-08-2024', 'dd-mm-yyyy'), '3424234434499', null, null, null, V_DOC_REFERENCE_NO, 'CPS', null, 184410, 'Y', null, 8, 127000, 15589.25, 1, null, null, null, null, null, 'ILL2024/0032151-2', null, 3, 1, 18, 1, 0, null, 15589.25, null, null, null, null, null, null, null, null, null, null, 'fitco tower', null, null, null, null, 'BMI NORMAL', null, null, null, null, 2, null, 2, '5,14,4,6,D,Q,O,2024,1,0,13,000016', '5,14,4,6,2024,2,13,032151', null, '14', null, '5,14,4,6,D,P,O,2024,1,0,13,000009', null, null, null, null, null, null, to_date('06-08-2024', 'dd-mm-yyyy'), 'GBA.ADMIN', null, null, null, null, null, null, null, null, null, null, null, 500, null, null, null, null, null, null, null, 'GBA.ADMIN', to_date('20-08-2024 11:39:42', 'dd-mm-yyyy hh24:mi:ss'), null, 'N', null, null, null, null, to_date('06-08-2024', 'dd-mm-yyyy'), null, null, null, '321222', '8', '92', null, 0, null, null, null, null, null, null, null, '5443444', null, null, null);
  
V_DOCUMENT_NO:=V_DOCUMENT_NO+1; ---temp   
 -- Optionally, you can commit after every insert for large datasets
  --  COMMIT;
  
  END LOOP;

  -- Close the cursor
  CLOSE idht_source_data;

  -- Final commit to ensure all data is saved
  COMMIT;

  DBMS_OUTPUT.PUT_LINE('Data migration completed successfully.');
EXCEPTION
  WHEN OTHERS THEN
    -- Handle any exceptions and rollback changes
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END migrate_data_proc;
/

prompt
prompt Creating procedure POLICYGAINLOSSDAILYPROCESS
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE PolicyGainLossDailyProcess (
   P_ORG_ID       VARCHAR2,
   P_POLICY_NO    VARCHAR2,
   P_FUND_CODE    NUMBER)
AS
   LD_PROCESS_DATE            DATE;
   LD_CURRENT_DATE            DATE := TRUNC (SYSDATE);
   LN_LASTDAY_CLOSING_UNITS   NUMBER;
   LN_CURRENT_BID_PRICE       NUMBER;
   LN_LAST_DAY_BID_PRICE      NUMBER;
   LV_PRICE_TYPE              VARCHAR2 (1);
   LN_OFFER_SPREAD_RATE       NUMBER;
BEGIN
   SELECT f.price_type
     INTO LV_PRICE_TYPE
     FROM FUND_SETUP_T F
    WHERE F.ORG_ID = P_ORG_ID AND F.FUND_CODE = P_FUND_CODE;


   BEGIN
        SELECT PROCESS_DATE + 1
          INTO LD_PROCESS_DATE
          FROM IL_POLICYWISE_DAILY_GAINLOSS_T
         WHERE     ORG_ID = P_ORG_ID
               AND MASTER_REF_NO = P_POLICY_NO
               AND FUND_CODE = P_FUND_CODE
      ORDER BY PROCESS_DATE DESC       FETCH NEXT 1 ROWS ONLY
;


      SELECT P.OFFER_SPREAD_RATE
        INTO LN_OFFER_SPREAD_RATE
        FROM    IL_DOC_HEADER_T DH
             INNER JOIN
                GLAS_SUB_PRODUCT_SETUP_T p
             ON (    dh.ORG_ID = p.ORG_ID
                 AND dh.MAIN_PRODUCT_CODE = p.MAIN_PRODUCT_CODE
                 AND dh.SUB_PRODUCT_CODE = p.SUB_PRODUCT_CODE)
       WHERE     DH.record_type = 'O'
             AND DH.DOCUMENT_TYPE = 'P'
             AND DH.ISSUE_COUNT = 1
             AND DH.ENDORSEMENT_NO = 0
             AND DH.ORG_ID = P_ORG_ID
             AND DH.MASTER_REF_NO = P_POLICY_NO;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         SELECT MIN (TRANSACTION_DATE), MIN (P.OFFER_SPREAD_RATE)
           INTO LD_PROCESS_DATE, LN_OFFER_SPREAD_RATE
           FROM IL_DOC_HEADER_T DH
                INNER JOIN GLAS_SUB_PRODUCT_SETUP_T p
                   ON (    dh.ORG_ID = p.ORG_ID
                       AND dh.MAIN_PRODUCT_CODE = p.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = p.SUB_PRODUCT_CODE)
                INNER JOIN IL_DOC_ALLOC_DTL_BREAKUP_T A
                   ON (    dh.ORG_ID = A.ORG_ID
                       AND dh.BRANCH_ID = A.BRANCH_ID
                       AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                       AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                       AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                       AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                       AND dh.RECORD_TYPE = A.RECORD_TYPE
                       AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                       AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                       AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                       AND dh.APPLICATION_ID = A.APPLICATION_ID)
          WHERE     DH.record_type = 'O'
                AND DH.DOCUMENT_TYPE = 'P'
                AND DH.ISSUE_COUNT = 1
                AND DH.ENDORSEMENT_NO = 0
                AND DH.ORG_ID = P_ORG_ID
                AND DH.MASTER_REF_NO = P_POLICY_NO
                AND A.FUND_CODE = P_FUND_CODE
                AND A.unit_process_date IS NOT NULL
                AND DH.REVISED_TAG IS NULL
                AND TRANSACTION_DATE < TRUNC (SYSDATE);
   END;

   WHILE (LD_PROCESS_DATE < LD_CURRENT_DATE)
   LOOP
      -- check curent bid price
      BEGIN
         SELECT BID_PRICE
           INTO LN_CURRENT_BID_PRICE
           FROM IL_FUND_PRICE_HISTORY_T
          WHERE     ORG_ID = P_ORG_ID
                AND FUND_CODE = P_FUND_CODE
                AND TRANSACTION_DATE = LD_PROCESS_DATE;

         BEGIN
            SELECT NVL (SUM (NVL (NO_OF_UNITS, 0)), 0)
              INTO LN_LASTDAY_CLOSING_UNITS
              FROM    IL_DOC_HEADER_T DH
                   INNER JOIN
                      IL_DOC_ALLOC_DTL_BREAKUP_T A
                   ON (    dh.ORG_ID = A.ORG_ID
                       AND dh.BRANCH_ID = A.BRANCH_ID
                       AND dh.MAIN_PRODUCT_CODE = A.MAIN_PRODUCT_CODE
                       AND dh.SUB_PRODUCT_CODE = A.SUB_PRODUCT_CODE
                       AND dh.TAKAFUL_TYPE = A.TAKAFUL_TYPE
                       AND dh.DOCUMENT_TYPE = A.DOCUMENT_TYPE
                       AND dh.DOCUMENT_NO = A.DOCUMENT_NO
                       AND dh.RECORD_TYPE = A.RECORD_TYPE
                       AND dh.DOCUMENT_YEAR = A.DOCUMENT_YEAR
                       AND dh.ISSUE_COUNT = A.ISSUE_COUNT
                       AND dh.ENDORSEMENT_NO = A.ENDORSEMENT_NO
                       AND dh.APPLICATION_ID = A.APPLICATION_ID)
             WHERE     DH.record_type = 'O'
                   AND DH.DOCUMENT_TYPE = 'P'
                   AND DH.ISSUE_COUNT = 1
                   AND DH.ENDORSEMENT_NO = 0
                   AND DH.ORG_ID = P_ORG_ID
                   AND DH.MASTER_REF_NO = P_POLICY_NO
                   AND A.FUND_CODE = P_FUND_CODE
                   AND A.unit_process_date IS NOT NULL
                   AND DH.REVISED_TAG IS NULL
                   AND TRANSACTION_DATE <= LD_PROCESS_DATE - 1;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LN_LASTDAY_CLOSING_UNITS := 0;
         END;

         BEGIN
            SELECT BID_PRICE
              INTO LN_LAST_DAY_BID_PRICE
              FROM IL_FUND_PRICE_HISTORY_T
             WHERE     ORG_ID = P_ORG_ID
                   AND FUND_CODE = P_FUND_CODE
                   AND TRANSACTION_DATE = LD_PROCESS_DATE - 1;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               LN_LAST_DAY_BID_PRICE := 0;
         END;

         LN_CURRENT_BID_PRICE :=
            CASE
               WHEN LV_PRICE_TYPE = 'O'
               THEN
                  NVL (LN_CURRENT_BID_PRICE, 0) * (1 - LN_OFFER_SPREAD_RATE)
               ELSE
                  NVL (LN_CURRENT_BID_PRICE, 0)
            END;

         LN_LAST_DAY_BID_PRICE :=
            CASE
               WHEN LV_PRICE_TYPE = 'O'
               THEN
                  NVL (LN_LAST_DAY_BID_PRICE, 0) * (1 - LN_OFFER_SPREAD_RATE)
               ELSE
                  NVL (LN_LAST_DAY_BID_PRICE, 0)
            END;

         INSERT INTO IL_POLICYWISE_DAILY_GAINLOSS_T (ORG_ID,
                                                     PROCESS_DATE,
                                                     MASTER_REF_NO,
                                                     FUND_CODE,
                                                     NO_OF_UNTS,
                                                     LAST_DAY_PRICE,
                                                     CURRENT_DAY_PRICE,
                                                     LAST_DAY_AMOUNT,
                                                     CURRENT_DAY_AMOUNT,
                                                     GAINLOSS_AMOUNT,
                                                     CREATION_DATE)
              VALUES (
                        P_ORG_ID,
                        LD_PROCESS_DATE,
                        P_POLICY_NO,
                        P_FUND_CODE,
                        LN_LASTDAY_CLOSING_UNITS,
                        LN_LAST_DAY_BID_PRICE,
                        LN_CURRENT_BID_PRICE,
                        LN_LASTDAY_CLOSING_UNITS * LN_LAST_DAY_BID_PRICE,
                        LN_LASTDAY_CLOSING_UNITS * LN_CURRENT_BID_PRICE,
                          LN_LASTDAY_CLOSING_UNITS * LN_CURRENT_BID_PRICE
                        - LN_LASTDAY_CLOSING_UNITS * LN_LAST_DAY_BID_PRICE,
                        SYSDATE);
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            LD_PROCESS_DATE := LD_CURRENT_DATE;
      --            LN_CURRENT_BID_PRICE := 0;
      END;



      LD_PROCESS_DATE := LD_PROCESS_DATE + 1;
   END LOOP;
   COMMIT;
EXCEPTION
   WHEN OTHERS
   THEN
      NULL;
END;
/

prompt
prompt Creating procedure RESET_USER_PASSWORD
prompt ======================================
prompt
CREATE OR REPLACE NONEDITIONABLE PROCEDURE reset_user_password(p_username IN VARCHAR2) IS
BEGIN
    -- Step 1: Reset LOCK_TAG to NULL
    UPDATE SM_USERS_T 
    SET LOCK_TAG = NULL
    WHERE USERNAME = p_username;
    
    -- Step 2: Reset LAST_LOCK_DATE to NULL
    UPDATE SM_USERS_T 
    SET LAST_LOCK_DATE = NULL
    WHERE USERNAME = p_username;
    
    -- Step 3: Reset LOGIN_ATTEMPTS to 0
    UPDATE SM_USERS_T 
    SET LOGIN_ATTEMPTS = 0
    WHERE USERNAME = p_username;
    
    -- Step 4: Set ACTIVE to 1
    UPDATE SM_USERS_T 
    SET ACTIVE = 1
    WHERE USERNAME = p_username;
    
    -- Step 5: Reset PASSWORD to a default password ---DEFAULT PASSORD IS admin1011
    UPDATE SM_USERS_T 
    SET PASSWORD = 'rRVDALMMlZSj7c7YQjObN99iT+DxKvcR6NuvvfifzIl7ym2m'
    WHERE USERNAME = p_username;
    
    -- Commit the changes
    COMMIT;
    
    -- Optionally,  add a message or logging for debugging purposes
    DBMS_OUTPUT.PUT_LINE('Password and user details for ' || p_username || ' have been reset.');
END reset_user_password;
/

prompt
prompt Creating procedure SP_PF_CURRENCY_SETUP_CRUD
prompt ============================================
prompt
CREATE OR REPLACE PROCEDURE SP_PF_CURRENCY_SETUP_CRUD (
   P_CRUD   IN     VARCHAR2,
   prc         OUT SYS_REFCURSOR)
AS
BEGIN
   IF LOWER (P_CRUD) = LOWER ('SELECT')
   THEN
      OPEN prc FOR
           SELECT *
             FROM CURRENCY_SETUP_T
         ORDER BY CURRENCY_NAME;
   END IF;

   IF LOWER (P_CRUD) = LOWER ('SELECT_ACTIVE')
   THEN
      OPEN prc FOR
           SELECT *
             FROM CURRENCY_SETUP_T
         ORDER BY CURRENCY_NAME;
   END IF;
END SP_PF_CURRENCY_SETUP_CRUD;
/

prompt
prompt Creating trigger RESTRICT_KNOCKOFF_ADJUSTED
prompt ===========================================
prompt
CREATE OR REPLACE TRIGGER RESTRICT_KNOCKOFF_ADJUSTED
   BEFORE UPDATE OF ADJUSTED_AMOUNT
   ON GL_ADVICE_SUB_LEDGER_T
   REFERENCING NEW AS New OLD AS Old
   FOR EACH ROW
DECLARE
BEGIN
   IF (NVL (:NEW.ADJUSTED_AMOUNT, 0) >
          NVL (:NEW.DEBIT_BASE_CURR, 0) + NVL (:NEW.CREDIT_BASE_CURR, 0))
   THEN
      RAISE_APPLICATION_ERROR (
         -20001,
         'Complete Knockoff already done on this advice');
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
      -- Consider logging the error and then re-raise
      RAISE;
END RESTRICT_KNOCKOFF_ADJUSTED;
/


prompt Done
spool off
set define on
